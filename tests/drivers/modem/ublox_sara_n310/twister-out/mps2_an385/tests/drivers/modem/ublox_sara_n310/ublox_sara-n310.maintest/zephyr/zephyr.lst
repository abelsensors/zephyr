
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <drivers/timer/system_timer.h>

/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
   0:	60 37 00 20 51 27 00 00 dd 26 00 00 7d 27 00 00     `7. Q'...&..}'..
	__ASSERT_NO_MSG(false);
  10:	7d 27 00 00 7d 27 00 00 7d 27 00 00 00 00 00 00     }'..}'..}'......
	...
  2c:	e5 24 00 00 7d 27 00 00 00 00 00 00 8d 24 00 00     .$..}'.......$..
  3c:	6d 21 00 00                                         m!..

00000040 <_irq_vector_table>:
  40:	29 27 00 00 29 27 00 00 29 27 00 00 29 27 00 00     )'..)'..)'..)'..
  50:	29 27 00 00 29 27 00 00 29 27 00 00 29 27 00 00     )'..)'..)'..)'..
  60:	29 27 00 00 29 27 00 00 29 27 00 00 29 27 00 00     )'..)'..)'..)'..
  70:	29 27 00 00 29 27 00 00 29 27 00 00 29 27 00 00     )'..)'..)'..)'..
  80:	29 27 00 00 29 27 00 00 29 27 00 00 29 27 00 00     )'..)'..)'..)'..
  90:	29 27 00 00 29 27 00 00 29 27 00 00 29 27 00 00     )'..)'..)'..)'..
  a0:	29 27 00 00 29 27 00 00 29 27 00 00 29 27 00 00     )'..)'..)'..)'..
  b0:	29 27 00 00 29 27 00 00 29 27 00 00 29 27 00 00     )'..)'..)'..)'..

Disassembly of section text:

000000c0 <__aeabi_uldivmod>:
      c0:	b953      	cbnz	r3, d8 <__aeabi_uldivmod+0x18>
      c2:	b94a      	cbnz	r2, d8 <__aeabi_uldivmod+0x18>
      c4:	2900      	cmp	r1, #0
      c6:	bf08      	it	eq
      c8:	2800      	cmpeq	r0, #0
      ca:	bf1c      	itt	ne
      cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
      d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
      d4:	f000 b97a 	b.w	3cc <__aeabi_idiv0>
      d8:	f1ad 0c08 	sub.w	ip, sp, #8
      dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
      e0:	f000 f806 	bl	f0 <__udivmoddi4>
      e4:	f8dd e004 	ldr.w	lr, [sp, #4]
      e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
      ec:	b004      	add	sp, #16
      ee:	4770      	bx	lr

000000f0 <__udivmoddi4>:
      f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      f4:	9d08      	ldr	r5, [sp, #32]
      f6:	460e      	mov	r6, r1
      f8:	4604      	mov	r4, r0
      fa:	468e      	mov	lr, r1
      fc:	2b00      	cmp	r3, #0
      fe:	d14d      	bne.n	19c <CONFIG_IDLE_STACK_SIZE+0x9c>
     100:	428a      	cmp	r2, r1
     102:	4694      	mov	ip, r2
     104:	d969      	bls.n	1da <CONFIG_IDLE_STACK_SIZE+0xda>
     106:	fab2 f282 	clz	r2, r2
     10a:	b152      	cbz	r2, 122 <CONFIG_IDLE_STACK_SIZE+0x22>
     10c:	fa01 f302 	lsl.w	r3, r1, r2
     110:	f1c2 0120 	rsb	r1, r2, #32
     114:	fa20 f101 	lsr.w	r1, r0, r1
     118:	fa0c fc02 	lsl.w	ip, ip, r2
     11c:	ea41 0e03 	orr.w	lr, r1, r3
     120:	4094      	lsls	r4, r2
     122:	ea4f 471c 	mov.w	r7, ip, lsr #16
     126:	fbbe f0f7 	udiv	r0, lr, r7
     12a:	fa1f f68c 	uxth.w	r6, ip
     12e:	fb07 ee10 	mls	lr, r7, r0, lr
     132:	fb00 f106 	mul.w	r1, r0, r6
     136:	0c23      	lsrs	r3, r4, #16
     138:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     13c:	4299      	cmp	r1, r3
     13e:	d90a      	bls.n	156 <CONFIG_IDLE_STACK_SIZE+0x56>
     140:	eb1c 0303 	adds.w	r3, ip, r3
     144:	f100 3eff 	add.w	lr, r0, #4294967295	; 0xffffffff
     148:	f080 811f 	bcs.w	38a <CONFIG_IDLE_STACK_SIZE+0x28a>
     14c:	4299      	cmp	r1, r3
     14e:	f240 811c 	bls.w	38a <CONFIG_IDLE_STACK_SIZE+0x28a>
     152:	3802      	subs	r0, #2
     154:	4463      	add	r3, ip
     156:	1a5b      	subs	r3, r3, r1
     158:	fbb3 fef7 	udiv	lr, r3, r7
     15c:	fb07 331e 	mls	r3, r7, lr, r3
     160:	fb0e f606 	mul.w	r6, lr, r6
     164:	b2a4      	uxth	r4, r4
     166:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     16a:	42a6      	cmp	r6, r4
     16c:	d90b      	bls.n	186 <CONFIG_IDLE_STACK_SIZE+0x86>
     16e:	eb1c 0404 	adds.w	r4, ip, r4
     172:	f10e 33ff 	add.w	r3, lr, #4294967295	; 0xffffffff
     176:	f080 810a 	bcs.w	38e <CONFIG_IDLE_STACK_SIZE+0x28e>
     17a:	42a6      	cmp	r6, r4
     17c:	f240 8107 	bls.w	38e <CONFIG_IDLE_STACK_SIZE+0x28e>
     180:	4464      	add	r4, ip
     182:	f1ae 0e02 	sub.w	lr, lr, #2
     186:	2100      	movs	r1, #0
     188:	1ba4      	subs	r4, r4, r6
     18a:	ea4e 4000 	orr.w	r0, lr, r0, lsl #16
     18e:	b11d      	cbz	r5, 198 <CONFIG_IDLE_STACK_SIZE+0x98>
     190:	2300      	movs	r3, #0
     192:	40d4      	lsrs	r4, r2
     194:	e9c5 4300 	strd	r4, r3, [r5]
     198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     19c:	428b      	cmp	r3, r1
     19e:	4607      	mov	r7, r0
     1a0:	d908      	bls.n	1b4 <CONFIG_IDLE_STACK_SIZE+0xb4>
     1a2:	2d00      	cmp	r5, #0
     1a4:	f000 80ee 	beq.w	384 <CONFIG_IDLE_STACK_SIZE+0x284>
     1a8:	2100      	movs	r1, #0
     1aa:	e9c5 0600 	strd	r0, r6, [r5]
     1ae:	4608      	mov	r0, r1
     1b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1b4:	fab3 f183 	clz	r1, r3
     1b8:	2900      	cmp	r1, #0
     1ba:	d149      	bne.n	250 <CONFIG_IDLE_STACK_SIZE+0x150>
     1bc:	42b3      	cmp	r3, r6
     1be:	d302      	bcc.n	1c6 <CONFIG_IDLE_STACK_SIZE+0xc6>
     1c0:	4282      	cmp	r2, r0
     1c2:	f200 80fe 	bhi.w	3c2 <CONFIG_IDLE_STACK_SIZE+0x2c2>
     1c6:	1abc      	subs	r4, r7, r2
     1c8:	eb66 0303 	sbc.w	r3, r6, r3
     1cc:	2001      	movs	r0, #1
     1ce:	469e      	mov	lr, r3
     1d0:	2d00      	cmp	r5, #0
     1d2:	d0e1      	beq.n	198 <CONFIG_IDLE_STACK_SIZE+0x98>
     1d4:	e9c5 4e00 	strd	r4, lr, [r5]
     1d8:	e7de      	b.n	198 <CONFIG_IDLE_STACK_SIZE+0x98>
     1da:	b902      	cbnz	r2, 1de <CONFIG_IDLE_STACK_SIZE+0xde>
     1dc:	deff      	udf	#255	; 0xff
     1de:	fab2 f282 	clz	r2, r2
     1e2:	2a00      	cmp	r2, #0
     1e4:	f040 808e 	bne.w	304 <CONFIG_IDLE_STACK_SIZE+0x204>
     1e8:	eba1 000c 	sub.w	r0, r1, ip
     1ec:	2101      	movs	r1, #1
     1ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
     1f2:	fa1f f68c 	uxth.w	r6, ip
     1f6:	fbb0 fef7 	udiv	lr, r0, r7
     1fa:	fb07 001e 	mls	r0, r7, lr, r0
     1fe:	0c23      	lsrs	r3, r4, #16
     200:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     204:	fb06 f00e 	mul.w	r0, r6, lr
     208:	4298      	cmp	r0, r3
     20a:	d908      	bls.n	21e <CONFIG_IDLE_STACK_SIZE+0x11e>
     20c:	eb1c 0303 	adds.w	r3, ip, r3
     210:	f10e 38ff 	add.w	r8, lr, #4294967295	; 0xffffffff
     214:	d202      	bcs.n	21c <CONFIG_IDLE_STACK_SIZE+0x11c>
     216:	4298      	cmp	r0, r3
     218:	f200 80cf 	bhi.w	3ba <CONFIG_IDLE_STACK_SIZE+0x2ba>
     21c:	46c6      	mov	lr, r8
     21e:	1a1b      	subs	r3, r3, r0
     220:	fbb3 f0f7 	udiv	r0, r3, r7
     224:	fb07 3310 	mls	r3, r7, r0, r3
     228:	fb00 f606 	mul.w	r6, r0, r6
     22c:	b2a4      	uxth	r4, r4
     22e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     232:	42a6      	cmp	r6, r4
     234:	d908      	bls.n	248 <CONFIG_IDLE_STACK_SIZE+0x148>
     236:	eb1c 0404 	adds.w	r4, ip, r4
     23a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     23e:	d202      	bcs.n	246 <CONFIG_IDLE_STACK_SIZE+0x146>
     240:	42a6      	cmp	r6, r4
     242:	f200 80b7 	bhi.w	3b4 <CONFIG_IDLE_STACK_SIZE+0x2b4>
     246:	4618      	mov	r0, r3
     248:	1ba4      	subs	r4, r4, r6
     24a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     24e:	e79e      	b.n	18e <CONFIG_IDLE_STACK_SIZE+0x8e>
     250:	f1c1 0c20 	rsb	ip, r1, #32
     254:	fa22 f00c 	lsr.w	r0, r2, ip
     258:	408b      	lsls	r3, r1
     25a:	4303      	orrs	r3, r0
     25c:	ea4f 4913 	mov.w	r9, r3, lsr #16
     260:	fa26 f00c 	lsr.w	r0, r6, ip
     264:	fbb0 f8f9 	udiv	r8, r0, r9
     268:	fb09 0018 	mls	r0, r9, r8, r0
     26c:	fa06 f401 	lsl.w	r4, r6, r1
     270:	fa27 f60c 	lsr.w	r6, r7, ip
     274:	4334      	orrs	r4, r6
     276:	fa1f fe83 	uxth.w	lr, r3
     27a:	0c26      	lsrs	r6, r4, #16
     27c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     280:	fb08 f00e 	mul.w	r0, r8, lr
     284:	42b0      	cmp	r0, r6
     286:	fa02 f201 	lsl.w	r2, r2, r1
     28a:	fa07 f701 	lsl.w	r7, r7, r1
     28e:	d90a      	bls.n	2a6 <CONFIG_IDLE_STACK_SIZE+0x1a6>
     290:	199e      	adds	r6, r3, r6
     292:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
     296:	f080 808b 	bcs.w	3b0 <CONFIG_IDLE_STACK_SIZE+0x2b0>
     29a:	42b0      	cmp	r0, r6
     29c:	f240 8088 	bls.w	3b0 <CONFIG_IDLE_STACK_SIZE+0x2b0>
     2a0:	f1a8 0802 	sub.w	r8, r8, #2
     2a4:	441e      	add	r6, r3
     2a6:	1a36      	subs	r6, r6, r0
     2a8:	fbb6 f0f9 	udiv	r0, r6, r9
     2ac:	fb09 6610 	mls	r6, r9, r0, r6
     2b0:	fb00 fe0e 	mul.w	lr, r0, lr
     2b4:	b2a4      	uxth	r4, r4
     2b6:	ea44 4606 	orr.w	r6, r4, r6, lsl #16
     2ba:	45b6      	cmp	lr, r6
     2bc:	d907      	bls.n	2ce <CONFIG_IDLE_STACK_SIZE+0x1ce>
     2be:	199e      	adds	r6, r3, r6
     2c0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
     2c4:	d270      	bcs.n	3a8 <CONFIG_IDLE_STACK_SIZE+0x2a8>
     2c6:	45b6      	cmp	lr, r6
     2c8:	d96e      	bls.n	3a8 <CONFIG_IDLE_STACK_SIZE+0x2a8>
     2ca:	3802      	subs	r0, #2
     2cc:	441e      	add	r6, r3
     2ce:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     2d2:	fba0 8402 	umull	r8, r4, r0, r2
     2d6:	eba6 060e 	sub.w	r6, r6, lr
     2da:	42a6      	cmp	r6, r4
     2dc:	46c6      	mov	lr, r8
     2de:	46a1      	mov	r9, r4
     2e0:	d359      	bcc.n	396 <CONFIG_IDLE_STACK_SIZE+0x296>
     2e2:	d056      	beq.n	392 <CONFIG_IDLE_STACK_SIZE+0x292>
     2e4:	2d00      	cmp	r5, #0
     2e6:	d06e      	beq.n	3c6 <CONFIG_IDLE_STACK_SIZE+0x2c6>
     2e8:	ebb7 020e 	subs.w	r2, r7, lr
     2ec:	eb66 0609 	sbc.w	r6, r6, r9
     2f0:	40ca      	lsrs	r2, r1
     2f2:	fa06 fc0c 	lsl.w	ip, r6, ip
     2f6:	ea4c 0202 	orr.w	r2, ip, r2
     2fa:	40ce      	lsrs	r6, r1
     2fc:	e9c5 2600 	strd	r2, r6, [r5]
     300:	2100      	movs	r1, #0
     302:	e749      	b.n	198 <CONFIG_IDLE_STACK_SIZE+0x98>
     304:	fa0c fc02 	lsl.w	ip, ip, r2
     308:	f1c2 0020 	rsb	r0, r2, #32
     30c:	fa21 fe00 	lsr.w	lr, r1, r0
     310:	ea4f 471c 	mov.w	r7, ip, lsr #16
     314:	fa01 f302 	lsl.w	r3, r1, r2
     318:	fbbe f1f7 	udiv	r1, lr, r7
     31c:	fb07 ee11 	mls	lr, r7, r1, lr
     320:	fa24 f000 	lsr.w	r0, r4, r0
     324:	4318      	orrs	r0, r3
     326:	fa1f f68c 	uxth.w	r6, ip
     32a:	0c03      	lsrs	r3, r0, #16
     32c:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     330:	fb01 fe06 	mul.w	lr, r1, r6
     334:	459e      	cmp	lr, r3
     336:	fa04 f402 	lsl.w	r4, r4, r2
     33a:	d908      	bls.n	34e <CONFIG_IDLE_STACK_SIZE+0x24e>
     33c:	eb1c 0303 	adds.w	r3, ip, r3
     340:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
     344:	d232      	bcs.n	3ac <CONFIG_IDLE_STACK_SIZE+0x2ac>
     346:	459e      	cmp	lr, r3
     348:	d930      	bls.n	3ac <CONFIG_IDLE_STACK_SIZE+0x2ac>
     34a:	3902      	subs	r1, #2
     34c:	4463      	add	r3, ip
     34e:	eba3 030e 	sub.w	r3, r3, lr
     352:	fbb3 fef7 	udiv	lr, r3, r7
     356:	fb07 331e 	mls	r3, r7, lr, r3
     35a:	b280      	uxth	r0, r0
     35c:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
     360:	fb0e f306 	mul.w	r3, lr, r6
     364:	4283      	cmp	r3, r0
     366:	d909      	bls.n	37c <CONFIG_IDLE_STACK_SIZE+0x27c>
     368:	eb1c 0000 	adds.w	r0, ip, r0
     36c:	f10e 38ff 	add.w	r8, lr, #4294967295	; 0xffffffff
     370:	d218      	bcs.n	3a4 <CONFIG_IDLE_STACK_SIZE+0x2a4>
     372:	4283      	cmp	r3, r0
     374:	d916      	bls.n	3a4 <CONFIG_IDLE_STACK_SIZE+0x2a4>
     376:	f1ae 0e02 	sub.w	lr, lr, #2
     37a:	4460      	add	r0, ip
     37c:	1ac0      	subs	r0, r0, r3
     37e:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
     382:	e738      	b.n	1f6 <CONFIG_IDLE_STACK_SIZE+0xf6>
     384:	4629      	mov	r1, r5
     386:	4628      	mov	r0, r5
     388:	e706      	b.n	198 <CONFIG_IDLE_STACK_SIZE+0x98>
     38a:	4670      	mov	r0, lr
     38c:	e6e3      	b.n	156 <CONFIG_IDLE_STACK_SIZE+0x56>
     38e:	469e      	mov	lr, r3
     390:	e6f9      	b.n	186 <CONFIG_IDLE_STACK_SIZE+0x86>
     392:	4547      	cmp	r7, r8
     394:	d2a6      	bcs.n	2e4 <CONFIG_IDLE_STACK_SIZE+0x1e4>
     396:	ebb8 0e02 	subs.w	lr, r8, r2
     39a:	eb64 0303 	sbc.w	r3, r4, r3
     39e:	3801      	subs	r0, #1
     3a0:	4699      	mov	r9, r3
     3a2:	e79f      	b.n	2e4 <CONFIG_IDLE_STACK_SIZE+0x1e4>
     3a4:	46c6      	mov	lr, r8
     3a6:	e7e9      	b.n	37c <CONFIG_IDLE_STACK_SIZE+0x27c>
     3a8:	4620      	mov	r0, r4
     3aa:	e790      	b.n	2ce <CONFIG_IDLE_STACK_SIZE+0x1ce>
     3ac:	4641      	mov	r1, r8
     3ae:	e7ce      	b.n	34e <CONFIG_IDLE_STACK_SIZE+0x24e>
     3b0:	46d0      	mov	r8, sl
     3b2:	e778      	b.n	2a6 <CONFIG_IDLE_STACK_SIZE+0x1a6>
     3b4:	4464      	add	r4, ip
     3b6:	3802      	subs	r0, #2
     3b8:	e746      	b.n	248 <CONFIG_IDLE_STACK_SIZE+0x148>
     3ba:	f1ae 0e02 	sub.w	lr, lr, #2
     3be:	4463      	add	r3, ip
     3c0:	e72d      	b.n	21e <CONFIG_IDLE_STACK_SIZE+0x11e>
     3c2:	4608      	mov	r0, r1
     3c4:	e704      	b.n	1d0 <CONFIG_IDLE_STACK_SIZE+0xd0>
     3c6:	4629      	mov	r1, r5
     3c8:	e6e6      	b.n	198 <CONFIG_IDLE_STACK_SIZE+0x98>
     3ca:	bf00      	nop

000003cc <__aeabi_idiv0>:
     3cc:	4770      	bx	lr
     3ce:	bf00      	nop

000003d0 <z_zassert.constprop.0>:
#define z_zassert(cond, default_msg, file, line, func, msg, ...)	\
	z_zassert_(cond, file, line)

#else /* CONFIG_ZTEST_ASSERT_VERBOSE != 0 */

static inline void z_zassert(bool cond,
     3d0:	b530      	push	{r4, r5, lr}
     3d2:	460d      	mov	r5, r1
     3d4:	461c      	mov	r4, r3
     3d6:	b085      	sub	sp, #20
			    const char *default_msg,
			    const char *file,
			    int line, const char *func,
			    const char *msg, ...)
{
	if (cond == false) {
     3d8:	b9a0      	cbnz	r0, 404 <CONFIG_MODEM_QUECTEL_BG9X_RX_STACK_SIZE>
		va_list vargs;

		va_start(vargs, msg);
     3da:	ab0a      	add	r3, sp, #40	; 0x28
		PRINT("\n    Assertion failed at %s:%d: %s: %s\n",
     3dc:	480a      	ldr	r0, [pc, #40]	; (408 <CONFIG_MODEM_QUECTEL_BG9X_RX_STACK_SIZE+0x4>)
		va_start(vargs, msg);
     3de:	9303      	str	r3, [sp, #12]
		PRINT("\n    Assertion failed at %s:%d: %s: %s\n",
     3e0:	f009 fadb 	bl	999a <ztest_relative_filename>
     3e4:	4622      	mov	r2, r4
     3e6:	4601      	mov	r1, r0
     3e8:	9b08      	ldr	r3, [sp, #32]
     3ea:	4808      	ldr	r0, [pc, #32]	; (40c <CONFIG_MODEM_QUECTEL_BG9X_RX_STACK_SIZE+0x8>)
     3ec:	9500      	str	r5, [sp, #0]
     3ee:	f007 fa35 	bl	785c <printk>
		      ztest_relative_filename(file), line, func, default_msg);
		vprintk(msg, vargs);
     3f2:	9903      	ldr	r1, [sp, #12]
     3f4:	9809      	ldr	r0, [sp, #36]	; 0x24
     3f6:	f000 fd69 	bl	ecc <vprintk>
		printk("\n");
     3fa:	4805      	ldr	r0, [pc, #20]	; (410 <CONFIG_MODEM_QUECTEL_BG9X_RX_STACK_SIZE+0xc>)
     3fc:	f007 fa2e 	bl	785c <printk>
		va_end(vargs);
		ztest_test_fail();
     400:	f004 f9b8 	bl	4774 <ztest_test_fail>
	else {
		PRINT("\n   Assertion succeeded at %s:%d (%s)\n",
		      ztest_relative_filename(file), line, func);
	}
#endif
}
     404:	b005      	add	sp, #20
     406:	bd30      	pop	{r4, r5, pc}
     408:	0000a9cc 	.word	0x0000a9cc
     40c:	0000aa0e 	.word	0x0000aa0e
     410:	0000bfd6 	.word	0x0000bfd6

00000414 <test_status>:
void test_modem_data(){
    //   zassert_not_null(mdata.net_iface,"");
    //` zassert_not_null(mdata.modem_context);
}

void test_status(){
     414:	b507      	push	{r0, r1, r2, lr}
	//ztest_returns_value(modem_cmd_send, 0);
	//ztest_return_data(modem_cmd_send,)
	int ret = n310_get_state();
     416:	f000 fc13 	bl	c40 <n310_get_state>
	zassert_true(ret>=0,"n310 state not working correctly");
     41a:	43c0      	mvns	r0, r0
     41c:	4b06      	ldr	r3, [pc, #24]	; (438 <test_status+0x24>)
     41e:	4a07      	ldr	r2, [pc, #28]	; (43c <test_status+0x28>)
     420:	9301      	str	r3, [sp, #4]
     422:	4b07      	ldr	r3, [pc, #28]	; (440 <test_status+0x2c>)
     424:	4907      	ldr	r1, [pc, #28]	; (444 <test_status+0x30>)
     426:	9300      	str	r3, [sp, #0]
     428:	0fc0      	lsrs	r0, r0, #31
     42a:	2374      	movs	r3, #116	; 0x74
     42c:	f7ff ffd0 	bl	3d0 <z_zassert.constprop.0>
}
     430:	b003      	add	sp, #12
     432:	f85d fb04 	ldr.w	pc, [sp], #4
     436:	bf00      	nop
     438:	0000aa48 	.word	0x0000aa48
     43c:	0000a9cc 	.word	0x0000a9cc
     440:	0000ac86 	.word	0x0000ac86
     444:	0000aa36 	.word	0x0000aa36

00000448 <test_info_set>:
void test_info_set(){
     448:	b537      	push	{r0, r1, r2, r4, r5, lr}
       zassert_not_null(n310_get_manufacturer(),"N310 Manufacturer not set");
     44a:	f000 fbe9 	bl	c20 <n310_get_manufacturer>
     44e:	4c28      	ldr	r4, [pc, #160]	; (4f0 <CONFIG_NET_TX_STACK_SIZE+0x40>)
     450:	4d28      	ldr	r5, [pc, #160]	; (4f4 <CONFIG_NET_TX_STACK_SIZE+0x44>)
     452:	4b29      	ldr	r3, [pc, #164]	; (4f8 <CONFIG_NET_TX_STACK_SIZE+0x48>)
     454:	3800      	subs	r0, #0
     456:	4622      	mov	r2, r4
     458:	bf18      	it	ne
     45a:	2001      	movne	r0, #1
     45c:	4927      	ldr	r1, [pc, #156]	; (4fc <CONFIG_NET_TX_STACK_SIZE+0x4c>)
     45e:	9301      	str	r3, [sp, #4]
     460:	9500      	str	r5, [sp, #0]
     462:	2363      	movs	r3, #99	; 0x63
     464:	f7ff ffb4 	bl	3d0 <z_zassert.constprop.0>
       zassert_not_null(n310_get_iccid(),"N310 iccid not set");
     468:	f000 fbd6 	bl	c18 <n310_get_iccid>
     46c:	4b24      	ldr	r3, [pc, #144]	; (500 <CONFIG_NET_TX_STACK_SIZE+0x50>)
     46e:	3800      	subs	r0, #0
     470:	4622      	mov	r2, r4
     472:	bf18      	it	ne
     474:	2001      	movne	r0, #1
     476:	e9cd 5300 	strd	r5, r3, [sp]
     47a:	4922      	ldr	r1, [pc, #136]	; (504 <CONFIG_NET_TX_STACK_SIZE+0x54>)
     47c:	2364      	movs	r3, #100	; 0x64
     47e:	f7ff ffa7 	bl	3d0 <z_zassert.constprop.0>
       zassert_not_null(n310_get_model(),"N310 model not set");
     482:	f000 fbc5 	bl	c10 <n310_get_model>
     486:	4b20      	ldr	r3, [pc, #128]	; (508 <CONFIG_NET_TX_STACK_SIZE+0x58>)
     488:	3800      	subs	r0, #0
     48a:	4622      	mov	r2, r4
     48c:	bf18      	it	ne
     48e:	2001      	movne	r0, #1
     490:	e9cd 5300 	strd	r5, r3, [sp]
     494:	491d      	ldr	r1, [pc, #116]	; (50c <CONFIG_NET_TX_STACK_SIZE+0x5c>)
     496:	2365      	movs	r3, #101	; 0x65
     498:	f7ff ff9a 	bl	3d0 <z_zassert.constprop.0>
       zassert_not_null(n310_get_revision(),"N310 revision not set");
     49c:	f000 fbc4 	bl	c28 <n310_get_revision>
     4a0:	4b1b      	ldr	r3, [pc, #108]	; (510 <CONFIG_NET_TX_STACK_SIZE+0x60>)
     4a2:	3800      	subs	r0, #0
     4a4:	4622      	mov	r2, r4
     4a6:	bf18      	it	ne
     4a8:	2001      	movne	r0, #1
     4aa:	e9cd 5300 	strd	r5, r3, [sp]
     4ae:	4919      	ldr	r1, [pc, #100]	; (514 <CONFIG_NET_TX_STACK_SIZE+0x64>)
     4b0:	2366      	movs	r3, #102	; 0x66
     4b2:	f7ff ff8d 	bl	3d0 <z_zassert.constprop.0>
       zassert_not_null(n310_get_imei(),"N310 imei not set");
     4b6:	f000 fbbb 	bl	c30 <n310_get_imei>
     4ba:	4b17      	ldr	r3, [pc, #92]	; (518 <CONFIG_NET_TX_STACK_SIZE+0x68>)
     4bc:	3800      	subs	r0, #0
     4be:	4622      	mov	r2, r4
     4c0:	bf18      	it	ne
     4c2:	2001      	movne	r0, #1
     4c4:	e9cd 5300 	strd	r5, r3, [sp]
     4c8:	4914      	ldr	r1, [pc, #80]	; (51c <CONFIG_NET_TX_STACK_SIZE+0x6c>)
     4ca:	2367      	movs	r3, #103	; 0x67
     4cc:	f7ff ff80 	bl	3d0 <z_zassert.constprop.0>
       zassert_not_null(n310_get_ip(),"N310 IP not set");
     4d0:	f000 fbb2 	bl	c38 <n310_get_ip>
     4d4:	4b12      	ldr	r3, [pc, #72]	; (520 <CONFIG_NET_TX_STACK_SIZE+0x70>)
     4d6:	3800      	subs	r0, #0
     4d8:	e9cd 5300 	strd	r5, r3, [sp]
     4dc:	4622      	mov	r2, r4
     4de:	f04f 0368 	mov.w	r3, #104	; 0x68
     4e2:	bf18      	it	ne
     4e4:	2001      	movne	r0, #1
     4e6:	490f      	ldr	r1, [pc, #60]	; (524 <CONFIG_NET_TX_STACK_SIZE+0x74>)
     4e8:	f7ff ff72 	bl	3d0 <z_zassert.constprop.0>
}
     4ec:	b003      	add	sp, #12
     4ee:	bd30      	pop	{r4, r5, pc}
     4f0:	0000a9cc 	.word	0x0000a9cc
     4f4:	0000ac92 	.word	0x0000ac92
     4f8:	0000aa8b 	.word	0x0000aa8b
     4fc:	0000aa69 	.word	0x0000aa69
     500:	0000aac0 	.word	0x0000aac0
     504:	0000aaa5 	.word	0x0000aaa5
     508:	0000aaee 	.word	0x0000aaee
     50c:	0000aad3 	.word	0x0000aad3
     510:	0000ab1f 	.word	0x0000ab1f
     514:	0000ab01 	.word	0x0000ab01
     518:	0000ab4f 	.word	0x0000ab4f
     51c:	0000ab35 	.word	0x0000ab35
     520:	0000ab79 	.word	0x0000ab79
     524:	0000ab61 	.word	0x0000ab61

00000528 <test_testing>:
void test_testing(void){
     528:	b573      	push	{r0, r1, r4, r5, r6, lr}
        zassert_true(1, NULL);
     52a:	4c1a      	ldr	r4, [pc, #104]	; (594 <test_testing+0x6c>)
     52c:	4e1a      	ldr	r6, [pc, #104]	; (598 <test_testing+0x70>)
     52e:	4d1b      	ldr	r5, [pc, #108]	; (59c <test_testing+0x74>)
     530:	4622      	mov	r2, r4
     532:	234d      	movs	r3, #77	; 0x4d
     534:	2001      	movs	r0, #1
     536:	491a      	ldr	r1, [pc, #104]	; (5a0 <test_testing+0x78>)
     538:	9601      	str	r6, [sp, #4]
     53a:	9500      	str	r5, [sp, #0]
     53c:	f7ff ff48 	bl	3d0 <z_zassert.constprop.0>
        zassert_false(0, NULL);
     540:	4622      	mov	r2, r4
     542:	234e      	movs	r3, #78	; 0x4e
     544:	2001      	movs	r0, #1
     546:	e9cd 5600 	strd	r5, r6, [sp]
     54a:	4916      	ldr	r1, [pc, #88]	; (5a4 <test_testing+0x7c>)
     54c:	f7ff ff40 	bl	3d0 <z_zassert.constprop.0>
        zassert_is_null(NULL, NULL);
     550:	4622      	mov	r2, r4
     552:	234f      	movs	r3, #79	; 0x4f
     554:	2001      	movs	r0, #1
     556:	e9cd 5600 	strd	r5, r6, [sp]
     55a:	4913      	ldr	r1, [pc, #76]	; (5a8 <test_testing+0x80>)
     55c:	f7ff ff38 	bl	3d0 <z_zassert.constprop.0>
        zassert_not_null("foo", NULL);
     560:	4622      	mov	r2, r4
     562:	2350      	movs	r3, #80	; 0x50
     564:	2001      	movs	r0, #1
     566:	e9cd 5600 	strd	r5, r6, [sp]
     56a:	4910      	ldr	r1, [pc, #64]	; (5ac <test_testing+0x84>)
     56c:	f7ff ff30 	bl	3d0 <z_zassert.constprop.0>
        zassert_equal(1, 1, NULL);
     570:	4622      	mov	r2, r4
     572:	2351      	movs	r3, #81	; 0x51
     574:	2001      	movs	r0, #1
     576:	e9cd 5600 	strd	r5, r6, [sp]
     57a:	490d      	ldr	r1, [pc, #52]	; (5b0 <test_testing+0x88>)
     57c:	f7ff ff28 	bl	3d0 <z_zassert.constprop.0>
        zassert_equal_ptr(NULL, NULL, NULL);
     580:	2352      	movs	r3, #82	; 0x52
     582:	4622      	mov	r2, r4
     584:	2001      	movs	r0, #1
     586:	e9cd 5600 	strd	r5, r6, [sp]
     58a:	490a      	ldr	r1, [pc, #40]	; (5b4 <test_testing+0x8c>)
     58c:	f7ff ff20 	bl	3d0 <z_zassert.constprop.0>
}
     590:	b002      	add	sp, #8
     592:	bd70      	pop	{r4, r5, r6, pc}
     594:	0000a9cc 	.word	0x0000a9cc
     598:	0000bfd7 	.word	0x0000bfd7
     59c:	0000acb3 	.word	0x0000acb3
     5a0:	0000ab89 	.word	0x0000ab89
     5a4:	0000ab94 	.word	0x0000ab94
     5a8:	0000ab9e 	.word	0x0000ab9e
     5ac:	0000abaf 	.word	0x0000abaf
     5b0:	0000abbd 	.word	0x0000abbd
     5b4:	0000abce 	.word	0x0000abce

000005b8 <test_device_struct>:
void test_device_struct(){
     5b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     5ba:	4810      	ldr	r0, [pc, #64]	; (5fc <CONFIG_NET_RX_STACK_SIZE+0x20>)
     5bc:	f004 fad8 	bl	4b70 <z_impl_device_get_binding>
        dev_ubloxn3 = device_get_binding(N310_DEVICE_LABEL);
     5c0:	4e0f      	ldr	r6, [pc, #60]	; (600 <CONFIG_NET_RX_STACK_SIZE+0x24>)
        zassert_not_null(dev_ubloxn3, "N310 device not found");
     5c2:	4c10      	ldr	r4, [pc, #64]	; (604 <CONFIG_NET_RX_STACK_SIZE+0x28>)
     5c4:	4d10      	ldr	r5, [pc, #64]	; (608 <CONFIG_NET_RX_STACK_SIZE+0x2c>)
     5c6:	4b11      	ldr	r3, [pc, #68]	; (60c <CONFIG_NET_RX_STACK_SIZE+0x30>)
        dev_ubloxn3 = device_get_binding(N310_DEVICE_LABEL);
     5c8:	6030      	str	r0, [r6, #0]
        zassert_not_null(dev_ubloxn3, "N310 device not found");
     5ca:	3800      	subs	r0, #0
     5cc:	4622      	mov	r2, r4
     5ce:	bf18      	it	ne
     5d0:	2001      	movne	r0, #1
     5d2:	9301      	str	r3, [sp, #4]
     5d4:	490e      	ldr	r1, [pc, #56]	; (610 <CONFIG_NET_RX_STACK_SIZE+0x34>)
     5d6:	2357      	movs	r3, #87	; 0x57
     5d8:	9500      	str	r5, [sp, #0]
     5da:	f7ff fef9 	bl	3d0 <z_zassert.constprop.0>
        struct modem_data *mdm = dev_ubloxn3->data;
     5de:	6833      	ldr	r3, [r6, #0]
        zassert_not_null(mdm, "N310 modem data not found");
     5e0:	4622      	mov	r2, r4
     5e2:	6918      	ldr	r0, [r3, #16]
     5e4:	4b0b      	ldr	r3, [pc, #44]	; (614 <CONFIG_NET_RX_STACK_SIZE+0x38>)
     5e6:	3800      	subs	r0, #0
     5e8:	e9cd 5300 	strd	r5, r3, [sp]
     5ec:	bf18      	it	ne
     5ee:	2001      	movne	r0, #1
     5f0:	2359      	movs	r3, #89	; 0x59
     5f2:	4909      	ldr	r1, [pc, #36]	; (618 <CONFIG_NET_RX_STACK_SIZE+0x3c>)
     5f4:	f7ff feec 	bl	3d0 <z_zassert.constprop.0>
}
     5f8:	b002      	add	sp, #8
     5fa:	bd70      	pop	{r4, r5, r6, pc}
     5fc:	0000abe5 	.word	0x0000abe5
     600:	20001188 	.word	0x20001188
     604:	0000a9cc 	.word	0x0000a9cc
     608:	0000aca0 	.word	0x0000aca0
     60c:	0000ac04 	.word	0x0000ac04
     610:	0000abee 	.word	0x0000abee
     614:	0000ac28 	.word	0x0000ac28
     618:	0000ac1a 	.word	0x0000ac1a

0000061c <test_main>:
    ztest_unit_test(test_status)
	//ztest_unit_test(test_get_binding),
	//ztest_unit_test(test_create_socket),
	//ztest_unit_test(test_modem_reset)
	);
	ztest_run_test_suite(n310_test);
     61c:	4901      	ldr	r1, [pc, #4]	; (624 <test_main+0x8>)
     61e:	4802      	ldr	r0, [pc, #8]	; (628 <test_main+0xc>)
     620:	f004 b8ba 	b.w	4798 <z_ztest_run_test_suite>
     624:	20000000 	.word	0x20000000
     628:	0000ac42 	.word	0x0000ac42

0000062c <offload_socket>:

static int offload_socket(int family, int type, int proto)
{
	int ret;

	if (proto != IPPROTO_UDP) {
     62c:	2a11      	cmp	r2, #17
{
     62e:	4613      	mov	r3, r2
     630:	b510      	push	{r4, lr}
	if (proto != IPPROTO_UDP) {
     632:	d113      	bne.n	65c <offload_socket+0x30>
		/* currently only UDP is supported */
		return -ENOTSUP;
	}

	/* defer modem's socket create call to bind() */
	ret = modem_socket_get(&mdata.socket_config, family, type, proto);
     634:	460a      	mov	r2, r1
     636:	4601      	mov	r1, r0
     638:	480a      	ldr	r0, [pc, #40]	; (664 <offload_socket+0x38>)
     63a:	f007 fc40 	bl	7ebe <modem_socket_get>
	if (ret < 0) {
     63e:	1e04      	subs	r4, r0, #0
     640:	da07      	bge.n	652 <offload_socket+0x26>
		errno = -ret;
     642:	f007 f8f4 	bl	782e <z_errno>
     646:	4264      	negs	r4, r4
     648:	6004      	str	r4, [r0, #0]
		return -1;
     64a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	}

	errno = 0;
	return ret;
}
     64e:	4620      	mov	r0, r4
     650:	bd10      	pop	{r4, pc}
	errno = 0;
     652:	f007 f8ec 	bl	782e <z_errno>
     656:	2300      	movs	r3, #0
     658:	6003      	str	r3, [r0, #0]
	return ret;
     65a:	e7f8      	b.n	64e <offload_socket+0x22>
		return -ENOTSUP;
     65c:	f06f 0422 	mvn.w	r4, #34	; 0x22
     660:	e7f5      	b.n	64e <offload_socket+0x22>
     662:	bf00      	nop
     664:	20000a40 	.word	0x20000a40

00000668 <net_offload_dummy_get>:
}

static int net_offload_dummy_get(sa_family_t family, enum net_sock_type type,
				 enum net_ip_protocol ip_proto,
				 struct net_context **context)
{
     668:	b508      	push	{r3, lr}
	LOG_ERR("CONFIG_NET_SOCKETS_OFFLOAD must be enabled for this driver");
     66a:	2145      	movs	r1, #69	; 0x45
     66c:	4802      	ldr	r0, [pc, #8]	; (678 <net_offload_dummy_get+0x10>)
     66e:	f007 fb54 	bl	7d1a <z_log_minimal_printk>

	return -ENOTSUP;
}
     672:	f06f 0022 	mvn.w	r0, #34	; 0x22
     676:	bd08      	pop	{r3, pc}
     678:	0000acc0 	.word	0x0000acc0

0000067c <on_cmd_atcmdinfo_iccid>:
{
     67c:	b513      	push	{r0, r1, r4, lr}
		net_buf_linearize(minfo.mdm_iccid, sizeof(minfo.mdm_iccid) - 1,
     67e:	4c06      	ldr	r4, [pc, #24]	; (698 <on_cmd_atcmdinfo_iccid+0x1c>)
     680:	9100      	str	r1, [sp, #0]
     682:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
     684:	2300      	movs	r3, #0
     686:	211f      	movs	r1, #31
     688:	4620      	mov	r0, r4
     68a:	f007 fef4 	bl	8476 <net_buf_linearize>
     68e:	4603      	mov	r3, r0
	minfo.mdm_iccid[out_len] = '\0';
     690:	2000      	movs	r0, #0
     692:	54e0      	strb	r0, [r4, r3]
}
     694:	b002      	add	sp, #8
     696:	bd10      	pop	{r4, pc}
     698:	2000155c 	.word	0x2000155c

0000069c <offload_recvfrom>:
{
     69c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     6a0:	b089      	sub	sp, #36	; 0x24
     6a2:	4605      	mov	r5, r0
     6a4:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
     6a8:	4616      	mov	r6, r2
     6aa:	461c      	mov	r4, r3
	if (!buf || len == 0) {
     6ac:	460f      	mov	r7, r1
     6ae:	b101      	cbz	r1, 6b2 <offload_recvfrom+0x16>
     6b0:	b94a      	cbnz	r2, 6c6 <offload_recvfrom+0x2a>
		errno = EINVAL;
     6b2:	f007 f8bc 	bl	782e <z_errno>
     6b6:	2316      	movs	r3, #22
			return -1;
     6b8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
			errno = EAGAIN;
     6bc:	6003      	str	r3, [r0, #0]
}
     6be:	4620      	mov	r0, r4
     6c0:	b009      	add	sp, #36	; 0x24
     6c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (flags & ZSOCK_MSG_PEEK) {
     6c6:	07a3      	lsls	r3, r4, #30
     6c8:	d503      	bpl.n	6d2 <offload_recvfrom+0x36>
		errno = ENOTSUP;
     6ca:	f007 f8b0 	bl	782e <z_errno>
     6ce:	2323      	movs	r3, #35	; 0x23
     6d0:	e7f2      	b.n	6b8 <offload_recvfrom+0x1c>
		modem_socket_next_packet_size(&mdata.socket_config, sock);
     6d2:	4601      	mov	r1, r0
     6d4:	4821      	ldr	r0, [pc, #132]	; (75c <offload_recvfrom+0xc0>)
     6d6:	f007 fb62 	bl	7d9e <modem_socket_next_packet_size>
	if (!next_packet_size) {
     6da:	b9c0      	cbnz	r0, 70e <offload_recvfrom+0x72>
		if (flags & ZSOCK_MSG_DONTWAIT) {
     6dc:	f014 0440 	ands.w	r4, r4, #64	; 0x40
     6e0:	d003      	beq.n	6ea <offload_recvfrom+0x4e>
			errno = EAGAIN;
     6e2:	f007 f8a4 	bl	782e <z_errno>
     6e6:	230b      	movs	r3, #11
     6e8:	e7e6      	b.n	6b8 <offload_recvfrom+0x1c>
		if (!sock->is_connected && sock->ip_proto != IPPROTO_UDP) {
     6ea:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
     6ee:	b933      	cbnz	r3, 6fe <offload_recvfrom+0x62>
     6f0:	78eb      	ldrb	r3, [r5, #3]
     6f2:	2b11      	cmp	r3, #17
     6f4:	d003      	beq.n	6fe <offload_recvfrom+0x62>
			errno = 0;
     6f6:	f007 f89a 	bl	782e <z_errno>
     6fa:	6004      	str	r4, [r0, #0]
			return 0;
     6fc:	e7df      	b.n	6be <offload_recvfrom+0x22>
		modem_socket_wait_data(&mdata.socket_config, sock);
     6fe:	4629      	mov	r1, r5
     700:	4816      	ldr	r0, [pc, #88]	; (75c <offload_recvfrom+0xc0>)
     702:	f007 fca5 	bl	8050 <modem_socket_wait_data>
		next_packet_size = modem_socket_next_packet_size(
     706:	4629      	mov	r1, r5
     708:	4814      	ldr	r0, [pc, #80]	; (75c <offload_recvfrom+0xc0>)
     70a:	f007 fb48 	bl	7d9e <modem_socket_next_packet_size>
	snprintk(sendbuf, sizeof(sendbuf), "AT+USORF=%d", sock->id);
     70e:	210c      	movs	r1, #12
     710:	696b      	ldr	r3, [r5, #20]
     712:	4a13      	ldr	r2, [pc, #76]	; (760 <offload_recvfrom+0xc4>)
	(void)memset(&sock_data, 0, sizeof(sock_data));
     714:	ac04      	add	r4, sp, #16
	snprintk(sendbuf, sizeof(sendbuf), "AT+USORF=%d", sock->id);
     716:	a801      	add	r0, sp, #4
     718:	f007 f8ad 	bl	7876 <snprintk>
	(void)memset(&sock_data, 0, sizeof(sock_data));
     71c:	2210      	movs	r2, #16
     71e:	2100      	movs	r1, #0
     720:	4620      	mov	r0, r4
     722:	f007 fe7c 	bl	841e <memset>
	sock_data.recv_buf_len = len;
     726:	e9cd 7604 	strd	r7, r6, [sp, #16]
	sock_data.recv_addr = from;
     72a:	f8cd 8018 	str.w	r8, [sp, #24]
	sock->data = &sock_data;
     72e:	64ac      	str	r4, [r5, #72]	; 0x48
	if (from && fromlen) {
     730:	f1b8 0f00 	cmp.w	r8, #0
     734:	d00a      	beq.n	74c <offload_recvfrom+0xb0>
     736:	f1b9 0f00 	cmp.w	r9, #0
     73a:	d007      	beq.n	74c <offload_recvfrom+0xb0>
		*fromlen = sizeof(sock->dst);
     73c:	2208      	movs	r2, #8
		memcpy(from, &sock->dst, *fromlen);
     73e:	4640      	mov	r0, r8
		*fromlen = sizeof(sock->dst);
     740:	f8c9 2000 	str.w	r2, [r9]
		memcpy(from, &sock->dst, *fromlen);
     744:	f105 010c 	add.w	r1, r5, #12
     748:	f007 fe3e 	bl	83c8 <memcpy>
	errno = 0;
     74c:	f007 f86f 	bl	782e <z_errno>
     750:	2300      	movs	r3, #0
	ret = sock_data.recv_read_len;
     752:	f8bd 401c 	ldrh.w	r4, [sp, #28]
	errno = 0;
     756:	6003      	str	r3, [r0, #0]
	sock->data = NULL;
     758:	64ab      	str	r3, [r5, #72]	; 0x48
	return ret;
     75a:	e7b0      	b.n	6be <offload_recvfrom+0x22>
     75c:	20000a40 	.word	0x20000a40
     760:	0000ad00 	.word	0x0000ad00

00000764 <on_cmd_error>:
{
     764:	b508      	push	{r3, lr}
}

int modem_cmd_handler_set_error(struct modem_cmd_handler_data *data,
				int error_code)
{
    printk("set_error");
     766:	4806      	ldr	r0, [pc, #24]	; (780 <on_cmd_error+0x1c>)
     768:	f007 f878 	bl	785c <printk>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
     76c:	4805      	ldr	r0, [pc, #20]	; (784 <on_cmd_error+0x20>)
     76e:	f006 f8a9 	bl	68c4 <z_impl_k_sem_give>
	LOG_ERR("error");
     772:	2145      	movs	r1, #69	; 0x45
     774:	4804      	ldr	r0, [pc, #16]	; (788 <on_cmd_error+0x24>)
     776:	f007 fad0 	bl	7d1a <z_log_minimal_printk>
}
     77a:	2000      	movs	r0, #0
     77c:	bd08      	pop	{r3, pc}
     77e:	bf00      	nop
     780:	0000ad0c 	.word	0x0000ad0c
     784:	20000a24 	.word	0x20000a24
     788:	0000ad16 	.word	0x0000ad16

0000078c <on_cmd_cpgaddr>:
{
     78c:	b570      	push	{r4, r5, r6, lr}
     78e:	b08a      	sub	sp, #40	; 0x28
	out_len = net_buf_linearize(buf, sizeof(buf) - 1, data->rx_buf, 0, len);
     790:	9100      	str	r1, [sp, #0]
     792:	ad02      	add	r5, sp, #8
     794:	2300      	movs	r3, #0
     796:	211f      	movs	r1, #31
     798:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
     79a:	4628      	mov	r0, r5
     79c:	f007 fe6b 	bl	8476 <net_buf_linearize>
	buf[out_len] = '\0';
     7a0:	2600      	movs	r6, #0
     7a2:	ab0a      	add	r3, sp, #40	; 0x28
     7a4:	4418      	add	r0, r3
     7a6:	f800 6c20 	strb.w	r6, [r0, #-32]
	char *p = strchr(buf, '\"');
     7aa:	2122      	movs	r1, #34	; 0x22
     7ac:	4628      	mov	r0, r5
     7ae:	f007 fdb8 	bl	8322 <strchr>
	if (p) {
     7b2:	b1c0      	cbz	r0, 7e6 <on_cmd_cpgaddr+0x5a>
		out_len = strlen(p + 1);
     7b4:	1c44      	adds	r4, r0, #1
     7b6:	4620      	mov	r0, r4
     7b8:	f007 fdc1 	bl	833e <strlen>
		memmove(buf, p + 1, out_len + 1);
     7bc:	4621      	mov	r1, r4
     7be:	1c42      	adds	r2, r0, #1
     7c0:	4628      	mov	r0, r5
     7c2:	f007 fde9 	bl	8398 <memmove>
		p = strchr(buf, '\"');
     7c6:	2122      	movs	r1, #34	; 0x22
     7c8:	4628      	mov	r0, r5
     7ca:	f007 fdaa 	bl	8322 <strchr>
		if (p) {
     7ce:	4604      	mov	r4, r0
     7d0:	b148      	cbz	r0, 7e6 <on_cmd_cpgaddr+0x5a>
			memset(minfo.mdm_ip, 0, sizeof(minfo.mdm_ip));
     7d2:	2220      	movs	r2, #32
     7d4:	4631      	mov	r1, r6
     7d6:	4805      	ldr	r0, [pc, #20]	; (7ec <on_cmd_cpgaddr+0x60>)
     7d8:	f007 fe21 	bl	841e <memset>
			memcpy(minfo.mdm_ip, buf, out_len);
     7dc:	4629      	mov	r1, r5
     7de:	4803      	ldr	r0, [pc, #12]	; (7ec <on_cmd_cpgaddr+0x60>)
     7e0:	1b62      	subs	r2, r4, r5
     7e2:	f007 fdf1 	bl	83c8 <memcpy>
}
     7e6:	2000      	movs	r0, #0
     7e8:	b00a      	add	sp, #40	; 0x28
     7ea:	bd70      	pop	{r4, r5, r6, pc}
     7ec:	200015dc 	.word	0x200015dc

000007f0 <offload_close>:
{
     7f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (sock->id < mdata.socket_config.base_socket_num) {
     7f2:	4a0d      	ldr	r2, [pc, #52]	; (828 <CONFIG_ISR_STACK_SIZE+0x28>)
     7f4:	6943      	ldr	r3, [r0, #20]
     7f6:	f8d2 25a0 	ldr.w	r2, [r2, #1440]	; 0x5a0
{
     7fa:	4604      	mov	r4, r0
	if (sock->id < mdata.socket_config.base_socket_num) {
     7fc:	4293      	cmp	r3, r2
     7fe:	db10      	blt.n	822 <CONFIG_ISR_STACK_SIZE+0x22>
	if (sock->ip_proto == IPPROTO_UDP) {
     800:	78c2      	ldrb	r2, [r0, #3]
     802:	2a11      	cmp	r2, #17
     804:	d104      	bne.n	810 <CONFIG_ISR_STACK_SIZE+0x10>
		snprintk(buf, sizeof(buf), "AT+USOCL=%d", sock->id);
     806:	210c      	movs	r1, #12
     808:	4a08      	ldr	r2, [pc, #32]	; (82c <CONFIG_ISR_STACK_SIZE+0x2c>)
     80a:	a801      	add	r0, sp, #4
     80c:	f007 f833 	bl	7876 <snprintk>
	LOG_INF("Socket %d closed.", sock->id);
     810:	2149      	movs	r1, #73	; 0x49
     812:	4807      	ldr	r0, [pc, #28]	; (830 <CONFIG_ISR_STACK_SIZE+0x30>)
     814:	6962      	ldr	r2, [r4, #20]
     816:	f007 fa80 	bl	7d1a <z_log_minimal_printk>
	modem_socket_put(&mdata.socket_config, sock->sock_fd);
     81a:	69a1      	ldr	r1, [r4, #24]
     81c:	4805      	ldr	r0, [pc, #20]	; (834 <CONFIG_ISR_STACK_SIZE+0x34>)
     81e:	f007 fbe4 	bl	7fea <modem_socket_put>
}
     822:	2000      	movs	r0, #0
     824:	b004      	add	sp, #16
     826:	bd10      	pop	{r4, pc}
     828:	200004a8 	.word	0x200004a8
     82c:	0000ad21 	.word	0x0000ad21
     830:	0000ad2d 	.word	0x0000ad2d
     834:	20000a40 	.word	0x20000a40

00000838 <modem_atoi.constprop.0>:
static int modem_atoi(const char *s, const int err_value, const char *desc,
     838:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
     83a:	460d      	mov	r5, r1
     83c:	4616      	mov	r6, r2
	ret = (int)strtol(s, &endptr, 10);
     83e:	a903      	add	r1, sp, #12
     840:	220a      	movs	r2, #10
static int modem_atoi(const char *s, const int err_value, const char *desc,
     842:	4604      	mov	r4, r0
	ret = (int)strtol(s, &endptr, 10);
     844:	f007 fcdd 	bl	8202 <strtol>
	if (!endptr || *endptr != '\0') {
     848:	9b03      	ldr	r3, [sp, #12]
     84a:	b10b      	cbz	r3, 850 <modem_atoi.constprop.0+0x18>
     84c:	781b      	ldrb	r3, [r3, #0]
     84e:	b13b      	cbz	r3, 860 <modem_atoi.constprop.0+0x28>
		LOG_ERR("bad %s '%s' in %s", log_strdup(s), log_strdup(desc),
     850:	4804      	ldr	r0, [pc, #16]	; (864 <modem_atoi.constprop.0+0x2c>)
     852:	462b      	mov	r3, r5
     854:	4622      	mov	r2, r4
     856:	2145      	movs	r1, #69	; 0x45
     858:	9600      	str	r6, [sp, #0]
     85a:	f007 fa5e 	bl	7d1a <z_log_minimal_printk>
		return err_value;
     85e:	2000      	movs	r0, #0
}
     860:	b004      	add	sp, #16
     862:	bd70      	pop	{r4, r5, r6, pc}
     864:	0000ad44 	.word	0x0000ad44

00000868 <on_cmd_socknotifydata>:
{
     868:	b573      	push	{r0, r1, r4, r5, r6, lr}
     86a:	4614      	mov	r4, r2
	LOG_INF("\033[0;32m+UUSOR[D|F] received");
     86c:	2149      	movs	r1, #73	; 0x49
     86e:	4816      	ldr	r0, [pc, #88]	; (8c8 <on_cmd_socknotifydata+0x60>)
     870:	f007 fa53 	bl	7d1a <z_log_minimal_printk>
	socket_id = ATOI(argv[0], 0, "socket_id");
     874:	4a15      	ldr	r2, [pc, #84]	; (8cc <on_cmd_socknotifydata+0x64>)
     876:	4916      	ldr	r1, [pc, #88]	; (8d0 <on_cmd_socknotifydata+0x68>)
     878:	6820      	ldr	r0, [r4, #0]
     87a:	f7ff ffdd 	bl	838 <modem_atoi.constprop.0>
	new_total = ATOI(argv[1], 0, "length");
     87e:	4a13      	ldr	r2, [pc, #76]	; (8cc <on_cmd_socknotifydata+0x64>)
	socket_id = ATOI(argv[0], 0, "socket_id");
     880:	4606      	mov	r6, r0
	new_total = ATOI(argv[1], 0, "length");
     882:	4914      	ldr	r1, [pc, #80]	; (8d4 <on_cmd_socknotifydata+0x6c>)
     884:	6860      	ldr	r0, [r4, #4]
     886:	f7ff ffd7 	bl	838 <modem_atoi.constprop.0>
	sock = modem_socket_from_id(&mdata.socket_config, socket_id);
     88a:	4631      	mov	r1, r6
	new_total = ATOI(argv[1], 0, "length");
     88c:	4605      	mov	r5, r0
	sock = modem_socket_from_id(&mdata.socket_config, socket_id);
     88e:	4812      	ldr	r0, [pc, #72]	; (8d8 <on_cmd_socknotifydata+0x70>)
     890:	f007 fb83 	bl	7f9a <modem_socket_from_id>
	if (!sock) {
     894:	4604      	mov	r4, r0
     896:	b198      	cbz	r0, 8c0 <on_cmd_socknotifydata+0x58>
	ret = modem_socket_packet_size_update(&mdata.socket_config, sock,
     898:	4601      	mov	r1, r0
     89a:	462a      	mov	r2, r5
     89c:	480e      	ldr	r0, [pc, #56]	; (8d8 <on_cmd_socknotifydata+0x70>)
     89e:	f007 fa94 	bl	7dca <modem_socket_packet_size_update>
	if (ret < 0) {
     8a2:	2800      	cmp	r0, #0
     8a4:	da06      	bge.n	8b4 <on_cmd_socknotifydata+0x4c>
		LOG_ERR("socket_id:%d left_bytes:%d err: %d", socket_id,
     8a6:	9000      	str	r0, [sp, #0]
     8a8:	462b      	mov	r3, r5
     8aa:	4632      	mov	r2, r6
     8ac:	2145      	movs	r1, #69	; 0x45
     8ae:	480b      	ldr	r0, [pc, #44]	; (8dc <on_cmd_socknotifydata+0x74>)
     8b0:	f007 fa33 	bl	7d1a <z_log_minimal_printk>
	if (new_total > 0) {
     8b4:	2d00      	cmp	r5, #0
     8b6:	dd03      	ble.n	8c0 <on_cmd_socknotifydata+0x58>
		modem_socket_data_ready(&mdata.socket_config, sock);
     8b8:	4621      	mov	r1, r4
     8ba:	4807      	ldr	r0, [pc, #28]	; (8d8 <on_cmd_socknotifydata+0x70>)
     8bc:	f007 fbe4 	bl	8088 <modem_socket_data_ready>
}
     8c0:	2000      	movs	r0, #0
     8c2:	b002      	add	sp, #8
     8c4:	bd70      	pop	{r4, r5, r6, pc}
     8c6:	bf00      	nop
     8c8:	0000ad5b 	.word	0x0000ad5b
     8cc:	0000afba 	.word	0x0000afba
     8d0:	0000ad7c 	.word	0x0000ad7c
     8d4:	0000ad86 	.word	0x0000ad86
     8d8:	20000a40 	.word	0x20000a40
     8dc:	0000ad8d 	.word	0x0000ad8d

000008e0 <on_cmd_socknotifycereg>:
{
     8e0:	b513      	push	{r0, r1, r4, lr}
     8e2:	4614      	mov	r4, r2
	memset(temp, '\0', sizeof(temp));
     8e4:	2100      	movs	r1, #0
     8e6:	2201      	movs	r2, #1
     8e8:	a801      	add	r0, sp, #4
     8ea:	f007 fd98 	bl	841e <memset>
	strncpy(temp, argv[0], 1);
     8ee:	6821      	ldr	r1, [r4, #0]
     8f0:	2201      	movs	r2, #1
     8f2:	a801      	add	r0, sp, #4
     8f4:	f007 fd03 	bl	82fe <strncpy>
	mdata.network_state = ATOI(temp, 0, "stat");
     8f8:	4a07      	ldr	r2, [pc, #28]	; (918 <on_cmd_socknotifycereg+0x38>)
     8fa:	4908      	ldr	r1, [pc, #32]	; (91c <on_cmd_socknotifycereg+0x3c>)
     8fc:	a801      	add	r0, sp, #4
     8fe:	f7ff ff9b 	bl	838 <modem_atoi.constprop.0>
     902:	4b07      	ldr	r3, [pc, #28]	; (920 <on_cmd_socknotifycereg+0x40>)
	LOG_DBG("CEREG:%d", mdata.network_state);
     904:	b2c2      	uxtb	r2, r0
	mdata.network_state = ATOI(temp, 0, "stat");
     906:	f883 0594 	strb.w	r0, [r3, #1428]	; 0x594
	LOG_DBG("CEREG:%d", mdata.network_state);
     90a:	2144      	movs	r1, #68	; 0x44
     90c:	4805      	ldr	r0, [pc, #20]	; (924 <on_cmd_socknotifycereg+0x44>)
     90e:	f007 fa04 	bl	7d1a <z_log_minimal_printk>
}
     912:	2000      	movs	r0, #0
     914:	b002      	add	sp, #8
     916:	bd10      	pop	{r4, pc}
     918:	0000afd0 	.word	0x0000afd0
     91c:	0000adb5 	.word	0x0000adb5
     920:	200004a8 	.word	0x200004a8
     924:	0000adba 	.word	0x0000adba

00000928 <on_cmd_socknotifyclose>:
{
     928:	b508      	push	{r3, lr}
     92a:	4613      	mov	r3, r2
	sock = modem_socket_from_id(&mdata.socket_config,
     92c:	4907      	ldr	r1, [pc, #28]	; (94c <on_cmd_socknotifyclose+0x24>)
     92e:	4a08      	ldr	r2, [pc, #32]	; (950 <on_cmd_socknotifyclose+0x28>)
     930:	6818      	ldr	r0, [r3, #0]
     932:	f7ff ff81 	bl	838 <modem_atoi.constprop.0>
     936:	4601      	mov	r1, r0
     938:	4806      	ldr	r0, [pc, #24]	; (954 <on_cmd_socknotifyclose+0x2c>)
     93a:	f007 fb2e 	bl	7f9a <modem_socket_from_id>
	if (sock) {
     93e:	b110      	cbz	r0, 946 <on_cmd_socknotifyclose+0x1e>
		sock->is_connected = false;
     940:	2300      	movs	r3, #0
     942:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
}
     946:	2000      	movs	r0, #0
     948:	bd08      	pop	{r3, pc}
     94a:	bf00      	nop
     94c:	0000ad7c 	.word	0x0000ad7c
     950:	0000afa3 	.word	0x0000afa3
     954:	20000a40 	.word	0x20000a40

00000958 <modem_net_iface_init>:
 *
 * @return a pointer to the device driver instance
 */
static inline const struct device *net_if_get_device(struct net_if *iface)
{
	return iface->if_dev->dev;
     958:	6802      	ldr	r2, [r0, #0]

/*
 * Init net interface and use socket offload.
 */
static void modem_net_iface_init(struct net_if *iface)
{
     95a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct device *dev = net_if_get_device(iface);
	struct modem_data *data = dev->data;

	/* direct socket offload used instead of net offload: */
	iface->if_dev->offload = &modem_net_offload;
     95c:	4915      	ldr	r1, [pc, #84]	; (9b4 <modem_net_iface_init+0x5c>)
     95e:	6813      	ldr	r3, [r2, #0]
{
     960:	4604      	mov	r4, r0
	struct modem_data *data = dev->data;
     962:	691e      	ldr	r6, [r3, #16]
	iface->if_dev->offload = &modem_net_offload;
     964:	6191      	str	r1, [r2, #24]
	net_if_set_link_addr(iface, modem_get_mac(dev), sizeof(data->mac_addr),
     966:	691d      	ldr	r5, [r3, #16]
	data->mac_addr[0] = 0x00;
     968:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	hash_value = hash32(minfo.mdm_imei, strlen(minfo.mdm_imei));
     96c:	4812      	ldr	r0, [pc, #72]	; (9b8 <modem_net_iface_init+0x60>)
	data->mac_addr[0] = 0x00;
     96e:	80ab      	strh	r3, [r5, #4]
	hash_value = hash32(minfo.mdm_imei, strlen(minfo.mdm_imei));
     970:	f007 fce5 	bl	833e <strlen>
	for (i = 0; i < len; ++i) {
     974:	2300      	movs	r3, #0
		h = (h * HASH_MULTIPLIER) + str[i];
     976:	2725      	movs	r7, #37	; 0x25
	uint32_t h = 0;
     978:	461a      	mov	r2, r3
     97a:	490f      	ldr	r1, [pc, #60]	; (9b8 <modem_net_iface_init+0x60>)
	for (i = 0; i < len; ++i) {
     97c:	4298      	cmp	r0, r3
     97e:	dc13      	bgt.n	9a8 <modem_net_iface_init+0x50>
	UNALIGNED_PUT(hash_value, (uint32_t *)(data->mac_addr + 2));
     980:	f8c5 2006 	str.w	r2, [r5, #6]
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
     984:	6823      	ldr	r3, [r4, #0]
     986:	f3bf 8f5b 	dmb	ish
     98a:	68db      	ldr	r3, [r3, #12]
     98c:	f3bf 8f5b 	dmb	ish
 */
static inline int net_if_set_link_addr(struct net_if *iface,
				       uint8_t *addr, uint8_t len,
				       enum net_link_type type)
{
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
     990:	07db      	lsls	r3, r3, #31
		return -EPERM;
	}

	net_if_get_link_addr(iface)->addr = addr;
	net_if_get_link_addr(iface)->len = len;
     992:	bf5c      	itt	pl
     994:	f240 3206 	movwpl	r2, #774	; 0x306
	return &iface->if_dev->link_addr;
     998:	6823      	ldrpl	r3, [r4, #0]
	return data->mac_addr;
     99a:	f105 0504 	add.w	r5, r5, #4
	net_if_get_link_addr(iface)->len = len;
     99e:	bf5c      	itt	pl
     9a0:	829a      	strhpl	r2, [r3, #20]
	net_if_get_link_addr(iface)->addr = addr;
     9a2:	611d      	strpl	r5, [r3, #16]
			     NET_LINK_ETHERNET);
	data->net_iface = iface;
     9a4:	6034      	str	r4, [r6, #0]
}
     9a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		h = (h * HASH_MULTIPLIER) + str[i];
     9a8:	f811 cb01 	ldrb.w	ip, [r1], #1
	for (i = 0; i < len; ++i) {
     9ac:	3301      	adds	r3, #1
		h = (h * HASH_MULTIPLIER) + str[i];
     9ae:	fb07 c202 	mla	r2, r7, r2, ip
	for (i = 0; i < len; ++i) {
     9b2:	e7e3      	b.n	97c <modem_net_iface_init+0x24>
     9b4:	20000064 	.word	0x20000064
     9b8:	200015bc 	.word	0x200015bc

000009bc <create_socket.isra.0>:
static int create_socket(struct modem_socket *sock, const struct sockaddr *addr)
     9bc:	b500      	push	{lr}
     9be:	b089      	sub	sp, #36	; 0x24
	if (addr) {
     9c0:	b1d1      	cbz	r1, 9f8 <create_socket.isra.0+0x3c>
		} else if (addr->sa_family == AF_INET) {
     9c2:	880b      	ldrh	r3, [r1, #0]
     9c4:	3b01      	subs	r3, #1
     9c6:	b29b      	uxth	r3, r3
     9c8:	2b01      	cmp	r3, #1
     9ca:	d815      	bhi.n	9f8 <create_socket.isra.0+0x3c>
 *
 * @return Pointer to IPv6 socket address
 */
static inline struct sockaddr_in6 *net_sin6(const struct sockaddr *addr)
{
	return (struct sockaddr_in6 *)addr;
     9cc:	884a      	ldrh	r2, [r1, #2]
		proto = 17U;
     9ce:	2811      	cmp	r0, #17
     9d0:	ba52      	rev16	r2, r2
     9d2:	b292      	uxth	r2, r2
     9d4:	bf14      	ite	ne
     9d6:	2306      	movne	r3, #6
     9d8:	2311      	moveq	r3, #17
	if (local_port > 0U) {
     9da:	b18a      	cbz	r2, a00 <create_socket.isra.0+0x44>
		snprintk(buf, sizeof(buf), "AT+USOCR=%d,%u", proto, local_port);
     9dc:	9200      	str	r2, [sp, #0]
     9de:	2112      	movs	r1, #18
     9e0:	4a0a      	ldr	r2, [pc, #40]	; (a0c <create_socket.isra.0+0x50>)
     9e2:	a803      	add	r0, sp, #12
     9e4:	f006 ff47 	bl	7876 <snprintk>
	errno = 0;
     9e8:	f006 ff21 	bl	782e <z_errno>
     9ec:	4603      	mov	r3, r0
     9ee:	2000      	movs	r0, #0
     9f0:	6018      	str	r0, [r3, #0]
}
     9f2:	b009      	add	sp, #36	; 0x24
     9f4:	f85d fb04 	ldr.w	pc, [sp], #4
		proto = 17U;
     9f8:	2811      	cmp	r0, #17
     9fa:	bf14      	ite	ne
     9fc:	2306      	movne	r3, #6
     9fe:	2311      	moveq	r3, #17
		snprintk(buf, sizeof(buf), "AT+USOCR=%d", proto);
     a00:	2112      	movs	r1, #18
     a02:	4a03      	ldr	r2, [pc, #12]	; (a10 <create_socket.isra.0+0x54>)
     a04:	a803      	add	r0, sp, #12
     a06:	f006 ff36 	bl	7876 <snprintk>
     a0a:	e7ed      	b.n	9e8 <create_socket.isra.0+0x2c>
     a0c:	0000adc8 	.word	0x0000adc8
     a10:	0000add7 	.word	0x0000add7

00000a14 <offload_bind>:
{
     a14:	b538      	push	{r3, r4, r5, lr}
     a16:	4604      	mov	r4, r0
	memcpy(&sock->src, addr, sizeof(*addr));
     a18:	2208      	movs	r2, #8
     a1a:	3004      	adds	r0, #4
{
     a1c:	460d      	mov	r5, r1
	memcpy(&sock->src, addr, sizeof(*addr));
     a1e:	f007 fcd3 	bl	83c8 <memcpy>
	if (sock->id == mdata.socket_config.sockets_len + 1) {
     a22:	4b07      	ldr	r3, [pc, #28]	; (a40 <offload_bind+0x2c>)
     a24:	6962      	ldr	r2, [r4, #20]
     a26:	f8d3 359c 	ldr.w	r3, [r3, #1436]	; 0x59c
     a2a:	3301      	adds	r3, #1
     a2c:	429a      	cmp	r2, r3
     a2e:	d105      	bne.n	a3c <offload_bind+0x28>
		if (create_socket(sock, addr) < 0) {
     a30:	4629      	mov	r1, r5
     a32:	78e0      	ldrb	r0, [r4, #3]
     a34:	f7ff ffc2 	bl	9bc <create_socket.isra.0>
     a38:	17c0      	asrs	r0, r0, #31
}
     a3a:	bd38      	pop	{r3, r4, r5, pc}
	return 0;
     a3c:	2000      	movs	r0, #0
     a3e:	e7fc      	b.n	a3a <offload_bind+0x26>
     a40:	200004a8 	.word	0x200004a8

00000a44 <offload_connect>:
{
     a44:	b538      	push	{r3, r4, r5, lr}
     a46:	4604      	mov	r4, r0
	if (!addr) {
     a48:	460d      	mov	r5, r1
     a4a:	b921      	cbnz	r1, a56 <offload_connect+0x12>
		errno = EINVAL;
     a4c:	f006 feef 	bl	782e <z_errno>
     a50:	2316      	movs	r3, #22
		errno = EAFNOSUPPORT;
     a52:	6003      	str	r3, [r0, #0]
		return -1;
     a54:	e026      	b.n	aa4 <offload_connect+0x60>
	if (sock->id < mdata.socket_config.base_socket_num - 1) {
     a56:	4918      	ldr	r1, [pc, #96]	; (ab8 <offload_connect+0x74>)
     a58:	6942      	ldr	r2, [r0, #20]
     a5a:	f8d1 35a0 	ldr.w	r3, [r1, #1440]	; 0x5a0
     a5e:	3b01      	subs	r3, #1
     a60:	429a      	cmp	r2, r3
     a62:	da05      	bge.n	a70 <offload_connect+0x2c>
		LOG_ERR("Invalid socket_id(%d) from fd:%d", sock->id,
     a64:	6983      	ldr	r3, [r0, #24]
     a66:	2145      	movs	r1, #69	; 0x45
     a68:	4814      	ldr	r0, [pc, #80]	; (abc <offload_connect+0x78>)
     a6a:	f007 f956 	bl	7d1a <z_log_minimal_printk>
     a6e:	e7ed      	b.n	a4c <offload_connect+0x8>
	if (sock->id == mdata.socket_config.sockets_len + 1) {
     a70:	f8d1 359c 	ldr.w	r3, [r1, #1436]	; 0x59c
     a74:	3301      	adds	r3, #1
     a76:	429a      	cmp	r2, r3
     a78:	d00e      	beq.n	a98 <offload_connect+0x54>
	memcpy(&sock->dst, addr, sizeof(*addr));
     a7a:	2208      	movs	r2, #8
     a7c:	4629      	mov	r1, r5
     a7e:	f104 000c 	add.w	r0, r4, #12
     a82:	f007 fca1 	bl	83c8 <memcpy>
	} else if (addr->sa_family == AF_INET) {
     a86:	882b      	ldrh	r3, [r5, #0]
     a88:	3b01      	subs	r3, #1
     a8a:	b29b      	uxth	r3, r3
     a8c:	2b01      	cmp	r3, #1
     a8e:	d90c      	bls.n	aaa <offload_connect+0x66>
		errno = EAFNOSUPPORT;
     a90:	f006 fecd 	bl	782e <z_errno>
     a94:	232f      	movs	r3, #47	; 0x2f
     a96:	e7dc      	b.n	a52 <offload_connect+0xe>
		if (create_socket(sock, NULL) < 0) {
     a98:	2100      	movs	r1, #0
     a9a:	78c0      	ldrb	r0, [r0, #3]
     a9c:	f7ff ff8e 	bl	9bc <create_socket.isra.0>
     aa0:	2800      	cmp	r0, #0
     aa2:	daea      	bge.n	a7a <offload_connect+0x36>
			return -1;
     aa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     aa8:	e004      	b.n	ab4 <offload_connect+0x70>
	errno = 0;
     aaa:	f006 fec0 	bl	782e <z_errno>
     aae:	4603      	mov	r3, r0
     ab0:	2000      	movs	r0, #0
     ab2:	6018      	str	r0, [r3, #0]
}
     ab4:	bd38      	pop	{r3, r4, r5, pc}
     ab6:	bf00      	nop
     ab8:	200004a8 	.word	0x200004a8
     abc:	0000ade3 	.word	0x0000ade3

00000ac0 <n310_recv>:
{
     ac0:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_take(sem, timeout);
     ac2:	4c09      	ldr	r4, [pc, #36]	; (ae8 <n310_recv+0x28>)
     ac4:	f104 05e4 	add.w	r5, r4, #228	; 0xe4
     ac8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     acc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     ad0:	4628      	mov	r0, r5
     ad2:	f005 ff3b 	bl	694c <z_impl_k_sem_take>
		mdata.context.cmd_handler.process(&mdata.context.cmd_handler,
     ad6:	4905      	ldr	r1, [pc, #20]	; (aec <n310_recv+0x2c>)
     ad8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     ada:	f101 0010 	add.w	r0, r1, #16
     ade:	4798      	blx	r3
	z_impl_k_yield();
     ae0:	f005 fce4 	bl	64ac <z_impl_k_yield>
	while (1) {
     ae4:	e7f0      	b.n	ac8 <n310_recv+0x8>
     ae6:	bf00      	nop
     ae8:	200004a8 	.word	0x200004a8
     aec:	200004d0 	.word	0x200004d0

00000af0 <offload_sendto>:
{
     af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     af4:	461d      	mov	r5, r3
	uint16_t dst_port = 0U;
     af6:	2300      	movs	r3, #0
{
     af8:	b09a      	sub	sp, #104	; 0x68
	uint16_t dst_port = 0U;
     afa:	f8ad 301a 	strh.w	r3, [sp, #26]
	if (sock->ip_proto != IPPROTO_UDP) {
     afe:	78c3      	ldrb	r3, [r0, #3]
{
     b00:	4606      	mov	r6, r0
	if (sock->ip_proto != IPPROTO_UDP) {
     b02:	2b11      	cmp	r3, #17
{
     b04:	4688      	mov	r8, r1
     b06:	f8dd 9088 	ldr.w	r9, [sp, #136]	; 0x88
	if (sock->ip_proto != IPPROTO_UDP) {
     b0a:	d057      	beq.n	bbc <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x4>
		return -ENOTSUP;
     b0c:	f06f 0422 	mvn.w	r4, #34	; 0x22
		errno = -ret;
     b10:	f006 fe8d 	bl	782e <z_errno>
     b14:	4264      	negs	r4, r4
     b16:	6004      	str	r4, [r0, #0]
		return -1;
     b18:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
     b1c:	4620      	mov	r0, r4
     b1e:	b01a      	add	sp, #104	; 0x68
     b20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!dst_addr && sock->ip_proto == IPPROTO_UDP) {
     b24:	f1b9 0f00 	cmp.w	r9, #0
     b28:	d101      	bne.n	b2e <offload_sendto+0x3e>
		dst_addr = &sock->dst;
     b2a:	f106 090c 	add.w	r9, r6, #12
	if (buf_len > MDM_MAX_DATA_LENGTH) {
     b2e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
     b32:	bf28      	it	cs
     b34:	f44f 7200 	movcs.w	r2, #512	; 0x200
     b38:	f04f 0a00 	mov.w	sl, #0
	mdata.sock_written = 0;
     b3c:	4f24      	ldr	r7, [pc, #144]	; (bd0 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x18>)
	int release_flag = 0;
     b3e:	f015 0f03 	tst.w	r5, #3
	ret = modem_context_get_addr_port(dst_addr, &dst_port);
     b42:	f10d 011a 	add.w	r1, sp, #26
     b46:	4648      	mov	r0, r9
     b48:	4614      	mov	r4, r2
	int release_flag = 0;
     b4a:	bf08      	it	eq
     b4c:	4655      	moveq	r5, sl
	mdata.sock_written = 0;
     b4e:	f8c7 a7a0 	str.w	sl, [r7, #1952]	; 0x7a0
	ret = modem_context_get_addr_port(dst_addr, &dst_port);
     b52:	f007 f8ef 	bl	7d34 <modem_context_get_addr_port>
	snprintk(send_buf, sizeof(send_buf),
     b56:	4648      	mov	r0, r9
     b58:	6976      	ldr	r6, [r6, #20]
     b5a:	f001 f81f 	bl	1b9c <modem_context_sprint_ip_addr>
     b5e:	f8bd 301a 	ldrh.w	r3, [sp, #26]
     b62:	214b      	movs	r1, #75	; 0x4b
     b64:	e9cd 0300 	strd	r0, r3, [sp]
     b68:	e9cd 4803 	strd	r4, r8, [sp, #12]
     b6c:	4633      	mov	r3, r6
     b6e:	4a19      	ldr	r2, [pc, #100]	; (bd4 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x1c>)
     b70:	9502      	str	r5, [sp, #8]
     b72:	a807      	add	r0, sp, #28
     b74:	f006 fe7f 	bl	7876 <snprintk>
	return z_impl_k_sem_take(sem, timeout);
     b78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     b7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     b80:	f107 0088 	add.w	r0, r7, #136	; 0x88
     b84:	f005 fee2 	bl	694c <z_impl_k_sem_take>
    printk("modem_cmd_send_nolock");
     b88:	4813      	ldr	r0, [pc, #76]	; (bd8 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x20>)
     b8a:	f006 fe67 	bl	785c <printk>
	z_impl_k_sem_give(sem);
     b8e:	f107 0088 	add.w	r0, r7, #136	; 0x88
     b92:	f005 fe97 	bl	68c4 <z_impl_k_sem_give>
}


int modem_cmd_handler_get_error(struct modem_cmd_handler_data *data)
{
    printk("get_error");
     b96:	4811      	ldr	r0, [pc, #68]	; (bdc <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x24>)
     b98:	f006 fe60 	bl	785c <printk>
int modem_cmd_handler_update_cmds(struct modem_cmd_handler_data *data,
				  const struct modem_cmd *handler_cmds,
				  size_t handler_cmds_len,
				  bool reset_error_flag)
{
    printk("update");
     b9c:	4810      	ldr	r0, [pc, #64]	; (be0 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x28>)
     b9e:	f006 fe5d 	bl	785c <printk>
     ba2:	f107 0088 	add.w	r0, r7, #136	; 0x88
     ba6:	f005 fe8d 	bl	68c4 <z_impl_k_sem_give>
	return mdata.sock_written;
     baa:	f8d7 47a0 	ldr.w	r4, [r7, #1952]	; 0x7a0
	if (ret < 0) {
     bae:	4554      	cmp	r4, sl
     bb0:	dbae      	blt.n	b10 <offload_sendto+0x20>
	errno = 0;
     bb2:	f006 fe3c 	bl	782e <z_errno>
     bb6:	f8c0 a000 	str.w	sl, [r0]
	return ret;
     bba:	e7af      	b.n	b1c <offload_sendto+0x2c>
		if (!msg->msg_iov[i].iov_base || msg->msg_iov[i].iov_len == 0) {
     bbc:	b109      	cbz	r1, bc2 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0xa>
     bbe:	2a00      	cmp	r2, #0
     bc0:	d1b0      	bne.n	b24 <offload_sendto+0x34>
			errno = EINVAL;
     bc2:	f006 fe34 	bl	782e <z_errno>
     bc6:	2316      	movs	r3, #22
			return -1;
     bc8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
			errno = EINVAL;
     bcc:	6003      	str	r3, [r0, #0]
	if (ret < 0) {
     bce:	e79f      	b.n	b10 <offload_sendto+0x20>
     bd0:	200004a8 	.word	0x200004a8
     bd4:	0000ae09 	.word	0x0000ae09
     bd8:	0000ae2a 	.word	0x0000ae2a
     bdc:	0000ae40 	.word	0x0000ae40
     be0:	0000ae4a 	.word	0x0000ae4a

00000be4 <on_cmd_ok>:
{
     be4:	b508      	push	{r3, lr}
    printk("set_error");
     be6:	4804      	ldr	r0, [pc, #16]	; (bf8 <on_cmd_ok+0x14>)
     be8:	f006 fe38 	bl	785c <printk>
     bec:	4803      	ldr	r0, [pc, #12]	; (bfc <on_cmd_ok+0x18>)
     bee:	f005 fe69 	bl	68c4 <z_impl_k_sem_give>
}
     bf2:	2000      	movs	r0, #0
     bf4:	bd08      	pop	{r3, pc}
     bf6:	bf00      	nop
     bf8:	0000ad0c 	.word	0x0000ad0c
     bfc:	20000a24 	.word	0x20000a24

00000c00 <z_impl_sys_rand32_get>:

    return 0;
}

int z_impl_sys_rand32_get(void)
{
     c00:	b508      	push	{r3, lr}
	printk("sys_rand_get");
     c02:	4802      	ldr	r0, [pc, #8]	; (c0c <z_impl_sys_rand32_get+0xc>)
     c04:	f006 fe2a 	bl	785c <printk>
	return 32;
}
     c08:	2020      	movs	r0, #32
     c0a:	bd08      	pop	{r3, pc}
     c0c:	0000ae78 	.word	0x0000ae78

00000c10 <n310_get_model>:
}
     c10:	4800      	ldr	r0, [pc, #0]	; (c14 <n310_get_model+0x4>)
     c12:	4770      	bx	lr
     c14:	2000157c 	.word	0x2000157c

00000c18 <n310_get_iccid>:
}
     c18:	4800      	ldr	r0, [pc, #0]	; (c1c <n310_get_iccid+0x4>)
     c1a:	4770      	bx	lr
     c1c:	2000155c 	.word	0x2000155c

00000c20 <n310_get_manufacturer>:
}
     c20:	4800      	ldr	r0, [pc, #0]	; (c24 <n310_get_manufacturer+0x4>)
     c22:	4770      	bx	lr
     c24:	2000158c 	.word	0x2000158c

00000c28 <n310_get_revision>:
}
     c28:	4800      	ldr	r0, [pc, #0]	; (c2c <n310_get_revision+0x4>)
     c2a:	4770      	bx	lr
     c2c:	2000159c 	.word	0x2000159c

00000c30 <n310_get_imei>:
}
     c30:	4800      	ldr	r0, [pc, #0]	; (c34 <n310_get_imei+0x4>)
     c32:	4770      	bx	lr
     c34:	200015bc 	.word	0x200015bc

00000c38 <n310_get_ip>:
}
     c38:	4800      	ldr	r0, [pc, #0]	; (c3c <n310_get_ip+0x4>)
     c3a:	4770      	bx	lr
     c3c:	200015dc 	.word	0x200015dc

00000c40 <n310_get_state>:
}
     c40:	4b01      	ldr	r3, [pc, #4]	; (c48 <n310_get_state+0x8>)
     c42:	f893 0594 	ldrb.w	r0, [r3, #1428]	; 0x594
     c46:	4770      	bx	lr
     c48:	200004a8 	.word	0x200004a8

00000c4c <n310_modem_reset>:
{
     c4c:	b510      	push	{r4, lr}
printk("4\n");
     c4e:	481c      	ldr	r0, [pc, #112]	; (cc0 <n310_modem_reset+0x74>)
     c50:	f006 fe04 	bl	785c <printk>
printk("5\n");
     c54:	481b      	ldr	r0, [pc, #108]	; (cc4 <n310_modem_reset+0x78>)
     c56:	f006 fe01 	bl	785c <printk>
	LOG_INF("Starting modem...");
     c5a:	2149      	movs	r1, #73	; 0x49
     c5c:	481a      	ldr	r0, [pc, #104]	; (cc8 <n310_modem_reset+0x7c>)
     c5e:	f007 f85c 	bl	7d1a <z_log_minimal_printk>
printk("6\n");
     c62:	481a      	ldr	r0, [pc, #104]	; (ccc <n310_modem_reset+0x80>)
     c64:	f006 fdfa 	bl	785c <printk>
printk("7\n");
     c68:	4819      	ldr	r0, [pc, #100]	; (cd0 <n310_modem_reset+0x84>)
     c6a:	f006 fdf7 	bl	785c <printk>
printk("7.1\n");
     c6e:	4819      	ldr	r0, [pc, #100]	; (cd4 <n310_modem_reset+0x88>)
     c70:	f006 fdf4 	bl	785c <printk>
	ret = -1;
     c74:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	while (counter++ < 50 && ret < 0) {
     c78:	2333      	movs	r3, #51	; 0x33
     c7a:	3b01      	subs	r3, #1
     c7c:	d000      	beq.n	c80 <n310_modem_reset+0x34>
     c7e:	b954      	cbnz	r4, c96 <n310_modem_reset+0x4a>
printk("8\n");
     c80:	4815      	ldr	r0, [pc, #84]	; (cd8 <n310_modem_reset+0x8c>)
     c82:	f006 fdeb 	bl	785c <printk>
	if (ret < 0) {
     c86:	b144      	cbz	r4, c9a <n310_modem_reset+0x4e>
		LOG_ERR("Modem wait loop error: %d", ret);
     c88:	4622      	mov	r2, r4
     c8a:	2145      	movs	r1, #69	; 0x45
     c8c:	4813      	ldr	r0, [pc, #76]	; (cdc <n310_modem_reset+0x90>)
     c8e:	f007 f844 	bl	7d1a <z_log_minimal_printk>
}
     c92:	4620      	mov	r0, r4
     c94:	bd10      	pop	{r4, pc}
		ret = modem_cmd_send(&mdata.context.iface,
     c96:	2400      	movs	r4, #0
     c98:	e7ef      	b.n	c7a <n310_modem_reset+0x2e>
    printk("handler_setup");
     c9a:	4811      	ldr	r0, [pc, #68]	; (ce0 <n310_modem_reset+0x94>)
     c9c:	f006 fdde 	bl	785c <printk>
printk("9\n");
     ca0:	4810      	ldr	r0, [pc, #64]	; (ce4 <n310_modem_reset+0x98>)
     ca2:	f006 fddb 	bl	785c <printk>
printk("10\n");
     ca6:	4810      	ldr	r0, [pc, #64]	; (ce8 <n310_modem_reset+0x9c>)
     ca8:	f006 fdd8 	bl	785c <printk>
printk("11\n");
     cac:	480f      	ldr	r0, [pc, #60]	; (cec <n310_modem_reset+0xa0>)
     cae:	f006 fdd5 	bl	785c <printk>
	LOG_INF("Modem is ready.");
     cb2:	2149      	movs	r1, #73	; 0x49
     cb4:	480e      	ldr	r0, [pc, #56]	; (cf0 <n310_modem_reset+0xa4>)
     cb6:	f007 f830 	bl	7d1a <z_log_minimal_printk>
	return 0;
     cba:	2400      	movs	r4, #0
     cbc:	e7e9      	b.n	c92 <n310_modem_reset+0x46>
     cbe:	bf00      	nop
     cc0:	0000af0b 	.word	0x0000af0b
     cc4:	0000ae85 	.word	0x0000ae85
     cc8:	0000ae88 	.word	0x0000ae88
     ccc:	0000ae9f 	.word	0x0000ae9f
     cd0:	0000aea2 	.word	0x0000aea2
     cd4:	0000aea5 	.word	0x0000aea5
     cd8:	0000aeaa 	.word	0x0000aeaa
     cdc:	0000aead 	.word	0x0000aead
     ce0:	0000ae51 	.word	0x0000ae51
     ce4:	0000aecc 	.word	0x0000aecc
     ce8:	0000aecf 	.word	0x0000aecf
     cec:	0000aed3 	.word	0x0000aed3
     cf0:	0000aed7 	.word	0x0000aed7

00000cf4 <n310_driver_init>:
	struct modem_data *mdm = device->data;
     cf4:	6903      	ldr	r3, [r0, #16]
{
     cf6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	mdata.cmd_handler_data.cmds[CMD_RESP] = response_cmds;
     cfa:	4c3a      	ldr	r4, [pc, #232]	; (de4 <n310_driver_init+0xf0>)
	mdata.cmd_handler_data.match_buf = &mdm->cmd_match_buf[0];
     cfc:	33fc      	adds	r3, #252	; 0xfc
	mdata.cmd_handler_data.cmds[CMD_RESP] = response_cmds;
     cfe:	4a3a      	ldr	r2, [pc, #232]	; (de8 <n310_driver_init+0xf4>)
	mdata.cmd_handler_data.match_buf = &mdm->cmd_match_buf[0];
     d00:	6623      	str	r3, [r4, #96]	; 0x60
	mdata.cmd_handler_data.match_buf_len = sizeof(mdm->cmd_match_buf);
     d02:	2380      	movs	r3, #128	; 0x80
	mdata.cmd_handler_data.cmds[CMD_RESP] = response_cmds;
     d04:	64a2      	str	r2, [r4, #72]	; 0x48
	mdata.cmd_handler_data.cmds[CMD_UNSOL] = unsol_cmds;
     d06:	4a39      	ldr	r2, [pc, #228]	; (dec <n310_driver_init+0xf8>)
	mdata.cmd_handler_data.cmds_len[CMD_RESP] = ARRAY_SIZE(response_cmds);
     d08:	f04f 0905 	mov.w	r9, #5
	mdata.cmd_handler_data.alloc_timeout = K_NO_WAIT;
     d0c:	2600      	movs	r6, #0
     d0e:	2700      	movs	r7, #0
	mdata.cmd_handler_data.cmds[CMD_UNSOL] = unsol_cmds;
     d10:	64e2      	str	r2, [r4, #76]	; 0x4c
	mdata.cmd_handler_data.cmds_len[CMD_UNSOL] = ARRAY_SIZE(unsol_cmds);
     d12:	2204      	movs	r2, #4
	mdata.cmd_handler_data.match_buf_len = sizeof(mdm->cmd_match_buf);
     d14:	6663      	str	r3, [r4, #100]	; 0x64
	mdata.cmd_handler_data.buf_pool = &mdm_recv_pool;
     d16:	4b36      	ldr	r3, [pc, #216]	; (df0 <n310_driver_init+0xfc>)
	mdata.cmd_handler_data.alloc_timeout = K_NO_WAIT;
     d18:	e9c4 6720 	strd	r6, r7, [r4, #128]	; 0x80
	mdata.cmd_handler_data.buf_pool = &mdm_recv_pool;
     d1c:	67a3      	str	r3, [r4, #120]	; 0x78
	mdata.cmd_handler_data.eol = "\r";
     d1e:	4b35      	ldr	r3, [pc, #212]	; (df4 <n310_driver_init+0x100>)
{
     d20:	b089      	sub	sp, #36	; 0x24
	mdata.cmd_handler_data.cmds_len[CMD_RESP] = ARRAY_SIZE(response_cmds);
     d22:	f8c4 9054 	str.w	r9, [r4, #84]	; 0x54
	mdata.cmd_handler_data.cmds_len[CMD_UNSOL] = ARRAY_SIZE(unsol_cmds);
     d26:	65a2      	str	r2, [r4, #88]	; 0x58
	mdata.cmd_handler_data.eol = "\r";
     d28:	66e3      	str	r3, [r4, #108]	; 0x6c
	return z_impl_k_sem_init(sem, initial_count, limit);
     d2a:	2201      	movs	r2, #1
     d2c:	2100      	movs	r1, #0
     d2e:	f204 507c 	addw	r0, r4, #1404	; 0x57c
     d32:	f009 fa41 	bl	a1b8 <z_impl_k_sem_init>
    printk("handler_init\n");
     d36:	4830      	ldr	r0, [pc, #192]	; (df8 <n310_driver_init+0x104>)
     d38:	f006 fd90 	bl	785c <printk>
	mdata.socket_config.sockets = &mdata.sockets[0];
     d3c:	f504 63bb 	add.w	r3, r4, #1496	; 0x5d8
     d40:	f8c4 3598 	str.w	r3, [r4, #1432]	; 0x598
	mdata.socket_config.base_socket_num = 0;
     d44:	f04f 0800 	mov.w	r8, #0
	mdata.socket_config.sockets_len = ARRAY_SIZE(mdata.sockets);
     d48:	2306      	movs	r3, #6
	ret = modem_socket_init(&mdata.socket_config,
     d4a:	492c      	ldr	r1, [pc, #176]	; (dfc <n310_driver_init+0x108>)
     d4c:	f504 60b3 	add.w	r0, r4, #1432	; 0x598
	mdata.socket_config.sockets_len = ARRAY_SIZE(mdata.sockets);
     d50:	f8c4 359c 	str.w	r3, [r4, #1436]	; 0x59c
	mdata.socket_config.base_socket_num = 0;
     d54:	f8c4 85a0 	str.w	r8, [r4, #1440]	; 0x5a0
	ret = modem_socket_init(&mdata.socket_config,
     d58:	f007 f9b8 	bl	80cc <modem_socket_init>
	if (ret < 0) {
     d5c:	1e05      	subs	r5, r0, #0
     d5e:	da08      	bge.n	d72 <n310_driver_init+0x7e>
		LOG_ERR("socket init failed: %d", ret);
     d60:	462a      	mov	r2, r5
     d62:	2145      	movs	r1, #69	; 0x45
     d64:	4826      	ldr	r0, [pc, #152]	; (e00 <n310_driver_init+0x10c>)
		LOG_ERR("modem context register error: %d", ret);
     d66:	f006 ffd8 	bl	7d1a <z_log_minimal_printk>
}
     d6a:	4628      	mov	r0, r5
     d6c:	b009      	add	sp, #36	; 0x24
     d6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	mdata.mdm_data.rx_rb_buf = &mdata.mdm_rx_rb_buf[0];
     d72:	f504 73be 	add.w	r3, r4, #380	; 0x17c
     d76:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
	mdata.mdm_data.rx_rb_buf_len = sizeof(mdata.mdm_rx_rb_buf);
     d7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    printk("uart_init\n");
     d7e:	4821      	ldr	r0, [pc, #132]	; (e04 <n310_driver_init+0x110>)
     d80:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
     d84:	f006 fd6a 	bl	785c <printk>
printk("b4\n");
     d88:	481f      	ldr	r0, [pc, #124]	; (e08 <n310_driver_init+0x114>)
     d8a:	f006 fd67 	bl	785c <printk>
	ret = modem_context_register(&mdata.context);
     d8e:	f104 000c 	add.w	r0, r4, #12
     d92:	f000 ff23 	bl	1bdc <modem_context_register>
     d96:	4605      	mov	r5, r0
	printk("after\n");
     d98:	481c      	ldr	r0, [pc, #112]	; (e0c <n310_driver_init+0x118>)
     d9a:	f006 fd5f 	bl	785c <printk>
	if (ret < 0) {
     d9e:	2d00      	cmp	r5, #0
     da0:	da03      	bge.n	daa <n310_driver_init+0xb6>
		LOG_ERR("modem context register error: %d", ret);
     da2:	462a      	mov	r2, r5
     da4:	2145      	movs	r1, #69	; 0x45
     da6:	481a      	ldr	r0, [pc, #104]	; (e10 <n310_driver_init+0x11c>)
     da8:	e7dd      	b.n	d66 <n310_driver_init+0x72>
printk("1\n");
     daa:	481a      	ldr	r0, [pc, #104]	; (e14 <n310_driver_init+0x120>)
     dac:	f006 fd56 	bl	785c <printk>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
     db0:	f44f 7200 	mov.w	r2, #512	; 0x200
     db4:	4b18      	ldr	r3, [pc, #96]	; (e18 <n310_driver_init+0x124>)
     db6:	4919      	ldr	r1, [pc, #100]	; (e1c <n310_driver_init+0x128>)
     db8:	e9cd 6706 	strd	r6, r7, [sp, #24]
     dbc:	e9cd 9803 	strd	r9, r8, [sp, #12]
     dc0:	e9cd 8801 	strd	r8, r8, [sp, #4]
     dc4:	4816      	ldr	r0, [pc, #88]	; (e20 <n310_driver_init+0x12c>)
     dc6:	f8cd 8000 	str.w	r8, [sp]
     dca:	f005 fee7 	bl	6b9c <z_impl_k_thread_create>
printk("2\n");
     dce:	4815      	ldr	r0, [pc, #84]	; (e24 <n310_driver_init+0x130>)
     dd0:	f006 fd44 	bl	785c <printk>
	n310_modem_reset();
     dd4:	f7ff ff3a 	bl	c4c <n310_modem_reset>
printk("3\n");
     dd8:	4813      	ldr	r0, [pc, #76]	; (e28 <n310_driver_init+0x134>)
     dda:	f006 fd3f 	bl	785c <printk>
	return 0;
     dde:	4645      	mov	r5, r8
     de0:	e7c3      	b.n	d6a <n310_driver_init+0x76>
     de2:	bf00      	nop
     de4:	200004a8 	.word	0x200004a8
     de8:	0000a6b4 	.word	0x0000a6b4
     dec:	0000a718 	.word	0x0000a718
     df0:	200003c4 	.word	0x200003c4
     df4:	0000aeec 	.word	0x0000aeec
     df8:	0000ae5f 	.word	0x0000ae5f
     dfc:	0000a67c 	.word	0x0000a67c
     e00:	0000aeee 	.word	0x0000aeee
     e04:	0000ae6d 	.word	0x0000ae6d
     e08:	0000af0a 	.word	0x0000af0a
     e0c:	0000af0e 	.word	0x0000af0e
     e10:	0000af15 	.word	0x0000af15
     e14:	0000aea7 	.word	0x0000aea7
     e18:	00000ac1 	.word	0x00000ac1
     e1c:	20001640 	.word	0x20001640
     e20:	20000c50 	.word	0x20000c50
     e24:	0000b15a 	.word	0x0000b15a
     e28:	0000af3b 	.word	0x0000af3b

00000e2c <z_reserve_fd>:

	return fd_entry->obj;
}

int z_reserve_fd(void)
{
     e2c:	b510      	push	{r4, lr}
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
     e2e:	2400      	movs	r4, #0
	return z_impl_k_mutex_lock(mutex, timeout);
     e30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     e34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     e38:	4815      	ldr	r0, [pc, #84]	; (e90 <z_reserve_fd+0x64>)
     e3a:	f004 fa0b 	bl	5254 <z_impl_k_mutex_lock>
     e3e:	4b15      	ldr	r3, [pc, #84]	; (e94 <z_reserve_fd+0x68>)
     e40:	f3bf 8f5b 	dmb	ish
     e44:	681a      	ldr	r2, [r3, #0]
     e46:	f3bf 8f5b 	dmb	ish
		if (!atomic_get(&fdtable[fd].refcount)) {
     e4a:	b17a      	cbz	r2, e6c <z_reserve_fd+0x40>
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
     e4c:	3401      	adds	r4, #1
     e4e:	2c04      	cmp	r4, #4
     e50:	f103 030c 	add.w	r3, r3, #12
     e54:	d1f4      	bne.n	e40 <z_reserve_fd+0x14>
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
     e56:	f003 feb5 	bl	4bc4 <z_impl_z_errno>
	errno = ENFILE;
     e5a:	2317      	movs	r3, #23
	return -1;
     e5c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	errno = ENFILE;
     e60:	6003      	str	r3, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
     e62:	480b      	ldr	r0, [pc, #44]	; (e90 <z_reserve_fd+0x64>)
     e64:	f004 faea 	bl	543c <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
     e68:	4620      	mov	r0, r4
     e6a:	bd10      	pop	{r4, pc}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
     e6c:	f3bf 8f5b 	dmb	ish
     e70:	e853 1f00 	ldrex	r1, [r3]
     e74:	3101      	adds	r1, #1
     e76:	e843 1000 	strex	r0, r1, [r3]
     e7a:	2800      	cmp	r0, #0
     e7c:	d1f8      	bne.n	e70 <z_reserve_fd+0x44>
		fdtable[fd].obj = NULL;
     e7e:	230c      	movs	r3, #12
     e80:	4363      	muls	r3, r4
     e82:	4905      	ldr	r1, [pc, #20]	; (e98 <z_reserve_fd+0x6c>)
     e84:	f3bf 8f5b 	dmb	ish
     e88:	18c8      	adds	r0, r1, r3
     e8a:	50ca      	str	r2, [r1, r3]
		fdtable[fd].vtable = NULL;
     e8c:	6042      	str	r2, [r0, #4]
     e8e:	e7e8      	b.n	e62 <z_reserve_fd+0x36>
     e90:	200003b0 	.word	0x200003b0
     e94:	20001198 	.word	0x20001198
     e98:	20001190 	.word	0x20001190

00000e9c <z_finalize_fd>:

void z_finalize_fd(int fd, void *obj, const struct fd_op_vtable *vtable)
{
     e9c:	b510      	push	{r4, lr}
	 * This call is a no-op if obj is invalid or points to something
	 * not a kernel object.
	 */
	z_object_recycle(obj);
#endif
	fdtable[fd].obj = obj;
     e9e:	240c      	movs	r4, #12
     ea0:	4360      	muls	r0, r4
     ea2:	4b02      	ldr	r3, [pc, #8]	; (eac <z_finalize_fd+0x10>)
     ea4:	181c      	adds	r4, r3, r0
     ea6:	5019      	str	r1, [r3, r0]
	fdtable[fd].vtable = vtable;
     ea8:	6062      	str	r2, [r4, #4]
}
     eaa:	bd10      	pop	{r4, pc}
     eac:	20001190 	.word	0x20001190

00000eb0 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     eb0:	680b      	ldr	r3, [r1, #0]
     eb2:	3301      	adds	r3, #1
     eb4:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     eb6:	4b01      	ldr	r3, [pc, #4]	; (ebc <char_out+0xc>)
     eb8:	681b      	ldr	r3, [r3, #0]
     eba:	4718      	bx	r3
     ebc:	20000088 	.word	0x20000088

00000ec0 <__printk_hook_install>:
	_char_out = fn;
     ec0:	4b01      	ldr	r3, [pc, #4]	; (ec8 <__printk_hook_install+0x8>)
     ec2:	6018      	str	r0, [r3, #0]
}
     ec4:	4770      	bx	lr
     ec6:	bf00      	nop
     ec8:	20000088 	.word	0x20000088

00000ecc <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
     ecc:	b507      	push	{r0, r1, r2, lr}
     ece:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
     ed0:	2100      	movs	r1, #0
{
     ed2:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
     ed4:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
     ed6:	4803      	ldr	r0, [pc, #12]	; (ee4 <vprintk+0x18>)
     ed8:	a901      	add	r1, sp, #4
     eda:	f000 f9d7 	bl	128c <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
     ede:	b003      	add	sp, #12
     ee0:	f85d fb04 	ldr.w	pc, [sp], #4
     ee4:	00000eb1 	.word	0x00000eb1

00000ee8 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
     ee8:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
     eea:	2500      	movs	r5, #0
{
     eec:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
     eee:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
     ef2:	4604      	mov	r4, r0

	cbvprintf(str_out, &ctx, fmt, ap);
     ef4:	a901      	add	r1, sp, #4
     ef6:	4805      	ldr	r0, [pc, #20]	; (f0c <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
     ef8:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
     efa:	f000 f9c7 	bl	128c <cbvprintf>

	if (ctx.count < ctx.max) {
     efe:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
     f02:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
     f04:	bfb8      	it	lt
     f06:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
     f08:	b005      	add	sp, #20
     f0a:	bd30      	pop	{r4, r5, pc}
     f0c:	00007837 	.word	0x00007837

00000f10 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
     f10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     f14:	4605      	mov	r5, r0
		if (work == NULL) {
			continue;
		}

		handler = work->handler;
		__ASSERT(handler != NULL, "handler must be provided");
     f16:	4e19      	ldr	r6, [pc, #100]	; (f7c <z_work_q_main+0x6c>)
     f18:	f8df 8064 	ldr.w	r8, [pc, #100]	; f80 <z_work_q_main+0x70>
     f1c:	f8df 9064 	ldr.w	r9, [pc, #100]	; f84 <z_work_q_main+0x74>
	return z_impl_k_queue_get(queue, timeout);
     f20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     f24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     f28:	4628      	mov	r0, r5
     f2a:	f004 fbe9 	bl	5700 <z_impl_k_queue_get>
		if (work == NULL) {
     f2e:	4604      	mov	r4, r0
     f30:	2800      	cmp	r0, #0
     f32:	d0f5      	beq.n	f20 <z_work_q_main+0x10>
		handler = work->handler;
     f34:	6847      	ldr	r7, [r0, #4]
		__ASSERT(handler != NULL, "handler must be provided");
     f36:	b967      	cbnz	r7, f52 <z_work_q_main+0x42>
     f38:	4641      	mov	r1, r8
     f3a:	231c      	movs	r3, #28
     f3c:	4632      	mov	r2, r6
     f3e:	4648      	mov	r0, r9
     f40:	f006 fc8c 	bl	785c <printk>
     f44:	4810      	ldr	r0, [pc, #64]	; (f88 <z_work_q_main+0x78>)
     f46:	f006 fc89 	bl	785c <printk>
     f4a:	211c      	movs	r1, #28
     f4c:	4630      	mov	r0, r6
     f4e:	f006 fed7 	bl	7d00 <assert_post_action>
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
     f52:	f3bf 8f5b 	dmb	ish
     f56:	f104 0308 	add.w	r3, r4, #8
     f5a:	e853 2f00 	ldrex	r2, [r3]
     f5e:	f022 0101 	bic.w	r1, r2, #1
     f62:	e843 1000 	strex	r0, r1, [r3]
     f66:	2800      	cmp	r0, #0
     f68:	d1f7      	bne.n	f5a <z_work_q_main+0x4a>

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
     f6a:	07d3      	lsls	r3, r2, #31
     f6c:	f3bf 8f5b 	dmb	ish
     f70:	d501      	bpl.n	f76 <z_work_q_main+0x66>
					      K_WORK_STATE_PENDING)) {
			handler(work);
     f72:	4620      	mov	r0, r4
     f74:	47b8      	blx	r7
	z_impl_k_yield();
     f76:	f005 fa99 	bl	64ac <z_impl_k_yield>
     f7a:	e7d1      	b.n	f20 <z_work_q_main+0x10>
     f7c:	0000afe7 	.word	0x0000afe7
     f80:	0000b00a 	.word	0x0000b00a
     f84:	0000b021 	.word	0x0000b021
     f88:	0000b03e 	.word	0x0000b03e

00000f8c <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
     f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (mem == NULL) {
     f8e:	460e      	mov	r6, r1
     f90:	2900      	cmp	r1, #0
     f92:	d043      	beq.n	101c <CONFIG_FLASH_SIZE+0x1c>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
     f94:	6805      	ldr	r5, [r0, #0]
	}
}

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
     f96:	2201      	movs	r2, #1
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
     f98:	68ab      	ldr	r3, [r5, #8]
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
     f9a:	4628      	mov	r0, r5
	return big_heap(h) ? 8 : 4;
     f9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
     fa0:	bf2c      	ite	cs
     fa2:	2408      	movcs	r4, #8
     fa4:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
     fa6:	1b0c      	subs	r4, r1, r4
     fa8:	1b64      	subs	r4, r4, r5
     faa:	08e4      	lsrs	r4, r4, #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
     fac:	4621      	mov	r1, r4
     fae:	f006 fc79 	bl	78a4 <chunk_field>

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
     fb2:	07c3      	lsls	r3, r0, #31
     fb4:	d40d      	bmi.n	fd2 <sys_heap_free+0x46>
     fb6:	239a      	movs	r3, #154	; 0x9a
     fb8:	4a19      	ldr	r2, [pc, #100]	; (1020 <CONFIG_FLASH_SIZE+0x20>)
     fba:	491a      	ldr	r1, [pc, #104]	; (1024 <CONFIG_FLASH_SIZE+0x24>)
     fbc:	481a      	ldr	r0, [pc, #104]	; (1028 <CONFIG_FLASH_SIZE+0x28>)
     fbe:	f006 fc4d 	bl	785c <printk>
     fc2:	4631      	mov	r1, r6
     fc4:	4819      	ldr	r0, [pc, #100]	; (102c <CONFIG_FLASH_SIZE+0x2c>)
     fc6:	f006 fc49 	bl	785c <printk>
     fca:	219a      	movs	r1, #154	; 0x9a
     fcc:	4814      	ldr	r0, [pc, #80]	; (1020 <CONFIG_FLASH_SIZE+0x20>)
     fce:	f006 fe97 	bl	7d00 <assert_post_action>
	return c + chunk_size(h, c);
     fd2:	4621      	mov	r1, r4
     fd4:	4628      	mov	r0, r5
     fd6:	f006 fc7b 	bl	78d0 <chunk_size>
     fda:	1827      	adds	r7, r4, r0
	return c - chunk_field(h, c, LEFT_SIZE);
     fdc:	4639      	mov	r1, r7
     fde:	2200      	movs	r2, #0
     fe0:	4628      	mov	r0, r5
     fe2:	f006 fc5f 	bl	78a4 <chunk_field>
     fe6:	1a3f      	subs	r7, r7, r0
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
     fe8:	42bc      	cmp	r4, r7
     fea:	d00d      	beq.n	1008 <CONFIG_FLASH_SIZE+0x8>
     fec:	23a2      	movs	r3, #162	; 0xa2
     fee:	4a0c      	ldr	r2, [pc, #48]	; (1020 <CONFIG_FLASH_SIZE+0x20>)
     ff0:	490f      	ldr	r1, [pc, #60]	; (1030 <CONFIG_FLASH_SIZE+0x30>)
     ff2:	480d      	ldr	r0, [pc, #52]	; (1028 <CONFIG_FLASH_SIZE+0x28>)
     ff4:	f006 fc32 	bl	785c <printk>
     ff8:	4631      	mov	r1, r6
     ffa:	480e      	ldr	r0, [pc, #56]	; (1034 <CONFIG_FLASH_SIZE+0x34>)
     ffc:	f006 fc2e 	bl	785c <printk>
    1000:	21a2      	movs	r1, #162	; 0xa2
    1002:	4807      	ldr	r0, [pc, #28]	; (1020 <CONFIG_FLASH_SIZE+0x20>)
    1004:	f006 fe7c 	bl	7d00 <assert_post_action>
		 "corrupted heap bounds (buffer overflow?) for memory at %p",
		 mem);

	set_chunk_used(h, c, false);
    1008:	4621      	mov	r1, r4
    100a:	4628      	mov	r0, r5
    100c:	2200      	movs	r2, #0
    100e:	f006 fc65 	bl	78dc <set_chunk_used>
	free_chunk(h, c);
    1012:	4621      	mov	r1, r4
}
    1014:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_chunk(h, c);
    1018:	f006 bda2 	b.w	7b60 <free_chunk>
}
    101c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    101e:	bf00      	nop
    1020:	0000b059 	.word	0x0000b059
    1024:	0000b07a 	.word	0x0000b07a
    1028:	0000b021 	.word	0x0000b021
    102c:	0000b08b 	.word	0x0000b08b
    1030:	0000b0c3 	.word	0x0000b0c3
    1034:	0000b0e9 	.word	0x0000b0e9

00001038 <sys_heap_aligned_alloc>:
	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    1038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct z_heap *h = heap->heap;
    103c:	6806      	ldr	r6, [r0, #0]
{
    103e:	4614      	mov	r4, r2
	return big_heap_chunks(h->len);
    1040:	68b3      	ldr	r3, [r6, #8]
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rewind = align & -align;
    1042:	424a      	negs	r2, r1
	return big_heap(h) ? 8 : 4;
    1044:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    1048:	bf2c      	ite	cs
    104a:	2508      	movcs	r5, #8
    104c:	2504      	movcc	r5, #4
    104e:	ea02 0701 	and.w	r7, r2, r1
	if (align != rewind) {
    1052:	ea31 0202 	bics.w	r2, r1, r2
    1056:	d01e      	beq.n	1096 <sys_heap_aligned_alloc+0x5e>
	return sizeof(void *) > 4U || chunks > 0x7fffU;
    1058:	42bd      	cmp	r5, r7
    105a:	bf28      	it	cs
    105c:	463d      	movcs	r5, r7
    105e:	46b9      	mov	r9, r7
		align -= rewind;
    1060:	1bcf      	subs	r7, r1, r7
			return sys_heap_alloc(heap, bytes);
		}
		rewind = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    1062:	f107 3aff 	add.w	sl, r7, #4294967295	; 0xffffffff
    1066:	ea1a 0f07 	tst.w	sl, r7
    106a:	d00e      	beq.n	108a <sys_heap_aligned_alloc+0x52>
    106c:	4935      	ldr	r1, [pc, #212]	; (1144 <sys_heap_aligned_alloc+0x10c>)
    106e:	f240 130f 	movw	r3, #271	; 0x10f
    1072:	4a35      	ldr	r2, [pc, #212]	; (1148 <sys_heap_aligned_alloc+0x110>)
    1074:	4835      	ldr	r0, [pc, #212]	; (114c <sys_heap_aligned_alloc+0x114>)
    1076:	f006 fbf1 	bl	785c <printk>
    107a:	4835      	ldr	r0, [pc, #212]	; (1150 <sys_heap_aligned_alloc+0x118>)
    107c:	f006 fbee 	bl	785c <printk>
    1080:	f240 110f 	movw	r1, #271	; 0x10f
    1084:	4830      	ldr	r0, [pc, #192]	; (1148 <sys_heap_aligned_alloc+0x110>)
    1086:	f006 fe3b 	bl	7d00 <assert_post_action>

	if (bytes == 0 || size_too_big(h, bytes)) {
    108a:	b974      	cbnz	r4, 10aa <sys_heap_aligned_alloc+0x72>
		return NULL;
    108c:	f04f 0900 	mov.w	r9, #0
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
    1090:	4648      	mov	r0, r9
    1092:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (align <= chunk_header_bytes(h)) {
    1096:	42a9      	cmp	r1, r5
    1098:	d804      	bhi.n	10a4 <sys_heap_aligned_alloc+0x6c>
			return sys_heap_alloc(heap, bytes);
    109a:	4621      	mov	r1, r4
}
    109c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return sys_heap_alloc(heap, bytes);
    10a0:	f006 bda0 	b.w	7be4 <sys_heap_alloc>
		rewind = 0;
    10a4:	f04f 0900 	mov.w	r9, #0
    10a8:	e7db      	b.n	1062 <sys_heap_aligned_alloc+0x2a>
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 * There is a minimum of one chunk always in use by the heap header.
	 */
	return (bytes / CHUNK_UNIT) >= h->len;
    10aa:	68b0      	ldr	r0, [r6, #8]
	if (bytes == 0 || size_too_big(h, bytes)) {
    10ac:	ebb0 0fd4 	cmp.w	r0, r4, lsr #3
    10b0:	d9ec      	bls.n	108c <sys_heap_aligned_alloc+0x54>
	padded_sz = bytes_to_chunksz(h, bytes + align - gap);
    10b2:	1939      	adds	r1, r7, r4
    10b4:	1b49      	subs	r1, r1, r5
    10b6:	f006 fc2d 	bl	7914 <bytes_to_chunksz.isra.0>
    10ba:	4601      	mov	r1, r0
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    10bc:	4630      	mov	r0, r6
    10be:	f006 fc84 	bl	79ca <alloc_chunk>
	if (c0 == 0) {
    10c2:	4680      	mov	r8, r0
    10c4:	2800      	cmp	r0, #0
    10c6:	d0e1      	beq.n	108c <sys_heap_aligned_alloc+0x54>
	return big_heap(h) ? 8 : 4;
    10c8:	68b3      	ldr	r3, [r6, #8]
	mem = (uint8_t *) ROUND_UP(mem + rewind, align) - rewind;
    10ca:	eb09 05c0 	add.w	r5, r9, r0, lsl #3
    10ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    10d2:	bf2c      	ite	cs
    10d4:	2308      	movcs	r3, #8
    10d6:	2304      	movcc	r3, #4
    10d8:	441d      	add	r5, r3
    10da:	4435      	add	r5, r6
    10dc:	4455      	add	r5, sl
    10de:	427f      	negs	r7, r7
    10e0:	402f      	ands	r7, r5
    10e2:	eba7 0909 	sub.w	r9, r7, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    10e6:	444c      	add	r4, r9
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    10e8:	eba9 0303 	sub.w	r3, r9, r3
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    10ec:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    10ee:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    10f0:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
    10f4:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
    10f6:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    10fa:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
    10fe:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
    1102:	d208      	bcs.n	1116 <sys_heap_aligned_alloc+0xde>
		split_chunks(h, c0, c);
    1104:	4601      	mov	r1, r0
    1106:	463a      	mov	r2, r7
    1108:	4630      	mov	r0, r6
    110a:	f006 fca1 	bl	7a50 <split_chunks>
		free_list_add(h, c0);
    110e:	4641      	mov	r1, r8
    1110:	4630      	mov	r0, r6
    1112:	f006 fce2 	bl	7ada <free_list_add>
	return c + chunk_size(h, c);
    1116:	4639      	mov	r1, r7
    1118:	4630      	mov	r0, r6
    111a:	f006 fbd9 	bl	78d0 <chunk_size>
    111e:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
    1120:	4284      	cmp	r4, r0
    1122:	d208      	bcs.n	1136 <sys_heap_aligned_alloc+0xfe>
		split_chunks(h, c, c_end);
    1124:	4639      	mov	r1, r7
    1126:	4630      	mov	r0, r6
    1128:	4622      	mov	r2, r4
    112a:	f006 fc91 	bl	7a50 <split_chunks>
		free_list_add(h, c_end);
    112e:	4621      	mov	r1, r4
    1130:	4630      	mov	r0, r6
    1132:	f006 fcd2 	bl	7ada <free_list_add>
	set_chunk_used(h, c, true);
    1136:	2201      	movs	r2, #1
    1138:	4639      	mov	r1, r7
    113a:	4630      	mov	r0, r6
    113c:	f006 fbce 	bl	78dc <set_chunk_used>
	return mem;
    1140:	e7a6      	b.n	1090 <sys_heap_aligned_alloc+0x58>
    1142:	bf00      	nop
    1144:	0000b125 	.word	0x0000b125
    1148:	0000b059 	.word	0x0000b059
    114c:	0000b021 	.word	0x0000b021
    1150:	0000b140 	.word	0x0000b140

00001154 <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
    1154:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    1158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    115a:	4607      	mov	r7, r0
    115c:	460c      	mov	r4, r1
    115e:	4616      	mov	r6, r2
    1160:	d212      	bcs.n	1188 <sys_heap_init+0x34>
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the final marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    1162:	2a04      	cmp	r2, #4
    1164:	d80e      	bhi.n	1184 <sys_heap_init+0x30>
    1166:	4943      	ldr	r1, [pc, #268]	; (1274 <sys_heap_init+0x120>)
    1168:	f240 1383 	movw	r3, #387	; 0x183
    116c:	4a42      	ldr	r2, [pc, #264]	; (1278 <sys_heap_init+0x124>)
    116e:	4843      	ldr	r0, [pc, #268]	; (127c <sys_heap_init+0x128>)
    1170:	f006 fb74 	bl	785c <printk>
    1174:	4842      	ldr	r0, [pc, #264]	; (1280 <sys_heap_init+0x12c>)
    1176:	f006 fb71 	bl	785c <printk>
    117a:	f240 1183 	movw	r1, #387	; 0x183
    117e:	483e      	ldr	r0, [pc, #248]	; (1278 <sys_heap_init+0x124>)
    1180:	f006 fdbe 	bl	7d00 <assert_post_action>
    1184:	2204      	movs	r2, #4
    1186:	e000      	b.n	118a <sys_heap_init+0x36>
    1188:	2208      	movs	r2, #8
	bytes -= heap_footer_bytes(bytes);
    118a:	1ab6      	subs	r6, r6, r2

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    118c:	1de5      	adds	r5, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    118e:	4434      	add	r4, r6
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    1190:	f025 0507 	bic.w	r5, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    1194:	f024 0407 	bic.w	r4, r4, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    1198:	1b64      	subs	r4, r4, r5

	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    119a:	2c17      	cmp	r4, #23
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    119c:	ea4f 06d4 	mov.w	r6, r4, lsr #3
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    11a0:	d80e      	bhi.n	11c0 <sys_heap_init+0x6c>
    11a2:	4938      	ldr	r1, [pc, #224]	; (1284 <sys_heap_init+0x130>)
    11a4:	f44f 73c6 	mov.w	r3, #396	; 0x18c
    11a8:	4a33      	ldr	r2, [pc, #204]	; (1278 <sys_heap_init+0x124>)
    11aa:	4834      	ldr	r0, [pc, #208]	; (127c <sys_heap_init+0x128>)
    11ac:	f006 fb56 	bl	785c <printk>
    11b0:	4833      	ldr	r0, [pc, #204]	; (1280 <sys_heap_init+0x12c>)
    11b2:	f006 fb53 	bl	785c <printk>
    11b6:	f44f 71c6 	mov.w	r1, #396	; 0x18c
    11ba:	482f      	ldr	r0, [pc, #188]	; (1278 <sys_heap_init+0x124>)
    11bc:	f006 fda0 	bl	7d00 <assert_post_action>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
    11c0:	2300      	movs	r3, #0
    11c2:	2200      	movs	r2, #0
	heap->heap = h;
    11c4:	603d      	str	r5, [r7, #0]
	h->chunk0_hdr_area = 0;
    11c6:	e9c5 2300 	strd	r2, r3, [r5]
	h->len = buf_sz;
	h->avail_buckets = 0;
    11ca:	2300      	movs	r3, #0

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    11cc:	4631      	mov	r1, r6
    11ce:	4630      	mov	r0, r6
	h->len = buf_sz;
    11d0:	60ae      	str	r6, [r5, #8]
	h->avail_buckets = 0;
    11d2:	60eb      	str	r3, [r5, #12]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    11d4:	f006 fba7 	bl	7926 <bucket_idx.isra.0>
    11d8:	2101      	movs	r1, #1
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
    11da:	0084      	lsls	r4, r0, #2
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    11dc:	1c47      	adds	r7, r0, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    11de:	4630      	mov	r0, r6
    11e0:	f006 fb98 	bl	7914 <bytes_to_chunksz.isra.0>
    11e4:	341b      	adds	r4, #27
    11e6:	08e4      	lsrs	r4, r4, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");
    11e8:	4420      	add	r0, r4
    11ea:	42b0      	cmp	r0, r6
    11ec:	d30e      	bcc.n	120c <sys_heap_init+0xb8>
    11ee:	4926      	ldr	r1, [pc, #152]	; (1288 <sys_heap_init+0x134>)
    11f0:	f44f 73cc 	mov.w	r3, #408	; 0x198
    11f4:	4a20      	ldr	r2, [pc, #128]	; (1278 <sys_heap_init+0x124>)
    11f6:	4821      	ldr	r0, [pc, #132]	; (127c <sys_heap_init+0x128>)
    11f8:	f006 fb30 	bl	785c <printk>
    11fc:	4820      	ldr	r0, [pc, #128]	; (1280 <sys_heap_init+0x12c>)
    11fe:	f006 fb2d 	bl	785c <printk>
    1202:	f44f 71cc 	mov.w	r1, #408	; 0x198
    1206:	481c      	ldr	r0, [pc, #112]	; (1278 <sys_heap_init+0x124>)
    1208:	f006 fd7a 	bl	7d00 <assert_post_action>
	return big_heap_bytes(size) ? 8 : 4;
    120c:	2300      	movs	r3, #0

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
    120e:	4619      	mov	r1, r3
    1210:	f105 0210 	add.w	r2, r5, #16
	for (int i = 0; i < nb_buckets; i++) {
    1214:	42bb      	cmp	r3, r7
    1216:	db28      	blt.n	126a <sys_heap_init+0x116>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
    1218:	4622      	mov	r2, r4
    121a:	4628      	mov	r0, r5
    121c:	2100      	movs	r1, #0
    121e:	f006 fb75 	bl	790c <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
    1222:	1b37      	subs	r7, r6, r4
	set_chunk_used(h, 0, true);
    1224:	4628      	mov	r0, r5
    1226:	2201      	movs	r2, #1
    1228:	2100      	movs	r1, #0
    122a:	f006 fb57 	bl	78dc <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
    122e:	463a      	mov	r2, r7
    1230:	4621      	mov	r1, r4
    1232:	f006 fb6b 	bl	790c <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
    1236:	4623      	mov	r3, r4
    1238:	2200      	movs	r2, #0
    123a:	4621      	mov	r1, r4
    123c:	4628      	mov	r0, r5
    123e:	f006 fb3c 	bl	78ba <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
    1242:	4631      	mov	r1, r6
    1244:	4628      	mov	r0, r5
    1246:	f006 fb61 	bl	790c <set_chunk_size>
    124a:	463b      	mov	r3, r7
    124c:	4631      	mov	r1, r6
    124e:	4628      	mov	r0, r5
    1250:	2200      	movs	r2, #0
    1252:	f006 fb32 	bl	78ba <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
    1256:	4631      	mov	r1, r6
    1258:	4628      	mov	r0, r5
    125a:	2201      	movs	r2, #1
    125c:	f006 fb3e 	bl	78dc <set_chunk_used>

	free_list_add(h, chunk0_size);
    1260:	4621      	mov	r1, r4
}
    1262:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
    1266:	f006 bc38 	b.w	7ada <free_list_add>
		h->buckets[i].next = 0;
    126a:	f842 1b04 	str.w	r1, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
    126e:	3301      	adds	r3, #1
    1270:	e7d0      	b.n	1214 <sys_heap_init+0xc0>
    1272:	bf00      	nop
    1274:	0000b15d 	.word	0x0000b15d
    1278:	0000b059 	.word	0x0000b059
    127c:	0000b021 	.word	0x0000b021
    1280:	0000b17e 	.word	0x0000b17e
    1284:	0000b197 	.word	0x0000b197
    1288:	0000b1bf 	.word	0x0000b1bf

0000128c <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    128c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1290:	468b      	mov	fp, r1
    1292:	4692      	mov	sl, r2
    1294:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    1296:	2500      	movs	r5, #0
{
    1298:	b091      	sub	sp, #68	; 0x44
    129a:	9002      	str	r0, [sp, #8]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    129c:	f89a 0000 	ldrb.w	r0, [sl]
    12a0:	b908      	cbnz	r0, 12a6 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    12a2:	4628      	mov	r0, r5
    12a4:	e35d      	b.n	1962 <cbvprintf+0x6d6>
		if (*fp != '%') {
    12a6:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    12a8:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
    12ac:	d007      	beq.n	12be <cbvprintf+0x32>
			OUTC('%');
    12ae:	4659      	mov	r1, fp
    12b0:	9b02      	ldr	r3, [sp, #8]
    12b2:	4798      	blx	r3
    12b4:	2800      	cmp	r0, #0
    12b6:	f2c0 8354 	blt.w	1962 <cbvprintf+0x6d6>
    12ba:	3501      	adds	r5, #1
			break;
    12bc:	e212      	b.n	16e4 <cbvprintf+0x458>
		} state = {
    12be:	2218      	movs	r2, #24
    12c0:	2100      	movs	r1, #0
    12c2:	a80a      	add	r0, sp, #40	; 0x28
    12c4:	f007 f8ab 	bl	841e <memset>
	if (*sp == '%') {
    12c8:	f89a 3001 	ldrb.w	r3, [sl, #1]
    12cc:	2b25      	cmp	r3, #37	; 0x25
    12ce:	d078      	beq.n	13c2 <cbvprintf+0x136>
    12d0:	2200      	movs	r2, #0
    12d2:	4610      	mov	r0, r2
    12d4:	4696      	mov	lr, r2
    12d6:	4694      	mov	ip, r2
    12d8:	4616      	mov	r6, r2
    12da:	4639      	mov	r1, r7
		switch (*sp) {
    12dc:	f817 3b01 	ldrb.w	r3, [r7], #1
    12e0:	2b2b      	cmp	r3, #43	; 0x2b
    12e2:	f000 809d 	beq.w	1420 <cbvprintf+0x194>
    12e6:	f200 8094 	bhi.w	1412 <cbvprintf+0x186>
    12ea:	2b20      	cmp	r3, #32
    12ec:	f000 809b 	beq.w	1426 <cbvprintf+0x19a>
    12f0:	2b23      	cmp	r3, #35	; 0x23
    12f2:	f000 809b 	beq.w	142c <cbvprintf+0x1a0>
    12f6:	b12e      	cbz	r6, 1304 <cbvprintf+0x78>
    12f8:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    12fc:	f046 0604 	orr.w	r6, r6, #4
    1300:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
    1304:	f1bc 0f00 	cmp.w	ip, #0
    1308:	d005      	beq.n	1316 <cbvprintf+0x8a>
    130a:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    130e:	f046 0608 	orr.w	r6, r6, #8
    1312:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
    1316:	f1be 0f00 	cmp.w	lr, #0
    131a:	d005      	beq.n	1328 <cbvprintf+0x9c>
    131c:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    1320:	f046 0610 	orr.w	r6, r6, #16
    1324:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
    1328:	b128      	cbz	r0, 1336 <cbvprintf+0xaa>
    132a:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    132e:	f040 0020 	orr.w	r0, r0, #32
    1332:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    1336:	b12a      	cbz	r2, 1344 <cbvprintf+0xb8>
    1338:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    133c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    1340:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
    1344:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    1348:	f002 0044 	and.w	r0, r2, #68	; 0x44
    134c:	2844      	cmp	r0, #68	; 0x44
    134e:	d103      	bne.n	1358 <cbvprintf+0xcc>
		conv->flag_zero = false;
    1350:	f36f 1286 	bfc	r2, #6, #1
    1354:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
    1358:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    135c:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
    135e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    1362:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    1366:	d17b      	bne.n	1460 <cbvprintf+0x1d4>
		conv->width_star = true;
    1368:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
			++sp;
    136c:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    136e:	f042 0201 	orr.w	r2, r2, #1
    1372:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
    1376:	781a      	ldrb	r2, [r3, #0]
    1378:	2a2e      	cmp	r2, #46	; 0x2e
    137a:	bf0c      	ite	eq
    137c:	2101      	moveq	r1, #1
    137e:	2100      	movne	r1, #0
    1380:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1384:	f361 0241 	bfi	r2, r1, #1, #1
    1388:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
    138c:	d174      	bne.n	1478 <cbvprintf+0x1ec>
	if (*sp == '*') {
    138e:	785a      	ldrb	r2, [r3, #1]
    1390:	2a2a      	cmp	r2, #42	; 0x2a
    1392:	d06a      	beq.n	146a <cbvprintf+0x1de>
	size_t val = 0;
    1394:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    1396:	260a      	movs	r6, #10
	++sp;
    1398:	3301      	adds	r3, #1
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    139a:	4618      	mov	r0, r3
    139c:	f810 2b01 	ldrb.w	r2, [r0], #1
    13a0:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    13a4:	2f09      	cmp	r7, #9
    13a6:	f240 808e 	bls.w	14c6 <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
    13aa:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
    13ae:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
    13b0:	f3c2 0040 	ubfx	r0, r2, #1, #1
    13b4:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
    13b8:	f361 0241 	bfi	r2, r1, #1, #1
    13bc:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    13c0:	e05a      	b.n	1478 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
    13c2:	f10a 0702 	add.w	r7, sl, #2
    13c6:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
    13ca:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    13ce:	07d9      	lsls	r1, r3, #31
    13d0:	f140 8149 	bpl.w	1666 <cbvprintf+0x3da>
			width = va_arg(ap, int);
    13d4:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
    13d8:	f1b9 0f00 	cmp.w	r9, #0
    13dc:	da07      	bge.n	13ee <cbvprintf+0x162>
				conv->flag_dash = true;
    13de:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				width = -width;
    13e2:	f1c9 0900 	rsb	r9, r9, #0
				conv->flag_dash = true;
    13e6:	f042 0204 	orr.w	r2, r2, #4
    13ea:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
		if (conv->prec_star) {
    13ee:	075a      	lsls	r2, r3, #29
    13f0:	f140 8142 	bpl.w	1678 <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
    13f4:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
    13f8:	f1b8 0f00 	cmp.w	r8, #0
    13fc:	f280 8141 	bge.w	1682 <cbvprintf+0x3f6>
				conv->prec_present = false;
    1400:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1404:	f36f 0341 	bfc	r3, #1, #1
    1408:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
    140c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    1410:	e137      	b.n	1682 <cbvprintf+0x3f6>
		switch (*sp) {
    1412:	2b2d      	cmp	r3, #45	; 0x2d
    1414:	d00c      	beq.n	1430 <cbvprintf+0x1a4>
    1416:	2b30      	cmp	r3, #48	; 0x30
    1418:	f47f af6d 	bne.w	12f6 <cbvprintf+0x6a>
			conv->flag_zero = true;
    141c:	2201      	movs	r2, #1
	} while (loop);
    141e:	e75c      	b.n	12da <cbvprintf+0x4e>
			conv->flag_plus = true;
    1420:	f04f 0c01 	mov.w	ip, #1
    1424:	e759      	b.n	12da <cbvprintf+0x4e>
			conv->flag_space = true;
    1426:	f04f 0e01 	mov.w	lr, #1
    142a:	e756      	b.n	12da <cbvprintf+0x4e>
			conv->flag_hash = true;
    142c:	2001      	movs	r0, #1
    142e:	e754      	b.n	12da <cbvprintf+0x4e>
		switch (*sp) {
    1430:	2601      	movs	r6, #1
    1432:	e752      	b.n	12da <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
    1434:	4633      	mov	r3, r6
    1436:	fb0c 0202 	mla	r2, ip, r2, r0
    143a:	3a30      	subs	r2, #48	; 0x30
    143c:	461e      	mov	r6, r3
    143e:	f816 0b01 	ldrb.w	r0, [r6], #1
    1442:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    1446:	2f09      	cmp	r7, #9
    1448:	d9f4      	bls.n	1434 <cbvprintf+0x1a8>
	if (sp != wp) {
    144a:	4299      	cmp	r1, r3
    144c:	d093      	beq.n	1376 <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    144e:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
    1452:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
    1454:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    1456:	f362 0141 	bfi	r1, r2, #1, #1
    145a:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
    145e:	e78a      	b.n	1376 <cbvprintf+0xea>
    1460:	460b      	mov	r3, r1
	size_t val = 0;
    1462:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    1464:	f04f 0c0a 	mov.w	ip, #10
    1468:	e7e8      	b.n	143c <cbvprintf+0x1b0>
		conv->prec_star = true;
    146a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		return ++sp;
    146e:	3302      	adds	r3, #2
		conv->prec_star = true;
    1470:	f042 0204 	orr.w	r2, r2, #4
    1474:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	switch (*sp) {
    1478:	461f      	mov	r7, r3
    147a:	f817 2b01 	ldrb.w	r2, [r7], #1
    147e:	2a6c      	cmp	r2, #108	; 0x6c
    1480:	d041      	beq.n	1506 <cbvprintf+0x27a>
    1482:	d825      	bhi.n	14d0 <cbvprintf+0x244>
    1484:	2a68      	cmp	r2, #104	; 0x68
    1486:	d02b      	beq.n	14e0 <cbvprintf+0x254>
    1488:	2a6a      	cmp	r2, #106	; 0x6a
    148a:	d046      	beq.n	151a <cbvprintf+0x28e>
    148c:	2a4c      	cmp	r2, #76	; 0x4c
    148e:	d04c      	beq.n	152a <cbvprintf+0x29e>
    1490:	461f      	mov	r7, r3
	conv->specifier = *sp++;
    1492:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    1496:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	switch (conv->specifier) {
    149a:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
    149c:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
    14a0:	f200 80d9 	bhi.w	1656 <cbvprintf+0x3ca>
    14a4:	2a57      	cmp	r2, #87	; 0x57
    14a6:	d84d      	bhi.n	1544 <cbvprintf+0x2b8>
    14a8:	2a41      	cmp	r2, #65	; 0x41
    14aa:	d003      	beq.n	14b4 <cbvprintf+0x228>
    14ac:	3a45      	subs	r2, #69	; 0x45
    14ae:	2a02      	cmp	r2, #2
    14b0:	f200 80d1 	bhi.w	1656 <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
    14b4:	2204      	movs	r2, #4
    14b6:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    14ba:	f362 0302 	bfi	r3, r2, #0, #3
    14be:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
    14c2:	2301      	movs	r3, #1
			break;
    14c4:	e09e      	b.n	1604 <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
    14c6:	fb06 2101 	mla	r1, r6, r1, r2
    14ca:	4603      	mov	r3, r0
    14cc:	3930      	subs	r1, #48	; 0x30
    14ce:	e764      	b.n	139a <cbvprintf+0x10e>
	switch (*sp) {
    14d0:	2a74      	cmp	r2, #116	; 0x74
    14d2:	d026      	beq.n	1522 <cbvprintf+0x296>
    14d4:	2a7a      	cmp	r2, #122	; 0x7a
    14d6:	d1db      	bne.n	1490 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
    14d8:	2206      	movs	r2, #6
    14da:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    14de:	e00d      	b.n	14fc <cbvprintf+0x270>
		if (*++sp == 'h') {
    14e0:	785a      	ldrb	r2, [r3, #1]
    14e2:	2a68      	cmp	r2, #104	; 0x68
    14e4:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    14e8:	d106      	bne.n	14f8 <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
    14ea:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    14ec:	f361 02c6 	bfi	r2, r1, #3, #4
    14f0:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
    14f4:	1c9f      	adds	r7, r3, #2
    14f6:	e7cc      	b.n	1492 <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
    14f8:	4613      	mov	r3, r2
    14fa:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    14fc:	f362 03c6 	bfi	r3, r2, #3, #4
    1500:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
    1504:	e7c5      	b.n	1492 <cbvprintf+0x206>
		if (*++sp == 'l') {
    1506:	785a      	ldrb	r2, [r3, #1]
    1508:	2a6c      	cmp	r2, #108	; 0x6c
    150a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    150e:	d101      	bne.n	1514 <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
    1510:	2104      	movs	r1, #4
    1512:	e7eb      	b.n	14ec <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
    1514:	4613      	mov	r3, r2
    1516:	2203      	movs	r2, #3
    1518:	e7f0      	b.n	14fc <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
    151a:	2205      	movs	r2, #5
    151c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1520:	e7ec      	b.n	14fc <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
    1522:	2207      	movs	r2, #7
    1524:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1528:	e7e8      	b.n	14fc <cbvprintf+0x270>
		conv->unsupported = true;
    152a:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    152e:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    1532:	f023 0302 	bic.w	r3, r3, #2
    1536:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    153a:	f043 0302 	orr.w	r3, r3, #2
    153e:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
    1542:	e7a6      	b.n	1492 <cbvprintf+0x206>
    1544:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    1548:	2920      	cmp	r1, #32
    154a:	f200 8084 	bhi.w	1656 <cbvprintf+0x3ca>
    154e:	a001      	add	r0, pc, #4	; (adr r0, 1554 <cbvprintf+0x2c8>)
    1550:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    1554:	00001619 	.word	0x00001619
    1558:	00001657 	.word	0x00001657
    155c:	00001657 	.word	0x00001657
    1560:	00001657 	.word	0x00001657
    1564:	00001657 	.word	0x00001657
    1568:	00001657 	.word	0x00001657
    156c:	00001657 	.word	0x00001657
    1570:	00001657 	.word	0x00001657
    1574:	00001657 	.word	0x00001657
    1578:	000014b5 	.word	0x000014b5
    157c:	00001657 	.word	0x00001657
    1580:	00001619 	.word	0x00001619
    1584:	000015d9 	.word	0x000015d9
    1588:	000014b5 	.word	0x000014b5
    158c:	000014b5 	.word	0x000014b5
    1590:	000014b5 	.word	0x000014b5
    1594:	00001657 	.word	0x00001657
    1598:	000015d9 	.word	0x000015d9
    159c:	00001657 	.word	0x00001657
    15a0:	00001657 	.word	0x00001657
    15a4:	00001657 	.word	0x00001657
    15a8:	00001657 	.word	0x00001657
    15ac:	00001621 	.word	0x00001621
    15b0:	00001619 	.word	0x00001619
    15b4:	0000163d 	.word	0x0000163d
    15b8:	00001657 	.word	0x00001657
    15bc:	00001657 	.word	0x00001657
    15c0:	0000163d 	.word	0x0000163d
    15c4:	00001657 	.word	0x00001657
    15c8:	00001619 	.word	0x00001619
    15cc:	00001657 	.word	0x00001657
    15d0:	00001657 	.word	0x00001657
    15d4:	00001619 	.word	0x00001619
		conv->specifier_cat = SPECIFIER_SINT;
    15d8:	2001      	movs	r0, #1
    15da:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    15de:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    15e2:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    15e6:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    15e8:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
    15ec:	bf02      	ittt	eq
    15ee:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
    15f2:	f041 0101 	orreq.w	r1, r1, #1
    15f6:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
    15fa:	2a63      	cmp	r2, #99	; 0x63
    15fc:	d131      	bne.n	1662 <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
    15fe:	3b00      	subs	r3, #0
    1600:	bf18      	it	ne
    1602:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    1604:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    1608:	f3c2 0140 	ubfx	r1, r2, #1, #1
    160c:	430b      	orrs	r3, r1
    160e:	f363 0241 	bfi	r2, r3, #1, #1
    1612:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    1616:	e6d8      	b.n	13ca <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
    1618:	2002      	movs	r0, #2
    161a:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    161e:	e7de      	b.n	15de <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
    1620:	2103      	movs	r1, #3
    1622:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    1626:	f003 0378 	and.w	r3, r3, #120	; 0x78
    162a:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    162e:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    1632:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    1634:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    1638:	4143      	adcs	r3, r0
    163a:	e7e3      	b.n	1604 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
    163c:	2103      	movs	r1, #3
    163e:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    1642:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    1646:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
    164a:	bf14      	ite	ne
    164c:	2301      	movne	r3, #1
    164e:	2300      	moveq	r3, #0
		conv->specifier_cat = SPECIFIER_PTR;
    1650:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    1654:	e7d6      	b.n	1604 <cbvprintf+0x378>
		conv->invalid = true;
    1656:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    165a:	f043 0301 	orr.w	r3, r3, #1
    165e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
    1662:	2300      	movs	r3, #0
    1664:	e7ce      	b.n	1604 <cbvprintf+0x378>
		} else if (conv->width_present) {
    1666:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
    166a:	2a00      	cmp	r2, #0
		int width = -1;
    166c:	bfac      	ite	ge
    166e:	f04f 39ff 	movge.w	r9, #4294967295	; 0xffffffff
			width = conv->width_value;
    1672:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
    1676:	e6ba      	b.n	13ee <cbvprintf+0x162>
		} else if (conv->prec_present) {
    1678:	079b      	lsls	r3, r3, #30
    167a:	f57f aec7 	bpl.w	140c <cbvprintf+0x180>
			precision = conv->prec_value;
    167e:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		conv->pad0_value = 0;
    1682:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    1684:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
    1688:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
			= (enum length_mod_enum)conv->length_mod;
    168c:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		enum specifier_cat_enum specifier_cat
    1690:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    1694:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    1696:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    169a:	d138      	bne.n	170e <cbvprintf+0x482>
			switch (length_mod) {
    169c:	1ecb      	subs	r3, r1, #3
    169e:	2b04      	cmp	r3, #4
    16a0:	d822      	bhi.n	16e8 <cbvprintf+0x45c>
    16a2:	e8df f003 	tbb	[pc, r3]
    16a6:	0903      	.short	0x0903
    16a8:	2109      	.short	0x2109
    16aa:	21          	.byte	0x21
    16ab:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    16ac:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
    16b0:	17da      	asrs	r2, r3, #31
    16b2:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
    16b6:	e006      	b.n	16c6 <cbvprintf+0x43a>
					(sint_value_type)va_arg(ap, intmax_t);
    16b8:	3407      	adds	r4, #7
    16ba:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    16be:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    16c2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
    16c6:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    16ca:	f013 0603 	ands.w	r6, r3, #3
    16ce:	d054      	beq.n	177a <cbvprintf+0x4ee>
			OUTS(sp, fp);
    16d0:	463b      	mov	r3, r7
    16d2:	4652      	mov	r2, sl
    16d4:	4659      	mov	r1, fp
    16d6:	9802      	ldr	r0, [sp, #8]
    16d8:	f006 fafc 	bl	7cd4 <outs>
    16dc:	2800      	cmp	r0, #0
    16de:	f2c0 8140 	blt.w	1962 <cbvprintf+0x6d6>
    16e2:	4405      	add	r5, r0
			continue;
    16e4:	46ba      	mov	sl, r7
    16e6:	e5d9      	b.n	129c <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    16e8:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    16ec:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    16ee:	ea4f 72e3 	mov.w	r2, r3, asr #31
    16f2:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    16f6:	d105      	bne.n	1704 <cbvprintf+0x478>
				value->uint = (unsigned char)value->uint;
    16f8:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
    16fc:	930a      	str	r3, [sp, #40]	; 0x28
    16fe:	2300      	movs	r3, #0
    1700:	930b      	str	r3, [sp, #44]	; 0x2c
    1702:	e7e0      	b.n	16c6 <cbvprintf+0x43a>
			} else if (length_mod == LENGTH_H) {
    1704:	2902      	cmp	r1, #2
    1706:	d1de      	bne.n	16c6 <cbvprintf+0x43a>
				value->sint = (short)value->sint;
    1708:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
    170c:	e7d0      	b.n	16b0 <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
    170e:	2b02      	cmp	r3, #2
    1710:	d123      	bne.n	175a <cbvprintf+0x4ce>
			switch (length_mod) {
    1712:	1ecb      	subs	r3, r1, #3
    1714:	2b04      	cmp	r3, #4
    1716:	d813      	bhi.n	1740 <cbvprintf+0x4b4>
    1718:	e8df f003 	tbb	[pc, r3]
    171c:	120a0a03 	.word	0x120a0a03
    1720:	12          	.byte	0x12
    1721:	00          	.byte	0x00
				if ((!WCHAR_IS_SIGNED)
    1722:	2300      	movs	r3, #0
					value->uint = (wchar_t)va_arg(ap,
    1724:	6822      	ldr	r2, [r4, #0]
				value->sint = va_arg(ap, int);
    1726:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
    1728:	920a      	str	r2, [sp, #40]	; 0x28
    172a:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
    172c:	4604      	mov	r4, r0
    172e:	e7ca      	b.n	16c6 <cbvprintf+0x43a>
					(uint_value_type)va_arg(ap,
    1730:	1de0      	adds	r0, r4, #7
    1732:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
    1736:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    173a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
    173e:	e7f5      	b.n	172c <cbvprintf+0x4a0>
					(uint_value_type)va_arg(ap, size_t);
    1740:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    1744:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    1746:	930a      	str	r3, [sp, #40]	; 0x28
    1748:	f04f 0300 	mov.w	r3, #0
    174c:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
    174e:	d0d3      	beq.n	16f8 <cbvprintf+0x46c>
			} else if (length_mod == LENGTH_H) {
    1750:	2902      	cmp	r1, #2
    1752:	d1b8      	bne.n	16c6 <cbvprintf+0x43a>
				value->uint = (unsigned short)value->uint;
    1754:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    1758:	e7d0      	b.n	16fc <cbvprintf+0x470>
		} else if (specifier_cat == SPECIFIER_FP) {
    175a:	2b04      	cmp	r3, #4
    175c:	d107      	bne.n	176e <cbvprintf+0x4e2>
					(sint_value_type)va_arg(ap, long long);
    175e:	3407      	adds	r4, #7
    1760:	f024 0407 	bic.w	r4, r4, #7
    1764:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->ldbl = va_arg(ap, long double);
    1768:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    176c:	e7ab      	b.n	16c6 <cbvprintf+0x43a>
		} else if (specifier_cat == SPECIFIER_PTR) {
    176e:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    1770:	bf04      	itt	eq
    1772:	f854 3b04 	ldreq.w	r3, [r4], #4
    1776:	930a      	streq	r3, [sp, #40]	; 0x28
    1778:	e7a5      	b.n	16c6 <cbvprintf+0x43a>
		switch (conv->specifier) {
    177a:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    177e:	2878      	cmp	r0, #120	; 0x78
    1780:	d8b0      	bhi.n	16e4 <cbvprintf+0x458>
    1782:	2862      	cmp	r0, #98	; 0x62
    1784:	d822      	bhi.n	17cc <cbvprintf+0x540>
    1786:	2825      	cmp	r0, #37	; 0x25
    1788:	f43f ad91 	beq.w	12ae <cbvprintf+0x22>
    178c:	2858      	cmp	r0, #88	; 0x58
    178e:	d1a9      	bne.n	16e4 <cbvprintf+0x458>
			bps = encode_uint(value->uint, conv, buf, bpe);
    1790:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    1794:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    1798:	9300      	str	r3, [sp, #0]
    179a:	aa0c      	add	r2, sp, #48	; 0x30
    179c:	ab04      	add	r3, sp, #16
    179e:	f006 fa53 	bl	7c48 <encode_uint>
    17a2:	4682      	mov	sl, r0
			if (precision >= 0) {
    17a4:	f1b8 0f00 	cmp.w	r8, #0
    17a8:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    17ac:	db0c      	blt.n	17c8 <cbvprintf+0x53c>
				conv->flag_zero = false;
    17ae:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
    17b2:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
    17b6:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    17ba:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    17bc:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
    17c0:	d902      	bls.n	17c8 <cbvprintf+0x53c>
					conv->pad0_value = precision - (int)len;
    17c2:	eba8 0303 	sub.w	r3, r8, r3
    17c6:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
    17c8:	4680      	mov	r8, r0
    17ca:	e03d      	b.n	1848 <cbvprintf+0x5bc>
    17cc:	3863      	subs	r0, #99	; 0x63
    17ce:	2815      	cmp	r0, #21
    17d0:	d888      	bhi.n	16e4 <cbvprintf+0x458>
    17d2:	a201      	add	r2, pc, #4	; (adr r2, 17d8 <cbvprintf+0x54c>)
    17d4:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    17d8:	00001859 	.word	0x00001859
    17dc:	000018bd 	.word	0x000018bd
    17e0:	000016e5 	.word	0x000016e5
    17e4:	000016e5 	.word	0x000016e5
    17e8:	000016e5 	.word	0x000016e5
    17ec:	000016e5 	.word	0x000016e5
    17f0:	000018bd 	.word	0x000018bd
    17f4:	000016e5 	.word	0x000016e5
    17f8:	000016e5 	.word	0x000016e5
    17fc:	000016e5 	.word	0x000016e5
    1800:	000016e5 	.word	0x000016e5
    1804:	00001917 	.word	0x00001917
    1808:	000018e5 	.word	0x000018e5
    180c:	000018e9 	.word	0x000018e9
    1810:	000016e5 	.word	0x000016e5
    1814:	000016e5 	.word	0x000016e5
    1818:	00001831 	.word	0x00001831
    181c:	000016e5 	.word	0x000016e5
    1820:	000018e5 	.word	0x000018e5
    1824:	000016e5 	.word	0x000016e5
    1828:	000016e5 	.word	0x000016e5
    182c:	000018e5 	.word	0x000018e5
			if (precision >= 0) {
    1830:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    1834:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
    1838:	db0a      	blt.n	1850 <cbvprintf+0x5c4>
				len = strnlen(bps, precision);
    183a:	4641      	mov	r1, r8
    183c:	4650      	mov	r0, sl
    183e:	f006 fd85 	bl	834c <strnlen>
		char sign = 0;
    1842:	2600      	movs	r6, #0
			bpe = bps + len;
    1844:	eb0a 0800 	add.w	r8, sl, r0
		if (bps == NULL) {
    1848:	f1ba 0f00 	cmp.w	sl, #0
    184c:	d10c      	bne.n	1868 <cbvprintf+0x5dc>
    184e:	e749      	b.n	16e4 <cbvprintf+0x458>
				len = strlen(bps);
    1850:	4650      	mov	r0, sl
    1852:	f006 fd74 	bl	833e <strlen>
    1856:	e7f4      	b.n	1842 <cbvprintf+0x5b6>
			break;
    1858:	2600      	movs	r6, #0
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    185a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			bps = buf;
    185c:	f10d 0a10 	add.w	sl, sp, #16
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    1860:	f88d 3010 	strb.w	r3, [sp, #16]
			bpe = buf + 1;
    1864:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
    1868:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
    186c:	b106      	cbz	r6, 1870 <cbvprintf+0x5e4>
			nj_len += 1U;
    186e:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    1870:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    1874:	06d0      	lsls	r0, r2, #27
    1876:	d568      	bpl.n	194a <cbvprintf+0x6be>
			nj_len += 2U;
    1878:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    187a:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    187c:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    187e:	bf48      	it	mi
    1880:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    1882:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    1884:	bf48      	it	mi
    1886:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    1888:	f1b9 0f00 	cmp.w	r9, #0
    188c:	dd76      	ble.n	197c <cbvprintf+0x6f0>
			if (!conv->flag_dash) {
    188e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    1892:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    1896:	f3c2 0380 	ubfx	r3, r2, #2, #1
    189a:	9303      	str	r3, [sp, #12]
    189c:	0753      	lsls	r3, r2, #29
    189e:	d46d      	bmi.n	197c <cbvprintf+0x6f0>
				if (conv->flag_zero) {
    18a0:	0650      	lsls	r0, r2, #25
    18a2:	d561      	bpl.n	1968 <cbvprintf+0x6dc>
					if (sign != 0) {
    18a4:	b146      	cbz	r6, 18b8 <cbvprintf+0x62c>
						OUTC(sign);
    18a6:	4659      	mov	r1, fp
    18a8:	4630      	mov	r0, r6
    18aa:	9b02      	ldr	r3, [sp, #8]
    18ac:	4798      	blx	r3
    18ae:	2800      	cmp	r0, #0
    18b0:	db57      	blt.n	1962 <cbvprintf+0x6d6>
						sign = 0;
    18b2:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    18b4:	3501      	adds	r5, #1
						sign = 0;
    18b6:	461e      	mov	r6, r3
					pad = '0';
    18b8:	2330      	movs	r3, #48	; 0x30
    18ba:	e056      	b.n	196a <cbvprintf+0x6de>
			if (conv->flag_plus) {
    18bc:	071e      	lsls	r6, r3, #28
    18be:	d40f      	bmi.n	18e0 <cbvprintf+0x654>
				sign = ' ';
    18c0:	f013 0610 	ands.w	r6, r3, #16
    18c4:	bf18      	it	ne
    18c6:	2620      	movne	r6, #32
			sint = value->sint;
    18c8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
    18cc:	2b00      	cmp	r3, #0
    18ce:	f6bf af5f 	bge.w	1790 <cbvprintf+0x504>
				value->uint = (uint_value_type)-sint;
    18d2:	4252      	negs	r2, r2
    18d4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
    18d8:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
    18da:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    18de:	e757      	b.n	1790 <cbvprintf+0x504>
				sign = '+';
    18e0:	262b      	movs	r6, #43	; 0x2b
    18e2:	e7f1      	b.n	18c8 <cbvprintf+0x63c>
		switch (conv->specifier) {
    18e4:	2600      	movs	r6, #0
    18e6:	e753      	b.n	1790 <cbvprintf+0x504>
			if (value->ptr != NULL) {
    18e8:	980a      	ldr	r0, [sp, #40]	; 0x28
    18ea:	b340      	cbz	r0, 193e <cbvprintf+0x6b2>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    18ec:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    18f0:	9300      	str	r3, [sp, #0]
    18f2:	2100      	movs	r1, #0
    18f4:	ab04      	add	r3, sp, #16
    18f6:	aa0c      	add	r2, sp, #48	; 0x30
    18f8:	f006 f9a6 	bl	7c48 <encode_uint>
				conv->altform_0c = true;
    18fc:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1900:	4682      	mov	sl, r0
				conv->altform_0c = true;
    1902:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    1906:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    190a:	f043 0310 	orr.w	r3, r3, #16
		char sign = 0;
    190e:	2600      	movs	r6, #0
				conv->altform_0c = true;
    1910:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
				goto prec_int_pad0;
    1914:	e746      	b.n	17a4 <cbvprintf+0x518>
				store_count(conv, value->ptr, count);
    1916:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    1918:	2907      	cmp	r1, #7
    191a:	f63f aee3 	bhi.w	16e4 <cbvprintf+0x458>
    191e:	e8df f001 	tbb	[pc, r1]
    1922:	040c      	.short	0x040c
    1924:	08080c06 	.word	0x08080c06
    1928:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    192a:	701d      	strb	r5, [r3, #0]
		break;
    192c:	e6da      	b.n	16e4 <cbvprintf+0x458>
		*(short *)dp = (short)count;
    192e:	801d      	strh	r5, [r3, #0]
		break;
    1930:	e6d8      	b.n	16e4 <cbvprintf+0x458>
		*(intmax_t *)dp = (intmax_t)count;
    1932:	17ea      	asrs	r2, r5, #31
    1934:	e9c3 5200 	strd	r5, r2, [r3]
		break;
    1938:	e6d4      	b.n	16e4 <cbvprintf+0x458>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    193a:	601d      	str	r5, [r3, #0]
		break;
    193c:	e6d2      	b.n	16e4 <cbvprintf+0x458>
			bps = "(nil)";
    193e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 1a08 <cbvprintf+0x77c>
    1942:	4606      	mov	r6, r0
			bpe = bps + 5;
    1944:	f10a 0805 	add.w	r8, sl, #5
    1948:	e78e      	b.n	1868 <cbvprintf+0x5dc>
		} else if (conv->altform_0) {
    194a:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    194c:	bf48      	it	mi
    194e:	3301      	addmi	r3, #1
    1950:	e793      	b.n	187a <cbvprintf+0x5ee>
					OUTC(pad);
    1952:	4618      	mov	r0, r3
    1954:	9303      	str	r3, [sp, #12]
    1956:	4659      	mov	r1, fp
    1958:	9b02      	ldr	r3, [sp, #8]
    195a:	4798      	blx	r3
    195c:	2800      	cmp	r0, #0
    195e:	9b03      	ldr	r3, [sp, #12]
    1960:	da04      	bge.n	196c <cbvprintf+0x6e0>
#undef OUTS
#undef OUTC
}
    1962:	b011      	add	sp, #68	; 0x44
    1964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    1968:	2320      	movs	r3, #32
    196a:	444d      	add	r5, r9
    196c:	464a      	mov	r2, r9
				while (width-- > 0) {
    196e:	2a00      	cmp	r2, #0
    1970:	eba5 0109 	sub.w	r1, r5, r9
    1974:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    1978:	dceb      	bgt.n	1952 <cbvprintf+0x6c6>
    197a:	460d      	mov	r5, r1
		if (sign != 0) {
    197c:	b136      	cbz	r6, 198c <cbvprintf+0x700>
			OUTC(sign);
    197e:	4659      	mov	r1, fp
    1980:	4630      	mov	r0, r6
    1982:	9b02      	ldr	r3, [sp, #8]
    1984:	4798      	blx	r3
    1986:	2800      	cmp	r0, #0
    1988:	dbeb      	blt.n	1962 <cbvprintf+0x6d6>
    198a:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    198c:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    1990:	06d9      	lsls	r1, r3, #27
    1992:	d401      	bmi.n	1998 <cbvprintf+0x70c>
    1994:	071a      	lsls	r2, r3, #28
    1996:	d506      	bpl.n	19a6 <cbvprintf+0x71a>
				OUTC('0');
    1998:	4659      	mov	r1, fp
    199a:	2030      	movs	r0, #48	; 0x30
    199c:	9b02      	ldr	r3, [sp, #8]
    199e:	4798      	blx	r3
    19a0:	2800      	cmp	r0, #0
    19a2:	dbde      	blt.n	1962 <cbvprintf+0x6d6>
    19a4:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    19a6:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    19aa:	06db      	lsls	r3, r3, #27
    19ac:	d507      	bpl.n	19be <cbvprintf+0x732>
				OUTC(conv->specifier);
    19ae:	4659      	mov	r1, fp
    19b0:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    19b4:	9b02      	ldr	r3, [sp, #8]
    19b6:	4798      	blx	r3
    19b8:	2800      	cmp	r0, #0
    19ba:	dbd2      	blt.n	1962 <cbvprintf+0x6d6>
    19bc:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    19be:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    19c0:	442e      	add	r6, r5
    19c2:	1b73      	subs	r3, r6, r5
    19c4:	2b00      	cmp	r3, #0
    19c6:	dc16      	bgt.n	19f6 <cbvprintf+0x76a>
			OUTS(bps, bpe);
    19c8:	4643      	mov	r3, r8
    19ca:	4652      	mov	r2, sl
    19cc:	4659      	mov	r1, fp
    19ce:	9802      	ldr	r0, [sp, #8]
    19d0:	f006 f980 	bl	7cd4 <outs>
    19d4:	2800      	cmp	r0, #0
    19d6:	dbc4      	blt.n	1962 <cbvprintf+0x6d6>
    19d8:	4405      	add	r5, r0
		while (width > 0) {
    19da:	44a9      	add	r9, r5
    19dc:	eba9 0305 	sub.w	r3, r9, r5
    19e0:	2b00      	cmp	r3, #0
    19e2:	f77f ae7f 	ble.w	16e4 <cbvprintf+0x458>
			OUTC(' ');
    19e6:	4659      	mov	r1, fp
    19e8:	2020      	movs	r0, #32
    19ea:	9b02      	ldr	r3, [sp, #8]
    19ec:	4798      	blx	r3
    19ee:	2800      	cmp	r0, #0
    19f0:	dbb7      	blt.n	1962 <cbvprintf+0x6d6>
    19f2:	3501      	adds	r5, #1
			--width;
    19f4:	e7f2      	b.n	19dc <cbvprintf+0x750>
				OUTC('0');
    19f6:	4659      	mov	r1, fp
    19f8:	2030      	movs	r0, #48	; 0x30
    19fa:	9b02      	ldr	r3, [sp, #8]
    19fc:	4798      	blx	r3
    19fe:	2800      	cmp	r0, #0
    1a00:	dbaf      	blt.n	1962 <cbvprintf+0x6d6>
    1a02:	3501      	adds	r5, #1
    1a04:	e7dd      	b.n	19c2 <cbvprintf+0x736>
    1a06:	bf00      	nop
    1a08:	0000b1e8 	.word	0x0000b1e8

00001a0c <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

void sys_reboot(int type)
{
    1a0c:	4604      	mov	r4, r0
    1a0e:	b508      	push	{r3, lr}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
    1a10:	f04f 0220 	mov.w	r2, #32
    1a14:	f3ef 8311 	mrs	r3, BASEPRI
    1a18:	f382 8811 	msr	BASEPRI, r2
    1a1c:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
    1a20:	f006 fbe0 	bl	81e4 <sys_clock_disable>
#endif

	sys_arch_reboot(type);
    1a24:	4620      	mov	r0, r4
    1a26:	f001 f8ad 	bl	2b84 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    1a2a:	4803      	ldr	r0, [pc, #12]	; (1a38 <sys_reboot+0x2c>)
    1a2c:	f005 ff16 	bl	785c <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    1a30:	f000 fdfe 	bl	2630 <arch_cpu_idle>
    1a34:	e7fc      	b.n	1a30 <sys_reboot+0x24>
    1a36:	bf00      	nop
    1a38:	0000b20e 	.word	0x0000b20e

00001a3c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    1a3c:	b510      	push	{r4, lr}
    1a3e:	4807      	ldr	r0, [pc, #28]	; (1a5c <uart_console_init+0x20>)
    1a40:	f003 f896 	bl	4b70 <z_impl_device_get_binding>
	__stdout_hook_install(console_out);
    1a44:	4c06      	ldr	r4, [pc, #24]	; (1a60 <uart_console_init+0x24>)

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    1a46:	4b07      	ldr	r3, [pc, #28]	; (1a64 <uart_console_init+0x28>)
    1a48:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
    1a4a:	4620      	mov	r0, r4
    1a4c:	f001 fa0c 	bl	2e68 <__stdout_hook_install>
	__printk_hook_install(console_out);
    1a50:	4620      	mov	r0, r4
    1a52:	f7ff fa35 	bl	ec0 <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
    1a56:	2000      	movs	r0, #0
    1a58:	bd10      	pop	{r4, pc}
    1a5a:	bf00      	nop
    1a5c:	0000b237 	.word	0x0000b237
    1a60:	00001a69 	.word	0x00001a69
    1a64:	200011e4 	.word	0x200011e4

00001a68 <console_out>:
	if ('\n' == c) {
    1a68:	280a      	cmp	r0, #10
{
    1a6a:	b538      	push	{r3, r4, r5, lr}
    1a6c:	4604      	mov	r4, r0
    1a6e:	4d07      	ldr	r5, [pc, #28]	; (1a8c <console_out+0x24>)
	if ('\n' == c) {
    1a70:	d104      	bne.n	1a7c <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    1a72:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    1a74:	6883      	ldr	r3, [r0, #8]
    1a76:	210d      	movs	r1, #13
    1a78:	685b      	ldr	r3, [r3, #4]
    1a7a:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    1a7c:	6828      	ldr	r0, [r5, #0]
    1a7e:	6883      	ldr	r3, [r0, #8]
    1a80:	b2e1      	uxtb	r1, r4
    1a82:	685b      	ldr	r3, [r3, #4]
    1a84:	4798      	blx	r3
}
    1a86:	4620      	mov	r0, r4
    1a88:	bd38      	pop	{r3, r4, r5, pc}
    1a8a:	bf00      	nop
    1a8c:	200011e4 	.word	0x200011e4

00001a90 <uart_pipe_isr>:
		recv_buf = app_cb(recv_buf, &recv_off);
	}
}

static void uart_pipe_isr(const struct device *dev, void *user_data)
{
    1a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1a92:	4604      	mov	r4, r0
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	if (api->irq_update) {
    1a94:	6883      	ldr	r3, [r0, #8]
    1a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1a98:	b103      	cbz	r3, 1a9c <uart_pipe_isr+0xc>
		return api->irq_update(dev);
    1a9a:	4798      	blx	r3
	if (api->irq_is_pending)	{
    1a9c:	68a3      	ldr	r3, [r4, #8]
    1a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1aa0:	b31b      	cbz	r3, 1aea <uart_pipe_isr+0x5a>
		return api->irq_is_pending(dev);
    1aa2:	4620      	mov	r0, r4
    1aa4:	4798      	blx	r3
	ARG_UNUSED(user_data);

	uart_irq_update(dev);

	if (uart_irq_is_pending(dev)) {
    1aa6:	b300      	cbz	r0, 1aea <uart_pipe_isr+0x5a>
	if (api->irq_rx_ready) {
    1aa8:	68a3      	ldr	r3, [r4, #8]
    1aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    1aac:	b1eb      	cbz	r3, 1aea <uart_pipe_isr+0x5a>
		return api->irq_rx_ready(dev);
    1aae:	4620      	mov	r0, r4
    1ab0:	4798      	blx	r3
		if (uart_irq_rx_ready(dev)) {
    1ab2:	b1d0      	cbz	r0, 1aea <uart_pipe_isr+0x5a>
		got = uart_fifo_read(uart_pipe_dev, recv_buf + recv_off, avail);
    1ab4:	4e0d      	ldr	r6, [pc, #52]	; (1aec <uart_pipe_isr+0x5c>)
		int avail = recv_buf_len - recv_off;
    1ab6:	4c0e      	ldr	r4, [pc, #56]	; (1af0 <uart_pipe_isr+0x60>)
    1ab8:	4f0e      	ldr	r7, [pc, #56]	; (1af4 <uart_pipe_isr+0x64>)
		got = uart_fifo_read(uart_pipe_dev, recv_buf + recv_off, avail);
    1aba:	6830      	ldr	r0, [r6, #0]
	if (api->fifo_read) {
    1abc:	6883      	ldr	r3, [r0, #8]
    1abe:	699b      	ldr	r3, [r3, #24]
    1ac0:	b19b      	cbz	r3, 1aea <uart_pipe_isr+0x5a>
    1ac2:	4d0d      	ldr	r5, [pc, #52]	; (1af8 <uart_pipe_isr+0x68>)
		int avail = recv_buf_len - recv_off;
    1ac4:	6821      	ldr	r1, [r4, #0]
    1ac6:	683a      	ldr	r2, [r7, #0]
		return api->fifo_read(dev, rx_data, size);
    1ac8:	f8d5 c000 	ldr.w	ip, [r5]
    1acc:	1a52      	subs	r2, r2, r1
    1ace:	4461      	add	r1, ip
    1ad0:	4798      	blx	r3
		if (got <= 0) {
    1ad2:	2800      	cmp	r0, #0
    1ad4:	dd09      	ble.n	1aea <uart_pipe_isr+0x5a>
		recv_off += got;
    1ad6:	6823      	ldr	r3, [r4, #0]
		recv_buf = app_cb(recv_buf, &recv_off);
    1ad8:	4621      	mov	r1, r4
		recv_off += got;
    1ada:	4418      	add	r0, r3
		recv_buf = app_cb(recv_buf, &recv_off);
    1adc:	4b07      	ldr	r3, [pc, #28]	; (1afc <uart_pipe_isr+0x6c>)
		recv_off += got;
    1ade:	6020      	str	r0, [r4, #0]
		recv_buf = app_cb(recv_buf, &recv_off);
    1ae0:	681b      	ldr	r3, [r3, #0]
    1ae2:	6828      	ldr	r0, [r5, #0]
    1ae4:	4798      	blx	r3
    1ae6:	6028      	str	r0, [r5, #0]
	for (;;) {
    1ae8:	e7e7      	b.n	1aba <uart_pipe_isr+0x2a>
			uart_pipe_rx(dev);
		}
	}
}
    1aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1aec:	200011f8 	.word	0x200011f8
    1af0:	200011f4 	.word	0x200011f4
    1af4:	200011f0 	.word	0x200011f0
    1af8:	200011ec 	.word	0x200011ec
    1afc:	200011e8 	.word	0x200011e8

00001b00 <uart_pipe_send>:

int uart_pipe_send(const uint8_t *data, int len)
{
    1b00:	b570      	push	{r4, r5, r6, lr}
    1b02:	4604      	mov	r4, r0
	LOG_HEXDUMP_DBG(data, len, "TX");

	while (len--)  {
		uart_poll_out(uart_pipe_dev, *data++);
    1b04:	4e06      	ldr	r6, [pc, #24]	; (1b20 <uart_pipe_send+0x20>)
    1b06:	1845      	adds	r5, r0, r1
	while (len--)  {
    1b08:	42ac      	cmp	r4, r5
    1b0a:	d101      	bne.n	1b10 <uart_pipe_send+0x10>
	}

	return 0;
}
    1b0c:	2000      	movs	r0, #0
    1b0e:	bd70      	pop	{r4, r5, r6, pc}
		uart_poll_out(uart_pipe_dev, *data++);
    1b10:	6830      	ldr	r0, [r6, #0]
    1b12:	f814 1b01 	ldrb.w	r1, [r4], #1
	api->poll_out(dev, out_char);
    1b16:	6883      	ldr	r3, [r0, #8]
    1b18:	685b      	ldr	r3, [r3, #4]
    1b1a:	4798      	blx	r3
}
    1b1c:	e7f4      	b.n	1b08 <uart_pipe_send+0x8>
    1b1e:	bf00      	nop
    1b20:	200011f8 	.word	0x200011f8

00001b24 <uart_pipe_register>:
	uart_irq_rx_enable(uart);
}

void uart_pipe_register(uint8_t *buf, size_t len, uart_pipe_recv_cb cb)
{
	recv_buf = buf;
    1b24:	4b17      	ldr	r3, [pc, #92]	; (1b84 <uart_pipe_register+0x60>)
{
    1b26:	b513      	push	{r0, r1, r4, lr}
	recv_buf = buf;
    1b28:	6018      	str	r0, [r3, #0]
	recv_buf_len = len;
    1b2a:	4b17      	ldr	r3, [pc, #92]	; (1b88 <uart_pipe_register+0x64>)
    1b2c:	6019      	str	r1, [r3, #0]
	app_cb = cb;
    1b2e:	4b17      	ldr	r3, [pc, #92]	; (1b8c <uart_pipe_register+0x68>)
    1b30:	601a      	str	r2, [r3, #0]
    1b32:	4817      	ldr	r0, [pc, #92]	; (1b90 <uart_pipe_register+0x6c>)
    1b34:	f003 f81c 	bl	4b70 <z_impl_device_get_binding>

	uart_pipe_dev = device_get_binding(CONFIG_UART_PIPE_ON_DEV_NAME);
    1b38:	4b16      	ldr	r3, [pc, #88]	; (1b94 <uart_pipe_register+0x70>)
    1b3a:	4604      	mov	r4, r0
    1b3c:	6018      	str	r0, [r3, #0]

	if (uart_pipe_dev != NULL) {
    1b3e:	b1f8      	cbz	r0, 1b80 <uart_pipe_register+0x5c>
	if (api->irq_rx_disable) {
    1b40:	6883      	ldr	r3, [r0, #8]
    1b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1b44:	b103      	cbz	r3, 1b48 <uart_pipe_register+0x24>
		api->irq_rx_disable(dev);
    1b46:	4798      	blx	r3
	if (api->irq_tx_disable) {
    1b48:	68a3      	ldr	r3, [r4, #8]
    1b4a:	6a1b      	ldr	r3, [r3, #32]
    1b4c:	b10b      	cbz	r3, 1b52 <uart_pipe_register+0x2e>
		api->irq_tx_disable(dev);
    1b4e:	4620      	mov	r0, r4
    1b50:	4798      	blx	r3
	if (api->fifo_read) {
    1b52:	68a3      	ldr	r3, [r4, #8]
    1b54:	699b      	ldr	r3, [r3, #24]
    1b56:	b133      	cbz	r3, 1b66 <uart_pipe_register+0x42>
		return api->fifo_read(dev, rx_data, size);
    1b58:	2201      	movs	r2, #1
    1b5a:	4620      	mov	r0, r4
    1b5c:	f10d 0107 	add.w	r1, sp, #7
    1b60:	4798      	blx	r3
	while (uart_fifo_read(uart, &c, 1)) {
    1b62:	2800      	cmp	r0, #0
    1b64:	d1f5      	bne.n	1b52 <uart_pipe_register+0x2e>
static inline void uart_irq_callback_user_data_set(const struct device *dev,
						   uart_irq_callback_user_data_t cb,
						   void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
    1b66:	68a3      	ldr	r3, [r4, #8]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    1b68:	b12b      	cbz	r3, 1b76 <uart_pipe_register+0x52>
    1b6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    1b6c:	b11b      	cbz	r3, 1b76 <uart_pipe_register+0x52>
		api->irq_callback_set(dev, cb, user_data);
    1b6e:	2200      	movs	r2, #0
    1b70:	4620      	mov	r0, r4
    1b72:	4909      	ldr	r1, [pc, #36]	; (1b98 <uart_pipe_register+0x74>)
    1b74:	4798      	blx	r3
	if (api->irq_rx_enable) {
    1b76:	68a3      	ldr	r3, [r4, #8]
    1b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1b7a:	b10b      	cbz	r3, 1b80 <uart_pipe_register+0x5c>
		api->irq_rx_enable(dev);
    1b7c:	4620      	mov	r0, r4
    1b7e:	4798      	blx	r3
		uart_pipe_setup(uart_pipe_dev);
	}
}
    1b80:	b002      	add	sp, #8
    1b82:	bd10      	pop	{r4, pc}
    1b84:	200011ec 	.word	0x200011ec
    1b88:	200011f0 	.word	0x200011f0
    1b8c:	200011e8 	.word	0x200011e8
    1b90:	0000b23e 	.word	0x0000b23e
    1b94:	200011f8 	.word	0x200011f8
    1b98:	00001a91 	.word	0x00001a91

00001b9c <modem_context_sprint_ip_addr>:
#include "modem_context.h"

static struct modem_context *contexts[CONFIG_MODEM_CONTEXT_MAX_NUM];

char *modem_context_sprint_ip_addr(const struct sockaddr *addr)
{
    1b9c:	4601      	mov	r1, r0
	static char buf[NET_IPV6_ADDR_LEN];

	if (addr->sa_family == AF_INET6) {
    1b9e:	8800      	ldrh	r0, [r0, #0]
{
    1ba0:	b510      	push	{r4, lr}
	if (addr->sa_family == AF_INET6) {
    1ba2:	2802      	cmp	r0, #2
    1ba4:	d106      	bne.n	1bb4 <modem_context_sprint_ip_addr+0x18>
	}

	LOG_ERR("Unknown IP address family:%d", addr->sa_family);
	strcpy(buf, "unk");
	return buf;
}
    1ba6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (z_syscall_trap()) {
		return (char *) arch_syscall_invoke4(*(uintptr_t *)&family, *(uintptr_t *)&src, *(uintptr_t *)&dst, *(uintptr_t *)&size, K_SYSCALL_NET_ADDR_NTOP);
	}
#endif
	compiler_barrier();
	return z_impl_net_addr_ntop(family, src, dst, size);
    1baa:	2328      	movs	r3, #40	; 0x28
    1bac:	4a08      	ldr	r2, [pc, #32]	; (1bd0 <modem_context_sprint_ip_addr+0x34>)
    1bae:	3104      	adds	r1, #4
    1bb0:	f002 b9dc 	b.w	3f6c <z_impl_net_addr_ntop>
	if (addr->sa_family == AF_INET) {
    1bb4:	2801      	cmp	r0, #1
    1bb6:	d0f6      	beq.n	1ba6 <modem_context_sprint_ip_addr+0xa>
	LOG_ERR("Unknown IP address family:%d", addr->sa_family);
    1bb8:	4602      	mov	r2, r0
    1bba:	2145      	movs	r1, #69	; 0x45
    1bbc:	4805      	ldr	r0, [pc, #20]	; (1bd4 <modem_context_sprint_ip_addr+0x38>)
    1bbe:	f006 f8ac 	bl	7d1a <z_log_minimal_printk>
	strcpy(buf, "unk");
    1bc2:	4905      	ldr	r1, [pc, #20]	; (1bd8 <modem_context_sprint_ip_addr+0x3c>)
    1bc4:	4802      	ldr	r0, [pc, #8]	; (1bd0 <modem_context_sprint_ip_addr+0x34>)
    1bc6:	f006 fb90 	bl	82ea <strcpy>
}
    1bca:	4801      	ldr	r0, [pc, #4]	; (1bd0 <modem_context_sprint_ip_addr+0x34>)
    1bcc:	bd10      	pop	{r4, pc}
    1bce:	bf00      	nop
    1bd0:	200015fc 	.word	0x200015fc
    1bd4:	0000b24f 	.word	0x0000b24f
    1bd8:	0000b271 	.word	0x0000b271

00001bdc <modem_context_register>:
		return NULL;
	}
}

int modem_context_register(struct modem_context *ctx)
{
    1bdc:	b538      	push	{r3, r4, r5, lr}
	int ret;

	if (!ctx) {
    1bde:	4603      	mov	r3, r0
    1be0:	b950      	cbnz	r0, 1bf8 <modem_context_register+0x1c>
		return -EINVAL;
    1be2:	f06f 0415 	mvn.w	r4, #21
    1be6:	e005      	b.n	1bf4 <modem_context_register+0x18>
			contexts[i] = ctx;
    1be8:	6013      	str	r3, [r2, #0]
	ret = modem_context_get(ctx);
	if (ret < 0) {
		return ret;
	}

	ret = modem_pin_init(ctx);
    1bea:	f006 f8b5 	bl	7d58 <modem_pin_init>
	if (ret < 0) {
    1bee:	1e04      	subs	r4, r0, #0
    1bf0:	db09      	blt.n	1c06 <modem_context_register+0x2a>
		LOG_ERR("modem pin init error: %d", ret);
		return ret;
	}

	return 0;
    1bf2:	462c      	mov	r4, r5
}
    1bf4:	4620      	mov	r0, r4
    1bf6:	bd38      	pop	{r3, r4, r5, pc}
		if (!contexts[i]) {
    1bf8:	4a06      	ldr	r2, [pc, #24]	; (1c14 <modem_context_register+0x38>)
    1bfa:	6815      	ldr	r5, [r2, #0]
    1bfc:	2d00      	cmp	r5, #0
    1bfe:	d0f3      	beq.n	1be8 <modem_context_register+0xc>
	return -ENOMEM;
    1c00:	f06f 040b 	mvn.w	r4, #11
    1c04:	e7f6      	b.n	1bf4 <modem_context_register+0x18>
		LOG_ERR("modem pin init error: %d", ret);
    1c06:	4622      	mov	r2, r4
    1c08:	2145      	movs	r1, #69	; 0x45
    1c0a:	4803      	ldr	r0, [pc, #12]	; (1c18 <modem_context_register+0x3c>)
    1c0c:	f006 f885 	bl	7d1a <z_log_minimal_printk>
		return ret;
    1c10:	e7f0      	b.n	1bf4 <modem_context_register+0x18>
    1c12:	bf00      	nop
    1c14:	200011fc 	.word	0x200011fc
    1c18:	0000b275 	.word	0x0000b275

00001c1c <modem_pin_config>:
				ctx->pins[pin].pin, value);
}

int modem_pin_config(struct modem_context *ctx, uint32_t pin, bool enable)
{
	if (pin >= ctx->pins_len) {
    1c1c:	6983      	ldr	r3, [r0, #24]
{
    1c1e:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (pin >= ctx->pins_len) {
    1c22:	428b      	cmp	r3, r1
    1c24:	f240 810b 	bls.w	1e3e <modem_pin_config+0x222>
		return -ENODEV;
	}

	return gpio_pin_configure(ctx->pins[pin].gpio_port_dev,
    1c28:	6943      	ldr	r3, [r0, #20]
    1c2a:	010c      	lsls	r4, r1, #4
    1c2c:	eb03 1101 	add.w	r1, r3, r1, lsl #4
    1c30:	591d      	ldr	r5, [r3, r4]
    1c32:	7a0f      	ldrb	r7, [r1, #8]
    1c34:	2a00      	cmp	r2, #0
    1c36:	f000 80ff 	beq.w	1e38 <modem_pin_config+0x21c>
    1c3a:	68cc      	ldr	r4, [r1, #12]
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
		(struct gpio_driver_data *)port->data;
	int ret;

	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
    1c3c:	f004 0330 	and.w	r3, r4, #48	; 0x30
    1c40:	2b30      	cmp	r3, #48	; 0x30
	struct gpio_driver_data *data =
    1c42:	f8d5 8010 	ldr.w	r8, [r5, #16]
	const struct gpio_driver_config *const cfg =
    1c46:	e9d5 a901 	ldrd	sl, r9, [r5, #4]
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
    1c4a:	d10e      	bne.n	1c6a <modem_pin_config+0x4e>
    1c4c:	497e      	ldr	r1, [pc, #504]	; (1e48 <modem_pin_config+0x22c>)
    1c4e:	f240 2329 	movw	r3, #553	; 0x229
    1c52:	4a7e      	ldr	r2, [pc, #504]	; (1e4c <modem_pin_config+0x230>)
    1c54:	487e      	ldr	r0, [pc, #504]	; (1e50 <modem_pin_config+0x234>)
    1c56:	f005 fe01 	bl	785c <printk>
    1c5a:	487e      	ldr	r0, [pc, #504]	; (1e54 <modem_pin_config+0x238>)
    1c5c:	f005 fdfe 	bl	785c <printk>
    1c60:	f240 2129 	movw	r1, #553	; 0x229
    1c64:	4879      	ldr	r0, [pc, #484]	; (1e4c <modem_pin_config+0x230>)
    1c66:	f006 f84b 	bl	7d00 <assert_post_action>
		 (GPIO_PULL_UP | GPIO_PULL_DOWN),
		 "Pull Up and Pull Down should not be enabled simultaneously");

	__ASSERT((flags & GPIO_OUTPUT) != 0 || (flags & GPIO_SINGLE_ENDED) == 0,
    1c6a:	f240 2302 	movw	r3, #514	; 0x202
    1c6e:	4023      	ands	r3, r4
    1c70:	2b02      	cmp	r3, #2
    1c72:	d10e      	bne.n	1c92 <modem_pin_config+0x76>
    1c74:	4978      	ldr	r1, [pc, #480]	; (1e58 <modem_pin_config+0x23c>)
    1c76:	f240 232d 	movw	r3, #557	; 0x22d
    1c7a:	4a74      	ldr	r2, [pc, #464]	; (1e4c <modem_pin_config+0x230>)
    1c7c:	4874      	ldr	r0, [pc, #464]	; (1e50 <modem_pin_config+0x234>)
    1c7e:	f005 fded 	bl	785c <printk>
    1c82:	4876      	ldr	r0, [pc, #472]	; (1e5c <modem_pin_config+0x240>)
    1c84:	f005 fdea 	bl	785c <printk>
    1c88:	f240 212d 	movw	r1, #557	; 0x22d
    1c8c:	486f      	ldr	r0, [pc, #444]	; (1e4c <modem_pin_config+0x230>)
    1c8e:	f006 f837 	bl	7d00 <assert_post_action>
		 "Output needs to be enabled for 'Open Drain', 'Open Source' "
		 "mode to be supported");

	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
    1c92:	f004 0306 	and.w	r3, r4, #6
    1c96:	2b04      	cmp	r3, #4
    1c98:	d10b      	bne.n	1cb2 <modem_pin_config+0x96>
    1c9a:	4971      	ldr	r1, [pc, #452]	; (1e60 <modem_pin_config+0x244>)
    1c9c:	486c      	ldr	r0, [pc, #432]	; (1e50 <modem_pin_config+0x234>)
    1c9e:	f240 2331 	movw	r3, #561	; 0x231
    1ca2:	4a6a      	ldr	r2, [pc, #424]	; (1e4c <modem_pin_config+0x230>)
    1ca4:	f005 fdda 	bl	785c <printk>
    1ca8:	f240 2131 	movw	r1, #561	; 0x231
    1cac:	4867      	ldr	r0, [pc, #412]	; (1e4c <modem_pin_config+0x230>)
    1cae:	f006 f827 	bl	7d00 <assert_post_action>
			(flags & GPIO_LINE_OPEN_DRAIN) == 0);

	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) == 0
    1cb2:	f414 6640 	ands.w	r6, r4, #3072	; 0xc00
    1cb6:	d022      	beq.n	1cfe <modem_pin_config+0xe2>
    1cb8:	05a3      	lsls	r3, r4, #22
    1cba:	d40e      	bmi.n	1cda <modem_pin_config+0xbe>
    1cbc:	4969      	ldr	r1, [pc, #420]	; (1e64 <modem_pin_config+0x248>)
    1cbe:	f44f 730d 	mov.w	r3, #564	; 0x234
    1cc2:	4a62      	ldr	r2, [pc, #392]	; (1e4c <modem_pin_config+0x230>)
    1cc4:	4862      	ldr	r0, [pc, #392]	; (1e50 <modem_pin_config+0x234>)
    1cc6:	f005 fdc9 	bl	785c <printk>
    1cca:	4867      	ldr	r0, [pc, #412]	; (1e68 <modem_pin_config+0x24c>)
    1ccc:	f005 fdc6 	bl	785c <printk>
    1cd0:	f44f 710d 	mov.w	r1, #564	; 0x234
    1cd4:	485d      	ldr	r0, [pc, #372]	; (1e4c <modem_pin_config+0x230>)
    1cd6:	f006 f813 	bl	7d00 <assert_post_action>
		 || (flags & GPIO_OUTPUT) != 0,
		 "Output needs to be enabled to be initialized low or high");

	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
    1cda:	f5b6 6f40 	cmp.w	r6, #3072	; 0xc00
    1cde:	d10e      	bne.n	1cfe <modem_pin_config+0xe2>
    1ce0:	4962      	ldr	r1, [pc, #392]	; (1e6c <modem_pin_config+0x250>)
    1ce2:	f44f 730e 	mov.w	r3, #568	; 0x238
    1ce6:	4a59      	ldr	r2, [pc, #356]	; (1e4c <modem_pin_config+0x230>)
    1ce8:	4859      	ldr	r0, [pc, #356]	; (1e50 <modem_pin_config+0x234>)
    1cea:	f005 fdb7 	bl	785c <printk>
    1cee:	4860      	ldr	r0, [pc, #384]	; (1e70 <modem_pin_config+0x254>)
    1cf0:	f005 fdb4 	bl	785c <printk>
    1cf4:	f44f 710e 	mov.w	r1, #568	; 0x238
    1cf8:	4854      	ldr	r0, [pc, #336]	; (1e4c <modem_pin_config+0x230>)
    1cfa:	f006 f801 	bl	7d00 <assert_post_action>
		 != (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH),
		 "Output cannot be initialized low and high");

	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    1cfe:	04e0      	lsls	r0, r4, #19
    1d00:	d504      	bpl.n	1d0c <modem_pin_config+0xf0>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
    1d02:	b11e      	cbz	r6, 1d0c <modem_pin_config+0xf0>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    1d04:	07e1      	lsls	r1, r4, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    1d06:	bf48      	it	mi
    1d08:	f484 6440 	eormi.w	r4, r4, #3072	; 0xc00
	}

	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1d0c:	2601      	movs	r6, #1
    1d0e:	f8da 3000 	ldr.w	r3, [sl]
    1d12:	40be      	lsls	r6, r7
    1d14:	421e      	tst	r6, r3
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    1d16:	f424 5b80 	bic.w	fp, r4, #4096	; 0x1000
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1d1a:	d10e      	bne.n	1d3a <modem_pin_config+0x11e>
    1d1c:	4955      	ldr	r1, [pc, #340]	; (1e74 <modem_pin_config+0x258>)
    1d1e:	f240 2345 	movw	r3, #581	; 0x245
    1d22:	4a4a      	ldr	r2, [pc, #296]	; (1e4c <modem_pin_config+0x230>)
    1d24:	484a      	ldr	r0, [pc, #296]	; (1e50 <modem_pin_config+0x234>)
    1d26:	f005 fd99 	bl	785c <printk>
    1d2a:	4853      	ldr	r0, [pc, #332]	; (1e78 <modem_pin_config+0x25c>)
    1d2c:	f005 fd96 	bl	785c <printk>
    1d30:	f240 2145 	movw	r1, #581	; 0x245
    1d34:	4845      	ldr	r0, [pc, #276]	; (1e4c <modem_pin_config+0x230>)
    1d36:	f005 ffe3 	bl	7d00 <assert_post_action>
	return api->pin_configure(port, pin, flags);
    1d3a:	68ab      	ldr	r3, [r5, #8]
    1d3c:	465a      	mov	r2, fp
    1d3e:	4639      	mov	r1, r7
    1d40:	4628      	mov	r0, r5
    1d42:	681b      	ldr	r3, [r3, #0]
    1d44:	4798      	blx	r3
		 "Unsupported pin");

	ret = gpio_config(port, pin, flags);
	if (ret != 0) {
    1d46:	2800      	cmp	r0, #0
    1d48:	d17b      	bne.n	1e42 <modem_pin_config+0x226>
		return ret;
	}

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
    1d4a:	f8d8 3000 	ldr.w	r3, [r8]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    1d4e:	07e2      	lsls	r2, r4, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    1d50:	bf4c      	ite	mi
    1d52:	4333      	orrmi	r3, r6
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    1d54:	43b3      	bicpl	r3, r6
    1d56:	f8c8 3000 	str.w	r3, [r8]
	}
	if (((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U)
    1d5a:	f414 43c0 	ands.w	r3, r4, #24576	; 0x6000
    1d5e:	d070      	beq.n	1e42 <modem_pin_config+0x226>
	    && (api->pin_interrupt_configure != NULL)) {
    1d60:	f8d9 2018 	ldr.w	r2, [r9, #24]
    1d64:	2a00      	cmp	r2, #0
    1d66:	d06c      	beq.n	1e42 <modem_pin_config+0x226>
	const struct gpio_driver_config *const cfg =
    1d68:	e9d5 b901 	ldrd	fp, r9, [r5, #4]
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
    1d6c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
	const struct gpio_driver_data *const data =
    1d70:	f8d5 a010 	ldr.w	sl, [r5, #16]
		flags &= ~GPIO_INT_DEBOUNCE;
    1d74:	f424 2801 	bic.w	r8, r4, #528384	; 0x81000
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
    1d78:	d10e      	bne.n	1d98 <modem_pin_config+0x17c>
    1d7a:	4940      	ldr	r1, [pc, #256]	; (1e7c <modem_pin_config+0x260>)
    1d7c:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
    1d80:	4a32      	ldr	r2, [pc, #200]	; (1e4c <modem_pin_config+0x230>)
    1d82:	4833      	ldr	r0, [pc, #204]	; (1e50 <modem_pin_config+0x234>)
    1d84:	f005 fd6a 	bl	785c <printk>
    1d88:	483d      	ldr	r0, [pc, #244]	; (1e80 <modem_pin_config+0x264>)
    1d8a:	f005 fd67 	bl	785c <printk>
    1d8e:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
    1d92:	482e      	ldr	r0, [pc, #184]	; (1e4c <modem_pin_config+0x230>)
    1d94:	f005 ffb4 	bl	7d00 <assert_post_action>
	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
    1d98:	f404 23e8 	and.w	r3, r4, #475136	; 0x74000
    1d9c:	f5b3 2fc8 	cmp.w	r3, #409600	; 0x64000
    1da0:	d10e      	bne.n	1dc0 <modem_pin_config+0x1a4>
    1da2:	4938      	ldr	r1, [pc, #224]	; (1e84 <modem_pin_config+0x268>)
    1da4:	f240 13f1 	movw	r3, #497	; 0x1f1
    1da8:	4a28      	ldr	r2, [pc, #160]	; (1e4c <modem_pin_config+0x230>)
    1daa:	4829      	ldr	r0, [pc, #164]	; (1e50 <modem_pin_config+0x234>)
    1dac:	f005 fd56 	bl	785c <printk>
    1db0:	4835      	ldr	r0, [pc, #212]	; (1e88 <modem_pin_config+0x26c>)
    1db2:	f005 fd53 	bl	785c <printk>
    1db6:	f240 11f1 	movw	r1, #497	; 0x1f1
    1dba:	4824      	ldr	r0, [pc, #144]	; (1e4c <modem_pin_config+0x230>)
    1dbc:	f005 ffa0 	bl	7d00 <assert_post_action>
	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
    1dc0:	f404 23c8 	and.w	r3, r4, #409600	; 0x64000
    1dc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    1dc8:	d10e      	bne.n	1de8 <modem_pin_config+0x1cc>
    1dca:	4930      	ldr	r1, [pc, #192]	; (1e8c <modem_pin_config+0x270>)
    1dcc:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
    1dd0:	4a1e      	ldr	r2, [pc, #120]	; (1e4c <modem_pin_config+0x230>)
    1dd2:	481f      	ldr	r0, [pc, #124]	; (1e50 <modem_pin_config+0x234>)
    1dd4:	f005 fd42 	bl	785c <printk>
    1dd8:	482d      	ldr	r0, [pc, #180]	; (1e90 <modem_pin_config+0x274>)
    1dda:	f005 fd3f 	bl	785c <printk>
    1dde:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
    1de2:	481a      	ldr	r0, [pc, #104]	; (1e4c <modem_pin_config+0x230>)
    1de4:	f005 ff8c 	bl	7d00 <assert_post_action>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1de8:	f8db 3000 	ldr.w	r3, [fp]
    1dec:	421e      	tst	r6, r3
    1dee:	d10e      	bne.n	1e0e <modem_pin_config+0x1f2>
    1df0:	4920      	ldr	r1, [pc, #128]	; (1e74 <modem_pin_config+0x258>)
    1df2:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
    1df6:	4a15      	ldr	r2, [pc, #84]	; (1e4c <modem_pin_config+0x230>)
    1df8:	4815      	ldr	r0, [pc, #84]	; (1e50 <modem_pin_config+0x234>)
    1dfa:	f005 fd2f 	bl	785c <printk>
    1dfe:	481e      	ldr	r0, [pc, #120]	; (1e78 <modem_pin_config+0x25c>)
    1e00:	f005 fd2c 	bl	785c <printk>
    1e04:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
    1e08:	4810      	ldr	r0, [pc, #64]	; (1e4c <modem_pin_config+0x230>)
    1e0a:	f005 ff79 	bl	7d00 <assert_post_action>
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    1e0e:	0423      	lsls	r3, r4, #16
    1e10:	d505      	bpl.n	1e1e <modem_pin_config+0x202>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
    1e12:	f8da 3000 	ldr.w	r3, [sl]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    1e16:	421e      	tst	r6, r3
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
    1e18:	bf18      	it	ne
    1e1a:	f488 28c0 	eorne.w	r8, r8, #393216	; 0x60000
	return api->pin_interrupt_configure(port, pin, mode, trig);
    1e1e:	f8d9 4018 	ldr.w	r4, [r9, #24]
    1e22:	4639      	mov	r1, r7
    1e24:	4628      	mov	r0, r5
    1e26:	46a4      	mov	ip, r4
    1e28:	f408 23c0 	and.w	r3, r8, #393216	; 0x60000
    1e2c:	f408 32b0 	and.w	r2, r8, #90112	; 0x16000
				  ctx->pins[pin].pin,
				  enable ? ctx->pins[pin].init_flags :
					   GPIO_INPUT);
}
    1e30:	b001      	add	sp, #4
    1e32:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1e36:	4760      	bx	ip
	return gpio_pin_configure(ctx->pins[pin].gpio_port_dev,
    1e38:	f44f 7480 	mov.w	r4, #256	; 0x100
    1e3c:	e6fe      	b.n	1c3c <modem_pin_config+0x20>
		return -ENODEV;
    1e3e:	f06f 0012 	mvn.w	r0, #18
}
    1e42:	b001      	add	sp, #4
    1e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1e48:	0000b31b 	.word	0x0000b31b
    1e4c:	0000b2a1 	.word	0x0000b2a1
    1e50:	0000b021 	.word	0x0000b021
    1e54:	0000b354 	.word	0x0000b354
    1e58:	0000b391 	.word	0x0000b391
    1e5c:	0000b3c5 	.word	0x0000b3c5
    1e60:	0000b417 	.word	0x0000b417
    1e64:	0000b44a 	.word	0x0000b44a
    1e68:	0000b48f 	.word	0x0000b48f
    1e6c:	0000b4ca 	.word	0x0000b4ca
    1e70:	0000b50b 	.word	0x0000b50b
    1e74:	0000b2cb 	.word	0x0000b2cb
    1e78:	0000b309 	.word	0x0000b309
    1e7c:	0000b537 	.word	0x0000b537
    1e80:	0000b578 	.word	0x0000b578
    1e84:	0000b5a4 	.word	0x0000b5a4
    1e88:	0000b625 	.word	0x0000b625
    1e8c:	0000b679 	.word	0x0000b679
    1e90:	0000b6c3 	.word	0x0000b6c3

00001e94 <wdog_cmsdk_apb_setup>:

	ARG_UNUSED(dev);
	ARG_UNUSED(options);

	/* Start the watchdog counter with INTEN bit */
	wdog->ctrl = (CMSDK_APB_WDOG_CTRL_RESEN | CMSDK_APB_WDOG_CTRL_INTEN);
    1e94:	2203      	movs	r2, #3
    1e96:	4b02      	ldr	r3, [pc, #8]	; (1ea0 <wdog_cmsdk_apb_setup+0xc>)

	return 0;
}
    1e98:	2000      	movs	r0, #0
	wdog->ctrl = (CMSDK_APB_WDOG_CTRL_RESEN | CMSDK_APB_WDOG_CTRL_INTEN);
    1e9a:	609a      	str	r2, [r3, #8]
}
    1e9c:	4770      	bx	lr
    1e9e:	bf00      	nop
    1ea0:	40008000 	.word	0x40008000

00001ea4 <wdog_cmsdk_apb_disable>:
	volatile struct wdog_cmsdk_apb *wdog = WDOG_STRUCT;

	ARG_UNUSED(dev);

	/* Stop the watchdog counter with INTEN bit */
	wdog->ctrl = ~(CMSDK_APB_WDOG_CTRL_RESEN | CMSDK_APB_WDOG_CTRL_INTEN);
    1ea4:	f06f 0203 	mvn.w	r2, #3
    1ea8:	4b01      	ldr	r3, [pc, #4]	; (1eb0 <wdog_cmsdk_apb_disable+0xc>)

	return 0;
}
    1eaa:	2000      	movs	r0, #0
	wdog->ctrl = ~(CMSDK_APB_WDOG_CTRL_RESEN | CMSDK_APB_WDOG_CTRL_INTEN);
    1eac:	609a      	str	r2, [r3, #8]
}
    1eae:	4770      	bx	lr
    1eb0:	40008000 	.word	0x40008000

00001eb4 <wdog_cmsdk_apb_install_timeout>:
	volatile struct wdog_cmsdk_apb *wdog = WDOG_STRUCT;

	ARG_UNUSED(dev);

	/* Reload value */
	reload_s = config->window.max *
    1eb4:	684b      	ldr	r3, [r1, #4]
    1eb6:	4a05      	ldr	r2, [pc, #20]	; (1ecc <wdog_cmsdk_apb_install_timeout+0x18>)

	/* Configure only the callback */
	user_cb = config->callback;

	return 0;
}
    1eb8:	2000      	movs	r0, #0
	reload_s = config->window.max *
    1eba:	4353      	muls	r3, r2
    1ebc:	4a04      	ldr	r2, [pc, #16]	; (1ed0 <wdog_cmsdk_apb_install_timeout+0x1c>)
    1ebe:	6013      	str	r3, [r2, #0]
	wdog->load = reload_s;
    1ec0:	4a04      	ldr	r2, [pc, #16]	; (1ed4 <wdog_cmsdk_apb_install_timeout+0x20>)
    1ec2:	6013      	str	r3, [r2, #0]
	user_cb = config->callback;
    1ec4:	688a      	ldr	r2, [r1, #8]
    1ec6:	4b04      	ldr	r3, [pc, #16]	; (1ed8 <wdog_cmsdk_apb_install_timeout+0x24>)
    1ec8:	601a      	str	r2, [r3, #0]
}
    1eca:	4770      	bx	lr
    1ecc:	017d7840 	.word	0x017d7840
    1ed0:	2000008c 	.word	0x2000008c
    1ed4:	40008000 	.word	0x40008000
    1ed8:	20001204 	.word	0x20001204

00001edc <wdog_cmsdk_apb_feed>:

	ARG_UNUSED(dev);
	ARG_UNUSED(channel_id);

	/* Clear the interrupt */
	wdog->intclr = CMSDK_APB_WDOG_INTCLR;
    1edc:	2201      	movs	r2, #1
    1ede:	4b03      	ldr	r3, [pc, #12]	; (1eec <wdog_cmsdk_apb_feed+0x10>)

	/* Reload */
	wdog->load = reload_s;

	return 0;
}
    1ee0:	2000      	movs	r0, #0
	wdog->intclr = CMSDK_APB_WDOG_INTCLR;
    1ee2:	60da      	str	r2, [r3, #12]
	wdog->load = reload_s;
    1ee4:	4a02      	ldr	r2, [pc, #8]	; (1ef0 <wdog_cmsdk_apb_feed+0x14>)
    1ee6:	6812      	ldr	r2, [r2, #0]
    1ee8:	601a      	str	r2, [r3, #0]
}
    1eea:	4770      	bx	lr
    1eec:	40008000 	.word	0x40008000
    1ef0:	2000008c 	.word	0x2000008c

00001ef4 <wdog_cmsdk_apb_init>:
	}
}
#endif /* CONFIG_RUNTIME_NMI */

static int wdog_cmsdk_apb_init(const struct device *dev)
{
    1ef4:	b508      	push	{r3, lr}
	volatile struct wdog_cmsdk_apb *wdog = WDOG_STRUCT;

	wdog_r = dev;
    1ef6:	4b07      	ldr	r3, [pc, #28]	; (1f14 <wdog_cmsdk_apb_init+0x20>)
	wdog->lock = CMSDK_APB_WDOG_UNLOCK_VALUE;
    1ef8:	4a07      	ldr	r2, [pc, #28]	; (1f18 <wdog_cmsdk_apb_init+0x24>)
	wdog_r = dev;
    1efa:	6018      	str	r0, [r3, #0]
	wdog->lock = CMSDK_APB_WDOG_UNLOCK_VALUE;
    1efc:	4b07      	ldr	r3, [pc, #28]	; (1f1c <wdog_cmsdk_apb_init+0x28>)
	/* set default reload value */
	wdog->load = reload_s;

#ifdef CONFIG_RUNTIME_NMI
	/* Configure the interrupts */
	z_NmiHandlerSet(wdog_cmsdk_apb_isr);
    1efe:	4808      	ldr	r0, [pc, #32]	; (1f20 <wdog_cmsdk_apb_init+0x2c>)
	wdog->lock = CMSDK_APB_WDOG_UNLOCK_VALUE;
    1f00:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
	wdog->load = reload_s;
    1f04:	4a07      	ldr	r2, [pc, #28]	; (1f24 <wdog_cmsdk_apb_init+0x30>)
    1f06:	6812      	ldr	r2, [r2, #0]
    1f08:	601a      	str	r2, [r3, #0]
	z_NmiHandlerSet(wdog_cmsdk_apb_isr);
    1f0a:	f000 fbe1 	bl	26d0 <z_NmiHandlerSet>
#ifdef CONFIG_WDOG_CMSDK_APB_START_AT_BOOT
	wdog_cmsdk_apb_setup(dev, 0);
#endif

	return 0;
}
    1f0e:	2000      	movs	r0, #0
    1f10:	bd08      	pop	{r3, pc}
    1f12:	bf00      	nop
    1f14:	20001208 	.word	0x20001208
    1f18:	1acce551 	.word	0x1acce551
    1f1c:	40008000 	.word	0x40008000
    1f20:	00001f29 	.word	0x00001f29
    1f24:	2000008c 	.word	0x2000008c

00001f28 <wdog_cmsdk_apb_isr>:
	return (wdog->maskintstat & CMSDK_APB_WDOG_MASKINTSTAT) != 0U;
    1f28:	4b0b      	ldr	r3, [pc, #44]	; (1f58 <wdog_cmsdk_apb_isr+0x30>)
{
    1f2a:	b510      	push	{r4, lr}
	return (wdog->maskintstat & CMSDK_APB_WDOG_MASKINTSTAT) != 0U;
    1f2c:	695c      	ldr	r4, [r3, #20]
	if (!wdog_cmsdk_apb_has_fired()) {
    1f2e:	f014 0401 	ands.w	r4, r4, #1
    1f32:	d107      	bne.n	1f44 <wdog_cmsdk_apb_isr+0x1c>
		printk("NMI received! Rebooting...\n");
    1f34:	4809      	ldr	r0, [pc, #36]	; (1f5c <wdog_cmsdk_apb_isr+0x34>)
    1f36:	f005 fc91 	bl	785c <printk>
		sys_reboot(0);
    1f3a:	4620      	mov	r0, r4
}
    1f3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		sys_reboot(0);
    1f40:	f7ff bd64 	b.w	1a0c <sys_reboot>
		if (user_cb != NULL) {
    1f44:	4b06      	ldr	r3, [pc, #24]	; (1f60 <wdog_cmsdk_apb_isr+0x38>)
    1f46:	681b      	ldr	r3, [r3, #0]
    1f48:	b12b      	cbz	r3, 1f56 <wdog_cmsdk_apb_isr+0x2e>
}
    1f4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			user_cb(wdog_r, 0);
    1f4e:	4a05      	ldr	r2, [pc, #20]	; (1f64 <wdog_cmsdk_apb_isr+0x3c>)
    1f50:	2100      	movs	r1, #0
    1f52:	6810      	ldr	r0, [r2, #0]
    1f54:	4718      	bx	r3
}
    1f56:	bd10      	pop	{r4, pc}
    1f58:	40008000 	.word	0x40008000
    1f5c:	0000b708 	.word	0x0000b708
    1f60:	20001204 	.word	0x20001204
    1f64:	20001208 	.word	0x20001208

00001f68 <slip_init>:

	return buf;
}

static int slip_init(const struct device *dev)
{
    1f68:	b510      	push	{r4, lr}
	struct slip_context *slip = dev->data;

	LOG_DBG("[%p] dev %p", slip, dev);

	slip->state = STATE_OK;
    1f6a:	2101      	movs	r1, #1
	slip->rx = NULL;
    1f6c:	2400      	movs	r4, #0
	struct slip_context *slip = dev->data;
    1f6e:	6900      	ldr	r0, [r0, #16]

#if defined(CONFIG_SLIP_TAP) && defined(CONFIG_NET_IPV4)
	LOG_DBG("ARP enabled");
#endif

	uart_pipe_register(slip->buf, sizeof(slip->buf), recv_cb);
    1f70:	4a04      	ldr	r2, [pc, #16]	; (1f84 <slip_init+0x1c>)
	slip->state = STATE_OK;
    1f72:	7501      	strb	r1, [r0, #20]
	slip->rx = NULL;
    1f74:	6044      	str	r4, [r0, #4]
	slip->first = false;
    1f76:	7044      	strb	r4, [r0, #1]
	uart_pipe_register(slip->buf, sizeof(slip->buf), recv_cb);
    1f78:	3002      	adds	r0, #2
    1f7a:	f7ff fdd3 	bl	1b24 <uart_pipe_register>

	return 0;
}
    1f7e:	4620      	mov	r0, r4
    1f80:	bd10      	pop	{r4, pc}
    1f82:	bf00      	nop
    1f84:	00001f89 	.word	0x00001f89

00001f88 <recv_cb>:
{
    1f88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!slip->init_done) {
    1f8c:	f810 3c02 	ldrb.w	r3, [r0, #-2]
{
    1f90:	4604      	mov	r4, r0
    1f92:	460e      	mov	r6, r1
	if (!slip->init_done) {
    1f94:	2b00      	cmp	r3, #0
    1f96:	d067      	beq.n	2068 <recv_cb+0xe0>
	for (i = 0; i < *off; i++) {
    1f98:	2700      	movs	r7, #0
				LOG_ERR("[%p] cannot allocate 1st data buffer",
    1f9a:	f8df a188 	ldr.w	sl, [pc, #392]	; 2124 <recv_cb+0x19c>
				LOG_ERR("[%p] cannot allocate pkt", slip);
    1f9e:	f8df b188 	ldr.w	fp, [pc, #392]	; 2128 <recv_cb+0x1a0>
	struct slip_context *slip =
    1fa2:	f1a0 0802 	sub.w	r8, r0, #2
	for (i = 0; i < *off; i++) {
    1fa6:	6833      	ldr	r3, [r6, #0]
    1fa8:	429f      	cmp	r7, r3
    1faa:	d25d      	bcs.n	2068 <recv_cb+0xe0>
	switch (slip->state) {
    1fac:	7ca3      	ldrb	r3, [r4, #18]
		if (slip_input_byte(slip, buf[i])) {
    1fae:	5de5      	ldrb	r5, [r4, r7]
	switch (slip->state) {
    1fb0:	2b01      	cmp	r3, #1
    1fb2:	d036      	beq.n	2022 <recv_cb+0x9a>
    1fb4:	2b02      	cmp	r3, #2
    1fb6:	d005      	beq.n	1fc4 <recv_cb+0x3c>
    1fb8:	b993      	cbnz	r3, 1fe0 <recv_cb+0x58>
		if (c == SLIP_END) {
    1fba:	2dc0      	cmp	r5, #192	; 0xc0
    1fbc:	d10b      	bne.n	1fd6 <recv_cb+0x4e>
			slip->state = STATE_OK;
    1fbe:	2301      	movs	r3, #1
			slip->state = STATE_ESC;
    1fc0:	74a3      	strb	r3, [r4, #18]
			return 0;
    1fc2:	e008      	b.n	1fd6 <recv_cb+0x4e>
		if (c == SLIP_ESC_END) {
    1fc4:	2ddc      	cmp	r5, #220	; 0xdc
    1fc6:	d008      	beq.n	1fda <recv_cb+0x52>
		} else if (c == SLIP_ESC_ESC) {
    1fc8:	2ddd      	cmp	r5, #221	; 0xdd
    1fca:	d028      	beq.n	201e <recv_cb+0x96>
			slip->state = STATE_GARBAGE;
    1fcc:	2300      	movs	r3, #0
    1fce:	74a3      	strb	r3, [r4, #18]
			SLIP_STATS(slip->garbage++);
    1fd0:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    1fd2:	3301      	adds	r3, #1
    1fd4:	8463      	strh	r3, [r4, #34]	; 0x22
	for (i = 0; i < *off; i++) {
    1fd6:	3701      	adds	r7, #1
    1fd8:	e7e5      	b.n	1fa6 <recv_cb+0x1e>
			c = SLIP_END;
    1fda:	25c0      	movs	r5, #192	; 0xc0
		slip->state = STATE_OK;
    1fdc:	2301      	movs	r3, #1
    1fde:	74a3      	strb	r3, [r4, #18]
	if (!slip->last) {
    1fe0:	f8d4 0006 	ldr.w	r0, [r4, #6]
    1fe4:	2800      	cmp	r0, #0
    1fe6:	d0f6      	beq.n	1fd6 <recv_cb+0x4e>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
    1fe8:	3008      	adds	r0, #8
    1fea:	f006 fa6e 	bl	84ca <net_buf_simple_tailroom>
	if (!net_buf_tailroom(slip->last)) {
    1fee:	2800      	cmp	r0, #0
    1ff0:	f040 8083 	bne.w	20fa <recv_cb+0x172>
		buf = net_pkt_get_reserve_rx_data(K_NO_WAIT);
    1ff4:	2000      	movs	r0, #0
    1ff6:	2100      	movs	r1, #0
    1ff8:	f002 f8ae 	bl	4158 <net_pkt_get_reserve_rx_data>
		if (!buf) {
    1ffc:	4681      	mov	r9, r0
    1ffe:	2800      	cmp	r0, #0
    2000:	d170      	bne.n	20e4 <recv_cb+0x15c>
			LOG_ERR("[%p] cannot allocate next data buf", slip);
    2002:	4642      	mov	r2, r8
    2004:	2145      	movs	r1, #69	; 0x45
    2006:	4849      	ldr	r0, [pc, #292]	; (212c <recv_cb+0x1a4>)
    2008:	f005 fe87 	bl	7d1a <z_log_minimal_printk>
			net_pkt_unref(slip->rx);
    200c:	f8d4 0002 	ldr.w	r0, [r4, #2]
    2010:	f007 f802 	bl	9018 <net_pkt_unref>
			slip->rx = NULL;
    2014:	f8c4 9002 	str.w	r9, [r4, #2]
			slip->last = NULL;
    2018:	f8c4 9006 	str.w	r9, [r4, #6]
			return 0;
    201c:	e7db      	b.n	1fd6 <recv_cb+0x4e>
			c = SLIP_ESC;
    201e:	25db      	movs	r5, #219	; 0xdb
    2020:	e7dc      	b.n	1fdc <recv_cb+0x54>
		if (c == SLIP_ESC) {
    2022:	2ddb      	cmp	r5, #219	; 0xdb
    2024:	d101      	bne.n	202a <recv_cb+0xa2>
			slip->state = STATE_ESC;
    2026:	2302      	movs	r3, #2
    2028:	e7ca      	b.n	1fc0 <recv_cb+0x38>
		if (c == SLIP_END) {
    202a:	2dc0      	cmp	r5, #192	; 0xc0
    202c:	d121      	bne.n	2072 <recv_cb+0xea>
			slip->first = false;
    202e:	2300      	movs	r3, #0
			if (slip->rx) {
    2030:	f8d4 5002 	ldr.w	r5, [r4, #2]
			slip->first = false;
    2034:	f804 3c01 	strb.w	r3, [r4, #-1]
			if (slip->rx) {
    2038:	2d00      	cmp	r5, #0
    203a:	d0cc      	beq.n	1fd6 <recv_cb+0x4e>
	if (slip->last && slip->last->len) {
    203c:	f8d4 3006 	ldr.w	r3, [r4, #6]
    2040:	b193      	cbz	r3, 2068 <recv_cb+0xe0>
    2042:	899b      	ldrh	r3, [r3, #12]
    2044:	b183      	cbz	r3, 2068 <recv_cb+0xe0>
	if (!pkt || !pkt->buffer) {
    2046:	692b      	ldr	r3, [r5, #16]
    2048:	b173      	cbz	r3, 2068 <recv_cb+0xe0>
	if (net_recv_data(get_iface(slip, vlan_tag), pkt) < 0) {
    204a:	4629      	mov	r1, r5
    204c:	f8d4 000e 	ldr.w	r0, [r4, #14]
    2050:	f001 fc00 	bl	3854 <net_recv_data>
    2054:	2800      	cmp	r0, #0
    2056:	da02      	bge.n	205e <recv_cb+0xd6>
		net_pkt_unref(pkt);
    2058:	4628      	mov	r0, r5
    205a:	f006 ffdd 	bl	9018 <net_pkt_unref>
	slip->rx = NULL;
    205e:	2300      	movs	r3, #0
    2060:	f8c4 3002 	str.w	r3, [r4, #2]
	slip->last = NULL;
    2064:	f8c4 3006 	str.w	r3, [r4, #6]
		*off = 0;
    2068:	2300      	movs	r3, #0
}
    206a:	4620      	mov	r0, r4
		*off = 0;
    206c:	6033      	str	r3, [r6, #0]
}
    206e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (slip->first && !slip->rx) {
    2072:	f814 2c01 	ldrb.w	r2, [r4, #-1]
    2076:	b122      	cbz	r2, 2082 <recv_cb+0xfa>
    2078:	f8d4 3002 	ldr.w	r3, [r4, #2]
    207c:	2b00      	cmp	r3, #0
    207e:	d1af      	bne.n	1fe0 <recv_cb+0x58>
    2080:	e7a9      	b.n	1fd6 <recv_cb+0x4e>
			slip->first = true;
    2082:	f804 3c01 	strb.w	r3, [r4, #-1]
			slip->rx = net_pkt_rx_alloc_on_iface(slip->iface,
    2086:	2200      	movs	r2, #0
    2088:	2300      	movs	r3, #0
    208a:	f8d4 000e 	ldr.w	r0, [r4, #14]
    208e:	f002 f8b3 	bl	41f8 <net_pkt_rx_alloc_on_iface>
    2092:	f8c4 0002 	str.w	r0, [r4, #2]
			if (!slip->rx) {
    2096:	b928      	cbnz	r0, 20a4 <recv_cb+0x11c>
				LOG_ERR("[%p] cannot allocate pkt", slip);
    2098:	4642      	mov	r2, r8
    209a:	2145      	movs	r1, #69	; 0x45
    209c:	4658      	mov	r0, fp
    209e:	f005 fe3c 	bl	7d1a <z_log_minimal_printk>
				return 0;
    20a2:	e798      	b.n	1fd6 <recv_cb+0x4e>
			slip->last = net_pkt_get_frag(slip->rx, K_NO_WAIT);
    20a4:	2200      	movs	r2, #0
    20a6:	2300      	movs	r3, #0
    20a8:	f002 f866 	bl	4178 <net_pkt_get_frag>
    20ac:	4681      	mov	r9, r0
    20ae:	f8c4 0006 	str.w	r0, [r4, #6]
			if (!slip->last) {
    20b2:	b958      	cbnz	r0, 20cc <recv_cb+0x144>
				LOG_ERR("[%p] cannot allocate 1st data buffer",
    20b4:	4642      	mov	r2, r8
    20b6:	2145      	movs	r1, #69	; 0x45
    20b8:	4650      	mov	r0, sl
    20ba:	f005 fe2e 	bl	7d1a <z_log_minimal_printk>
				net_pkt_unref(slip->rx);
    20be:	f8d4 0002 	ldr.w	r0, [r4, #2]
    20c2:	f006 ffa9 	bl	9018 <net_pkt_unref>
				slip->rx = NULL;
    20c6:	f8c4 9002 	str.w	r9, [r4, #2]
				return 0;
    20ca:	e784      	b.n	1fd6 <recv_cb+0x4e>
			net_pkt_append_buffer(slip->rx, slip->last);
    20cc:	4601      	mov	r1, r0
    20ce:	f8d4 0002 	ldr.w	r0, [r4, #2]
    20d2:	f007 f816 	bl	9102 <net_pkt_append_buffer>
	return pkt->frags->data;
}

static inline uint8_t *net_pkt_ip_data(struct net_pkt *pkt)
{
	return pkt->frags->data;
    20d6:	f8d4 3002 	ldr.w	r3, [r4, #2]
    20da:	691b      	ldr	r3, [r3, #16]
			slip->ptr = net_pkt_ip_data(slip->rx);
    20dc:	689b      	ldr	r3, [r3, #8]
    20de:	f8c4 300a 	str.w	r3, [r4, #10]
    20e2:	e77d      	b.n	1fe0 <recv_cb+0x58>
		net_buf_frag_insert(slip->last, buf);
    20e4:	4601      	mov	r1, r0
    20e6:	f8d4 0006 	ldr.w	r0, [r4, #6]
    20ea:	f001 f839 	bl	3160 <net_buf_frag_insert>
		slip->ptr = slip->last->data;
    20ee:	f8d9 3008 	ldr.w	r3, [r9, #8]
		slip->last = buf;
    20f2:	f8c4 9006 	str.w	r9, [r4, #6]
		slip->ptr = slip->last->data;
    20f6:	f8c4 300a 	str.w	r3, [r4, #10]
	if (slip->ptr < slip->last->data) {
    20fa:	f8d4 0006 	ldr.w	r0, [r4, #6]
    20fe:	f8d4 300a 	ldr.w	r3, [r4, #10]
    2102:	6882      	ldr	r2, [r0, #8]
    2104:	4293      	cmp	r3, r2
    2106:	d206      	bcs.n	2116 <recv_cb+0x18e>
		*slip->ptr = c;
    2108:	701d      	strb	r5, [r3, #0]
	slip->ptr++;
    210a:	f8d4 300a 	ldr.w	r3, [r4, #10]
    210e:	3301      	adds	r3, #1
    2110:	f8c4 300a 	str.w	r3, [r4, #10]
	return 0;
    2114:	e75f      	b.n	1fd6 <recv_cb+0x4e>
	return net_buf_simple_add_u8(&buf->b, val);
    2116:	4629      	mov	r1, r5
    2118:	3008      	adds	r0, #8
    211a:	f006 f9de 	bl	84da <net_buf_simple_add_u8>
		slip->ptr = net_buf_add_u8(slip->last, c);
    211e:	f8c4 000a 	str.w	r0, [r4, #10]
    2122:	e7f2      	b.n	210a <recv_cb+0x182>
    2124:	0000b74b 	.word	0x0000b74b
    2128:	0000b72d 	.word	0x0000b72d
    212c:	0000b775 	.word	0x0000b775

00002130 <elapsed>:
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
	uint32_t val1 = SysTick->VAL;	/* A */
    2130:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    2134:	699a      	ldr	r2, [r3, #24]
	uint32_t ctrl = SysTick->CTRL;	/* B */
    2136:	6919      	ldr	r1, [r3, #16]
{
    2138:	b510      	push	{r4, lr}
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
    213a:	f411 3f80 	tst.w	r1, #65536	; 0x10000
	uint32_t val2 = SysTick->VAL;	/* C */
    213e:	6998      	ldr	r0, [r3, #24]
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
    2140:	4908      	ldr	r1, [pc, #32]	; (2164 <elapsed+0x34>)
    2142:	4b09      	ldr	r3, [pc, #36]	; (2168 <elapsed+0x38>)
    2144:	d101      	bne.n	214a <elapsed+0x1a>
	    || (val1 < val2)) {
    2146:	4282      	cmp	r2, r0
    2148:	d206      	bcs.n	2158 <elapsed+0x28>
		overflow_cyc += last_load;
    214a:	681a      	ldr	r2, [r3, #0]
    214c:	680c      	ldr	r4, [r1, #0]
    214e:	4422      	add	r2, r4
    2150:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
    2152:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    2156:	6912      	ldr	r2, [r2, #16]
	}

	return (last_load - val2) + overflow_cyc;
    2158:	681b      	ldr	r3, [r3, #0]
    215a:	680a      	ldr	r2, [r1, #0]
    215c:	4413      	add	r3, r2
}
    215e:	1a18      	subs	r0, r3, r0
    2160:	bd10      	pop	{r4, pc}
    2162:	bf00      	nop
    2164:	20001258 	.word	0x20001258
    2168:	20001260 	.word	0x20001260

0000216c <z_clock_isr>:

/* Callout out of platform assembly, not hooked via IRQ_CONNECT... */
void z_clock_isr(void *arg)
{
    216c:	b508      	push	{r3, lr}
	ARG_UNUSED(arg);
	uint32_t dticks;

	/* Update overflow_cyc and clear COUNTFLAG by invoking elapsed() */
	elapsed();
    216e:	f7ff ffdf 	bl	2130 <elapsed>

	/* Increment the amount of HW cycles elapsed (complete counter
	 * cycles) and announce the progress to the kernel.
	 */
	cycle_count += overflow_cyc;
    2172:	4b0b      	ldr	r3, [pc, #44]	; (21a0 <z_clock_isr+0x34>)
    2174:	4a0b      	ldr	r2, [pc, #44]	; (21a4 <z_clock_isr+0x38>)
    2176:	6818      	ldr	r0, [r3, #0]
    2178:	6811      	ldr	r1, [r2, #0]
    217a:	4408      	add	r0, r1
    217c:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
    217e:	2200      	movs	r2, #0
    2180:	601a      	str	r2, [r3, #0]
		 * because the value has been updated before LOAD re-program.
		 *
		 * We can assess if this is the case by inspecting COUNTFLAG.
		 */

		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
    2182:	4a09      	ldr	r2, [pc, #36]	; (21a8 <z_clock_isr+0x3c>)
    2184:	4909      	ldr	r1, [pc, #36]	; (21ac <z_clock_isr+0x40>)
    2186:	6813      	ldr	r3, [r2, #0]
    2188:	1ac0      	subs	r0, r0, r3
    218a:	fbb0 f0f1 	udiv	r0, r0, r1
		announced_cycles += dticks * CYC_PER_TICK;
    218e:	fb01 3300 	mla	r3, r1, r0, r3
    2192:	6013      	str	r3, [r2, #0]
		z_clock_announce(dticks);
    2194:	f005 f98e 	bl	74b4 <z_clock_announce>
	} else {
		z_clock_announce(1);
	}
	z_arm_int_exit();
}
    2198:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    219c:	f000 bce4 	b.w	2b68 <z_arm_exc_exit>
    21a0:	20001260 	.word	0x20001260
    21a4:	20001254 	.word	0x20001254
    21a8:	20001250 	.word	0x20001250
    21ac:	0003d090 	.word	0x0003d090

000021b0 <z_clock_driver_init>:
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    21b0:	2220      	movs	r2, #32
{
	ARG_UNUSED(device);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
	overflow_cyc = 0U;
    21b2:	2000      	movs	r0, #0
    21b4:	4b08      	ldr	r3, [pc, #32]	; (21d8 <z_clock_driver_init+0x28>)
    21b6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	last_load = CYC_PER_TICK - 1;
    21ba:	4a08      	ldr	r2, [pc, #32]	; (21dc <z_clock_driver_init+0x2c>)
    21bc:	4b08      	ldr	r3, [pc, #32]	; (21e0 <z_clock_driver_init+0x30>)
    21be:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
    21c0:	4b08      	ldr	r3, [pc, #32]	; (21e4 <z_clock_driver_init+0x34>)
    21c2:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
    21c4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    21c8:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
    21ca:	6198      	str	r0, [r3, #24]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
    21cc:	691a      	ldr	r2, [r3, #16]
    21ce:	f042 0207 	orr.w	r2, r2, #7
    21d2:	611a      	str	r2, [r3, #16]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
    21d4:	4770      	bx	lr
    21d6:	bf00      	nop
    21d8:	e000ed00 	.word	0xe000ed00
    21dc:	0003d08f 	.word	0x0003d08f
    21e0:	20001258 	.word	0x20001258
    21e4:	20001260 	.word	0x20001260

000021e8 <z_clock_set_timeout>:

void z_clock_set_timeout(int32_t ticks, bool idle)
{
    21e8:	b570      	push	{r4, r5, r6, lr}
    21ea:	4d3d      	ldr	r5, [pc, #244]	; (22e0 <z_clock_set_timeout+0xf8>)
	 * need to wake up multiple times per second.  If the kernel
	 * allows us to miss tick announcements in idle, then shut off
	 * the counter. (Note: we can assume if idle==true that
	 * interrupts are already disabled)
	 */
	if (IS_ENABLED(CONFIG_TICKLESS_IDLE) && idle
    21ec:	b159      	cbz	r1, 2206 <z_clock_set_timeout+0x1e>
	    && ticks == K_TICKS_FOREVER) {
    21ee:	1c42      	adds	r2, r0, #1
    21f0:	d10c      	bne.n	220c <z_clock_set_timeout+0x24>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
    21f2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    21f6:	6913      	ldr	r3, [r2, #16]
    21f8:	f023 0301 	bic.w	r3, r3, #1
    21fc:	6113      	str	r3, [r2, #16]
		last_load = TIMER_STOPPED;
    21fe:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
    2202:	602b      	str	r3, [r5, #0]
	SysTick->LOAD = last_load - 1;
	SysTick->VAL = 0; /* resets timer to last_load */

	k_spin_unlock(&lock, key);
#endif
}
    2204:	bd70      	pop	{r4, r5, r6, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    2206:	1c43      	adds	r3, r0, #1
    2208:	bf08      	it	eq
    220a:	2042      	moveq	r0, #66	; 0x42
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    220c:	1e44      	subs	r4, r0, #1
    220e:	2c00      	cmp	r4, #0
    2210:	dd4d      	ble.n	22ae <z_clock_set_timeout+0xc6>
    2212:	2c42      	cmp	r4, #66	; 0x42
    2214:	bfa8      	it	ge
    2216:	2442      	movge	r4, #66	; 0x42
    2218:	f04f 0320 	mov.w	r3, #32
    221c:	f3ef 8611 	mrs	r6, BASEPRI
    2220:	f383 8811 	msr	BASEPRI, r3
    2224:	f3bf 8f6f 	isb	sy
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();

#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2228:	482e      	ldr	r0, [pc, #184]	; (22e4 <z_clock_set_timeout+0xfc>)
    222a:	f004 fd8b 	bl	6d44 <z_spin_lock_valid>
    222e:	b968      	cbnz	r0, 224c <z_clock_set_timeout+0x64>
    2230:	2381      	movs	r3, #129	; 0x81
    2232:	4a2d      	ldr	r2, [pc, #180]	; (22e8 <z_clock_set_timeout+0x100>)
    2234:	492d      	ldr	r1, [pc, #180]	; (22ec <z_clock_set_timeout+0x104>)
    2236:	482e      	ldr	r0, [pc, #184]	; (22f0 <z_clock_set_timeout+0x108>)
    2238:	f005 fb10 	bl	785c <printk>
    223c:	4929      	ldr	r1, [pc, #164]	; (22e4 <z_clock_set_timeout+0xfc>)
    223e:	482d      	ldr	r0, [pc, #180]	; (22f4 <z_clock_set_timeout+0x10c>)
    2240:	f005 fb0c 	bl	785c <printk>
    2244:	2181      	movs	r1, #129	; 0x81
    2246:	4828      	ldr	r0, [pc, #160]	; (22e8 <z_clock_set_timeout+0x100>)
    2248:	f005 fd5a 	bl	7d00 <assert_post_action>
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
    224c:	4825      	ldr	r0, [pc, #148]	; (22e4 <z_clock_set_timeout+0xfc>)
    224e:	f004 fd95 	bl	6d7c <z_spin_lock_set_owner>
	uint32_t pending = elapsed();
    2252:	f7ff ff6d 	bl	2130 <elapsed>
	cycle_count += pending;
    2256:	4a28      	ldr	r2, [pc, #160]	; (22f8 <z_clock_set_timeout+0x110>)
    2258:	6813      	ldr	r3, [r2, #0]
    225a:	4418      	add	r0, r3
    225c:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0U;
    225e:	2200      	movs	r2, #0
    2260:	4b26      	ldr	r3, [pc, #152]	; (22fc <z_clock_set_timeout+0x114>)
    2262:	601a      	str	r2, [r3, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
    2264:	4b26      	ldr	r3, [pc, #152]	; (2300 <z_clock_set_timeout+0x118>)
    2266:	681b      	ldr	r3, [r3, #0]
	if ((int32_t)unannounced < 0) {
    2268:	1ac2      	subs	r2, r0, r3
    226a:	d522      	bpl.n	22b2 <z_clock_set_timeout+0xca>
		last_load = MIN_DELAY;
    226c:	f643 5309 	movw	r3, #15625	; 0x3d09
			last_load = MAX_CYCLES;
    2270:	602b      	str	r3, [r5, #0]
	SysTick->LOAD = last_load - 1;
    2272:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    2276:	682b      	ldr	r3, [r5, #0]
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    2278:	481a      	ldr	r0, [pc, #104]	; (22e4 <z_clock_set_timeout+0xfc>)
    227a:	3b01      	subs	r3, #1
    227c:	6153      	str	r3, [r2, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
    227e:	2300      	movs	r3, #0
    2280:	6193      	str	r3, [r2, #24]
    2282:	f004 fd6d 	bl	6d60 <z_spin_unlock_valid>
    2286:	b968      	cbnz	r0, 22a4 <z_clock_set_timeout+0xbc>
    2288:	23ac      	movs	r3, #172	; 0xac
    228a:	4a17      	ldr	r2, [pc, #92]	; (22e8 <z_clock_set_timeout+0x100>)
    228c:	491d      	ldr	r1, [pc, #116]	; (2304 <z_clock_set_timeout+0x11c>)
    228e:	4818      	ldr	r0, [pc, #96]	; (22f0 <z_clock_set_timeout+0x108>)
    2290:	f005 fae4 	bl	785c <printk>
    2294:	4913      	ldr	r1, [pc, #76]	; (22e4 <z_clock_set_timeout+0xfc>)
    2296:	481c      	ldr	r0, [pc, #112]	; (2308 <z_clock_set_timeout+0x120>)
    2298:	f005 fae0 	bl	785c <printk>
    229c:	21ac      	movs	r1, #172	; 0xac
    229e:	4812      	ldr	r0, [pc, #72]	; (22e8 <z_clock_set_timeout+0x100>)
    22a0:	f005 fd2e 	bl	7d00 <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    22a4:	f386 8811 	msr	BASEPRI, r6
    22a8:	f3bf 8f6f 	isb	sy
    22ac:	e7aa      	b.n	2204 <z_clock_set_timeout+0x1c>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    22ae:	2400      	movs	r4, #0
    22b0:	e7b2      	b.n	2218 <z_clock_set_timeout+0x30>
		delay = ticks * CYC_PER_TICK;
    22b2:	4916      	ldr	r1, [pc, #88]	; (230c <z_clock_set_timeout+0x124>)
		delay -= unannounced;
    22b4:	1a1b      	subs	r3, r3, r0
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
    22b6:	fb01 2404 	mla	r4, r1, r4, r2
    22ba:	f504 3474 	add.w	r4, r4, #249856	; 0x3d000
    22be:	348f      	adds	r4, #143	; 0x8f
    22c0:	fbb4 f4f1 	udiv	r4, r4, r1
		delay -= unannounced;
    22c4:	fb01 3104 	mla	r1, r1, r4, r3
		delay = MAX(delay, MIN_DELAY);
    22c8:	f643 5309 	movw	r3, #15625	; 0x3d09
    22cc:	4299      	cmp	r1, r3
    22ce:	d904      	bls.n	22da <z_clock_set_timeout+0xf2>
		if (delay > MAX_CYCLES) {
    22d0:	4b0f      	ldr	r3, [pc, #60]	; (2310 <z_clock_set_timeout+0x128>)
    22d2:	4299      	cmp	r1, r3
    22d4:	d8cc      	bhi.n	2270 <z_clock_set_timeout+0x88>
			last_load = delay;
    22d6:	6029      	str	r1, [r5, #0]
    22d8:	e7cb      	b.n	2272 <z_clock_set_timeout+0x8a>
		delay = MAX(delay, MIN_DELAY);
    22da:	4619      	mov	r1, r3
    22dc:	e7fb      	b.n	22d6 <z_clock_set_timeout+0xee>
    22de:	bf00      	nop
    22e0:	20001258 	.word	0x20001258
    22e4:	2000125c 	.word	0x2000125c
    22e8:	0000b7ac 	.word	0x0000b7ac
    22ec:	0000b7d2 	.word	0x0000b7d2
    22f0:	0000b021 	.word	0x0000b021
    22f4:	0000b7e7 	.word	0x0000b7e7
    22f8:	20001254 	.word	0x20001254
    22fc:	20001260 	.word	0x20001260
    2300:	20001250 	.word	0x20001250
    2304:	0000b7ff 	.word	0x0000b7ff
    2308:	0000b816 	.word	0x0000b816
    230c:	0003d090 	.word	0x0003d090
    2310:	00fbc520 	.word	0x00fbc520

00002314 <z_clock_elapsed>:

uint32_t z_clock_elapsed(void)
{
    2314:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    2316:	f04f 0320 	mov.w	r3, #32
    231a:	f3ef 8511 	mrs	r5, BASEPRI
    231e:	f383 8811 	msr	BASEPRI, r3
    2322:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2326:	481b      	ldr	r0, [pc, #108]	; (2394 <z_clock_elapsed+0x80>)
    2328:	f004 fd0c 	bl	6d44 <z_spin_lock_valid>
    232c:	b968      	cbnz	r0, 234a <z_clock_elapsed+0x36>
    232e:	2381      	movs	r3, #129	; 0x81
    2330:	4a19      	ldr	r2, [pc, #100]	; (2398 <z_clock_elapsed+0x84>)
    2332:	491a      	ldr	r1, [pc, #104]	; (239c <z_clock_elapsed+0x88>)
    2334:	481a      	ldr	r0, [pc, #104]	; (23a0 <z_clock_elapsed+0x8c>)
    2336:	f005 fa91 	bl	785c <printk>
    233a:	4916      	ldr	r1, [pc, #88]	; (2394 <z_clock_elapsed+0x80>)
    233c:	4819      	ldr	r0, [pc, #100]	; (23a4 <z_clock_elapsed+0x90>)
    233e:	f005 fa8d 	bl	785c <printk>
    2342:	2181      	movs	r1, #129	; 0x81
    2344:	4814      	ldr	r0, [pc, #80]	; (2398 <z_clock_elapsed+0x84>)
    2346:	f005 fcdb 	bl	7d00 <assert_post_action>
	z_spin_lock_set_owner(l);
    234a:	4812      	ldr	r0, [pc, #72]	; (2394 <z_clock_elapsed+0x80>)
    234c:	f004 fd16 	bl	6d7c <z_spin_lock_set_owner>
	if (!TICKLESS) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
    2350:	f7ff feee 	bl	2130 <elapsed>
    2354:	4b14      	ldr	r3, [pc, #80]	; (23a8 <z_clock_elapsed+0x94>)
    2356:	681c      	ldr	r4, [r3, #0]
    2358:	4b14      	ldr	r3, [pc, #80]	; (23ac <z_clock_elapsed+0x98>)
    235a:	681b      	ldr	r3, [r3, #0]
    235c:	1ae4      	subs	r4, r4, r3
    235e:	4404      	add	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    2360:	480c      	ldr	r0, [pc, #48]	; (2394 <z_clock_elapsed+0x80>)
    2362:	f004 fcfd 	bl	6d60 <z_spin_unlock_valid>
    2366:	b968      	cbnz	r0, 2384 <z_clock_elapsed+0x70>
    2368:	23ac      	movs	r3, #172	; 0xac
    236a:	4a0b      	ldr	r2, [pc, #44]	; (2398 <z_clock_elapsed+0x84>)
    236c:	4910      	ldr	r1, [pc, #64]	; (23b0 <z_clock_elapsed+0x9c>)
    236e:	480c      	ldr	r0, [pc, #48]	; (23a0 <z_clock_elapsed+0x8c>)
    2370:	f005 fa74 	bl	785c <printk>
    2374:	4907      	ldr	r1, [pc, #28]	; (2394 <z_clock_elapsed+0x80>)
    2376:	480f      	ldr	r0, [pc, #60]	; (23b4 <z_clock_elapsed+0xa0>)
    2378:	f005 fa70 	bl	785c <printk>
    237c:	21ac      	movs	r1, #172	; 0xac
    237e:	4806      	ldr	r0, [pc, #24]	; (2398 <z_clock_elapsed+0x84>)
    2380:	f005 fcbe 	bl	7d00 <assert_post_action>
	__asm__ volatile(
    2384:	f385 8811 	msr	BASEPRI, r5
    2388:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return cyc / CYC_PER_TICK;
}
    238c:	480a      	ldr	r0, [pc, #40]	; (23b8 <z_clock_elapsed+0xa4>)
    238e:	fbb4 f0f0 	udiv	r0, r4, r0
    2392:	bd38      	pop	{r3, r4, r5, pc}
    2394:	2000125c 	.word	0x2000125c
    2398:	0000b7ac 	.word	0x0000b7ac
    239c:	0000b7d2 	.word	0x0000b7d2
    23a0:	0000b021 	.word	0x0000b021
    23a4:	0000b7e7 	.word	0x0000b7e7
    23a8:	20001254 	.word	0x20001254
    23ac:	20001250 	.word	0x20001250
    23b0:	0000b7ff 	.word	0x0000b7ff
    23b4:	0000b816 	.word	0x0000b816
    23b8:	0003d090 	.word	0x0003d090

000023bc <z_timer_cycle_get_32>:

uint32_t z_timer_cycle_get_32(void)
{
    23bc:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    23be:	f04f 0320 	mov.w	r3, #32
    23c2:	f3ef 8511 	mrs	r5, BASEPRI
    23c6:	f383 8811 	msr	BASEPRI, r3
    23ca:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    23ce:	4819      	ldr	r0, [pc, #100]	; (2434 <z_timer_cycle_get_32+0x78>)
    23d0:	f004 fcb8 	bl	6d44 <z_spin_lock_valid>
    23d4:	b968      	cbnz	r0, 23f2 <z_timer_cycle_get_32+0x36>
    23d6:	2381      	movs	r3, #129	; 0x81
    23d8:	4a17      	ldr	r2, [pc, #92]	; (2438 <z_timer_cycle_get_32+0x7c>)
    23da:	4918      	ldr	r1, [pc, #96]	; (243c <z_timer_cycle_get_32+0x80>)
    23dc:	4818      	ldr	r0, [pc, #96]	; (2440 <z_timer_cycle_get_32+0x84>)
    23de:	f005 fa3d 	bl	785c <printk>
    23e2:	4914      	ldr	r1, [pc, #80]	; (2434 <z_timer_cycle_get_32+0x78>)
    23e4:	4817      	ldr	r0, [pc, #92]	; (2444 <z_timer_cycle_get_32+0x88>)
    23e6:	f005 fa39 	bl	785c <printk>
    23ea:	2181      	movs	r1, #129	; 0x81
    23ec:	4812      	ldr	r0, [pc, #72]	; (2438 <z_timer_cycle_get_32+0x7c>)
    23ee:	f005 fc87 	bl	7d00 <assert_post_action>
	z_spin_lock_set_owner(l);
    23f2:	4810      	ldr	r0, [pc, #64]	; (2434 <z_timer_cycle_get_32+0x78>)
    23f4:	f004 fcc2 	bl	6d7c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = elapsed() + cycle_count;
    23f8:	f7ff fe9a 	bl	2130 <elapsed>
    23fc:	4b12      	ldr	r3, [pc, #72]	; (2448 <z_timer_cycle_get_32+0x8c>)
    23fe:	681c      	ldr	r4, [r3, #0]
    2400:	4404      	add	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    2402:	480c      	ldr	r0, [pc, #48]	; (2434 <z_timer_cycle_get_32+0x78>)
    2404:	f004 fcac 	bl	6d60 <z_spin_unlock_valid>
    2408:	b968      	cbnz	r0, 2426 <z_timer_cycle_get_32+0x6a>
    240a:	23ac      	movs	r3, #172	; 0xac
    240c:	4a0a      	ldr	r2, [pc, #40]	; (2438 <z_timer_cycle_get_32+0x7c>)
    240e:	490f      	ldr	r1, [pc, #60]	; (244c <z_timer_cycle_get_32+0x90>)
    2410:	480b      	ldr	r0, [pc, #44]	; (2440 <z_timer_cycle_get_32+0x84>)
    2412:	f005 fa23 	bl	785c <printk>
    2416:	4907      	ldr	r1, [pc, #28]	; (2434 <z_timer_cycle_get_32+0x78>)
    2418:	480d      	ldr	r0, [pc, #52]	; (2450 <z_timer_cycle_get_32+0x94>)
    241a:	f005 fa1f 	bl	785c <printk>
    241e:	21ac      	movs	r1, #172	; 0xac
    2420:	4805      	ldr	r0, [pc, #20]	; (2438 <z_timer_cycle_get_32+0x7c>)
    2422:	f005 fc6d 	bl	7d00 <assert_post_action>
	__asm__ volatile(
    2426:	f385 8811 	msr	BASEPRI, r5
    242a:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    242e:	4620      	mov	r0, r4
    2430:	bd38      	pop	{r3, r4, r5, pc}
    2432:	bf00      	nop
    2434:	2000125c 	.word	0x2000125c
    2438:	0000b7ac 	.word	0x0000b7ac
    243c:	0000b7d2 	.word	0x0000b7d2
    2440:	0000b021 	.word	0x0000b021
    2444:	0000b7e7 	.word	0x0000b7e7
    2448:	20001254 	.word	0x20001254
    244c:	0000b7ff 	.word	0x0000b7ff
    2450:	0000b816 	.word	0x0000b816

00002454 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    2454:	4a0a      	ldr	r2, [pc, #40]	; (2480 <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
    2456:	490b      	ldr	r1, [pc, #44]	; (2484 <arch_swap+0x30>)
	_current->arch.basepri = key;
    2458:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    245a:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    245c:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	_current->arch.swap_return_value = _k_neg_eagain;
    2460:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2464:	4908      	ldr	r1, [pc, #32]	; (2488 <arch_swap+0x34>)
    2466:	684b      	ldr	r3, [r1, #4]
    2468:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    246c:	604b      	str	r3, [r1, #4]
    246e:	2300      	movs	r3, #0
    2470:	f383 8811 	msr	BASEPRI, r3
    2474:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    2478:	6893      	ldr	r3, [r2, #8]
}
    247a:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
    247e:	4770      	bx	lr
    2480:	20001510 	.word	0x20001510
    2484:	0000a9b4 	.word	0x0000a9b4
    2488:	e000ed00 	.word	0xe000ed00

0000248c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    248c:	4913      	ldr	r1, [pc, #76]	; (24dc <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    248e:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    2490:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    2494:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    2496:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    249a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    249e:	2020      	movs	r0, #32
    msr BASEPRI, r0
    24a0:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    24a4:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    24a8:	4f0d      	ldr	r7, [pc, #52]	; (24e0 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    24aa:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    24ae:	6a0a      	ldr	r2, [r1, #32]

    str r2, [r1, #_kernel_offset_to_current]
    24b0:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    24b2:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    24b4:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    movs r3, #0
    24b8:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    24ba:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    24be:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    24c2:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    24c4:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    24c6:	f000 fb99 	bl	2bfc <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    24ca:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    24ce:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    24d2:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    24d6:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    24da:	4770      	bx	lr
    ldr r1, =_kernel
    24dc:	20001510 	.word	0x20001510
    ldr v4, =_SCS_ICSR
    24e0:	e000ed04 	.word	0xe000ed04

000024e4 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    24e4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    24e8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    24ea:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    24ee:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    24f2:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    24f4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    24f8:	2902      	cmp	r1, #2
    beq _oops
    24fa:	d0ff      	beq.n	24fc <_oops>

000024fc <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    24fc:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    24fe:	f005 fe7c 	bl	81fa <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    2502:	bd01      	pop	{r0, pc}

00002504 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    2504:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    2506:	2b00      	cmp	r3, #0
    2508:	db08      	blt.n	251c <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    250a:	2201      	movs	r2, #1
    250c:	f000 001f 	and.w	r0, r0, #31
    2510:	fa02 f000 	lsl.w	r0, r2, r0
    2514:	4a02      	ldr	r2, [pc, #8]	; (2520 <arch_irq_enable+0x1c>)
    2516:	095b      	lsrs	r3, r3, #5
    2518:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    251c:	4770      	bx	lr
    251e:	bf00      	nop
    2520:	e000e100 	.word	0xe000e100

00002524 <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    2524:	b570      	push	{r4, r5, r6, lr}
	} else {
		prio += _IRQ_PRIO_OFFSET;
	}
#else
	ARG_UNUSED(flags);
	prio += _IRQ_PRIO_OFFSET;
    2526:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    2528:	2c07      	cmp	r4, #7
{
    252a:	4605      	mov	r5, r0
    252c:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    252e:	d90e      	bls.n	254e <z_arm_irq_priority_set+0x2a>
    2530:	235c      	movs	r3, #92	; 0x5c
    2532:	4a10      	ldr	r2, [pc, #64]	; (2574 <z_arm_irq_priority_set+0x50>)
    2534:	4910      	ldr	r1, [pc, #64]	; (2578 <z_arm_irq_priority_set+0x54>)
    2536:	4811      	ldr	r0, [pc, #68]	; (257c <z_arm_irq_priority_set+0x58>)
    2538:	f005 f990 	bl	785c <printk>
    253c:	4631      	mov	r1, r6
    253e:	4810      	ldr	r0, [pc, #64]	; (2580 <z_arm_irq_priority_set+0x5c>)
    2540:	2207      	movs	r2, #7
    2542:	f005 f98b 	bl	785c <printk>
    2546:	215c      	movs	r1, #92	; 0x5c
    2548:	480a      	ldr	r0, [pc, #40]	; (2574 <z_arm_irq_priority_set+0x50>)
    254a:	f005 fbd9 	bl	7d00 <assert_post_action>
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    254e:	b26b      	sxtb	r3, r5
  if ((int32_t)(IRQn) >= 0)
    2550:	2b00      	cmp	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2552:	bfac      	ite	ge
    2554:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2558:	4b0a      	ldrlt	r3, [pc, #40]	; (2584 <z_arm_irq_priority_set+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    255a:	ea4f 1444 	mov.w	r4, r4, lsl #5
    255e:	b2e4      	uxtb	r4, r4
    2560:	bfab      	itete	ge
    2562:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2566:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    256a:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    256e:	555c      	strblt	r4, [r3, r5]
}
    2570:	bd70      	pop	{r4, r5, r6, pc}
    2572:	bf00      	nop
    2574:	0000b82b 	.word	0x0000b82b
    2578:	0000b861 	.word	0x0000b861
    257c:	0000b021 	.word	0x0000b021
    2580:	0000b87c 	.word	0x0000b87c
    2584:	e000ed14 	.word	0xe000ed14

00002588 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    2588:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    258c:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    258e:	490b      	ldr	r1, [pc, #44]	; (25bc <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
    2590:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    2594:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    2596:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    259a:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    259e:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    25a0:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    25a4:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    25a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    25ac:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    25b0:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    25b2:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    25b4:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    25b6:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    25ba:	4770      	bx	lr
    25bc:	00007891 	.word	0x00007891

000025c0 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    25c0:	4a0a      	ldr	r2, [pc, #40]	; (25ec <z_check_thread_stack_fail+0x2c>)
{
    25c2:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    25c4:	6890      	ldr	r0, [r2, #8]

	if (!thread) {
    25c6:	b178      	cbz	r0, 25e8 <z_check_thread_stack_fail+0x28>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    25c8:	f113 0f16 	cmn.w	r3, #22
    25cc:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
    25d0:	d005      	beq.n	25de <z_check_thread_stack_fail+0x1e>
    25d2:	f1a0 0220 	sub.w	r2, r0, #32
    25d6:	429a      	cmp	r2, r3
    25d8:	d805      	bhi.n	25e6 <z_check_thread_stack_fail+0x26>
    25da:	4283      	cmp	r3, r0
    25dc:	d203      	bcs.n	25e6 <z_check_thread_stack_fail+0x26>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    25de:	4281      	cmp	r1, r0
    25e0:	bf28      	it	cs
    25e2:	2000      	movcs	r0, #0
    25e4:	4770      	bx	lr
    25e6:	2000      	movs	r0, #0
}
    25e8:	4770      	bx	lr
    25ea:	bf00      	nop
    25ec:	20001510 	.word	0x20001510

000025f0 <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    25f0:	4604      	mov	r4, r0
    25f2:	b508      	push	{r3, lr}
    25f4:	460e      	mov	r6, r1
    25f6:	4615      	mov	r5, r2
	z_arm_configure_static_mpu_regions();
    25f8:	f000 faf4 	bl	2be4 <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    25fc:	4b08      	ldr	r3, [pc, #32]	; (2620 <arch_switch_to_main_thread+0x30>)
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    25fe:	4620      	mov	r0, r4
	_current = main_thread;
    2600:	609c      	str	r4, [r3, #8]
	z_arm_configure_dynamic_mpu_regions(main_thread);
    2602:	f000 fafb 	bl	2bfc <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    2606:	4628      	mov	r0, r5
    2608:	f386 8809 	msr	PSP, r6
    260c:	2100      	movs	r1, #0
    260e:	b663      	cpsie	if
    2610:	f381 8811 	msr	BASEPRI, r1
    2614:	f3bf 8f6f 	isb	sy
    2618:	2200      	movs	r2, #0
    261a:	2300      	movs	r3, #0
    261c:	f005 f938 	bl	7890 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    2620:	20001510 	.word	0x20001510

00002624 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    2624:	4901      	ldr	r1, [pc, #4]	; (262c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    2626:	2210      	movs	r2, #16
	str	r2, [r1]
    2628:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    262a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    262c:	e000ed10 	.word	0xe000ed10

00002630 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    2630:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    2632:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    2634:	f380 8811 	msr	BASEPRI, r0
	isb
    2638:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    263c:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    2640:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    2642:	b662      	cpsie	i
	isb
    2644:	f3bf 8f6f 	isb	sy

	bx	lr
    2648:	4770      	bx	lr
    264a:	bf00      	nop

0000264c <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    264c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    264e:	4605      	mov	r5, r0

	if (esf != NULL) {
    2650:	460c      	mov	r4, r1
    2652:	b1c9      	cbz	r1, 2688 <z_arm_fatal_error+0x3c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    2654:	688b      	ldr	r3, [r1, #8]
    2656:	4810      	ldr	r0, [pc, #64]	; (2698 <z_arm_fatal_error+0x4c>)
    2658:	9300      	str	r3, [sp, #0]
    265a:	e9d1 2300 	ldrd	r2, r3, [r1]
    265e:	2145      	movs	r1, #69	; 0x45
    2660:	f005 fb5b 	bl	7d1a <z_log_minimal_printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    2664:	6963      	ldr	r3, [r4, #20]
    2666:	2145      	movs	r1, #69	; 0x45
    2668:	9300      	str	r3, [sp, #0]
    266a:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    266e:	480b      	ldr	r0, [pc, #44]	; (269c <z_arm_fatal_error+0x50>)
    2670:	f005 fb53 	bl	7d1a <z_log_minimal_printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    2674:	2145      	movs	r1, #69	; 0x45
    2676:	69e2      	ldr	r2, [r4, #28]
    2678:	4809      	ldr	r0, [pc, #36]	; (26a0 <z_arm_fatal_error+0x54>)
    267a:	f005 fb4e 	bl	7d1a <z_log_minimal_printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    267e:	2145      	movs	r1, #69	; 0x45
    2680:	69a2      	ldr	r2, [r4, #24]
    2682:	4808      	ldr	r0, [pc, #32]	; (26a4 <z_arm_fatal_error+0x58>)
    2684:	f005 fb49 	bl	7d1a <z_log_minimal_printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    2688:	4621      	mov	r1, r4
    268a:	4628      	mov	r0, r5
}
    268c:	b003      	add	sp, #12
    268e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	z_fatal_error(reason, esf);
    2692:	f002 baa9 	b.w	4be8 <z_fatal_error>
    2696:	bf00      	nop
    2698:	0000b8b1 	.word	0x0000b8b1
    269c:	0000b8e5 	.word	0x0000b8e5
    26a0:	0000b919 	.word	0x0000b919
    26a4:	0000b92d 	.word	0x0000b92d

000026a8 <DefaultHandler>:
 *
 * @return N/A
 */

static void DefaultHandler(void)
{
    26a8:	b508      	push	{r3, lr}
	printk("NMI received! Rebooting...\n");
    26aa:	4804      	ldr	r0, [pc, #16]	; (26bc <DefaultHandler+0x14>)
    26ac:	f005 f8d6 	bl	785c <printk>
	/* In ARM implementation sys_reboot ignores the parameter */
	sys_reboot(0);
}
    26b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_reboot(0);
    26b4:	2000      	movs	r0, #0
    26b6:	f7ff b9a9 	b.w	1a0c <sys_reboot>
    26ba:	bf00      	nop
    26bc:	0000b708 	.word	0x0000b708

000026c0 <z_arm_nmi_init>:
 * @return N/A
 */

void z_arm_nmi_init(void)
{
	handler = DefaultHandler;
    26c0:	4b01      	ldr	r3, [pc, #4]	; (26c8 <z_arm_nmi_init+0x8>)
    26c2:	4a02      	ldr	r2, [pc, #8]	; (26cc <z_arm_nmi_init+0xc>)
    26c4:	601a      	str	r2, [r3, #0]
}
    26c6:	4770      	bx	lr
    26c8:	20000090 	.word	0x20000090
    26cc:	000026a9 	.word	0x000026a9

000026d0 <z_NmiHandlerSet>:
 * @return N/A
 */

void z_NmiHandlerSet(void (*pHandler)(void))
{
	handler = pHandler;
    26d0:	4b01      	ldr	r3, [pc, #4]	; (26d8 <z_NmiHandlerSet+0x8>)
    26d2:	6018      	str	r0, [r3, #0]
}
    26d4:	4770      	bx	lr
    26d6:	bf00      	nop
    26d8:	20000090 	.word	0x20000090

000026dc <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    26dc:	b508      	push	{r3, lr}
	handler();
    26de:	4b03      	ldr	r3, [pc, #12]	; (26ec <z_arm_nmi+0x10>)
    26e0:	681b      	ldr	r3, [r3, #0]
    26e2:	4798      	blx	r3
	z_arm_int_exit();
}
    26e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    26e8:	f000 ba3e 	b.w	2b68 <z_arm_exc_exit>
    26ec:	20000090 	.word	0x20000090

000026f0 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    26f0:	bf30      	wfi
    b z_SysNmiOnReset
    26f2:	f7ff bffd 	b.w	26f0 <z_SysNmiOnReset>
    26f6:	bf00      	nop

000026f8 <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    26f8:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    26fa:	4b09      	ldr	r3, [pc, #36]	; (2720 <z_arm_prep_c+0x28>)
    26fc:	4a09      	ldr	r2, [pc, #36]	; (2724 <z_arm_prep_c+0x2c>)
    26fe:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    2702:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    2706:	6093      	str	r3, [r2, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    2708:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    270c:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    2710:	f002 fac4 	bl	4c9c <z_bss_zero>
	z_data_copy();
    2714:	f004 fc42 	bl	6f9c <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    2718:	f000 fa46 	bl	2ba8 <z_arm_interrupt_init>
	z_cstart();
    271c:	f002 fae2 	bl	4ce4 <z_cstart>
    2720:	00000000 	.word	0x00000000
    2724:	e000ed00 	.word	0xe000ed00

00002728 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    2728:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    272a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    272e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    2732:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    2736:	4904      	ldr	r1, [pc, #16]	; (2748 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    2738:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    273a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    273c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    273e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    2742:	4902      	ldr	r1, [pc, #8]	; (274c <_isr_wrapper+0x24>)
	bx r1
    2744:	4708      	bx	r1
    2746:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
    2748:	0000a468 	.word	0x0000a468
	ldr r1, =z_arm_int_exit
    274c:	00002b69 	.word	0x00002b69

00002750 <__start>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2750:	2020      	movs	r0, #32
    msr BASEPRI, r0
    2752:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    2756:	4808      	ldr	r0, [pc, #32]	; (2778 <__start+0x28>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    2758:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    275c:	1840      	adds	r0, r0, r1
    msr PSP, r0
    275e:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    2762:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    2766:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    2768:	4308      	orrs	r0, r1
    msr CONTROL, r0
    276a:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    276e:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    2772:	f7ff ffc1 	bl	26f8 <z_arm_prep_c>
    2776:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    2778:	200038a0 	.word	0x200038a0

0000277c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    277c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    2780:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    2784:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    2786:	4672      	mov	r2, lr
	bl z_arm_fault
    2788:	f000 f926 	bl	29d8 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    278c:	bd01      	pop	{r0, pc}
    278e:	bf00      	nop

00002790 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    2790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    2794:	4c36      	ldr	r4, [pc, #216]	; (2870 <mem_manage_fault+0xe0>)
{
    2796:	4607      	mov	r7, r0
    2798:	4688      	mov	r8, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    279a:	4836      	ldr	r0, [pc, #216]	; (2874 <mem_manage_fault+0xe4>)
    279c:	2145      	movs	r1, #69	; 0x45
{
    279e:	4615      	mov	r5, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    27a0:	f005 fabb 	bl	7d1a <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    27a4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    27a6:	06de      	lsls	r6, r3, #27
    27a8:	d503      	bpl.n	27b2 <mem_manage_fault+0x22>
		PR_FAULT_INFO("  Stacking error (context area might be"
    27aa:	2145      	movs	r1, #69	; 0x45
    27ac:	4832      	ldr	r0, [pc, #200]	; (2878 <mem_manage_fault+0xe8>)
    27ae:	f005 fab4 	bl	7d1a <z_log_minimal_printk>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    27b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    27b4:	0718      	lsls	r0, r3, #28
    27b6:	d503      	bpl.n	27c0 <mem_manage_fault+0x30>
		PR_FAULT_INFO("  Unstacking error");
    27b8:	2145      	movs	r1, #69	; 0x45
    27ba:	4830      	ldr	r0, [pc, #192]	; (287c <mem_manage_fault+0xec>)
    27bc:	f005 faad 	bl	7d1a <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    27c0:	4c2b      	ldr	r4, [pc, #172]	; (2870 <mem_manage_fault+0xe0>)
    27c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    27c4:	0799      	lsls	r1, r3, #30
    27c6:	d41a      	bmi.n	27fe <mem_manage_fault+0x6e>
	uint32_t mmfar = -EINVAL;
    27c8:	f06f 0615 	mvn.w	r6, #21
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    27cc:	4c28      	ldr	r4, [pc, #160]	; (2870 <mem_manage_fault+0xe0>)
    27ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    27d0:	07db      	lsls	r3, r3, #31
    27d2:	d503      	bpl.n	27dc <mem_manage_fault+0x4c>
		PR_FAULT_INFO("  Instruction Access Violation");
    27d4:	2145      	movs	r1, #69	; 0x45
    27d6:	482a      	ldr	r0, [pc, #168]	; (2880 <mem_manage_fault+0xf0>)
    27d8:	f005 fa9f 	bl	7d1a <z_log_minimal_printk>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    27dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    27de:	06d8      	lsls	r0, r3, #27
    27e0:	d422      	bmi.n	2828 <mem_manage_fault+0x98>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    27e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    27e4:	0799      	lsls	r1, r3, #30
    27e6:	d41f      	bmi.n	2828 <mem_manage_fault+0x98>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    27e8:	2400      	movs	r4, #0
		"Stacking error without stack guard / User-mode support\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    27ea:	4a21      	ldr	r2, [pc, #132]	; (2870 <mem_manage_fault+0xe0>)

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);

	return reason;
}
    27ec:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    27ee:	6a93      	ldr	r3, [r2, #40]	; 0x28
    27f0:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    27f4:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    27f6:	2300      	movs	r3, #0
    27f8:	702b      	strb	r3, [r5, #0]
}
    27fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		PR_FAULT_INFO("  Data Access Violation");
    27fe:	2145      	movs	r1, #69	; 0x45
    2800:	4820      	ldr	r0, [pc, #128]	; (2884 <mem_manage_fault+0xf4>)
    2802:	f005 fa8a 	bl	7d1a <z_log_minimal_printk>
		uint32_t temp = SCB->MMFAR;
    2806:	6b66      	ldr	r6, [r4, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    2808:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    280a:	061a      	lsls	r2, r3, #24
    280c:	d5dc      	bpl.n	27c8 <mem_manage_fault+0x38>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    280e:	4632      	mov	r2, r6
    2810:	2145      	movs	r1, #69	; 0x45
    2812:	481d      	ldr	r0, [pc, #116]	; (2888 <mem_manage_fault+0xf8>)
    2814:	f005 fa81 	bl	7d1a <z_log_minimal_printk>
			if (from_hard_fault) {
    2818:	f1b8 0f00 	cmp.w	r8, #0
    281c:	d0d6      	beq.n	27cc <mem_manage_fault+0x3c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    281e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2820:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    2824:	62a3      	str	r3, [r4, #40]	; 0x28
    2826:	e7d1      	b.n	27cc <mem_manage_fault+0x3c>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    2828:	f8df 8044 	ldr.w	r8, [pc, #68]	; 2870 <mem_manage_fault+0xe0>
    282c:	f8d8 3004 	ldr.w	r3, [r8, #4]
    2830:	051a      	lsls	r2, r3, #20
    2832:	d5d9      	bpl.n	27e8 <mem_manage_fault+0x58>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    2834:	4639      	mov	r1, r7
    2836:	4630      	mov	r0, r6
    2838:	f7ff fec2 	bl	25c0 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    283c:	4604      	mov	r4, r0
    283e:	b118      	cbz	r0, 2848 <mem_manage_fault+0xb8>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    2840:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    2844:	2402      	movs	r4, #2
    2846:	e7d0      	b.n	27ea <mem_manage_fault+0x5a>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    2848:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
    284c:	06db      	lsls	r3, r3, #27
    284e:	d5cb      	bpl.n	27e8 <mem_manage_fault+0x58>
    2850:	f240 1341 	movw	r3, #321	; 0x141
    2854:	4a0d      	ldr	r2, [pc, #52]	; (288c <mem_manage_fault+0xfc>)
    2856:	490e      	ldr	r1, [pc, #56]	; (2890 <mem_manage_fault+0x100>)
    2858:	480e      	ldr	r0, [pc, #56]	; (2894 <mem_manage_fault+0x104>)
    285a:	f004 ffff 	bl	785c <printk>
    285e:	480e      	ldr	r0, [pc, #56]	; (2898 <mem_manage_fault+0x108>)
    2860:	f004 fffc 	bl	785c <printk>
    2864:	f240 1141 	movw	r1, #321	; 0x141
    2868:	4808      	ldr	r0, [pc, #32]	; (288c <mem_manage_fault+0xfc>)
    286a:	f005 fa49 	bl	7d00 <assert_post_action>
    286e:	e7bc      	b.n	27ea <mem_manage_fault+0x5a>
    2870:	e000ed00 	.word	0xe000ed00
    2874:	0000b960 	.word	0x0000b960
    2878:	0000b97b 	.word	0x0000b97b
    287c:	0000b9b3 	.word	0x0000b9b3
    2880:	0000ba03 	.word	0x0000ba03
    2884:	0000b9cb 	.word	0x0000b9cb
    2888:	0000b9e8 	.word	0x0000b9e8
    288c:	0000ba27 	.word	0x0000ba27
    2890:	0000ba61 	.word	0x0000ba61
    2894:	0000b021 	.word	0x0000b021
    2898:	0000baab 	.word	0x0000baab

0000289c <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    289c:	b510      	push	{r4, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    289e:	4c1d      	ldr	r4, [pc, #116]	; (2914 <usage_fault.constprop.0+0x78>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    28a0:	2145      	movs	r1, #69	; 0x45
    28a2:	481d      	ldr	r0, [pc, #116]	; (2918 <usage_fault.constprop.0+0x7c>)
    28a4:	f005 fa39 	bl	7d1a <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    28a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    28aa:	019b      	lsls	r3, r3, #6
    28ac:	d503      	bpl.n	28b6 <usage_fault.constprop.0+0x1a>
		PR_FAULT_INFO("  Division by zero");
    28ae:	2145      	movs	r1, #69	; 0x45
    28b0:	481a      	ldr	r0, [pc, #104]	; (291c <usage_fault.constprop.0+0x80>)
    28b2:	f005 fa32 	bl	7d1a <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    28b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    28b8:	01dc      	lsls	r4, r3, #7
    28ba:	d503      	bpl.n	28c4 <usage_fault.constprop.0+0x28>
		PR_FAULT_INFO("  Unaligned memory access");
    28bc:	2145      	movs	r1, #69	; 0x45
    28be:	4818      	ldr	r0, [pc, #96]	; (2920 <usage_fault.constprop.0+0x84>)
    28c0:	f005 fa2b 	bl	7d1a <z_log_minimal_printk>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    28c4:	4c13      	ldr	r4, [pc, #76]	; (2914 <usage_fault.constprop.0+0x78>)
    28c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    28c8:	0318      	lsls	r0, r3, #12
    28ca:	d503      	bpl.n	28d4 <usage_fault.constprop.0+0x38>
		PR_FAULT_INFO("  No coprocessor instructions");
    28cc:	2145      	movs	r1, #69	; 0x45
    28ce:	4815      	ldr	r0, [pc, #84]	; (2924 <usage_fault.constprop.0+0x88>)
    28d0:	f005 fa23 	bl	7d1a <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    28d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    28d6:	0359      	lsls	r1, r3, #13
    28d8:	d503      	bpl.n	28e2 <usage_fault.constprop.0+0x46>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    28da:	2145      	movs	r1, #69	; 0x45
    28dc:	4812      	ldr	r0, [pc, #72]	; (2928 <usage_fault.constprop.0+0x8c>)
    28de:	f005 fa1c 	bl	7d1a <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    28e2:	4c0c      	ldr	r4, [pc, #48]	; (2914 <usage_fault.constprop.0+0x78>)
    28e4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    28e6:	039a      	lsls	r2, r3, #14
    28e8:	d503      	bpl.n	28f2 <usage_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    28ea:	2145      	movs	r1, #69	; 0x45
    28ec:	480f      	ldr	r0, [pc, #60]	; (292c <usage_fault.constprop.0+0x90>)
    28ee:	f005 fa14 	bl	7d1a <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    28f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    28f4:	03db      	lsls	r3, r3, #15
    28f6:	d503      	bpl.n	2900 <usage_fault.constprop.0+0x64>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    28f8:	2145      	movs	r1, #69	; 0x45
    28fa:	480d      	ldr	r0, [pc, #52]	; (2930 <usage_fault.constprop.0+0x94>)
    28fc:	f005 fa0d 	bl	7d1a <z_log_minimal_printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    2900:	4a04      	ldr	r2, [pc, #16]	; (2914 <usage_fault.constprop.0+0x78>)

	return reason;
}
    2902:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    2904:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2906:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    290a:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    290e:	6293      	str	r3, [r2, #40]	; 0x28
}
    2910:	bd10      	pop	{r4, pc}
    2912:	bf00      	nop
    2914:	e000ed00 	.word	0xe000ed00
    2918:	0000bace 	.word	0x0000bace
    291c:	0000baeb 	.word	0x0000baeb
    2920:	0000bb03 	.word	0x0000bb03
    2924:	0000bb22 	.word	0x0000bb22
    2928:	0000bb45 	.word	0x0000bb45
    292c:	0000bb6f 	.word	0x0000bb6f
    2930:	0000bb8e 	.word	0x0000bb8e

00002934 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    2934:	b570      	push	{r4, r5, r6, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    2936:	4c20      	ldr	r4, [pc, #128]	; (29b8 <bus_fault.constprop.0+0x84>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    2938:	4606      	mov	r6, r0
    293a:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    293c:	481f      	ldr	r0, [pc, #124]	; (29bc <bus_fault.constprop.0+0x88>)
    293e:	2145      	movs	r1, #69	; 0x45
    2940:	f005 f9eb 	bl	7d1a <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    2944:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2946:	04db      	lsls	r3, r3, #19
    2948:	d503      	bpl.n	2952 <bus_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error");
    294a:	2145      	movs	r1, #69	; 0x45
    294c:	481c      	ldr	r0, [pc, #112]	; (29c0 <bus_fault.constprop.0+0x8c>)
    294e:	f005 f9e4 	bl	7d1a <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    2952:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2954:	051c      	lsls	r4, r3, #20
    2956:	d503      	bpl.n	2960 <bus_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    2958:	2145      	movs	r1, #69	; 0x45
    295a:	481a      	ldr	r0, [pc, #104]	; (29c4 <bus_fault.constprop.0+0x90>)
    295c:	f005 f9dd 	bl	7d1a <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    2960:	4c15      	ldr	r4, [pc, #84]	; (29b8 <bus_fault.constprop.0+0x84>)
    2962:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2964:	0598      	lsls	r0, r3, #22
    2966:	d510      	bpl.n	298a <bus_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Precise data bus error");
    2968:	2145      	movs	r1, #69	; 0x45
    296a:	4817      	ldr	r0, [pc, #92]	; (29c8 <bus_fault.constprop.0+0x94>)
    296c:	f005 f9d5 	bl	7d1a <z_log_minimal_printk>
		STORE_xFAR(bfar, SCB->BFAR);
    2970:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    2972:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2974:	0419      	lsls	r1, r3, #16
    2976:	d508      	bpl.n	298a <bus_fault.constprop.0+0x56>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    2978:	2145      	movs	r1, #69	; 0x45
    297a:	4814      	ldr	r0, [pc, #80]	; (29cc <bus_fault.constprop.0+0x98>)
    297c:	f005 f9cd 	bl	7d1a <z_log_minimal_printk>
			if (from_hard_fault) {
    2980:	b11e      	cbz	r6, 298a <bus_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    2982:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2984:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    2988:	62a3      	str	r3, [r4, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    298a:	4c0b      	ldr	r4, [pc, #44]	; (29b8 <bus_fault.constprop.0+0x84>)
    298c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    298e:	055a      	lsls	r2, r3, #21
    2990:	d503      	bpl.n	299a <bus_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Imprecise data bus error");
    2992:	2145      	movs	r1, #69	; 0x45
    2994:	480e      	ldr	r0, [pc, #56]	; (29d0 <bus_fault.constprop.0+0x9c>)
    2996:	f005 f9c0 	bl	7d1a <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    299a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    299c:	05db      	lsls	r3, r3, #23
    299e:	d503      	bpl.n	29a8 <bus_fault.constprop.0+0x74>
		PR_FAULT_INFO("  Instruction bus error");
    29a0:	2145      	movs	r1, #69	; 0x45
    29a2:	480c      	ldr	r0, [pc, #48]	; (29d4 <bus_fault.constprop.0+0xa0>)
    29a4:	f005 f9b9 	bl	7d1a <z_log_minimal_printk>
	*recoverable = memory_fault_recoverable(esf);
    29a8:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    29aa:	4a03      	ldr	r2, [pc, #12]	; (29b8 <bus_fault.constprop.0+0x84>)
    29ac:	6a93      	ldr	r3, [r2, #40]	; 0x28
    29ae:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    29b2:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    29b4:	7028      	strb	r0, [r5, #0]
}
    29b6:	bd70      	pop	{r4, r5, r6, pc}
    29b8:	e000ed00 	.word	0xe000ed00
    29bc:	0000bbbe 	.word	0x0000bbbe
    29c0:	0000bbd9 	.word	0x0000bbd9
    29c4:	0000b9b3 	.word	0x0000b9b3
    29c8:	0000bbef 	.word	0x0000bbef
    29cc:	0000bc0d 	.word	0x0000bc0d
    29d0:	0000bc27 	.word	0x0000bc27
    29d4:	0000bc47 	.word	0x0000bc47

000029d8 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    29d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    29dc:	4b51      	ldr	r3, [pc, #324]	; (2b24 <z_arm_fault+0x14c>)
    29de:	2700      	movs	r7, #0
    29e0:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
    29e4:	b08a      	sub	sp, #40	; 0x28
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    29e6:	f3c8 0508 	ubfx	r5, r8, #0, #9
    29ea:	f387 8811 	msr	BASEPRI, r7
    29ee:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    29f2:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    29f6:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    29fa:	d107      	bne.n	2a0c <z_arm_fault+0x34>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    29fc:	f002 030c 	and.w	r3, r2, #12
    2a00:	2b08      	cmp	r3, #8
    2a02:	d114      	bne.n	2a2e <z_arm_fault+0x56>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    2a04:	2145      	movs	r1, #69	; 0x45
    2a06:	4848      	ldr	r0, [pc, #288]	; (2b28 <z_arm_fault+0x150>)
    2a08:	f005 f987 	bl	7d1a <z_log_minimal_printk>

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    2a0c:	f44f 7371 	mov.w	r3, #964	; 0x3c4
    2a10:	4a46      	ldr	r2, [pc, #280]	; (2b2c <z_arm_fault+0x154>)
    2a12:	4947      	ldr	r1, [pc, #284]	; (2b30 <z_arm_fault+0x158>)
    2a14:	4847      	ldr	r0, [pc, #284]	; (2b34 <z_arm_fault+0x15c>)
    2a16:	f004 ff21 	bl	785c <printk>
    2a1a:	4847      	ldr	r0, [pc, #284]	; (2b38 <z_arm_fault+0x160>)
    2a1c:	f004 ff1e 	bl	785c <printk>
    2a20:	f44f 7171 	mov.w	r1, #964	; 0x3c4
    2a24:	4841      	ldr	r0, [pc, #260]	; (2b2c <z_arm_fault+0x154>)
    2a26:	f005 f96b 	bl	7d00 <assert_post_action>
    2a2a:	2600      	movs	r6, #0
    2a2c:	e006      	b.n	2a3c <z_arm_fault+0x64>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    2a2e:	0712      	lsls	r2, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    2a30:	bf4e      	itee	mi
    2a32:	460e      	movmi	r6, r1
			ptr_esf = (z_arch_esf_t *)msp;
    2a34:	4606      	movpl	r6, r0
			*nested_exc = true;
    2a36:	2701      	movpl	r7, #1
	__ASSERT(esf != NULL,
    2a38:	2e00      	cmp	r6, #0
    2a3a:	d0e7      	beq.n	2a0c <z_arm_fault+0x34>
	*recoverable = false;
    2a3c:	2400      	movs	r4, #0
    2a3e:	1eeb      	subs	r3, r5, #3
    2a40:	f88d 4007 	strb.w	r4, [sp, #7]
	switch (fault) {
    2a44:	2b09      	cmp	r3, #9
    2a46:	d85b      	bhi.n	2b00 <z_arm_fault+0x128>
    2a48:	e8df f003 	tbb	[pc, r3]
    2a4c:	33534f05 	.word	0x33534f05
    2a50:	5a5a5a5a 	.word	0x5a5a5a5a
    2a54:	575a      	.short	0x575a
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2a56:	4d33      	ldr	r5, [pc, #204]	; (2b24 <z_arm_fault+0x14c>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    2a58:	2145      	movs	r1, #69	; 0x45
    2a5a:	4838      	ldr	r0, [pc, #224]	; (2b3c <z_arm_fault+0x164>)
    2a5c:	f005 f95d 	bl	7d1a <z_log_minimal_printk>
	*recoverable = false;
    2a60:	f88d 4007 	strb.w	r4, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2a64:	6aec      	ldr	r4, [r5, #44]	; 0x2c
    2a66:	f014 0402 	ands.w	r4, r4, #2
    2a6a:	d005      	beq.n	2a78 <z_arm_fault+0xa0>
		PR_EXC("  Bus fault on vector table read");
    2a6c:	2145      	movs	r1, #69	; 0x45
    2a6e:	4834      	ldr	r0, [pc, #208]	; (2b40 <z_arm_fault+0x168>)
	PR_FAULT_INFO(
    2a70:	f005 f953 	bl	7d1a <z_log_minimal_printk>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    2a74:	2400      	movs	r4, #0
}
    2a76:	e01f      	b.n	2ab8 <z_arm_fault+0xe0>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    2a78:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    2a7a:	005b      	lsls	r3, r3, #1
    2a7c:	d51c      	bpl.n	2ab8 <z_arm_fault+0xe0>
		PR_EXC("  Fault escalation (see below)");
    2a7e:	2145      	movs	r1, #69	; 0x45
    2a80:	4830      	ldr	r0, [pc, #192]	; (2b44 <z_arm_fault+0x16c>)
    2a82:	f005 f94a 	bl	7d1a <z_log_minimal_printk>
		if (SCB_MMFSR != 0) {
    2a86:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
    2a8a:	b133      	cbz	r3, 2a9a <z_arm_fault+0xc2>
			reason = mem_manage_fault(esf, 1, recoverable);
    2a8c:	2101      	movs	r1, #1
    2a8e:	f10d 0207 	add.w	r2, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    2a92:	4630      	mov	r0, r6
    2a94:	f7ff fe7c 	bl	2790 <mem_manage_fault>
    2a98:	e00d      	b.n	2ab6 <z_arm_fault+0xde>
		} else if (SCB_BFSR != 0) {
    2a9a:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
    2a9e:	b12b      	cbz	r3, 2aac <z_arm_fault+0xd4>
			reason = bus_fault(esf, 1, recoverable);
    2aa0:	2001      	movs	r0, #1
    2aa2:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    2aa6:	f7ff ff45 	bl	2934 <bus_fault.constprop.0>
    2aaa:	e004      	b.n	2ab6 <z_arm_fault+0xde>
		} else if (SCB_UFSR != 0) {
    2aac:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
    2aae:	b29b      	uxth	r3, r3
    2ab0:	b113      	cbz	r3, 2ab8 <z_arm_fault+0xe0>
			reason = usage_fault(esf);
    2ab2:	f7ff fef3 	bl	289c <usage_fault.constprop.0>
    2ab6:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    2ab8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    2abc:	b993      	cbnz	r3, 2ae4 <z_arm_fault+0x10c>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    2abe:	2220      	movs	r2, #32
    2ac0:	4631      	mov	r1, r6
    2ac2:	a802      	add	r0, sp, #8
    2ac4:	f005 fc80 	bl	83c8 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    2ac8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2aca:	b337      	cbz	r7, 2b1a <z_arm_fault+0x142>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    2acc:	f3c3 0208 	ubfx	r2, r3, #0, #9
    2ad0:	b922      	cbnz	r2, 2adc <z_arm_fault+0x104>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    2ad2:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    2ad6:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    2ada:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    2adc:	4620      	mov	r0, r4
    2ade:	a902      	add	r1, sp, #8
    2ae0:	f7ff fdb4 	bl	264c <z_arm_fatal_error>
}
    2ae4:	b00a      	add	sp, #40	; 0x28
    2ae6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    2aea:	2100      	movs	r1, #0
    2aec:	f10d 0207 	add.w	r2, sp, #7
    2af0:	e7cf      	b.n	2a92 <z_arm_fault+0xba>
		reason = bus_fault(esf, 0, recoverable);
    2af2:	2000      	movs	r0, #0
    2af4:	f10d 0107 	add.w	r1, sp, #7
    2af8:	e7d5      	b.n	2aa6 <z_arm_fault+0xce>
	PR_FAULT_INFO(
    2afa:	2145      	movs	r1, #69	; 0x45
    2afc:	4812      	ldr	r0, [pc, #72]	; (2b48 <z_arm_fault+0x170>)
    2afe:	e7b7      	b.n	2a70 <z_arm_fault+0x98>
	PR_FAULT_INFO("***** %s %d) *****",
    2b00:	4912      	ldr	r1, [pc, #72]	; (2b4c <z_arm_fault+0x174>)
    2b02:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
    2b06:	4a12      	ldr	r2, [pc, #72]	; (2b50 <z_arm_fault+0x178>)
    2b08:	4812      	ldr	r0, [pc, #72]	; (2b54 <z_arm_fault+0x17c>)
    2b0a:	bf08      	it	eq
    2b0c:	460a      	moveq	r2, r1
    2b0e:	f1a5 0310 	sub.w	r3, r5, #16
    2b12:	2145      	movs	r1, #69	; 0x45
    2b14:	f005 f901 	bl	7d1a <z_log_minimal_printk>
    2b18:	e7ac      	b.n	2a74 <z_arm_fault+0x9c>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    2b1a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    2b1e:	f023 0301 	bic.w	r3, r3, #1
    2b22:	e7da      	b.n	2ada <z_arm_fault+0x102>
    2b24:	e000ed00 	.word	0xe000ed00
    2b28:	0000bc92 	.word	0x0000bc92
    2b2c:	0000ba27 	.word	0x0000ba27
    2b30:	0000bcc2 	.word	0x0000bcc2
    2b34:	0000b021 	.word	0x0000b021
    2b38:	0000bcd5 	.word	0x0000bcd5
    2b3c:	0000bd13 	.word	0x0000bd13
    2b40:	0000bd2f 	.word	0x0000bd2f
    2b44:	0000bd55 	.word	0x0000bd55
    2b48:	0000bd79 	.word	0x0000bd79
    2b4c:	0000bc64 	.word	0x0000bc64
    2b50:	0000bc79 	.word	0x0000bc79
    2b54:	0000bdb4 	.word	0x0000bdb4

00002b58 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    2b58:	4a02      	ldr	r2, [pc, #8]	; (2b64 <z_arm_fault_init+0xc>)
    2b5a:	6953      	ldr	r3, [r2, #20]
    2b5c:	f043 0310 	orr.w	r3, r3, #16
    2b60:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    2b62:	4770      	bx	lr
    2b64:	e000ed00 	.word	0xe000ed00

00002b68 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    2b68:	4b04      	ldr	r3, [pc, #16]	; (2b7c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    2b6a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    2b6c:	6a18      	ldr	r0, [r3, #32]
	cmp r0, r1
    2b6e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    2b70:	d003      	beq.n	2b7a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    2b72:	4903      	ldr	r1, [pc, #12]	; (2b80 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    2b74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    2b78:	600a      	str	r2, [r1, #0]

00002b7a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    2b7a:	4770      	bx	lr
	ldr r3, =_kernel
    2b7c:	20001510 	.word	0x20001510
	ldr r1, =_SCS_ICSR
    2b80:	e000ed04 	.word	0xe000ed04

00002b84 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    2b84:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    2b88:	4905      	ldr	r1, [pc, #20]	; (2ba0 <sys_arch_reboot+0x1c>)
    2b8a:	4b06      	ldr	r3, [pc, #24]	; (2ba4 <sys_arch_reboot+0x20>)
    2b8c:	68ca      	ldr	r2, [r1, #12]
    2b8e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2b92:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2b94:	60cb      	str	r3, [r1, #12]
    2b96:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    2b9a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    2b9c:	e7fd      	b.n	2b9a <sys_arch_reboot+0x16>
    2b9e:	bf00      	nop
    2ba0:	e000ed00 	.word	0xe000ed00
    2ba4:	05fa0004 	.word	0x05fa0004

00002ba8 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    2ba8:	2300      	movs	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2baa:	2120      	movs	r1, #32
    2bac:	4803      	ldr	r0, [pc, #12]	; (2bbc <z_arm_interrupt_init+0x14>)
    2bae:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    2bb0:	3301      	adds	r3, #1
    2bb2:	2b20      	cmp	r3, #32
    2bb4:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    2bb8:	d1f9      	bne.n	2bae <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    2bba:	4770      	bx	lr
    2bbc:	e000e100 	.word	0xe000e100

00002bc0 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    2bc0:	4b06      	ldr	r3, [pc, #24]	; (2bdc <z_impl_k_thread_abort+0x1c>)
    2bc2:	689b      	ldr	r3, [r3, #8]
    2bc4:	4283      	cmp	r3, r0
    2bc6:	d107      	bne.n	2bd8 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    2bc8:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    2bcc:	b123      	cbz	r3, 2bd8 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2bce:	4a04      	ldr	r2, [pc, #16]	; (2be0 <z_impl_k_thread_abort+0x20>)
    2bd0:	6853      	ldr	r3, [r2, #4]
    2bd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2bd6:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    2bd8:	f003 bd1c 	b.w	6614 <z_thread_abort>
    2bdc:	20001510 	.word	0x20001510
    2be0:	e000ed00 	.word	0xe000ed00

00002be4 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    2be4:	2101      	movs	r1, #1
    2be6:	4b02      	ldr	r3, [pc, #8]	; (2bf0 <z_arm_configure_static_mpu_regions+0xc>)
    2be8:	4a02      	ldr	r2, [pc, #8]	; (2bf4 <z_arm_configure_static_mpu_regions+0x10>)
    2bea:	4803      	ldr	r0, [pc, #12]	; (2bf8 <z_arm_configure_static_mpu_regions+0x14>)
    2bec:	f000 b8e0 	b.w	2db0 <arm_core_mpu_configure_static_mpu_regions>
    2bf0:	20400000 	.word	0x20400000
    2bf4:	20000000 	.word	0x20000000
    2bf8:	0000a7b8 	.word	0x0000a7b8

00002bfc <z_arm_configure_dynamic_mpu_regions>:
	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    2bfc:	2120      	movs	r1, #32
		guard_start = thread->stack_info.start - guard_size;
    2bfe:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
	dynamic_regions[region_num].start = guard_start;
    2c02:	4b05      	ldr	r3, [pc, #20]	; (2c18 <z_arm_configure_dynamic_mpu_regions+0x1c>)
		guard_start = thread->stack_info.start - guard_size;
    2c04:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    2c06:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    2c08:	4a04      	ldr	r2, [pc, #16]	; (2c1c <z_arm_configure_dynamic_mpu_regions+0x20>)

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    2c0a:	4618      	mov	r0, r3
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    2c0c:	e9c3 1201 	strd	r1, r2, [r3, #4]
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    2c10:	2101      	movs	r1, #1
    2c12:	f000 b8f5 	b.w	2e00 <arm_core_mpu_configure_dynamic_mpu_regions>
    2c16:	bf00      	nop
    2c18:	20001264 	.word	0x20001264
    2c1c:	150b0000 	.word	0x150b0000

00002c20 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    2c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i;
	int reg_index = start_reg_index;
    2c22:	4615      	mov	r5, r2

	for (i = 0; i < regions_num; i++) {
    2c24:	2200      	movs	r2, #0
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
    2c26:	4f23      	ldr	r7, [pc, #140]	; (2cb4 <mpu_configure_regions+0x94>)
    2c28:	428a      	cmp	r2, r1
    2c2a:	da0e      	bge.n	2c4a <mpu_configure_regions+0x2a>
		if (regions[i].size == 0U) {
    2c2c:	6844      	ldr	r4, [r0, #4]
    2c2e:	2c00      	cmp	r4, #0
    2c30:	d03c      	beq.n	2cac <mpu_configure_regions+0x8c>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    2c32:	b193      	cbz	r3, 2c5a <mpu_configure_regions+0x3a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    2c34:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    2c38:	ea14 0f0c 	tst.w	r4, ip
    2c3c:	d007      	beq.n	2c4e <mpu_configure_regions+0x2e>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    2c3e:	2145      	movs	r1, #69	; 0x45
    2c40:	481d      	ldr	r0, [pc, #116]	; (2cb8 <mpu_configure_regions+0x98>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    2c42:	f005 f86a 	bl	7d1a <z_log_minimal_printk>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    2c46:	f06f 0515 	mvn.w	r5, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    2c4a:	4628      	mov	r0, r5
    2c4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
    2c4e:	2c1f      	cmp	r4, #31
    2c50:	d9f5      	bls.n	2c3e <mpu_configure_regions+0x1e>
		((part->start & (part->size - 1U)) == 0U);
    2c52:	6806      	ldr	r6, [r0, #0]
		&&
    2c54:	ea1c 0f06 	tst.w	ip, r6
    2c58:	d1f1      	bne.n	2c3e <mpu_configure_regions+0x1e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    2c5a:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    2c5c:	6806      	ldr	r6, [r0, #0]
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    2c5e:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    2c62:	b2ed      	uxtb	r5, r5
	if (size <= 32U) {
    2c64:	d910      	bls.n	2c88 <mpu_configure_regions+0x68>
	if (size > (1UL << 31)) {
    2c66:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    2c6a:	d80f      	bhi.n	2c8c <mpu_configure_regions+0x6c>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    2c6c:	3c01      	subs	r4, #1
    2c6e:	fab4 f484 	clz	r4, r4
    2c72:	f1c4 041f 	rsb	r4, r4, #31
    2c76:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    2c78:	2d07      	cmp	r5, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    2c7a:	ea4c 0404 	orr.w	r4, ip, r4
    2c7e:	d907      	bls.n	2c90 <mpu_configure_regions+0x70>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    2c80:	462a      	mov	r2, r5
    2c82:	2145      	movs	r1, #69	; 0x45
    2c84:	480d      	ldr	r0, [pc, #52]	; (2cbc <mpu_configure_regions+0x9c>)
    2c86:	e7dc      	b.n	2c42 <mpu_configure_regions+0x22>
		return REGION_32B;
    2c88:	2408      	movs	r4, #8
    2c8a:	e7f5      	b.n	2c78 <mpu_configure_regions+0x58>
		return REGION_4G;
    2c8c:	243e      	movs	r4, #62	; 0x3e
    2c8e:	e7f3      	b.n	2c78 <mpu_configure_regions+0x58>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2c90:	f026 061f 	bic.w	r6, r6, #31
				| MPU_RBAR_VALID_Msk | index;
    2c94:	432e      	orrs	r6, r5
    2c96:	f046 0610 	orr.w	r6, r6, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    2c9a:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
    2c9e:	f8c7 5098 	str.w	r5, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2ca2:	f8c7 609c 	str.w	r6, [r7, #156]	; 0x9c
		reg_index++;
    2ca6:	3501      	adds	r5, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    2ca8:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
    2cac:	3201      	adds	r2, #1
    2cae:	300c      	adds	r0, #12
    2cb0:	e7ba      	b.n	2c28 <mpu_configure_regions+0x8>
    2cb2:	bf00      	nop
    2cb4:	e000ed00 	.word	0xe000ed00
    2cb8:	0000bdd0 	.word	0x0000bdd0
    2cbc:	0000bdf8 	.word	0x0000bdf8

00002cc0 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    2cc0:	2205      	movs	r2, #5
    2cc2:	4b04      	ldr	r3, [pc, #16]	; (2cd4 <arm_core_mpu_enable+0x14>)
    2cc4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    2cc8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2ccc:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    2cd0:	4770      	bx	lr
    2cd2:	bf00      	nop
    2cd4:	e000ed00 	.word	0xe000ed00

00002cd8 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    2cd8:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    2cdc:	2200      	movs	r2, #0
    2cde:	4b02      	ldr	r3, [pc, #8]	; (2ce8 <arm_core_mpu_disable+0x10>)
    2ce0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    2ce4:	4770      	bx	lr
    2ce6:	bf00      	nop
    2ce8:	e000ed00 	.word	0xe000ed00

00002cec <arm_mpu_init>:
 */
static int arm_mpu_init(const struct device *arg)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    2cec:	4927      	ldr	r1, [pc, #156]	; (2d8c <arm_mpu_init+0xa0>)
{
    2cee:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    2cf0:	680c      	ldr	r4, [r1, #0]
    2cf2:	2c08      	cmp	r4, #8
    2cf4:	d913      	bls.n	2d1e <arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    2cf6:	f240 133b 	movw	r3, #315	; 0x13b
    2cfa:	4a25      	ldr	r2, [pc, #148]	; (2d90 <arm_mpu_init+0xa4>)
    2cfc:	4925      	ldr	r1, [pc, #148]	; (2d94 <arm_mpu_init+0xa8>)
    2cfe:	4826      	ldr	r0, [pc, #152]	; (2d98 <arm_mpu_init+0xac>)
    2d00:	f004 fdac 	bl	785c <printk>
    2d04:	2208      	movs	r2, #8
    2d06:	4621      	mov	r1, r4
    2d08:	4824      	ldr	r0, [pc, #144]	; (2d9c <arm_mpu_init+0xb0>)
    2d0a:	f004 fda7 	bl	785c <printk>
    2d0e:	4820      	ldr	r0, [pc, #128]	; (2d90 <arm_mpu_init+0xa4>)
    2d10:	f240 113b 	movw	r1, #315	; 0x13b
    2d14:	f004 fff4 	bl	7d00 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
    2d18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
}
    2d1c:	bd10      	pop	{r4, pc}
	arm_core_mpu_disable();
    2d1e:	f7ff ffdb 	bl	2cd8 <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2d22:	2200      	movs	r2, #0
    2d24:	6848      	ldr	r0, [r1, #4]
    2d26:	491e      	ldr	r1, [pc, #120]	; (2da0 <arm_mpu_init+0xb4>)
    2d28:	4294      	cmp	r4, r2
    2d2a:	f100 000c 	add.w	r0, r0, #12
    2d2e:	d11a      	bne.n	2d66 <arm_mpu_init+0x7a>
	static_regions_num = mpu_config.num_regions;
    2d30:	4b1c      	ldr	r3, [pc, #112]	; (2da4 <arm_mpu_init+0xb8>)
    2d32:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    2d34:	f7ff ffc4 	bl	2cc0 <arm_core_mpu_enable>
	__ASSERT(
    2d38:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
    2d3c:	f3c3 2307 	ubfx	r3, r3, #8, #8
    2d40:	2b08      	cmp	r3, #8
    2d42:	d00e      	beq.n	2d62 <arm_mpu_init+0x76>
    2d44:	4918      	ldr	r1, [pc, #96]	; (2da8 <arm_mpu_init+0xbc>)
    2d46:	f44f 73b1 	mov.w	r3, #354	; 0x162
    2d4a:	4a11      	ldr	r2, [pc, #68]	; (2d90 <arm_mpu_init+0xa4>)
    2d4c:	4812      	ldr	r0, [pc, #72]	; (2d98 <arm_mpu_init+0xac>)
    2d4e:	f004 fd85 	bl	785c <printk>
    2d52:	4816      	ldr	r0, [pc, #88]	; (2dac <arm_mpu_init+0xc0>)
    2d54:	f004 fd82 	bl	785c <printk>
    2d58:	f44f 71b1 	mov.w	r1, #354	; 0x162
    2d5c:	480c      	ldr	r0, [pc, #48]	; (2d90 <arm_mpu_init+0xa4>)
    2d5e:	f004 ffcf 	bl	7d00 <assert_post_action>
	return 0;
    2d62:	2000      	movs	r0, #0
    2d64:	e7da      	b.n	2d1c <arm_mpu_init+0x30>
	MPU->RNR = index;
    2d66:	f8c1 2098 	str.w	r2, [r1, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2d6a:	f850 3c0c 	ldr.w	r3, [r0, #-12]
    2d6e:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    2d72:	4313      	orrs	r3, r2
    2d74:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2d78:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    2d7c:	f850 3c04 	ldr.w	r3, [r0, #-4]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2d80:	3201      	adds	r2, #1
    2d82:	f043 0301 	orr.w	r3, r3, #1
    2d86:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
    2d8a:	e7cd      	b.n	2d28 <arm_mpu_init+0x3c>
    2d8c:	0000a7c4 	.word	0x0000a7c4
    2d90:	0000be23 	.word	0x0000be23
    2d94:	0000b48d 	.word	0x0000b48d
    2d98:	0000b021 	.word	0x0000b021
    2d9c:	0000be63 	.word	0x0000be63
    2da0:	e000ed00 	.word	0xe000ed00
    2da4:	20001624 	.word	0x20001624
    2da8:	0000be97 	.word	0x0000be97
    2dac:	0000bee7 	.word	0x0000bee7

00002db0 <arm_core_mpu_configure_static_mpu_regions>:
{
    2db0:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    2db2:	4d0e      	ldr	r5, [pc, #56]	; (2dec <arm_core_mpu_configure_static_mpu_regions+0x3c>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    2db4:	2301      	movs	r3, #1
    2db6:	782a      	ldrb	r2, [r5, #0]
    2db8:	460c      	mov	r4, r1
    2dba:	f7ff ff31 	bl	2c20 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    2dbe:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    2dc0:	3016      	adds	r0, #22
    2dc2:	d111      	bne.n	2de8 <arm_core_mpu_configure_static_mpu_regions+0x38>
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    2dc4:	f44f 7382 	mov.w	r3, #260	; 0x104
    2dc8:	4a09      	ldr	r2, [pc, #36]	; (2df0 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    2dca:	490a      	ldr	r1, [pc, #40]	; (2df4 <arm_core_mpu_configure_static_mpu_regions+0x44>)
    2dcc:	480a      	ldr	r0, [pc, #40]	; (2df8 <arm_core_mpu_configure_static_mpu_regions+0x48>)
    2dce:	f004 fd45 	bl	785c <printk>
    2dd2:	4621      	mov	r1, r4
    2dd4:	4809      	ldr	r0, [pc, #36]	; (2dfc <arm_core_mpu_configure_static_mpu_regions+0x4c>)
    2dd6:	f004 fd41 	bl	785c <printk>
}
    2dda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    2dde:	f44f 7182 	mov.w	r1, #260	; 0x104
    2de2:	4803      	ldr	r0, [pc, #12]	; (2df0 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    2de4:	f004 bf8c 	b.w	7d00 <assert_post_action>
}
    2de8:	bd38      	pop	{r3, r4, r5, pc}
    2dea:	bf00      	nop
    2dec:	20001624 	.word	0x20001624
    2df0:	0000be23 	.word	0x0000be23
    2df4:	0000b48d 	.word	0x0000b48d
    2df8:	0000b021 	.word	0x0000b021
    2dfc:	0000bf08 	.word	0x0000bf08

00002e00 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    2e00:	b510      	push	{r4, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    2e02:	4a13      	ldr	r2, [pc, #76]	; (2e50 <arm_core_mpu_configure_dynamic_mpu_regions+0x50>)
    2e04:	2300      	movs	r3, #0
    2e06:	7812      	ldrb	r2, [r2, #0]
    2e08:	460c      	mov	r4, r1
    2e0a:	f7ff ff09 	bl	2c20 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    2e0e:	f110 0f16 	cmn.w	r0, #22
    2e12:	d00a      	beq.n	2e2a <arm_core_mpu_configure_dynamic_mpu_regions+0x2a>
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    2e14:	2200      	movs	r2, #0
  MPU->RNR = rnr;
    2e16:	4b0f      	ldr	r3, [pc, #60]	; (2e54 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    2e18:	2807      	cmp	r0, #7
    2e1a:	dd00      	ble.n	2e1e <arm_core_mpu_configure_dynamic_mpu_regions+0x1e>
}
    2e1c:	bd10      	pop	{r4, pc}
    2e1e:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
    2e22:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    2e26:	3001      	adds	r0, #1
    2e28:	e7f6      	b.n	2e18 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    2e2a:	f240 1323 	movw	r3, #291	; 0x123
    2e2e:	4a0a      	ldr	r2, [pc, #40]	; (2e58 <arm_core_mpu_configure_dynamic_mpu_regions+0x58>)
    2e30:	490a      	ldr	r1, [pc, #40]	; (2e5c <arm_core_mpu_configure_dynamic_mpu_regions+0x5c>)
    2e32:	480b      	ldr	r0, [pc, #44]	; (2e60 <arm_core_mpu_configure_dynamic_mpu_regions+0x60>)
    2e34:	f004 fd12 	bl	785c <printk>
    2e38:	4621      	mov	r1, r4
    2e3a:	480a      	ldr	r0, [pc, #40]	; (2e64 <arm_core_mpu_configure_dynamic_mpu_regions+0x64>)
    2e3c:	f004 fd0e 	bl	785c <printk>
}
    2e40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    2e44:	f240 1123 	movw	r1, #291	; 0x123
    2e48:	4803      	ldr	r0, [pc, #12]	; (2e58 <arm_core_mpu_configure_dynamic_mpu_regions+0x58>)
    2e4a:	f004 bf59 	b.w	7d00 <assert_post_action>
    2e4e:	bf00      	nop
    2e50:	20001624 	.word	0x20001624
    2e54:	e000ed00 	.word	0xe000ed00
    2e58:	0000be23 	.word	0x0000be23
    2e5c:	0000b48d 	.word	0x0000b48d
    2e60:	0000b021 	.word	0x0000b021
    2e64:	0000bf34 	.word	0x0000bf34

00002e68 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    2e68:	4b01      	ldr	r3, [pc, #4]	; (2e70 <__stdout_hook_install+0x8>)
    2e6a:	6018      	str	r0, [r3, #0]
}
    2e6c:	4770      	bx	lr
    2e6e:	bf00      	nop
    2e70:	20000094 	.word	0x20000094

00002e74 <arm_mps2_pinmux_init>:
	       | (1<<11)  /* Shield 0 SPI 3 SCK */
	       | (1<<12)  /* Shield 0 SPI 3 SS */
	       | (1<<13)  /* Shield 0 SPI 3 MOSI */
	       | (1<<14); /* Shield 0 SPI 3 MISO */

	CMSDK_AHB_GPIO0_DEV->altfuncset = gpio_0;
    2e74:	f64f 0231 	movw	r2, #63537	; 0xf831
    2e78:	4b06      	ldr	r3, [pc, #24]	; (2e94 <arm_mps2_pinmux_init+0x20>)
	ARG_UNUSED(port);

	arm_mps2_pinmux_defaults();

	return 0;
}
    2e7a:	2000      	movs	r0, #0
	CMSDK_AHB_GPIO0_DEV->altfuncset = gpio_0;
    2e7c:	619a      	str	r2, [r3, #24]
	CMSDK_AHB_GPIO1_DEV->altfuncset = gpio_1;
    2e7e:	f24c 426f 	movw	r2, #50287	; 0xc46f
    2e82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    2e86:	619a      	str	r2, [r3, #24]
	CMSDK_AHB_GPIO2_DEV->altfuncset = gpio_2;
    2e88:	f44f 529e 	mov.w	r2, #5056	; 0x13c0
    2e8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    2e90:	619a      	str	r2, [r3, #24]
}
    2e92:	4770      	bx	lr
    2e94:	40010000 	.word	0x40010000

00002e98 <net_buf_id>:

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	return buf - pool->__bufs;
    2e98:	212c      	movs	r1, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    2e9a:	7982      	ldrb	r2, [r0, #6]
	return buf - pool->__bufs;
    2e9c:	4b04      	ldr	r3, [pc, #16]	; (2eb0 <net_buf_id+0x18>)
    2e9e:	fb01 3302 	mla	r3, r1, r2, r3
    2ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2ea4:	1ac0      	subs	r0, r0, r3
}
    2ea6:	4b03      	ldr	r3, [pc, #12]	; (2eb4 <net_buf_id+0x1c>)
	return buf - pool->__bufs;
    2ea8:	10c0      	asrs	r0, r0, #3
}
    2eaa:	4358      	muls	r0, r3
    2eac:	4770      	bx	lr
    2eae:	bf00      	nop
    2eb0:	200003c4 	.word	0x200003c4
    2eb4:	aaaaaaab 	.word	0xaaaaaaab

00002eb8 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
    2eb8:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    2eba:	242c      	movs	r4, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    2ebc:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    2ebe:	4b09      	ldr	r3, [pc, #36]	; (2ee4 <fixed_data_alloc+0x2c>)
    2ec0:	fb04 3302 	mla	r3, r4, r2, r3
    2ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24

	*size = MIN(fixed->data_size, *size);
    2ec6:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    2ec8:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
    2eca:	6823      	ldr	r3, [r4, #0]
    2ecc:	429a      	cmp	r2, r3
    2ece:	bf94      	ite	ls
    2ed0:	600a      	strls	r2, [r1, #0]
    2ed2:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
    2ed4:	f7ff ffe0 	bl	2e98 <net_buf_id>
    2ed8:	e9d4 2300 	ldrd	r2, r3, [r4]
}
    2edc:	fb02 3000 	mla	r0, r2, r0, r3
    2ee0:	bd10      	pop	{r4, pc}
    2ee2:	bf00      	nop
    2ee4:	200003c4 	.word	0x200003c4

00002ee8 <net_buf_reset>:
{
    2ee8:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf->flags == 0U);
    2eea:	7943      	ldrb	r3, [r0, #5]
{
    2eec:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf->flags == 0U);
    2eee:	b14b      	cbz	r3, 2f04 <net_buf_reset+0x1c>
    2ef0:	490d      	ldr	r1, [pc, #52]	; (2f28 <net_buf_reset+0x40>)
    2ef2:	480e      	ldr	r0, [pc, #56]	; (2f2c <net_buf_reset+0x44>)
    2ef4:	234f      	movs	r3, #79	; 0x4f
    2ef6:	4a0e      	ldr	r2, [pc, #56]	; (2f30 <net_buf_reset+0x48>)
    2ef8:	f004 fcb0 	bl	785c <printk>
    2efc:	214f      	movs	r1, #79	; 0x4f
    2efe:	480c      	ldr	r0, [pc, #48]	; (2f30 <net_buf_reset+0x48>)
    2f00:	f004 fefe 	bl	7d00 <assert_post_action>
	__ASSERT_NO_MSG(buf->frags == NULL);
    2f04:	6823      	ldr	r3, [r4, #0]
    2f06:	b14b      	cbz	r3, 2f1c <net_buf_reset+0x34>
    2f08:	490a      	ldr	r1, [pc, #40]	; (2f34 <net_buf_reset+0x4c>)
    2f0a:	4808      	ldr	r0, [pc, #32]	; (2f2c <net_buf_reset+0x44>)
    2f0c:	2350      	movs	r3, #80	; 0x50
    2f0e:	4a08      	ldr	r2, [pc, #32]	; (2f30 <net_buf_reset+0x48>)
    2f10:	f004 fca4 	bl	785c <printk>
    2f14:	2150      	movs	r1, #80	; 0x50
    2f16:	4806      	ldr	r0, [pc, #24]	; (2f30 <net_buf_reset+0x48>)
    2f18:	f004 fef2 	bl	7d00 <assert_post_action>
	buf->len  = 0U;
    2f1c:	2300      	movs	r3, #0
    2f1e:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
    2f20:	6923      	ldr	r3, [r4, #16]
    2f22:	60a3      	str	r3, [r4, #8]
}
    2f24:	bd10      	pop	{r4, pc}
    2f26:	bf00      	nop
    2f28:	0000bf94 	.word	0x0000bf94
    2f2c:	0000b021 	.word	0x0000b021
    2f30:	0000bf70 	.word	0x0000bf70
    2f34:	0000bfa5 	.word	0x0000bfa5

00002f38 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
    2f38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2f3c:	4605      	mov	r5, r0
    2f3e:	9101      	str	r1, [sp, #4]
	uint64_t end = z_timeout_end_calc(timeout);
    2f40:	4610      	mov	r0, r2
    2f42:	4619      	mov	r1, r3
{
    2f44:	4691      	mov	r9, r2
    2f46:	4698      	mov	r8, r3
    2f48:	4617      	mov	r7, r2
    2f4a:	461e      	mov	r6, r3
	uint64_t end = z_timeout_end_calc(timeout);
    2f4c:	f007 f9b2 	bl	a2b4 <z_timeout_end_calc>
    2f50:	4682      	mov	sl, r0
    2f52:	468b      	mov	fp, r1
	struct net_buf *buf;
	unsigned int key;

	__ASSERT_NO_MSG(pool);
    2f54:	b94d      	cbnz	r5, 2f6a <net_buf_alloc_len+0x32>
    2f56:	494c      	ldr	r1, [pc, #304]	; (3088 <net_buf_alloc_len+0x150>)
    2f58:	484c      	ldr	r0, [pc, #304]	; (308c <net_buf_alloc_len+0x154>)
    2f5a:	23ed      	movs	r3, #237	; 0xed
    2f5c:	4a4c      	ldr	r2, [pc, #304]	; (3090 <net_buf_alloc_len+0x158>)
    2f5e:	f004 fc7d 	bl	785c <printk>
    2f62:	21ed      	movs	r1, #237	; 0xed
    2f64:	484a      	ldr	r0, [pc, #296]	; (3090 <net_buf_alloc_len+0x158>)
    2f66:	f004 fecb 	bl	7d00 <assert_post_action>
	__asm__ volatile(
    2f6a:	f04f 0320 	mov.w	r3, #32
    2f6e:	f3ef 8111 	mrs	r1, BASEPRI
    2f72:	f383 8811 	msr	BASEPRI, r3
    2f76:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
    2f7a:	8beb      	ldrh	r3, [r5, #30]
    2f7c:	2b00      	cmp	r3, #0
    2f7e:	d055      	beq.n	302c <net_buf_alloc_len+0xf4>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
    2f80:	8baa      	ldrh	r2, [r5, #28]
    2f82:	429a      	cmp	r2, r3
    2f84:	d93e      	bls.n	3004 <net_buf_alloc_len+0xcc>
    2f86:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
    2f88:	2200      	movs	r2, #0
    2f8a:	2300      	movs	r3, #0
    2f8c:	4628      	mov	r0, r5
    2f8e:	f002 fbb7 	bl	5700 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
    2f92:	9900      	ldr	r1, [sp, #0]
    2f94:	4604      	mov	r4, r0
    2f96:	2800      	cmp	r0, #0
    2f98:	d034      	beq.n	3004 <net_buf_alloc_len+0xcc>
	__asm__ volatile(
    2f9a:	f381 8811 	msr	BASEPRI, r1
    2f9e:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
    2fa2:	9d01      	ldr	r5, [sp, #4]
    2fa4:	2d00      	cmp	r5, #0
    2fa6:	d06d      	beq.n	3084 <net_buf_alloc_len+0x14c>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    2fa8:	ea58 0309 	orrs.w	r3, r8, r9
    2fac:	d00f      	beq.n	2fce <net_buf_alloc_len+0x96>
    2fae:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    2fb2:	bf08      	it	eq
    2fb4:	f1b9 3fff 	cmpeq.w	r9, #4294967295	; 0xffffffff
    2fb8:	d009      	beq.n	2fce <net_buf_alloc_len+0x96>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - z_tick_get();
    2fba:	f004 fb35 	bl	7628 <z_tick_get>
    2fbe:	ebba 0700 	subs.w	r7, sl, r0
    2fc2:	eb6b 0601 	sbc.w	r6, fp, r1
    2fc6:	2e00      	cmp	r6, #0
    2fc8:	bfbc      	itt	lt
    2fca:	2700      	movlt	r7, #0
    2fcc:	463e      	movlt	r6, r7
	return pool->alloc->cb->alloc(buf, size, timeout);
    2fce:	f04f 092c 	mov.w	r9, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    2fd2:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
    2fd4:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 3094 <net_buf_alloc_len+0x15c>
    2fd8:	463a      	mov	r2, r7
    2fda:	fb09 8303 	mla	r3, r9, r3, r8
    2fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2fe0:	4620      	mov	r0, r4
    2fe2:	681b      	ldr	r3, [r3, #0]
    2fe4:	a901      	add	r1, sp, #4
    2fe6:	f8d3 a000 	ldr.w	sl, [r3]
    2fea:	4633      	mov	r3, r6
    2fec:	47d0      	blx	sl
    2fee:	4606      	mov	r6, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
    2ff0:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
    2ff2:	bb58      	cbnz	r0, 304c <net_buf_alloc_len+0x114>
	k_lifo_put(&pool->free, buf);
    2ff4:	79a0      	ldrb	r0, [r4, #6]
    2ff6:	4621      	mov	r1, r4
    2ff8:	fb09 8000 	mla	r0, r9, r0, r8
    2ffc:	f007 f8a6 	bl	a14c <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
    3000:	4634      	mov	r4, r6
}
    3002:	e01f      	b.n	3044 <net_buf_alloc_len+0x10c>
		uninit_count = pool->uninit_count--;
    3004:	8beb      	ldrh	r3, [r5, #30]
    3006:	1e5a      	subs	r2, r3, #1
    3008:	83ea      	strh	r2, [r5, #30]
    300a:	f381 8811 	msr	BASEPRI, r1
    300e:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
    3012:	2018      	movs	r0, #24
    3014:	8bac      	ldrh	r4, [r5, #28]
    3016:	1ae3      	subs	r3, r4, r3
    3018:	6aac      	ldr	r4, [r5, #40]	; 0x28
    301a:	fb00 4403 	mla	r4, r0, r3, r4
	return pool - _net_buf_pool_list;
    301e:	481d      	ldr	r0, [pc, #116]	; (3094 <net_buf_alloc_len+0x15c>)
    3020:	4b1d      	ldr	r3, [pc, #116]	; (3098 <net_buf_alloc_len+0x160>)
    3022:	1a2d      	subs	r5, r5, r0
    3024:	10ad      	asrs	r5, r5, #2
    3026:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
    3028:	71a5      	strb	r5, [r4, #6]
		goto success;
    302a:	e7ba      	b.n	2fa2 <net_buf_alloc_len+0x6a>
    302c:	f381 8811 	msr	BASEPRI, r1
    3030:	f3bf 8f6f 	isb	sy
    3034:	464a      	mov	r2, r9
    3036:	4643      	mov	r3, r8
    3038:	4628      	mov	r0, r5
    303a:	f002 fb61 	bl	5700 <z_impl_k_queue_get>
	if (!buf) {
    303e:	4604      	mov	r4, r0
    3040:	2800      	cmp	r0, #0
    3042:	d1ae      	bne.n	2fa2 <net_buf_alloc_len+0x6a>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
    3044:	4620      	mov	r0, r4
    3046:	b003      	add	sp, #12
    3048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		NET_BUF_ASSERT(req_size <= size);
    304c:	9b01      	ldr	r3, [sp, #4]
    304e:	429d      	cmp	r5, r3
    3050:	d90e      	bls.n	3070 <net_buf_alloc_len+0x138>
    3052:	4912      	ldr	r1, [pc, #72]	; (309c <net_buf_alloc_len+0x164>)
    3054:	f240 134d 	movw	r3, #333	; 0x14d
    3058:	4a0d      	ldr	r2, [pc, #52]	; (3090 <net_buf_alloc_len+0x158>)
    305a:	480c      	ldr	r0, [pc, #48]	; (308c <net_buf_alloc_len+0x154>)
    305c:	f004 fbfe 	bl	785c <printk>
    3060:	480f      	ldr	r0, [pc, #60]	; (30a0 <net_buf_alloc_len+0x168>)
    3062:	f004 fbfb 	bl	785c <printk>
    3066:	f240 114d 	movw	r1, #333	; 0x14d
    306a:	4809      	ldr	r0, [pc, #36]	; (3090 <net_buf_alloc_len+0x158>)
    306c:	f004 fe48 	bl	7d00 <assert_post_action>
	buf->frags = NULL;
    3070:	2300      	movs	r3, #0
    3072:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
    3074:	2301      	movs	r3, #1
    3076:	80a3      	strh	r3, [r4, #4]
	buf->size  = size;
    3078:	9b01      	ldr	r3, [sp, #4]
	net_buf_reset(buf);
    307a:	4620      	mov	r0, r4
	buf->size  = size;
    307c:	81e3      	strh	r3, [r4, #14]
	net_buf_reset(buf);
    307e:	f7ff ff33 	bl	2ee8 <net_buf_reset>
	return buf;
    3082:	e7df      	b.n	3044 <net_buf_alloc_len+0x10c>
		buf->__buf = NULL;
    3084:	6125      	str	r5, [r4, #16]
    3086:	e7f3      	b.n	3070 <net_buf_alloc_len+0x138>
    3088:	0000bfbf 	.word	0x0000bfbf
    308c:	0000b021 	.word	0x0000b021
    3090:	0000bf70 	.word	0x0000bf70
    3094:	200003c4 	.word	0x200003c4
    3098:	ba2e8ba3 	.word	0xba2e8ba3
    309c:	0000bfc4 	.word	0x0000bfc4
    30a0:	0000bfd5 	.word	0x0000bfd5

000030a4 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
    30a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
    30a8:	4605      	mov	r5, r0
    30aa:	b328      	cbz	r0, 30f8 <net_buf_unref+0x54>
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
    30ac:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
    30ae:	f04f 082c 	mov.w	r8, #44	; 0x2c
    30b2:	4f1a      	ldr	r7, [pc, #104]	; (311c <net_buf_unref+0x78>)
		struct net_buf *frags = buf->frags;
    30b4:	462c      	mov	r4, r5
		if (--buf->ref > 0) {
    30b6:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
    30b8:	682d      	ldr	r5, [r5, #0]
		if (--buf->ref > 0) {
    30ba:	3b01      	subs	r3, #1
    30bc:	b2db      	uxtb	r3, r3
    30be:	7123      	strb	r3, [r4, #4]
    30c0:	b9c3      	cbnz	r3, 30f4 <net_buf_unref+0x50>
		if (buf->__buf) {
    30c2:	6921      	ldr	r1, [r4, #16]
    30c4:	b159      	cbz	r1, 30de <net_buf_unref+0x3a>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
    30c6:	7963      	ldrb	r3, [r4, #5]
    30c8:	079b      	lsls	r3, r3, #30
    30ca:	d407      	bmi.n	30dc <net_buf_unref+0x38>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    30cc:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
    30ce:	4620      	mov	r0, r4
    30d0:	fb08 7303 	mla	r3, r8, r3, r7
    30d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    30d6:	681b      	ldr	r3, [r3, #0]
    30d8:	689b      	ldr	r3, [r3, #8]
    30da:	4798      	blx	r3
			buf->__buf = NULL;
    30dc:	6126      	str	r6, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
    30de:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
    30e0:	60a6      	str	r6, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
    30e2:	fb08 7000 	mla	r0, r8, r0, r7
    30e6:	6a03      	ldr	r3, [r0, #32]
		buf->frags = NULL;
    30e8:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
    30ea:	b19b      	cbz	r3, 3114 <net_buf_unref+0x70>
			pool->destroy(buf);
    30ec:	4620      	mov	r0, r4
    30ee:	4798      	blx	r3
	while (buf) {
    30f0:	2d00      	cmp	r5, #0
    30f2:	d1df      	bne.n	30b4 <net_buf_unref+0x10>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
    30f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(buf);
    30f8:	4909      	ldr	r1, [pc, #36]	; (3120 <net_buf_unref+0x7c>)
    30fa:	480a      	ldr	r0, [pc, #40]	; (3124 <net_buf_unref+0x80>)
    30fc:	f44f 7302 	mov.w	r3, #520	; 0x208
    3100:	4a09      	ldr	r2, [pc, #36]	; (3128 <net_buf_unref+0x84>)
    3102:	f004 fbab 	bl	785c <printk>
}
    3106:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
    310a:	f44f 7102 	mov.w	r1, #520	; 0x208
    310e:	4806      	ldr	r0, [pc, #24]	; (3128 <net_buf_unref+0x84>)
    3110:	f004 bdf6 	b.w	7d00 <assert_post_action>
	k_lifo_put(&pool->free, buf);
    3114:	4621      	mov	r1, r4
    3116:	f007 f819 	bl	a14c <k_queue_prepend>
}
    311a:	e7e9      	b.n	30f0 <net_buf_unref+0x4c>
    311c:	200003c4 	.word	0x200003c4
    3120:	0000c02b 	.word	0x0000c02b
    3124:	0000b021 	.word	0x0000b021
    3128:	0000bf70 	.word	0x0000bf70

0000312c <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
    312c:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
    312e:	4604      	mov	r4, r0
    3130:	b958      	cbnz	r0, 314a <net_buf_frag_last+0x1e>
    3132:	4908      	ldr	r1, [pc, #32]	; (3154 <net_buf_frag_last+0x28>)
    3134:	4808      	ldr	r0, [pc, #32]	; (3158 <net_buf_frag_last+0x2c>)
    3136:	f44f 731d 	mov.w	r3, #628	; 0x274
    313a:	4a08      	ldr	r2, [pc, #32]	; (315c <net_buf_frag_last+0x30>)
    313c:	f004 fb8e 	bl	785c <printk>
    3140:	f44f 711d 	mov.w	r1, #628	; 0x274
    3144:	4805      	ldr	r0, [pc, #20]	; (315c <net_buf_frag_last+0x30>)
    3146:	f004 fddb 	bl	7d00 <assert_post_action>

	while (buf->frags) {
    314a:	4620      	mov	r0, r4
    314c:	6824      	ldr	r4, [r4, #0]
    314e:	2c00      	cmp	r4, #0
    3150:	d1fb      	bne.n	314a <net_buf_frag_last+0x1e>
		buf = buf->frags;
	}

	return buf;
}
    3152:	bd10      	pop	{r4, pc}
    3154:	0000c02b 	.word	0x0000c02b
    3158:	0000b021 	.word	0x0000b021
    315c:	0000bf70 	.word	0x0000bf70

00003160 <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
    3160:	b538      	push	{r3, r4, r5, lr}
    3162:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
    3164:	4604      	mov	r4, r0
    3166:	b958      	cbnz	r0, 3180 <net_buf_frag_insert+0x20>
    3168:	4910      	ldr	r1, [pc, #64]	; (31ac <net_buf_frag_insert+0x4c>)
    316a:	4811      	ldr	r0, [pc, #68]	; (31b0 <net_buf_frag_insert+0x50>)
    316c:	f240 237f 	movw	r3, #639	; 0x27f
    3170:	4a10      	ldr	r2, [pc, #64]	; (31b4 <net_buf_frag_insert+0x54>)
    3172:	f004 fb73 	bl	785c <printk>
    3176:	f240 217f 	movw	r1, #639	; 0x27f
    317a:	480e      	ldr	r0, [pc, #56]	; (31b4 <net_buf_frag_insert+0x54>)
    317c:	f004 fdc0 	bl	7d00 <assert_post_action>
	__ASSERT_NO_MSG(frag);
    3180:	b95d      	cbnz	r5, 319a <net_buf_frag_insert+0x3a>
    3182:	490d      	ldr	r1, [pc, #52]	; (31b8 <net_buf_frag_insert+0x58>)
    3184:	480a      	ldr	r0, [pc, #40]	; (31b0 <net_buf_frag_insert+0x50>)
    3186:	f44f 7320 	mov.w	r3, #640	; 0x280
    318a:	4a0a      	ldr	r2, [pc, #40]	; (31b4 <net_buf_frag_insert+0x54>)
    318c:	f004 fb66 	bl	785c <printk>
    3190:	f44f 7120 	mov.w	r1, #640	; 0x280
    3194:	4807      	ldr	r0, [pc, #28]	; (31b4 <net_buf_frag_insert+0x54>)
    3196:	f004 fdb3 	bl	7d00 <assert_post_action>

	if (parent->frags) {
    319a:	6823      	ldr	r3, [r4, #0]
    319c:	b123      	cbz	r3, 31a8 <net_buf_frag_insert+0x48>
		net_buf_frag_last(frag)->frags = parent->frags;
    319e:	4628      	mov	r0, r5
    31a0:	f7ff ffc4 	bl	312c <net_buf_frag_last>
    31a4:	6823      	ldr	r3, [r4, #0]
    31a6:	6003      	str	r3, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
    31a8:	6025      	str	r5, [r4, #0]
}
    31aa:	bd38      	pop	{r3, r4, r5, pc}
    31ac:	0000bfe7 	.word	0x0000bfe7
    31b0:	0000b021 	.word	0x0000b021
    31b4:	0000bf70 	.word	0x0000bf70
    31b8:	0000bfee 	.word	0x0000bfee

000031bc <net_buf_simple_pull>:

	sys_put_be64(val, net_buf_simple_push(buf, sizeof(val)));
}

void *net_buf_simple_pull(struct net_buf_simple *buf, size_t len)
{
    31bc:	b538      	push	{r3, r4, r5, lr}
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);
    31be:	8883      	ldrh	r3, [r0, #4]
{
    31c0:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf->len >= len);
    31c2:	428b      	cmp	r3, r1
{
    31c4:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf->len >= len);
    31c6:	d20b      	bcs.n	31e0 <net_buf_simple_pull+0x24>
    31c8:	4909      	ldr	r1, [pc, #36]	; (31f0 <net_buf_simple_pull+0x34>)
    31ca:	480a      	ldr	r0, [pc, #40]	; (31f4 <net_buf_simple_pull+0x38>)
    31cc:	f240 436f 	movw	r3, #1135	; 0x46f
    31d0:	4a09      	ldr	r2, [pc, #36]	; (31f8 <net_buf_simple_pull+0x3c>)
    31d2:	f004 fb43 	bl	785c <printk>
    31d6:	f240 416f 	movw	r1, #1135	; 0x46f
    31da:	4807      	ldr	r0, [pc, #28]	; (31f8 <net_buf_simple_pull+0x3c>)
    31dc:	f004 fd90 	bl	7d00 <assert_post_action>

	buf->len -= len;
    31e0:	88a3      	ldrh	r3, [r4, #4]
	return buf->data += len;
    31e2:	6820      	ldr	r0, [r4, #0]
	buf->len -= len;
    31e4:	1b5b      	subs	r3, r3, r5
	return buf->data += len;
    31e6:	4428      	add	r0, r5
	buf->len -= len;
    31e8:	80a3      	strh	r3, [r4, #4]
	return buf->data += len;
    31ea:	6020      	str	r0, [r4, #0]
}
    31ec:	bd38      	pop	{r3, r4, r5, pc}
    31ee:	bf00      	nop
    31f0:	0000bff3 	.word	0x0000bff3
    31f4:	0000b021 	.word	0x0000b021
    31f8:	0000bf70 	.word	0x0000bf70

000031fc <net_buf_simple_add>:
{
    31fc:	b570      	push	{r4, r5, r6, lr}
	return buf->data + buf->len;
    31fe:	6803      	ldr	r3, [r0, #0]
    3200:	8886      	ldrh	r6, [r0, #4]
    3202:	4604      	mov	r4, r0
    3204:	441e      	add	r6, r3
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
    3206:	f005 f960 	bl	84ca <net_buf_simple_tailroom>
    320a:	4288      	cmp	r0, r1
{
    320c:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
    320e:	d20b      	bcs.n	3228 <net_buf_simple_add+0x2c>
    3210:	4908      	ldr	r1, [pc, #32]	; (3234 <net_buf_simple_add+0x38>)
    3212:	4809      	ldr	r0, [pc, #36]	; (3238 <net_buf_simple_add+0x3c>)
    3214:	f44f 7348 	mov.w	r3, #800	; 0x320
    3218:	4a08      	ldr	r2, [pc, #32]	; (323c <net_buf_simple_add+0x40>)
    321a:	f004 fb1f 	bl	785c <printk>
    321e:	f44f 7148 	mov.w	r1, #800	; 0x320
    3222:	4806      	ldr	r0, [pc, #24]	; (323c <net_buf_simple_add+0x40>)
    3224:	f004 fd6c 	bl	7d00 <assert_post_action>
	buf->len += len;
    3228:	88a1      	ldrh	r1, [r4, #4]
}
    322a:	4630      	mov	r0, r6
	buf->len += len;
    322c:	440d      	add	r5, r1
    322e:	80a5      	strh	r5, [r4, #4]
}
    3230:	bd70      	pop	{r4, r5, r6, pc}
    3232:	bf00      	nop
    3234:	0000c003 	.word	0x0000c003
    3238:	0000b021 	.word	0x0000b021
    323c:	0000bf70 	.word	0x0000bf70

00003240 <ethernet_send>:

	net_pkt_frag_unref(buf);
}

static int ethernet_send(struct net_if *iface, struct net_pkt *pkt)
{
    3240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return iface->if_dev->dev;
    3244:	6803      	ldr	r3, [r0, #0]
    3246:	4607      	mov	r7, r0
	const struct ethernet_api *api = net_if_get_device(iface)->api;
    3248:	681b      	ldr	r3, [r3, #0]
{
    324a:	460d      	mov	r5, r1
	const struct ethernet_api *api = net_if_get_device(iface)->api;
    324c:	f8d3 8008 	ldr.w	r8, [r3, #8]
	struct ethernet_context *ctx = net_if_l2_data(iface);
	uint16_t ptype;
	int ret;

	if (!api) {
    3250:	f1b8 0f00 	cmp.w	r8, #0
    3254:	f000 80a2 	beq.w	339c <ethernet_send+0x15c>
	return pkt->family;
    3258:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
		ret = -ENOENT;
		goto error;
	}

	if (IS_ENABLED(CONFIG_NET_IPV4) &&
    325c:	f3c3 0642 	ubfx	r6, r3, #1, #3
    3260:	2e01      	cmp	r6, #1
    3262:	d13f      	bne.n	32e4 <ethernet_send+0xa4>
	return pkt->frags->data;
    3264:	690b      	ldr	r3, [r1, #16]
	return pkt->iface;
    3266:	f8d1 9020 	ldr.w	r9, [r1, #32]
	return pkt->frags->data;
    326a:	689c      	ldr	r4, [r3, #8]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
    326c:	f000 ff68 	bl	4140 <net_ipv4_broadcast_address>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
    3270:	6922      	ldr	r2, [r4, #16]
    3272:	6803      	ldr	r3, [r0, #0]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
    3274:	429a      	cmp	r2, r3
    3276:	f000 8094 	beq.w	33a2 <ethernet_send+0x162>
	return net_if_ipv4_is_addr_bcast(iface, addr);
    327a:	4648      	mov	r0, r9
    327c:	f104 0110 	add.w	r1, r4, #16
    3280:	f000 fc6e 	bl	3b60 <net_if_ipv4_is_addr_bcast>
	if (net_ipv4_is_addr_bcast(net_pkt_iface(pkt),
    3284:	2800      	cmp	r0, #0
    3286:	f040 808c 	bne.w	33a2 <ethernet_send+0x162>
    328a:	692b      	ldr	r3, [r5, #16]
	    net_ipv4_is_addr_mcast(&NET_IPV4_HDR(pkt)->dst)) {
    328c:	6899      	ldr	r1, [r3, #8]
    328e:	3110      	adds	r1, #16
    3290:	4608      	mov	r0, r1
    3292:	f005 f930 	bl	84f6 <net_ipv4_is_addr_mcast>
				   &NET_IPV4_HDR(pkt)->dst) ||
    3296:	4602      	mov	r2, r0
    3298:	2800      	cmp	r0, #0
    329a:	f040 8082 	bne.w	33a2 <ethernet_send+0x162>
		arp_pkt = net_arp_prepare(pkt, &NET_IPV4_HDR(pkt)->dst, NULL);
    329e:	4628      	mov	r0, r5
    32a0:	f000 f96a 	bl	3578 <net_arp_prepare>
		if (!arp_pkt) {
    32a4:	4604      	mov	r4, r0
    32a6:	b1d0      	cbz	r0, 32de <ethernet_send+0x9e>
		if (pkt != arp_pkt) {
    32a8:	4285      	cmp	r5, r0
    32aa:	d07b      	beq.n	33a4 <ethernet_send+0x164>
			net_pkt_unref(pkt);
    32ac:	4628      	mov	r0, r5
    32ae:	f005 feb3 	bl	9018 <net_pkt_unref>
	pkt->family = family;
    32b2:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
    32b6:	f366 0343 	bfi	r3, r6, #1, #3
    32ba:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
	} else if (IS_ENABLED(CONFIG_NET_LLDP) && net_pkt_is_lldp(pkt)) {
		ptype = htons(NET_ETH_PTYPE_LLDP);
	} else if (IS_ENABLED(CONFIG_NET_ARP)) {
		/* Unktown type: Unqueued pkt is an ARP reply.
		 */
		ptype = htons(NET_ETH_PTYPE_ARP);
    32be:	f44f 69c1 	mov.w	r9, #1544	; 0x608

	/* If the ll dst addr has not been set before, let's assume
	 * temporarily it's a broadcast one. When filling the header,
	 * it might detect this should be multicast and act accordingly.
	 */
	if (!net_pkt_lladdr_dst(pkt)->addr) {
    32c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
    32c4:	b923      	cbnz	r3, 32d0 <ethernet_send+0x90>
		net_pkt_lladdr_dst(pkt)->addr = (uint8_t *)broadcast_eth_addr.addr;
    32c6:	4b39      	ldr	r3, [pc, #228]	; (33ac <ethernet_send+0x16c>)
    32c8:	6323      	str	r3, [r4, #48]	; 0x30
		net_pkt_lladdr_dst(pkt)->len = sizeof(struct net_eth_addr);
    32ca:	2306      	movs	r3, #6
    32cc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	hdr_frag = net_pkt_get_frag(pkt, NET_BUF_TIMEOUT);
    32d0:	220a      	movs	r2, #10
    32d2:	2300      	movs	r3, #0
    32d4:	4620      	mov	r0, r4
    32d6:	f000 ff4f 	bl	4178 <net_pkt_get_frag>
	if (!hdr_frag) {
    32da:	4606      	mov	r6, r0
    32dc:	b948      	cbnz	r0, 32f2 <ethernet_send+0xb2>
				ret = -ENOMEM;
    32de:	f06f 050b 	mvn.w	r5, #11
	ret = net_pkt_get_len(pkt);
	ethernet_remove_l2_header(pkt);

	net_pkt_unref(pkt);
error:
	return ret;
    32e2:	e043      	b.n	336c <ethernet_send+0x12c>
    32e4:	2201      	movs	r2, #1
    32e6:	f362 0343 	bfi	r3, r2, #1, #3
}
    32ea:	460c      	mov	r4, r1
	pkt->family = family;
    32ec:	f881 303b 	strb.w	r3, [r1, #59]	; 0x3b
    32f0:	e7e5      	b.n	32be <ethernet_send+0x7e>
	return pkt->family;
    32f2:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
		hdr = (struct net_eth_hdr *)(hdr_frag->data);
    32f6:	6885      	ldr	r5, [r0, #8]
    32f8:	f3c3 0142 	ubfx	r1, r3, #1, #3
	if (net_pkt_family(pkt) == AF_INET &&
    32fc:	2901      	cmp	r1, #1
    32fe:	d138      	bne.n	3372 <ethernet_send+0x132>
	return pkt->frags->data;
    3300:	6923      	ldr	r3, [r4, #16]
    3302:	689a      	ldr	r2, [r3, #8]
	    net_ipv4_is_addr_mcast(&NET_IPV4_HDR(pkt)->dst)) {
    3304:	f102 0010 	add.w	r0, r2, #16
    3308:	f005 f8f5 	bl	84f6 <net_ipv4_is_addr_mcast>
	if (net_pkt_family(pkt) == AF_INET &&
    330c:	b388      	cbz	r0, 3372 <ethernet_send+0x132>
		dst->addr[1] = 0x00;
    330e:	2300      	movs	r3, #0
    3310:	706b      	strb	r3, [r5, #1]
		dst->addr[2] = 0x5e;
    3312:	235e      	movs	r3, #94	; 0x5e
		dst->addr[0] = 0x01;
    3314:	7029      	strb	r1, [r5, #0]
		dst->addr[2] = 0x5e;
    3316:	70ab      	strb	r3, [r5, #2]
		dst->addr[4] = NET_IPV4_HDR(pkt)->dst.s4_addr[2];
    3318:	7c91      	ldrb	r1, [r2, #18]
		dst->addr[3] = NET_IPV4_HDR(pkt)->dst.s4_addr[1];
    331a:	7c53      	ldrb	r3, [r2, #17]
		dst->addr[4] = NET_IPV4_HDR(pkt)->dst.s4_addr[2];
    331c:	7129      	strb	r1, [r5, #4]
		dst->addr[5] = NET_IPV4_HDR(pkt)->dst.s4_addr[3];
    331e:	7cd2      	ldrb	r2, [r2, #19]
		dst->addr[3] &= 0x7f;
    3320:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		dst->addr[5] = NET_IPV4_HDR(pkt)->dst.s4_addr[3];
    3324:	716a      	strb	r2, [r5, #5]
		dst->addr[3] &= 0x7f;
    3326:	70eb      	strb	r3, [r5, #3]
		memcpy(&hdr->src, net_pkt_lladdr_src(pkt)->addr,
    3328:	2206      	movs	r2, #6
    332a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    332c:	18a8      	adds	r0, r5, r2
    332e:	f005 f84b 	bl	83c8 <memcpy>
	return net_buf_simple_add(&buf->b, len);
    3332:	210e      	movs	r1, #14
		hdr->type = ptype;
    3334:	f8a5 900c 	strh.w	r9, [r5, #12]
    3338:	f106 0008 	add.w	r0, r6, #8
    333c:	f7ff ff5e 	bl	31fc <net_buf_simple_add>
	net_pkt_frag_insert(pkt, hdr_frag);
    3340:	4631      	mov	r1, r6
    3342:	4620      	mov	r0, r4
    3344:	f005 fe92 	bl	906c <net_pkt_frag_insert>
	net_pkt_cursor_init(pkt);
    3348:	4620      	mov	r0, r4
    334a:	f005 fec5 	bl	90d8 <net_pkt_cursor_init>
    334e:	683a      	ldr	r2, [r7, #0]
	ret = api->send(net_if_get_device(iface), pkt);
    3350:	4621      	mov	r1, r4
    3352:	f8d8 3018 	ldr.w	r3, [r8, #24]
    3356:	6810      	ldr	r0, [r2, #0]
    3358:	4798      	blx	r3
	if (ret != 0) {
    335a:	4605      	mov	r5, r0
	buf = pkt->buffer;
    335c:	6920      	ldr	r0, [r4, #16]
	if (ret != 0) {
    335e:	b175      	cbz	r5, 337e <ethernet_send+0x13e>
	pkt->buffer = buf->frags;
    3360:	6803      	ldr	r3, [r0, #0]
    3362:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
    3364:	2300      	movs	r3, #0
    3366:	6003      	str	r3, [r0, #0]
	net_pkt_frag_unref(buf);
    3368:	f005 fe52 	bl	9010 <net_pkt_frag_unref>
}
    336c:	4628      	mov	r0, r5
    336e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			memcpy(&hdr->dst, net_pkt_lladdr_dst(pkt)->addr,
    3372:	2206      	movs	r2, #6
    3374:	4628      	mov	r0, r5
    3376:	6b21      	ldr	r1, [r4, #48]	; 0x30
    3378:	f005 f826 	bl	83c8 <memcpy>
    337c:	e7d4      	b.n	3328 <ethernet_send+0xe8>
	if (ret != 0) {
    337e:	4603      	mov	r3, r0
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
	size_t bytes = 0;

	while (buf) {
    3380:	b943      	cbnz	r3, 3394 <ethernet_send+0x154>
	pkt->buffer = buf->frags;
    3382:	6802      	ldr	r2, [r0, #0]
    3384:	6122      	str	r2, [r4, #16]
	buf->frags = NULL;
    3386:	6003      	str	r3, [r0, #0]
	net_pkt_frag_unref(buf);
    3388:	f005 fe42 	bl	9010 <net_pkt_frag_unref>
	net_pkt_unref(pkt);
    338c:	4620      	mov	r0, r4
    338e:	f005 fe43 	bl	9018 <net_pkt_unref>
    3392:	e7eb      	b.n	336c <ethernet_send+0x12c>
		bytes += buf->len;
    3394:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
    3396:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
    3398:	4415      	add	r5, r2
		buf = buf->frags;
    339a:	e7f1      	b.n	3380 <ethernet_send+0x140>
		ret = -ENOENT;
    339c:	f06f 0501 	mvn.w	r5, #1
    33a0:	e7e4      	b.n	336c <ethernet_send+0x12c>
				ret = -ENOMEM;
    33a2:	462c      	mov	r4, r5
				ptype = htons(NET_ETH_PTYPE_IP);
    33a4:	f04f 0908 	mov.w	r9, #8
    33a8:	e78b      	b.n	32c2 <ethernet_send+0x82>
    33aa:	bf00      	nop
    33ac:	0000c02f 	.word	0x0000c02f

000033b0 <net_eth_broadcast_addr>:
}
    33b0:	4800      	ldr	r0, [pc, #0]	; (33b4 <net_eth_broadcast_addr+0x4>)
    33b2:	4770      	bx	lr
    33b4:	0000c02f 	.word	0x0000c02f

000033b8 <arp_entry_get_last_from_table>:

	return CONTAINER_OF(node, struct arp_entry, node);
}

static struct arp_entry *arp_entry_get_last_from_table(void)
{
    33b8:	b508      	push	{r3, lr}
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    33ba:	4b08      	ldr	r3, [pc, #32]	; (33dc <arp_entry_get_last_from_table+0x24>)
    33bc:	685a      	ldr	r2, [r3, #4]
	/* We assume last entry is the oldest one,
	 * so is the preferred one to be taken out.
	 */

	node = sys_slist_peek_tail(&arp_table);
	if (!node) {
    33be:	b13a      	cbz	r2, 33d0 <arp_entry_get_last_from_table+0x18>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    33c0:	2100      	movs	r1, #0
	return list->head;
    33c2:	681b      	ldr	r3, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    33c4:	b123      	cbz	r3, 33d0 <arp_entry_get_last_from_table+0x18>
    33c6:	429a      	cmp	r2, r3
    33c8:	d104      	bne.n	33d4 <arp_entry_get_last_from_table+0x1c>
    33ca:	4804      	ldr	r0, [pc, #16]	; (33dc <arp_entry_get_last_from_table+0x24>)
    33cc:	f005 f98f 	bl	86ee <sys_slist_remove>
	}

	sys_slist_find_and_remove(&arp_table, node);

	return CONTAINER_OF(node, struct arp_entry, node);
}
    33d0:	4610      	mov	r0, r2
    33d2:	bd08      	pop	{r3, pc}
	return node->next;
    33d4:	4619      	mov	r1, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    33d6:	681b      	ldr	r3, [r3, #0]
    33d8:	e7f4      	b.n	33c4 <arp_entry_get_last_from_table+0xc>
    33da:	bf00      	nop
    33dc:	200012b0 	.word	0x200012b0

000033e0 <arp_update>:
static void arp_update(struct net_if *iface,
		       struct in_addr *src,
		       struct net_eth_addr *hwaddr,
		       bool gratuitous,
		       bool force)
{
    33e0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    33e4:	4698      	mov	r8, r3
	sys_snode_t *prev = NULL;
    33e6:	2300      	movs	r3, #0
	entry = arp_entry_find(&arp_pending_entries, iface, dst, &prev);
    33e8:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 34e0 <arp_update+0x100>
	sys_snode_t *prev = NULL;
    33ec:	9301      	str	r3, [sp, #4]
{
    33ee:	4605      	mov	r5, r0
    33f0:	460f      	mov	r7, r1
    33f2:	4616      	mov	r6, r2
	entry = arp_entry_find(&arp_pending_entries, iface, dst, &prev);
    33f4:	ab01      	add	r3, sp, #4
    33f6:	460a      	mov	r2, r1
    33f8:	4601      	mov	r1, r0
    33fa:	f8da 0000 	ldr.w	r0, [sl]
{
    33fe:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
	entry = arp_entry_find(&arp_pending_entries, iface, dst, &prev);
    3402:	f005 f9b7 	bl	8774 <arp_entry_find.isra.0>
	if (entry) {
    3406:	4604      	mov	r4, r0
    3408:	b120      	cbz	r0, 3414 <arp_update+0x34>
		sys_slist_remove(&arp_pending_entries, prev, &entry->node);
    340a:	4602      	mov	r2, r0
    340c:	9901      	ldr	r1, [sp, #4]
    340e:	4650      	mov	r0, sl
    3410:	f005 f96d 	bl	86ee <sys_slist_remove>
	if (sys_slist_is_empty(&arp_pending_entries)) {
    3414:	f8da 3000 	ldr.w	r3, [sl]
    3418:	b913      	cbnz	r3, 3420 <arp_update+0x40>
		k_delayed_work_cancel(&arp_request_timer);
    341a:	4832      	ldr	r0, [pc, #200]	; (34e4 <arp_update+0x104>)
    341c:	f003 fd64 	bl	6ee8 <k_delayed_work_cancel>
	struct net_pkt *pkt;

	NET_DBG("src %s", log_strdup(net_sprint_ipv4_addr(src)));

	entry = arp_entry_get_pending(iface, src);
	if (!entry) {
    3420:	2c00      	cmp	r4, #0
    3422:	d144      	bne.n	34ae <arp_update+0xce>
		if (IS_ENABLED(CONFIG_NET_ARP_GRATUITOUS) && gratuitous) {
    3424:	f1b8 0f00 	cmp.w	r8, #0
    3428:	d00d      	beq.n	3446 <arp_update+0x66>
	entry = arp_entry_find(&arp_table, iface, src, &prev);
    342a:	482f      	ldr	r0, [pc, #188]	; (34e8 <arp_update+0x108>)
    342c:	463a      	mov	r2, r7
    342e:	4629      	mov	r1, r5
    3430:	6800      	ldr	r0, [r0, #0]
    3432:	ab01      	add	r3, sp, #4
	sys_snode_t *prev = NULL;
    3434:	9401      	str	r4, [sp, #4]
	entry = arp_entry_find(&arp_table, iface, src, &prev);
    3436:	f005 f99d 	bl	8774 <arp_entry_find.isra.0>
	if (entry) {
    343a:	b120      	cbz	r0, 3446 <arp_update+0x66>
		memcpy(&entry->eth, hwaddr, sizeof(struct net_eth_addr));
    343c:	2206      	movs	r2, #6
    343e:	4631      	mov	r1, r6
    3440:	3010      	adds	r0, #16
    3442:	f004 ffc1 	bl	83c8 <memcpy>
			arp_gratuitous(iface, src, hwaddr);
		}

		if (force) {
    3446:	f1b9 0f00 	cmp.w	r9, #0
    344a:	d00f      	beq.n	346c <arp_update+0x8c>
			sys_snode_t *prev = NULL;
    344c:	2300      	movs	r3, #0
			struct arp_entry *entry;

			entry = arp_entry_find(&arp_table, iface, src, &prev);
    344e:	4826      	ldr	r0, [pc, #152]	; (34e8 <arp_update+0x108>)
			sys_snode_t *prev = NULL;
    3450:	9301      	str	r3, [sp, #4]
			entry = arp_entry_find(&arp_table, iface, src, &prev);
    3452:	463a      	mov	r2, r7
    3454:	ab01      	add	r3, sp, #4
    3456:	4629      	mov	r1, r5
    3458:	6800      	ldr	r0, [r0, #0]
    345a:	f005 f98b 	bl	8774 <arp_entry_find.isra.0>
			if (entry) {
    345e:	4603      	mov	r3, r0
    3460:	b138      	cbz	r0, 3472 <arp_update+0x92>
				memcpy(&entry->eth, hwaddr,
    3462:	2206      	movs	r2, #6
    3464:	4631      	mov	r1, r6
    3466:	3010      	adds	r0, #16
    3468:	f004 ffae 	bl	83c8 <memcpy>

	/* Inserting entry into the table */
	sys_slist_prepend(&arp_table, &entry->node);

	net_if_queue_tx(iface, pkt);
}
    346c:	b002      	add	sp, #8
    346e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return list->head;
    3472:	481e      	ldr	r0, [pc, #120]	; (34ec <arp_update+0x10c>)
    3474:	6804      	ldr	r4, [r0, #0]
	if (!node) {
    3476:	b9ac      	cbnz	r4, 34a4 <arp_update+0xc4>
					entry = arp_entry_get_last_from_table();
    3478:	f7ff ff9e 	bl	33b8 <arp_entry_get_last_from_table>
				if (entry) {
    347c:	4604      	mov	r4, r0
    347e:	2800      	cmp	r0, #0
    3480:	d0f4      	beq.n	346c <arp_update+0x8c>
					entry->req_start = k_uptime_get_32();
    3482:	f005 f944 	bl	870e <k_uptime_get_32>
					net_ipaddr_copy(&entry->ip, src);
    3486:	683b      	ldr	r3, [r7, #0]
					entry->iface = iface;
    3488:	e9c4 0501 	strd	r0, r5, [r4, #4]
					net_ipaddr_copy(&entry->ip, src);
    348c:	60e3      	str	r3, [r4, #12]
					memcpy(&entry->eth, hwaddr, sizeof(entry->eth));
    348e:	2206      	movs	r2, #6
    3490:	4631      	mov	r1, r6
    3492:	f104 0010 	add.w	r0, r4, #16
    3496:	f004 ff97 	bl	83c8 <memcpy>
					sys_slist_prepend(&arp_table, &entry->node);
    349a:	4621      	mov	r1, r4
    349c:	4812      	ldr	r0, [pc, #72]	; (34e8 <arp_update+0x108>)
    349e:	f005 f91f 	bl	86e0 <sys_slist_prepend>
    34a2:	e7e3      	b.n	346c <arp_update+0x8c>
	sys_slist_remove(&arp_free_entries, NULL, node);
    34a4:	4622      	mov	r2, r4
    34a6:	4619      	mov	r1, r3
    34a8:	f005 f921 	bl	86ee <sys_slist_remove>
				if (entry) {
    34ac:	e7e9      	b.n	3482 <arp_update+0xa2>
	net_pkt_lladdr_dst(entry->pending)->len = sizeof(struct net_eth_addr);
    34ae:	2206      	movs	r2, #6
    34b0:	6927      	ldr	r7, [r4, #16]
	entry->pending = NULL;
    34b2:	4620      	mov	r0, r4
	return pkt->frags->data;
    34b4:	693b      	ldr	r3, [r7, #16]
	net_pkt_lladdr_dst(entry->pending)->len = sizeof(struct net_eth_addr);
    34b6:	f887 2034 	strb.w	r2, [r7, #52]	; 0x34
	net_pkt_lladdr_dst(entry->pending)->addr =
    34ba:	689b      	ldr	r3, [r3, #8]
	memcpy(&entry->eth, hwaddr, sizeof(struct net_eth_addr));
    34bc:	4631      	mov	r1, r6
	net_pkt_lladdr_dst(entry->pending)->addr =
    34be:	633b      	str	r3, [r7, #48]	; 0x30
	entry->pending = NULL;
    34c0:	2300      	movs	r3, #0
    34c2:	f840 3f10 	str.w	r3, [r0, #16]!
	memcpy(&entry->eth, hwaddr, sizeof(struct net_eth_addr));
    34c6:	f004 ff7f 	bl	83c8 <memcpy>
	sys_slist_prepend(&arp_table, &entry->node);
    34ca:	4621      	mov	r1, r4
    34cc:	4806      	ldr	r0, [pc, #24]	; (34e8 <arp_update+0x108>)
    34ce:	f005 f907 	bl	86e0 <sys_slist_prepend>
	net_if_queue_tx(iface, pkt);
    34d2:	4639      	mov	r1, r7
    34d4:	4628      	mov	r0, r5
}
    34d6:	b002      	add	sp, #8
    34d8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	net_if_queue_tx(iface, pkt);
    34dc:	f000 bb2c 	b.w	3b38 <net_if_queue_tx>
    34e0:	200012a8 	.word	0x200012a8
    34e4:	20000cf0 	.word	0x20000cf0
    34e8:	200012b0 	.word	0x200012b0
    34ec:	200012a0 	.word	0x200012a0

000034f0 <arp_request_timeout>:
{
    34f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t current = k_uptime_get_32();
    34f4:	f005 f90b 	bl	870e <k_uptime_get_32>
    34f8:	f8df 806c 	ldr.w	r8, [pc, #108]	; 3568 <arp_request_timeout+0x78>
    34fc:	4607      	mov	r7, r0
    34fe:	f8d8 4000 	ldr.w	r4, [r8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&arp_pending_entries,
    3502:	b374      	cbz	r4, 3562 <arp_request_timeout+0x72>
	return node->next;
    3504:	6825      	ldr	r5, [r4, #0]
	return list->tail;
    3506:	4e19      	ldr	r6, [pc, #100]	; (356c <arp_request_timeout+0x7c>)
			    ARP_REQUEST_TIMEOUT - current) > 0) {
    3508:	6863      	ldr	r3, [r4, #4]
    350a:	1bdb      	subs	r3, r3, r7
    350c:	f503 60fa 	add.w	r0, r3, #2000	; 0x7d0
		if ((int32_t)(entry->req_start +
    3510:	2800      	cmp	r0, #0
    3512:	dc14      	bgt.n	353e <arp_request_timeout+0x4e>
		arp_entry_cleanup(entry, true);
    3514:	2101      	movs	r1, #1
    3516:	4620      	mov	r0, r4
    3518:	f005 f8ff 	bl	871a <arp_entry_cleanup>
		sys_slist_remove(&arp_pending_entries, NULL, &entry->node);
    351c:	2100      	movs	r1, #0
    351e:	4622      	mov	r2, r4
    3520:	4640      	mov	r0, r8
    3522:	f005 f8e4 	bl	86ee <sys_slist_remove>
    3526:	6873      	ldr	r3, [r6, #4]
	parent->next = child;
    3528:	6021      	str	r1, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
    352a:	b92b      	cbnz	r3, 3538 <arp_request_timeout+0x48>
	list->head = node;
    352c:	e9c6 4400 	strd	r4, r4, [r6]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&arp_pending_entries,
    3530:	b1bd      	cbz	r5, 3562 <arp_request_timeout+0x72>
	return node->next;
    3532:	462c      	mov	r4, r5
    3534:	682d      	ldr	r5, [r5, #0]
    3536:	e7e7      	b.n	3508 <arp_request_timeout+0x18>
	parent->next = child;
    3538:	601c      	str	r4, [r3, #0]
	list->tail = node;
    353a:	6074      	str	r4, [r6, #4]
}
    353c:	e7f8      	b.n	3530 <arp_request_timeout+0x40>
		k_delayed_work_submit(&arp_request_timer,
    353e:	f513 6ffa 	cmn.w	r3, #2000	; 0x7d0
    3542:	bf08      	it	eq
    3544:	2000      	moveq	r0, #0
	if (div_ratio) {
		t += off;
		if (result32 && (t < BIT64(32))) {
			return ((uint32_t)t) / (from_hz / to_hz);
		} else {
			return t / (from_hz / to_hz);
    3546:	220a      	movs	r2, #10
    3548:	2300      	movs	r3, #0
    354a:	2100      	movs	r1, #0
    354c:	3009      	adds	r0, #9
    354e:	f7fc fdb7 	bl	c0 <__aeabi_uldivmod>
}
    3552:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3556:	4602      	mov	r2, r0
    3558:	460b      	mov	r3, r1
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    355a:	4805      	ldr	r0, [pc, #20]	; (3570 <arp_request_timeout+0x80>)
    355c:	4905      	ldr	r1, [pc, #20]	; (3574 <arp_request_timeout+0x84>)
    355e:	f003 bc3b 	b.w	6dd8 <k_delayed_work_submit_to_queue>
    3562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3566:	bf00      	nop
    3568:	200012a8 	.word	0x200012a8
    356c:	200012a0 	.word	0x200012a0
    3570:	200010c0 	.word	0x200010c0
    3574:	20000cf0 	.word	0x20000cf0

00003578 <net_arp_prepare>:
{
    3578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    357c:	4689      	mov	r9, r1
    357e:	4617      	mov	r7, r2
	if (!pkt || !pkt->buffer) {
    3580:	4606      	mov	r6, r0
{
    3582:	b085      	sub	sp, #20
	if (!pkt || !pkt->buffer) {
    3584:	b920      	cbnz	r0, 3590 <net_arp_prepare+0x18>
		return NULL;
    3586:	2500      	movs	r5, #0
}
    3588:	4628      	mov	r0, r5
    358a:	b005      	add	sp, #20
    358c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!pkt || !pkt->buffer) {
    3590:	6903      	ldr	r3, [r0, #16]
    3592:	2b00      	cmp	r3, #0
    3594:	d0f7      	beq.n	3586 <net_arp_prepare+0xe>
	if (!current_ip &&
    3596:	b95a      	cbnz	r2, 35b0 <net_arp_prepare+0x38>
	    !net_if_ipv4_addr_mask_cmp(net_pkt_iface(pkt), request_ip)) {
    3598:	6a00      	ldr	r0, [r0, #32]
    359a:	f005 fae9 	bl	8b70 <net_if_ipv4_addr_mask_cmp>
	if (!current_ip &&
    359e:	b938      	cbnz	r0, 35b0 <net_arp_prepare+0x38>
		struct net_if_ipv4 *ipv4 = net_pkt_iface(pkt)->config.ip.ipv4;
    35a0:	6a33      	ldr	r3, [r6, #32]
    35a2:	685b      	ldr	r3, [r3, #4]
		if (ipv4) {
    35a4:	b123      	cbz	r3, 35b0 <net_arp_prepare+0x38>
			addr = &ipv4->gw;
    35a6:	f103 0930 	add.w	r9, r3, #48	; 0x30
	return UNALIGNED_GET(&addr->s_addr) == 0;
    35aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			if (net_ipv4_is_addr_unspecified(addr)) {
    35ac:	2b00      	cmp	r3, #0
    35ae:	d0ea      	beq.n	3586 <net_arp_prepare+0xe>
	sys_snode_t *prev = NULL;
    35b0:	2300      	movs	r3, #0
	entry = arp_entry_find(&arp_table, iface, dst, &prev);
    35b2:	4d60      	ldr	r5, [pc, #384]	; (3734 <net_arp_prepare+0x1bc>)
	sys_snode_t *prev = NULL;
    35b4:	9303      	str	r3, [sp, #12]
	entry = arp_entry_find(&arp_table, iface, dst, &prev);
    35b6:	464a      	mov	r2, r9
    35b8:	6a31      	ldr	r1, [r6, #32]
    35ba:	6828      	ldr	r0, [r5, #0]
    35bc:	ab03      	add	r3, sp, #12
    35be:	f005 f8d9 	bl	8774 <arp_entry_find.isra.0>
	if (entry) {
    35c2:	4604      	mov	r4, r0
    35c4:	b368      	cbz	r0, 3622 <net_arp_prepare+0xaa>
		if (&entry->node != sys_slist_peek_head(&arp_table)) {
    35c6:	682b      	ldr	r3, [r5, #0]
    35c8:	4298      	cmp	r0, r3
    35ca:	d007      	beq.n	35dc <net_arp_prepare+0x64>
			sys_slist_remove(&arp_table, prev, &entry->node);
    35cc:	4602      	mov	r2, r0
    35ce:	9903      	ldr	r1, [sp, #12]
    35d0:	4628      	mov	r0, r5
    35d2:	f005 f88c 	bl	86ee <sys_slist_remove>
			sys_slist_prepend(&arp_table, &entry->node);
    35d6:	4621      	mov	r1, r4
    35d8:	f005 f882 	bl	86e0 <sys_slist_prepend>
	return &iface->if_dev->link_addr;
    35dc:	68a3      	ldr	r3, [r4, #8]
	net_pkt_lladdr_dst(pkt)->addr = (uint8_t *)&entry->eth;
    35de:	3410      	adds	r4, #16
		(uint8_t *)net_if_get_link_addr(entry->iface)->addr;
    35e0:	681b      	ldr	r3, [r3, #0]
	return pkt;
    35e2:	4635      	mov	r5, r6
		(uint8_t *)net_if_get_link_addr(entry->iface)->addr;
    35e4:	691b      	ldr	r3, [r3, #16]
	net_pkt_lladdr_dst(pkt)->addr = (uint8_t *)&entry->eth;
    35e6:	6334      	str	r4, [r6, #48]	; 0x30
	net_pkt_lladdr_src(pkt)->addr =
    35e8:	62b3      	str	r3, [r6, #40]	; 0x28
	net_pkt_lladdr_src(pkt)->len = sizeof(struct net_eth_addr);
    35ea:	2306      	movs	r3, #6
    35ec:	f886 302c 	strb.w	r3, [r6, #44]	; 0x2c
	net_pkt_lladdr_dst(pkt)->len = sizeof(struct net_eth_addr);
    35f0:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
	return pkt;
    35f4:	e7c8      	b.n	3588 <net_arp_prepare+0x10>
	sys_slist_remove(&arp_free_entries, NULL, node);
    35f6:	4622      	mov	r2, r4
    35f8:	f005 f879 	bl	86ee <sys_slist_remove>
			if (!entry) {
    35fc:	e022      	b.n	3644 <net_arp_prepare+0xcc>
    35fe:	4635      	mov	r5, r6
    3600:	e031      	b.n	3666 <net_arp_prepare+0xee>
	parent->next = child;
    3602:	601c      	str	r4, [r3, #0]
	list->tail = node;
    3604:	f8ca 4004 	str.w	r4, [sl, #4]
}
    3608:	e04c      	b.n	36a4 <net_arp_prepare+0x12c>
			(uint8_t *)net_if_get_link_addr(iface)->addr;
    360a:	f8db 3000 	ldr.w	r3, [fp]
    360e:	691b      	ldr	r3, [r3, #16]
		net_pkt_lladdr_src(pkt)->addr =
    3610:	62ab      	str	r3, [r5, #40]	; 0x28
    3612:	e056      	b.n	36c2 <net_arp_prepare+0x14a>
		(void)memset(&hdr->src_ipaddr, 0, sizeof(struct in_addr));
    3614:	2204      	movs	r2, #4
    3616:	4639      	mov	r1, r7
    3618:	f108 000e 	add.w	r0, r8, #14
    361c:	f004 feff 	bl	841e <memset>
    3620:	e7b2      	b.n	3588 <net_arp_prepare+0x10>
	return arp_entry_find(&arp_pending_entries, iface, dst, NULL);
    3622:	f8df a114 	ldr.w	sl, [pc, #276]	; 3738 <net_arp_prepare+0x1c0>
    3626:	4603      	mov	r3, r0
    3628:	6a31      	ldr	r1, [r6, #32]
    362a:	f8da 0000 	ldr.w	r0, [sl]
    362e:	f005 f8a1 	bl	8774 <arp_entry_find.isra.0>
		if (!entry) {
    3632:	4601      	mov	r1, r0
    3634:	b930      	cbnz	r0, 3644 <net_arp_prepare+0xcc>
	return list->head;
    3636:	4841      	ldr	r0, [pc, #260]	; (373c <net_arp_prepare+0x1c4>)
    3638:	6804      	ldr	r4, [r0, #0]
	if (!node) {
    363a:	2c00      	cmp	r4, #0
    363c:	d1db      	bne.n	35f6 <net_arp_prepare+0x7e>
				entry = arp_entry_get_last_from_table();
    363e:	f7ff febb 	bl	33b8 <arp_entry_get_last_from_table>
    3642:	4604      	mov	r4, r0
	return pkt->iface;
    3644:	f8d6 b020 	ldr.w	fp, [r6, #32]
	if (current_ip) {
    3648:	2f00      	cmp	r7, #0
    364a:	d1d8      	bne.n	35fe <net_arp_prepare+0x86>
						AF_UNSPEC, 0, NET_BUF_TIMEOUT);
    364c:	220a      	movs	r2, #10
    364e:	2300      	movs	r3, #0
		pkt = net_pkt_alloc_with_buffer(iface,
    3650:	211c      	movs	r1, #28
    3652:	e9cd 2300 	strd	r2, r3, [sp]
    3656:	4658      	mov	r0, fp
    3658:	463b      	mov	r3, r7
    365a:	463a      	mov	r2, r7
    365c:	f000 fe92 	bl	4384 <net_pkt_alloc_with_buffer>
		if (!pkt) {
    3660:	4605      	mov	r5, r0
    3662:	2800      	cmp	r0, #0
    3664:	d090      	beq.n	3588 <net_arp_prepare+0x10>
	return net_buf_simple_add(&buf->b, len);
    3666:	6928      	ldr	r0, [r5, #16]
    3668:	211c      	movs	r1, #28
    366a:	3008      	adds	r0, #8
    366c:	f7ff fdc6 	bl	31fc <net_buf_simple_add>
	return pkt->frags->data;
    3670:	692b      	ldr	r3, [r5, #16]
    3672:	f8d3 8008 	ldr.w	r8, [r3, #8]
	if (entry) {
    3676:	2c00      	cmp	r4, #0
    3678:	d0c7      	beq.n	360a <net_arp_prepare+0x92>
		entry->pending = net_pkt_ref(pending);
    367a:	4630      	mov	r0, r6
    367c:	f005 fcac 	bl	8fd8 <net_pkt_ref>
		entry->iface = net_pkt_iface(pkt);
    3680:	6a2b      	ldr	r3, [r5, #32]
		entry->pending = net_pkt_ref(pending);
    3682:	6120      	str	r0, [r4, #16]
		entry->iface = net_pkt_iface(pkt);
    3684:	60a3      	str	r3, [r4, #8]
		net_ipaddr_copy(&entry->ip, next_addr);
    3686:	f8d9 3000 	ldr.w	r3, [r9]
    368a:	60e3      	str	r3, [r4, #12]
    368c:	68a3      	ldr	r3, [r4, #8]
			(uint8_t *)net_if_get_link_addr(entry->iface)->addr;
    368e:	681b      	ldr	r3, [r3, #0]
    3690:	691b      	ldr	r3, [r3, #16]
		net_pkt_lladdr_src(pkt)->addr =
    3692:	62ab      	str	r3, [r5, #40]	; 0x28
	parent->next = child;
    3694:	2300      	movs	r3, #0
    3696:	6023      	str	r3, [r4, #0]
	return list->tail;
    3698:	f8da 3004 	ldr.w	r3, [sl, #4]
Z_GENLIST_APPEND(slist, snode)
    369c:	2b00      	cmp	r3, #0
    369e:	d1b0      	bne.n	3602 <net_arp_prepare+0x8a>
	list->head = node;
    36a0:	e9ca 4400 	strd	r4, r4, [sl]
	entry->req_start = k_uptime_get_32();
    36a4:	f005 f833 	bl	870e <k_uptime_get_32>
    36a8:	6060      	str	r0, [r4, #4]
	return k_ticks_to_ms_floor32(z_timeout_remaining(&work->timeout));
    36aa:	4825      	ldr	r0, [pc, #148]	; (3740 <net_arp_prepare+0x1c8>)
    36ac:	f003 fe1e 	bl	72ec <z_timeout_remaining>
	if (!k_delayed_work_remaining_get(&arp_request_timer)) {
    36b0:	230a      	movs	r3, #10
    36b2:	4343      	muls	r3, r0
    36b4:	d105      	bne.n	36c2 <net_arp_prepare+0x14a>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    36b6:	22c8      	movs	r2, #200	; 0xc8
    36b8:	2300      	movs	r3, #0
    36ba:	4922      	ldr	r1, [pc, #136]	; (3744 <net_arp_prepare+0x1cc>)
    36bc:	4822      	ldr	r0, [pc, #136]	; (3748 <net_arp_prepare+0x1d0>)
    36be:	f003 fb8b 	bl	6dd8 <k_delayed_work_submit_to_queue>
	net_pkt_lladdr_src(pkt)->len = sizeof(struct net_eth_addr);
    36c2:	2606      	movs	r6, #6
    36c4:	f885 602c 	strb.w	r6, [r5, #44]	; 0x2c
	net_pkt_lladdr_dst(pkt)->addr = (uint8_t *)net_eth_broadcast_addr();
    36c8:	f7ff fe72 	bl	33b0 <net_eth_broadcast_addr>
	hdr->protocol = htons(NET_ETH_PTYPE_IP);
    36cc:	2208      	movs	r2, #8
	net_pkt_lladdr_dst(pkt)->addr = (uint8_t *)net_eth_broadcast_addr();
    36ce:	6328      	str	r0, [r5, #48]	; 0x30
	net_pkt_lladdr_dst(pkt)->len = sizeof(struct net_eth_addr);
    36d0:	f885 6034 	strb.w	r6, [r5, #52]	; 0x34
	hdr->hwtype = htons(NET_ARP_HTYPE_ETH);
    36d4:	2100      	movs	r1, #0
    36d6:	2301      	movs	r3, #1
	hdr->protocol = htons(NET_ETH_PTYPE_IP);
    36d8:	f888 2002 	strb.w	r2, [r8, #2]
	hdr->protolen = sizeof(struct in_addr);
    36dc:	2204      	movs	r2, #4
	hdr->hwtype = htons(NET_ARP_HTYPE_ETH);
    36de:	f888 3001 	strb.w	r3, [r8, #1]
	hdr->protolen = sizeof(struct in_addr);
    36e2:	f888 2005 	strb.w	r2, [r8, #5]
	hdr->opcode = htons(NET_ARP_REQUEST);
    36e6:	f888 3007 	strb.w	r3, [r8, #7]
	(void)memset(&hdr->dst_hwaddr.addr, 0x00, sizeof(struct net_eth_addr));
    36ea:	4632      	mov	r2, r6
	hdr->hwtype = htons(NET_ARP_HTYPE_ETH);
    36ec:	f888 1000 	strb.w	r1, [r8]
	hdr->protocol = htons(NET_ETH_PTYPE_IP);
    36f0:	f888 1003 	strb.w	r1, [r8, #3]
	hdr->hwlen = sizeof(struct net_eth_addr);
    36f4:	f888 6004 	strb.w	r6, [r8, #4]
	hdr->opcode = htons(NET_ARP_REQUEST);
    36f8:	f888 1006 	strb.w	r1, [r8, #6]
	(void)memset(&hdr->dst_hwaddr.addr, 0x00, sizeof(struct net_eth_addr));
    36fc:	f108 0012 	add.w	r0, r8, #18
    3700:	f004 fe8d 	bl	841e <memset>
	net_ipaddr_copy(&hdr->dst_ipaddr, next_addr);
    3704:	f8d9 3000 	ldr.w	r3, [r9]
    3708:	f8c8 3018 	str.w	r3, [r8, #24]
	memcpy(hdr->src_hwaddr.addr, net_pkt_lladdr_src(pkt)->addr,
    370c:	4632      	mov	r2, r6
    370e:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    3710:	f108 0008 	add.w	r0, r8, #8
    3714:	f004 fe58 	bl	83c8 <memcpy>
	if (!entry || net_pkt_ipv4_auto(pkt)) {
    3718:	b12c      	cbz	r4, 3726 <net_arp_prepare+0x1ae>
		my_addr = if_get_addr(entry->iface, current_ip);
    371a:	68a3      	ldr	r3, [r4, #8]
    371c:	4639      	mov	r1, r7
    371e:	6858      	ldr	r0, [r3, #4]
    3720:	f005 f813 	bl	874a <if_get_addr.isra.0>
    3724:	4607      	mov	r7, r0
	if (my_addr) {
    3726:	2f00      	cmp	r7, #0
    3728:	f43f af74 	beq.w	3614 <net_arp_prepare+0x9c>
		net_ipaddr_copy(&hdr->src_ipaddr, my_addr);
    372c:	683b      	ldr	r3, [r7, #0]
    372e:	f8c8 300e 	str.w	r3, [r8, #14]
    3732:	e729      	b.n	3588 <net_arp_prepare+0x10>
    3734:	200012b0 	.word	0x200012b0
    3738:	200012a8 	.word	0x200012a8
    373c:	200012a0 	.word	0x200012a0
    3740:	20000d00 	.word	0x20000d00
    3744:	20000cf0 	.word	0x20000cf0
    3748:	200010c0 	.word	0x200010c0

0000374c <net_arp_clear_cache>:

	return NET_OK;
}

void net_arp_clear_cache(struct net_if *iface)
{
    374c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return list->head;
    3750:	f8df 8098 	ldr.w	r8, [pc, #152]	; 37ec <net_arp_clear_cache+0xa0>
    3754:	4605      	mov	r5, r0
    3756:	f8d8 4000 	ldr.w	r4, [r8]
	sys_snode_t *prev = NULL;
	struct arp_entry *entry, *next;

	NET_DBG("Flushing ARP table");

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&arp_table, entry, next, node) {
    375a:	b93c      	cbnz	r4, 376c <net_arp_clear_cache+0x20>
    375c:	4f24      	ldr	r7, [pc, #144]	; (37f0 <net_arp_clear_cache+0xa4>)
    375e:	683c      	ldr	r4, [r7, #0]

	prev = NULL;

	NET_DBG("Flushing ARP pending requests");

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&arp_pending_entries,
    3760:	bb0c      	cbnz	r4, 37a6 <net_arp_clear_cache+0x5a>
	}

	if (sys_slist_is_empty(&arp_pending_entries)) {
		k_delayed_work_cancel(&arp_request_timer);
	}
}
    3762:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		k_delayed_work_cancel(&arp_request_timer);
    3766:	4823      	ldr	r0, [pc, #140]	; (37f4 <net_arp_clear_cache+0xa8>)
    3768:	f003 bbbe 	b.w	6ee8 <k_delayed_work_cancel>
	return node->next;
    376c:	2700      	movs	r7, #0
    376e:	6826      	ldr	r6, [r4, #0]
		sys_slist_prepend(&arp_free_entries, &entry->node);
    3770:	f8df 9084 	ldr.w	r9, [pc, #132]	; 37f8 <net_arp_clear_cache+0xac>
			prev = &entry->node;
    3774:	4623      	mov	r3, r4
		if (iface && iface != entry->iface) {
    3776:	b115      	cbz	r5, 377e <net_arp_clear_cache+0x32>
    3778:	68a2      	ldr	r2, [r4, #8]
    377a:	42aa      	cmp	r2, r5
    377c:	d10d      	bne.n	379a <net_arp_clear_cache+0x4e>
		arp_entry_cleanup(entry, false);
    377e:	2100      	movs	r1, #0
    3780:	4620      	mov	r0, r4
    3782:	f004 ffca 	bl	871a <arp_entry_cleanup>
		sys_slist_remove(&arp_table, prev, &entry->node);
    3786:	4639      	mov	r1, r7
    3788:	4640      	mov	r0, r8
    378a:	4622      	mov	r2, r4
    378c:	f004 ffaf 	bl	86ee <sys_slist_remove>
		sys_slist_prepend(&arp_free_entries, &entry->node);
    3790:	4621      	mov	r1, r4
    3792:	4648      	mov	r0, r9
    3794:	f004 ffa4 	bl	86e0 <sys_slist_prepend>
    3798:	463b      	mov	r3, r7
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&arp_table, entry, next, node) {
    379a:	2e00      	cmp	r6, #0
    379c:	d0de      	beq.n	375c <net_arp_clear_cache+0x10>
    379e:	4634      	mov	r4, r6
    37a0:	461f      	mov	r7, r3
    37a2:	6836      	ldr	r6, [r6, #0]
    37a4:	e7e6      	b.n	3774 <net_arp_clear_cache+0x28>
    37a6:	f04f 0800 	mov.w	r8, #0
    37aa:	6826      	ldr	r6, [r4, #0]
		sys_slist_prepend(&arp_free_entries, &entry->node);
    37ac:	f8df 9048 	ldr.w	r9, [pc, #72]	; 37f8 <net_arp_clear_cache+0xac>
			prev = &entry->node;
    37b0:	4623      	mov	r3, r4
		if (iface && iface != entry->iface) {
    37b2:	b115      	cbz	r5, 37ba <net_arp_clear_cache+0x6e>
    37b4:	68a2      	ldr	r2, [r4, #8]
    37b6:	42aa      	cmp	r2, r5
    37b8:	d10d      	bne.n	37d6 <net_arp_clear_cache+0x8a>
		arp_entry_cleanup(entry, true);
    37ba:	2101      	movs	r1, #1
    37bc:	4620      	mov	r0, r4
    37be:	f004 ffac 	bl	871a <arp_entry_cleanup>
		sys_slist_remove(&arp_pending_entries, prev, &entry->node);
    37c2:	4641      	mov	r1, r8
    37c4:	4638      	mov	r0, r7
    37c6:	4622      	mov	r2, r4
    37c8:	f004 ff91 	bl	86ee <sys_slist_remove>
		sys_slist_prepend(&arp_free_entries, &entry->node);
    37cc:	4621      	mov	r1, r4
    37ce:	4648      	mov	r0, r9
    37d0:	f004 ff86 	bl	86e0 <sys_slist_prepend>
    37d4:	4643      	mov	r3, r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&arp_pending_entries,
    37d6:	b11e      	cbz	r6, 37e0 <net_arp_clear_cache+0x94>
    37d8:	4634      	mov	r4, r6
    37da:	4698      	mov	r8, r3
    37dc:	6836      	ldr	r6, [r6, #0]
    37de:	e7e7      	b.n	37b0 <net_arp_clear_cache+0x64>
	if (sys_slist_is_empty(&arp_pending_entries)) {
    37e0:	683b      	ldr	r3, [r7, #0]
    37e2:	2b00      	cmp	r3, #0
    37e4:	d0bd      	beq.n	3762 <net_arp_clear_cache+0x16>
}
    37e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    37ea:	bf00      	nop
    37ec:	200012b0 	.word	0x200012b0
    37f0:	200012a8 	.word	0x200012a8
    37f4:	20000cf0 	.word	0x20000cf0
    37f8:	200012a0 	.word	0x200012a0

000037fc <net_arp_init>:

	return ret;
}

void net_arp_init(void)
{
    37fc:	b538      	push	{r3, r4, r5, lr}
	int i;

	if (arp_cache_initialized) {
    37fe:	4d0e      	ldr	r5, [pc, #56]	; (3838 <net_arp_init+0x3c>)
    3800:	782c      	ldrb	r4, [r5, #0]
    3802:	b9c4      	cbnz	r4, 3836 <net_arp_init+0x3a>
	list->head = NULL;
    3804:	4b0d      	ldr	r3, [pc, #52]	; (383c <net_arp_init+0x40>)
    3806:	480e      	ldr	r0, [pc, #56]	; (3840 <net_arp_init+0x44>)
	list->tail = NULL;
    3808:	e9c3 4400 	strd	r4, r4, [r3]
	sys_slist_init(&arp_pending_entries);
	sys_slist_init(&arp_table);

	for (i = 0; i < CONFIG_NET_ARP_TABLE_SIZE; i++) {
		/* Inserting entry as free */
		sys_slist_prepend(&arp_free_entries, &arp_entries[i].node);
    380c:	490d      	ldr	r1, [pc, #52]	; (3844 <net_arp_init+0x48>)
	list->head = NULL;
    380e:	4b0e      	ldr	r3, [pc, #56]	; (3848 <net_arp_init+0x4c>)
	list->tail = NULL;
    3810:	e9c0 4400 	strd	r4, r4, [r0]
    3814:	e9c3 4400 	strd	r4, r4, [r3]
    3818:	f004 ff62 	bl	86e0 <sys_slist_prepend>
    381c:	3118      	adds	r1, #24
    381e:	f004 ff5f 	bl	86e0 <sys_slist_prepend>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    3822:	4b0a      	ldr	r3, [pc, #40]	; (384c <net_arp_init+0x50>)
    3824:	2230      	movs	r2, #48	; 0x30
    3826:	4618      	mov	r0, r3
    3828:	4621      	mov	r1, r4
    382a:	f004 fdf8 	bl	841e <memset>
	}

	k_delayed_work_init(&arp_request_timer, arp_request_timeout);

	arp_cache_initialized = true;
    382e:	2301      	movs	r3, #1
    3830:	4a07      	ldr	r2, [pc, #28]	; (3850 <net_arp_init+0x54>)
    3832:	702b      	strb	r3, [r5, #0]
    3834:	6042      	str	r2, [r0, #4]
}
    3836:	bd38      	pop	{r3, r4, r5, pc}
    3838:	20001625 	.word	0x20001625
    383c:	200012a8 	.word	0x200012a8
    3840:	200012a0 	.word	0x200012a0
    3844:	20001270 	.word	0x20001270
    3848:	200012b0 	.word	0x200012b0
    384c:	20000cf0 	.word	0x20000cf0
    3850:	000034f1 	.word	0x000034f1

00003854 <net_recv_data>:
	net_tc_submit_to_rx_queue(tc, pkt);
}

/* Called by driver when an IP packet has been received */
int net_recv_data(struct net_if *iface, struct net_pkt *pkt)
{
    3854:	b538      	push	{r3, r4, r5, lr}
    3856:	4605      	mov	r5, r0
	if (!pkt || !iface) {
    3858:	460c      	mov	r4, r1
    385a:	b371      	cbz	r1, 38ba <net_recv_data+0x66>
    385c:	b368      	cbz	r0, 38ba <net_recv_data+0x66>
		return -EINVAL;
	}

	if (net_pkt_is_empty(pkt)) {
    385e:	690b      	ldr	r3, [r1, #16]
}

static inline bool net_pkt_is_empty(struct net_pkt *pkt)
{
	return !pkt->buffer || !net_pkt_data(pkt) || pkt->buffer->len == 0;
    3860:	b373      	cbz	r3, 38c0 <net_recv_data+0x6c>
    3862:	689a      	ldr	r2, [r3, #8]
    3864:	b362      	cbz	r2, 38c0 <net_recv_data+0x6c>
    3866:	899b      	ldrh	r3, [r3, #12]
    3868:	b353      	cbz	r3, 38c0 <net_recv_data+0x6c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    386a:	6803      	ldr	r3, [r0, #0]
    386c:	f3bf 8f5b 	dmb	ish
    3870:	68db      	ldr	r3, [r3, #12]
    3872:	f3bf 8f5b 	dmb	ish
		return -ENODATA;
	}

	if (!net_if_flag_is_set(iface, NET_IF_UP)) {
    3876:	07db      	lsls	r3, r3, #31
    3878:	d525      	bpl.n	38c6 <net_recv_data+0x72>
				    &NET_IPV6_HDR(pkt)->src);
}

static inline void net_pkt_set_overwrite(struct net_pkt *pkt, bool overwrite)
{
	pkt->overwrite = overwrite;
    387a:	f891 3039 	ldrb.w	r3, [r1, #57]	; 0x39
		return -ENETDOWN;
	}

	net_pkt_set_overwrite(pkt, true);
	net_pkt_cursor_init(pkt);
    387e:	4608      	mov	r0, r1
    3880:	f043 0301 	orr.w	r3, r3, #1
    3884:	f881 3039 	strb.w	r3, [r1, #57]	; 0x39
    3888:	f005 fc26 	bl	90d8 <net_pkt_cursor_init>
    388c:	682b      	ldr	r3, [r5, #0]
	pkt->iface = iface;
    388e:	6225      	str	r5, [r4, #32]
		pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
    3890:	7d5a      	ldrb	r2, [r3, #21]
	uint8_t tc = net_rx_priority2tc(prio);
    3892:	f894 003f 	ldrb.w	r0, [r4, #63]	; 0x3f
    3896:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
		pkt->lladdr_dst.type = net_if_get_link_addr(iface)->type;
    389a:	7d5b      	ldrb	r3, [r3, #21]
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    389c:	2500      	movs	r5, #0
    389e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    38a2:	f005 fdf2 	bl	948a <net_rx_priority2tc>
    38a6:	4b09      	ldr	r3, [pc, #36]	; (38cc <net_recv_data+0x78>)
	net_tc_submit_to_rx_queue(tc, pkt);
    38a8:	b2c0      	uxtb	r0, r0
    38aa:	4621      	mov	r1, r4
    38ac:	e9c4 3501 	strd	r3, r5, [r4, #4]
    38b0:	6025      	str	r5, [r4, #0]
    38b2:	f000 fd8d 	bl	43d0 <net_tc_submit_to_rx_queue>

	net_pkt_set_iface(pkt, iface);

	net_queue_rx(iface, pkt);

	return 0;
    38b6:	4628      	mov	r0, r5
}
    38b8:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    38ba:	f06f 0015 	mvn.w	r0, #21
    38be:	e7fb      	b.n	38b8 <net_recv_data+0x64>
		return -ENODATA;
    38c0:	f06f 004d 	mvn.w	r0, #77	; 0x4d
    38c4:	e7f8      	b.n	38b8 <net_recv_data+0x64>
		return -ENETDOWN;
    38c6:	f06f 003d 	mvn.w	r0, #61	; 0x3d
    38ca:	e7f5      	b.n	38b8 <net_recv_data+0x64>
    38cc:	000089e9 	.word	0x000089e9

000038d0 <net_ipv4_is_ll_addr>:
	return (ntohl(UNALIGNED_GET(&addr->s_addr)) & 0xA9FE0000) == 0xA9FE0000;
    38d0:	6803      	ldr	r3, [r0, #0]
    38d2:	4a04      	ldr	r2, [pc, #16]	; (38e4 <net_ipv4_is_ll_addr+0x14>)
    38d4:	ba1b      	rev	r3, r3
    38d6:	ea32 0303 	bics.w	r3, r2, r3
}
    38da:	bf0c      	ite	eq
    38dc:	2001      	moveq	r0, #1
    38de:	2000      	movne	r0, #0
    38e0:	4770      	bx	lr
    38e2:	bf00      	nop
    38e4:	a9fe0000 	.word	0xa9fe0000

000038e8 <net_if_flag_is_set>:
{
    38e8:	b538      	push	{r3, r4, r5, lr}
    38ea:	460d      	mov	r5, r1
	NET_ASSERT(iface);
    38ec:	4604      	mov	r4, r0
    38ee:	b970      	cbnz	r0, 390e <net_if_flag_is_set+0x26>
    38f0:	490c      	ldr	r1, [pc, #48]	; (3924 <net_if_flag_is_set+0x3c>)
    38f2:	f240 230f 	movw	r3, #527	; 0x20f
    38f6:	4a0c      	ldr	r2, [pc, #48]	; (3928 <net_if_flag_is_set+0x40>)
    38f8:	480c      	ldr	r0, [pc, #48]	; (392c <net_if_flag_is_set+0x44>)
    38fa:	f003 ffaf 	bl	785c <printk>
    38fe:	480c      	ldr	r0, [pc, #48]	; (3930 <net_if_flag_is_set+0x48>)
    3900:	f003 ffac 	bl	785c <printk>
    3904:	f240 210f 	movw	r1, #527	; 0x20f
    3908:	4807      	ldr	r0, [pc, #28]	; (3928 <net_if_flag_is_set+0x40>)
    390a:	f004 f9f9 	bl	7d00 <assert_post_action>
    390e:	6823      	ldr	r3, [r4, #0]
    3910:	f3bf 8f5b 	dmb	ish
    3914:	68d8      	ldr	r0, [r3, #12]
    3916:	f3bf 8f5b 	dmb	ish
 */
static inline bool atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    391a:	4128      	asrs	r0, r5
}
    391c:	f000 0001 	and.w	r0, r0, #1
    3920:	bd38      	pop	{r3, r4, r5, pc}
    3922:	bf00      	nop
    3924:	0000c05d 	.word	0x0000c05d
    3928:	0000c035 	.word	0x0000c035
    392c:	0000b021 	.word	0x0000b021
    3930:	0000bfd5 	.word	0x0000bfd5

00003934 <net_if_flag_set.constprop.0>:
static inline void net_if_flag_set(struct net_if *iface,
    3934:	b510      	push	{r4, lr}
	NET_ASSERT(iface);
    3936:	4604      	mov	r4, r0
    3938:	b970      	cbnz	r0, 3958 <net_if_flag_set.constprop.0+0x24>
    393a:	490f      	ldr	r1, [pc, #60]	; (3978 <net_if_flag_set.constprop.0+0x44>)
    393c:	f240 13e1 	movw	r3, #481	; 0x1e1
    3940:	4a0e      	ldr	r2, [pc, #56]	; (397c <net_if_flag_set.constprop.0+0x48>)
    3942:	480f      	ldr	r0, [pc, #60]	; (3980 <net_if_flag_set.constprop.0+0x4c>)
    3944:	f003 ff8a 	bl	785c <printk>
    3948:	480e      	ldr	r0, [pc, #56]	; (3984 <net_if_flag_set.constprop.0+0x50>)
    394a:	f003 ff87 	bl	785c <printk>
    394e:	f240 11e1 	movw	r1, #481	; 0x1e1
    3952:	480a      	ldr	r0, [pc, #40]	; (397c <net_if_flag_set.constprop.0+0x48>)
    3954:	f004 f9d4 	bl	7d00 <assert_post_action>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3958:	6823      	ldr	r3, [r4, #0]
    395a:	f3bf 8f5b 	dmb	ish
    395e:	330c      	adds	r3, #12
    3960:	e853 2f00 	ldrex	r2, [r3]
    3964:	f042 0201 	orr.w	r2, r2, #1
    3968:	e843 2100 	strex	r1, r2, [r3]
    396c:	2900      	cmp	r1, #0
    396e:	d1f7      	bne.n	3960 <net_if_flag_set.constprop.0+0x2c>
    3970:	f3bf 8f5b 	dmb	ish
}
    3974:	bd10      	pop	{r4, pc}
    3976:	bf00      	nop
    3978:	0000c05d 	.word	0x0000c05d
    397c:	0000c035 	.word	0x0000c035
    3980:	0000b021 	.word	0x0000b021
    3984:	0000bfd5 	.word	0x0000bfd5

00003988 <iface_router_update_timer>:
	return list->head;
    3988:	4b1b      	ldr	r3, [pc, #108]	; (39f8 <iface_router_update_timer+0x70>)
	/* Signed number of ms until router lifetime ends */
	return (int32_t)(ends - now);
}

static void iface_router_update_timer(uint32_t now)
{
    398a:	b570      	push	{r4, r5, r6, lr}
    398c:	681a      	ldr	r2, [r3, #0]
	struct net_if_router *router, *next;
	uint32_t new_delay = UINT32_MAX;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_router_timers,
    398e:	b1da      	cbz	r2, 39c8 <iface_router_update_timer+0x40>
	return node->next;
    3990:	6811      	ldr	r1, [r2, #0]
    3992:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	ends += MSEC_PER_SEC * router->lifetime;
    3996:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_router_timers,
    399a:	b932      	cbnz	r2, 39aa <iface_router_update_timer+0x22>
		}

		new_delay = MIN((uint32_t)ends, new_delay);
	}

	if (new_delay == UINT32_MAX) {
    399c:	1c5a      	adds	r2, r3, #1
    399e:	d118      	bne.n	39d2 <iface_router_update_timer+0x4a>
		k_delayed_work_cancel(&router_timer);
	} else {
		k_delayed_work_submit(&router_timer, K_MSEC(new_delay));
	}
}
    39a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		k_delayed_work_cancel(&router_timer);
    39a4:	4815      	ldr	r0, [pc, #84]	; (39fc <iface_router_update_timer+0x74>)
    39a6:	f003 ba9f 	b.w	6ee8 <k_delayed_work_cancel>
	ends += MSEC_PER_SEC * router->lifetime;
    39aa:	8c14      	ldrh	r4, [r2, #32]
	return (int32_t)(ends - now);
    39ac:	69d2      	ldr	r2, [r2, #28]
    39ae:	1a12      	subs	r2, r2, r0
    39b0:	fb05 2204 	mla	r2, r5, r4, r2
		if (ends <= 0) {
    39b4:	2a00      	cmp	r2, #0
    39b6:	dd0b      	ble.n	39d0 <iface_router_update_timer+0x48>
		new_delay = MIN((uint32_t)ends, new_delay);
    39b8:	4293      	cmp	r3, r2
    39ba:	bf28      	it	cs
    39bc:	4613      	movcs	r3, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_router_timers,
    39be:	b129      	cbz	r1, 39cc <iface_router_update_timer+0x44>
    39c0:	680c      	ldr	r4, [r1, #0]
    39c2:	460a      	mov	r2, r1
    39c4:	4621      	mov	r1, r4
    39c6:	e7e8      	b.n	399a <iface_router_update_timer+0x12>
    39c8:	4611      	mov	r1, r2
    39ca:	e7e2      	b.n	3992 <iface_router_update_timer+0xa>
    39cc:	460c      	mov	r4, r1
    39ce:	e7f8      	b.n	39c2 <iface_router_update_timer+0x3a>
			new_delay = 0;
    39d0:	2300      	movs	r3, #0
		t += off;
    39d2:	f113 0009 	adds.w	r0, r3, #9
			return t / (from_hz / to_hz);
    39d6:	f04f 020a 	mov.w	r2, #10
    39da:	f04f 0300 	mov.w	r3, #0
		t += off;
    39de:	bf2c      	ite	cs
    39e0:	2101      	movcs	r1, #1
    39e2:	2100      	movcc	r1, #0
			return t / (from_hz / to_hz);
    39e4:	f7fc fb6c 	bl	c0 <__aeabi_uldivmod>
}
    39e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    39ec:	4602      	mov	r2, r0
    39ee:	460b      	mov	r3, r1
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    39f0:	4803      	ldr	r0, [pc, #12]	; (3a00 <iface_router_update_timer+0x78>)
    39f2:	4902      	ldr	r1, [pc, #8]	; (39fc <iface_router_update_timer+0x74>)
    39f4:	f003 b9f0 	b.w	6dd8 <k_delayed_work_submit_to_queue>
    39f8:	200012b8 	.word	0x200012b8
    39fc:	20000d20 	.word	0x20000d20
    3a00:	200010c0 	.word	0x200010c0

00003a04 <net_if_ipv4_get_best_match.isra.0>:
	}

	return false;
}

static struct in_addr *net_if_ipv4_get_best_match(struct net_if *iface,
    3a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3a06:	4615      	mov	r5, r2
	struct net_if_ipv4 *ipv4 = iface->config.ip.ipv4;
	struct in_addr *src = NULL;
	uint8_t len;
	int i;

	if (!ipv4) {
    3a08:	bb30      	cbnz	r0, 3a58 <net_if_ipv4_get_best_match.isra.0+0x54>
			src = &ipv4->unicast[i].address.in_addr;
		}
	}

	return src;
}
    3a0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
    3a0c:	8803      	ldrh	r3, [r0, #0]
    3a0e:	2b01      	cmp	r3, #1
    3a10:	d128      	bne.n	3a64 <net_if_ipv4_get_best_match.isra.0+0x60>
	    !net_ipv4_is_ll_addr(&addr->address.in_addr)) {
    3a12:	1d04      	adds	r4, r0, #4
    3a14:	4620      	mov	r0, r4
    3a16:	f7ff ff5b 	bl	38d0 <net_ipv4_is_ll_addr>
	    addr->address.family == AF_INET &&
    3a1a:	bb18      	cbnz	r0, 3a64 <net_if_ipv4_get_best_match.isra.0+0x60>
    3a1c:	4626      	mov	r6, r4
    3a1e:	1e4f      	subs	r7, r1, #1
		if (src[j] == dst[j]) {
    3a20:	f817 3f01 	ldrb.w	r3, [r7, #1]!
    3a24:	f816 1b01 	ldrb.w	r1, [r6], #1
    3a28:	f100 0208 	add.w	r2, r0, #8
    3a2c:	428b      	cmp	r3, r1
    3a2e:	d108      	bne.n	3a42 <net_if_ipv4_get_best_match.isra.0+0x3e>
			len += 8U;
    3a30:	b2d0      	uxtb	r0, r2
	for (j = 0U; j < addr_len; j++) {
    3a32:	2820      	cmp	r0, #32
    3a34:	d1f4      	bne.n	3a20 <net_if_ipv4_get_best_match.isra.0+0x1c>
		if (len >= *best_so_far) {
    3a36:	782b      	ldrb	r3, [r5, #0]
    3a38:	4283      	cmp	r3, r0
    3a3a:	d813      	bhi.n	3a64 <net_if_ipv4_get_best_match.isra.0+0x60>
			*best_so_far = len;
    3a3c:	7028      	strb	r0, [r5, #0]
		len = get_diff_ipv4(dst, &ipv4->unicast[i].address.in_addr);
    3a3e:	4620      	mov	r0, r4
    3a40:	e7e3      	b.n	3a0a <net_if_ipv4_get_best_match.isra.0+0x6>
			xor = src[j] ^ dst[j];
    3a42:	404b      	eors	r3, r1
			for (k = 0U; k < 8; k++) {
    3a44:	b2d2      	uxtb	r2, r2
				if (!(xor & 0x80)) {
    3a46:	0619      	lsls	r1, r3, #24
    3a48:	d4f5      	bmi.n	3a36 <net_if_ipv4_get_best_match.isra.0+0x32>
					len++;
    3a4a:	3001      	adds	r0, #1
    3a4c:	b2c0      	uxtb	r0, r0
					xor <<= 1;
    3a4e:	005b      	lsls	r3, r3, #1
			for (k = 0U; k < 8; k++) {
    3a50:	4290      	cmp	r0, r2
					xor <<= 1;
    3a52:	b2db      	uxtb	r3, r3
			for (k = 0U; k < 8; k++) {
    3a54:	d1f7      	bne.n	3a46 <net_if_ipv4_get_best_match.isra.0+0x42>
    3a56:	e7ee      	b.n	3a36 <net_if_ipv4_get_best_match.isra.0+0x32>
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
    3a58:	6942      	ldr	r2, [r0, #20]
    3a5a:	4b03      	ldr	r3, [pc, #12]	; (3a68 <net_if_ipv4_get_best_match.isra.0+0x64>)
    3a5c:	4013      	ands	r3, r2
    3a5e:	4a03      	ldr	r2, [pc, #12]	; (3a6c <net_if_ipv4_get_best_match.isra.0+0x68>)
    3a60:	4293      	cmp	r3, r2
    3a62:	d0d3      	beq.n	3a0c <net_if_ipv4_get_best_match.isra.0+0x8>
		return NULL;
    3a64:	2000      	movs	r0, #0
    3a66:	e7d0      	b.n	3a0a <net_if_ipv4_get_best_match.isra.0+0x6>
    3a68:	0002ff00 	.word	0x0002ff00
    3a6c:	00020100 	.word	0x00020100

00003a70 <need_calc_checksum>:
		link->cb(iface, lladdr, status);
	}
}

static bool need_calc_checksum(struct net_if *iface, enum ethernet_hw_caps caps)
{
    3a70:	b510      	push	{r4, lr}
    3a72:	4603      	mov	r3, r0
#if defined(CONFIG_NET_L2_ETHERNET)
	if (net_if_l2(iface) != &NET_L2_GET_NAME(ETHERNET)) {
    3a74:	f005 f833 	bl	8ade <net_if_l2>
    3a78:	4a08      	ldr	r2, [pc, #32]	; (3a9c <need_calc_checksum+0x2c>)
{
    3a7a:	460c      	mov	r4, r1
	if (net_if_l2(iface) != &NET_L2_GET_NAME(ETHERNET)) {
    3a7c:	4282      	cmp	r2, r0
    3a7e:	d10b      	bne.n	3a98 <need_calc_checksum+0x28>
	return iface->if_dev->dev;
    3a80:	681b      	ldr	r3, [r3, #0]
    3a82:	6818      	ldr	r0, [r3, #0]
enum ethernet_hw_caps net_eth_get_hw_capabilities(struct net_if *iface)
{
	const struct ethernet_api *eth =
		(struct ethernet_api *)net_if_get_device(iface)->api;

	if (!eth->get_capabilities) {
    3a84:	6883      	ldr	r3, [r0, #8]
    3a86:	68db      	ldr	r3, [r3, #12]
    3a88:	b10b      	cbz	r3, 3a8e <need_calc_checksum+0x1e>
		return (enum ethernet_hw_caps)0;
	}

	return eth->get_capabilities(net_if_get_device(iface));
    3a8a:	4798      	blx	r3
    3a8c:	4603      	mov	r3, r0
		return true;
	}

	return !(net_eth_get_hw_capabilities(iface) & caps);
    3a8e:	421c      	tst	r4, r3
    3a90:	bf0c      	ite	eq
    3a92:	2001      	moveq	r0, #1
    3a94:	2000      	movne	r0, #0
#else
	return true;
#endif
}
    3a96:	bd10      	pop	{r4, pc}
		return true;
    3a98:	2001      	movs	r0, #1
    3a9a:	e7fc      	b.n	3a96 <need_calc_checksum+0x26>
    3a9c:	20000498 	.word	0x20000498

00003aa0 <iface_router_expired>:
{
    3aa0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
    3aa4:	4f23      	ldr	r7, [pc, #140]	; (3b34 <iface_router_expired+0x94>)
	uint32_t current_time = k_uptime_get_32();
    3aa6:	f005 f85d 	bl	8b64 <k_uptime_get_32>
    3aaa:	6839      	ldr	r1, [r7, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_router_timers,
    3aac:	2900      	cmp	r1, #0
    3aae:	d03c      	beq.n	3b2a <iface_router_expired+0x8a>
	return node->next;
    3ab0:	2200      	movs	r2, #0
    3ab2:	460b      	mov	r3, r1
    3ab4:	4696      	mov	lr, r2
    3ab6:	4615      	mov	r5, r2
	ends += MSEC_PER_SEC * router->lifetime;
    3ab8:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
	parent->next = child;
    3abc:	4690      	mov	r8, r2
	return node->next;
    3abe:	f8d1 c000 	ldr.w	ip, [r1]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_router_timers,
    3ac2:	687c      	ldr	r4, [r7, #4]
	return (int32_t)(ends - now);
    3ac4:	69de      	ldr	r6, [r3, #28]
	ends += MSEC_PER_SEC * router->lifetime;
    3ac6:	f8b3 b020 	ldrh.w	fp, [r3, #32]
	return (int32_t)(ends - now);
    3aca:	1a36      	subs	r6, r6, r0
    3acc:	fb09 660b 	mla	r6, r9, fp, r6
		if (ends > 0) {
    3ad0:	2e00      	cmp	r6, #0
			prev_node = &router->node;
    3ad2:	469a      	mov	sl, r3
		if (ends > 0) {
    3ad4:	dc0f      	bgt.n	3af6 <iface_router_expired+0x56>
    3ad6:	681e      	ldr	r6, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
    3ad8:	b9ad      	cbnz	r5, 3b06 <iface_router_expired+0x66>
    3ada:	429c      	cmp	r4, r3
    3adc:	d018      	beq.n	3b10 <iface_router_expired+0x70>
    3ade:	f04f 0e01 	mov.w	lr, #1
		router->is_used = false;
    3ae2:	f893 1022 	ldrb.w	r1, [r3, #34]	; 0x22
    3ae6:	46aa      	mov	sl, r5
    3ae8:	f368 0100 	bfi	r1, r8, #0, #1
    3aec:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
    3af0:	4631      	mov	r1, r6
	parent->next = child;
    3af2:	f8c3 8000 	str.w	r8, [r3]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_router_timers,
    3af6:	f1bc 0f00 	cmp.w	ip, #0
    3afa:	d010      	beq.n	3b1e <iface_router_expired+0x7e>
	return node->next;
    3afc:	4663      	mov	r3, ip
    3afe:	4655      	mov	r5, sl
    3b00:	f8dc c000 	ldr.w	ip, [ip]
    3b04:	e7de      	b.n	3ac4 <iface_router_expired+0x24>
Z_GENLIST_REMOVE(slist, snode)
    3b06:	429c      	cmp	r4, r3
	parent->next = child;
    3b08:	602e      	str	r6, [r5, #0]
Z_GENLIST_REMOVE(slist, snode)
    3b0a:	d004      	beq.n	3b16 <iface_router_expired+0x76>
    3b0c:	460e      	mov	r6, r1
    3b0e:	e7e8      	b.n	3ae2 <iface_router_expired+0x42>
	list->tail = node;
    3b10:	4634      	mov	r4, r6
    3b12:	2201      	movs	r2, #1
    3b14:	e7e3      	b.n	3ade <iface_router_expired+0x3e>
    3b16:	462c      	mov	r4, r5
    3b18:	460e      	mov	r6, r1
    3b1a:	2201      	movs	r2, #1
    3b1c:	e7e1      	b.n	3ae2 <iface_router_expired+0x42>
    3b1e:	f1be 0f00 	cmp.w	lr, #0
    3b22:	d000      	beq.n	3b26 <iface_router_expired+0x86>
    3b24:	6039      	str	r1, [r7, #0]
    3b26:	b102      	cbz	r2, 3b2a <iface_router_expired+0x8a>
    3b28:	607c      	str	r4, [r7, #4]
}
    3b2a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	iface_router_update_timer(current_time);
    3b2e:	f7ff bf2b 	b.w	3988 <iface_router_update_timer>
    3b32:	bf00      	nop
    3b34:	200012b8 	.word	0x200012b8

00003b38 <net_if_queue_tx>:
{
    3b38:	b510      	push	{r4, lr}
	uint8_t tc = net_tx_priority2tc(prio);
    3b3a:	f891 003f 	ldrb.w	r0, [r1, #63]	; 0x3f
{
    3b3e:	460c      	mov	r4, r1
	uint8_t tc = net_tx_priority2tc(prio);
    3b40:	f000 fc4e 	bl	43e0 <net_tx_priority2tc>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    3b44:	2300      	movs	r3, #0
    3b46:	4a05      	ldr	r2, [pc, #20]	; (3b5c <net_if_queue_tx+0x24>)
	if (!net_tc_submit_to_tx_queue(tc, pkt)) {
    3b48:	4621      	mov	r1, r4
    3b4a:	e9c4 2301 	strd	r2, r3, [r4, #4]
    3b4e:	6023      	str	r3, [r4, #0]
    3b50:	b2c0      	uxtb	r0, r0
}
    3b52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (!net_tc_submit_to_tx_queue(tc, pkt)) {
    3b56:	f000 bc27 	b.w	43a8 <net_tc_submit_to_tx_queue>
    3b5a:	bf00      	nop
    3b5c:	00003d61 	.word	0x00003d61

00003b60 <net_if_ipv4_is_addr_bcast>:
{
    3b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3b62:	460d      	mov	r5, r1
	if (iface) {
    3b64:	b1f0      	cbz	r0, 3ba4 <net_if_ipv4_is_addr_bcast+0x44>
}
    3b66:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		return ipv4_is_broadcast_address(iface, addr);
    3b6a:	f005 b818 	b.w	8b9e <ipv4_is_broadcast_address>
		ret = ipv4_is_broadcast_address(iface, addr);
    3b6e:	4629      	mov	r1, r5
    3b70:	4620      	mov	r0, r4
    3b72:	f005 f814 	bl	8b9e <ipv4_is_broadcast_address>
		if (ret) {
    3b76:	b9a0      	cbnz	r0, 3ba2 <net_if_ipv4_is_addr_bcast+0x42>
	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
    3b78:	3408      	adds	r4, #8
    3b7a:	42b4      	cmp	r4, r6
    3b7c:	d90e      	bls.n	3b9c <net_if_ipv4_is_addr_bcast+0x3c>
    3b7e:	490b      	ldr	r1, [pc, #44]	; (3bac <net_if_ipv4_is_addr_bcast+0x4c>)
    3b80:	f640 233e 	movw	r3, #2622	; 0xa3e
    3b84:	463a      	mov	r2, r7
    3b86:	480a      	ldr	r0, [pc, #40]	; (3bb0 <net_if_ipv4_is_addr_bcast+0x50>)
    3b88:	f003 fe68 	bl	785c <printk>
    3b8c:	4809      	ldr	r0, [pc, #36]	; (3bb4 <net_if_ipv4_is_addr_bcast+0x54>)
    3b8e:	f003 fe65 	bl	785c <printk>
    3b92:	f640 213e 	movw	r1, #2622	; 0xa3e
    3b96:	4638      	mov	r0, r7
    3b98:	f004 f8b2 	bl	7d00 <assert_post_action>
    3b9c:	42b4      	cmp	r4, r6
    3b9e:	d3e6      	bcc.n	3b6e <net_if_ipv4_is_addr_bcast+0xe>
	return false;
    3ba0:	2000      	movs	r0, #0
}
    3ba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
    3ba4:	4c04      	ldr	r4, [pc, #16]	; (3bb8 <net_if_ipv4_is_addr_bcast+0x58>)
    3ba6:	4e05      	ldr	r6, [pc, #20]	; (3bbc <net_if_ipv4_is_addr_bcast+0x5c>)
    3ba8:	4f05      	ldr	r7, [pc, #20]	; (3bc0 <net_if_ipv4_is_addr_bcast+0x60>)
    3baa:	e7e6      	b.n	3b7a <net_if_ipv4_is_addr_bcast+0x1a>
    3bac:	0000c08d 	.word	0x0000c08d
    3bb0:	0000b021 	.word	0x0000b021
    3bb4:	0000c0a7 	.word	0x0000c0a7
    3bb8:	20000448 	.word	0x20000448
    3bbc:	20000458 	.word	0x20000458
    3bc0:	0000c063 	.word	0x0000c063

00003bc4 <net_if_ipv4_select_src_addr>:
	uint8_t best_match = 0U;
    3bc4:	2300      	movs	r3, #0
{
    3bc6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    3bca:	4605      	mov	r5, r0
	if (!net_ipv4_is_ll_addr(dst) && !net_ipv4_is_addr_mcast(dst)) {
    3bcc:	4608      	mov	r0, r1
{
    3bce:	460f      	mov	r7, r1
	uint8_t best_match = 0U;
    3bd0:	f88d 3007 	strb.w	r3, [sp, #7]
	if (!net_ipv4_is_ll_addr(dst) && !net_ipv4_is_addr_mcast(dst)) {
    3bd4:	f7ff fe7c 	bl	38d0 <net_ipv4_is_ll_addr>
    3bd8:	bba0      	cbnz	r0, 3c44 <net_if_ipv4_select_src_addr+0x80>
    3bda:	4608      	mov	r0, r1
    3bdc:	f004 ff77 	bl	8ace <net_ipv4_is_addr_mcast>
    3be0:	bb80      	cbnz	r0, 3c44 <net_if_ipv4_select_src_addr+0x80>
		if (dst_iface) {
    3be2:	b345      	cbz	r5, 3c36 <net_if_ipv4_select_src_addr+0x72>
			src = net_if_ipv4_get_best_match(dst_iface, dst,
    3be4:	6868      	ldr	r0, [r5, #4]
    3be6:	f10d 0207 	add.w	r2, sp, #7
    3bea:	f7ff ff0b 	bl	3a04 <net_if_ipv4_get_best_match.isra.0>
			src = net_if_ipv4_get_ll(dst_iface, NET_ADDR_PREFERRED);
    3bee:	4604      	mov	r4, r0
    3bf0:	e01c      	b.n	3c2c <net_if_ipv4_select_src_addr+0x68>
				addr = net_if_ipv4_get_best_match(iface, dst,
    3bf2:	6870      	ldr	r0, [r6, #4]
    3bf4:	4639      	mov	r1, r7
    3bf6:	f10d 0207 	add.w	r2, sp, #7
    3bfa:	f7ff ff03 	bl	3a04 <net_if_ipv4_get_best_match.isra.0>
				if (addr) {
    3bfe:	2800      	cmp	r0, #0
    3c00:	bf18      	it	ne
    3c02:	4604      	movne	r4, r0
			Z_STRUCT_SECTION_FOREACH(net_if, iface) {
    3c04:	3608      	adds	r6, #8
    3c06:	4546      	cmp	r6, r8
    3c08:	d90e      	bls.n	3c28 <net_if_ipv4_select_src_addr+0x64>
    3c0a:	4927      	ldr	r1, [pc, #156]	; (3ca8 <net_if_ipv4_select_src_addr+0xe4>)
    3c0c:	f640 23c5 	movw	r3, #2757	; 0xac5
    3c10:	464a      	mov	r2, r9
    3c12:	4826      	ldr	r0, [pc, #152]	; (3cac <net_if_ipv4_select_src_addr+0xe8>)
    3c14:	f003 fe22 	bl	785c <printk>
    3c18:	4825      	ldr	r0, [pc, #148]	; (3cb0 <net_if_ipv4_select_src_addr+0xec>)
    3c1a:	f003 fe1f 	bl	785c <printk>
    3c1e:	f640 21c5 	movw	r1, #2757	; 0xac5
    3c22:	4648      	mov	r0, r9
    3c24:	f004 f86c 	bl	7d00 <assert_post_action>
    3c28:	4546      	cmp	r6, r8
    3c2a:	d3e2      	bcc.n	3bf2 <net_if_ipv4_select_src_addr+0x2e>
	if (!src) {
    3c2c:	b35c      	cbz	r4, 3c86 <net_if_ipv4_select_src_addr+0xc2>
}
    3c2e:	4620      	mov	r0, r4
    3c30:	b003      	add	sp, #12
    3c32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	struct in_addr *src = NULL;
    3c36:	462c      	mov	r4, r5
			Z_STRUCT_SECTION_FOREACH(net_if, iface) {
    3c38:	4e1e      	ldr	r6, [pc, #120]	; (3cb4 <net_if_ipv4_select_src_addr+0xf0>)
    3c3a:	f8df 807c 	ldr.w	r8, [pc, #124]	; 3cb8 <net_if_ipv4_select_src_addr+0xf4>
    3c3e:	f8df 907c 	ldr.w	r9, [pc, #124]	; 3cbc <net_if_ipv4_select_src_addr+0xf8>
    3c42:	e7e0      	b.n	3c06 <net_if_ipv4_select_src_addr+0x42>
		if (dst_iface) {
    3c44:	b355      	cbz	r5, 3c9c <net_if_ipv4_select_src_addr+0xd8>
			src = net_if_ipv4_get_ll(dst_iface, NET_ADDR_PREFERRED);
    3c46:	2101      	movs	r1, #1
    3c48:	4628      	mov	r0, r5
    3c4a:	f004 ffba 	bl	8bc2 <net_if_ipv4_get_ll>
    3c4e:	e7ce      	b.n	3bee <net_if_ipv4_select_src_addr+0x2a>
				addr = net_if_ipv4_get_ll(iface,
    3c50:	2101      	movs	r1, #1
    3c52:	4630      	mov	r0, r6
    3c54:	f004 ffb5 	bl	8bc2 <net_if_ipv4_get_ll>
				if (addr) {
    3c58:	4604      	mov	r4, r0
    3c5a:	2800      	cmp	r0, #0
    3c5c:	d1e7      	bne.n	3c2e <net_if_ipv4_select_src_addr+0x6a>
			Z_STRUCT_SECTION_FOREACH(net_if, iface) {
    3c5e:	3608      	adds	r6, #8
    3c60:	42be      	cmp	r6, r7
    3c62:	d90e      	bls.n	3c82 <net_if_ipv4_select_src_addr+0xbe>
    3c64:	4910      	ldr	r1, [pc, #64]	; (3ca8 <net_if_ipv4_select_src_addr+0xe4>)
    3c66:	f640 23d4 	movw	r3, #2772	; 0xad4
    3c6a:	4642      	mov	r2, r8
    3c6c:	480f      	ldr	r0, [pc, #60]	; (3cac <net_if_ipv4_select_src_addr+0xe8>)
    3c6e:	f003 fdf5 	bl	785c <printk>
    3c72:	480f      	ldr	r0, [pc, #60]	; (3cb0 <net_if_ipv4_select_src_addr+0xec>)
    3c74:	f003 fdf2 	bl	785c <printk>
    3c78:	f640 21d4 	movw	r1, #2772	; 0xad4
    3c7c:	4640      	mov	r0, r8
    3c7e:	f004 f83f 	bl	7d00 <assert_post_action>
    3c82:	42be      	cmp	r6, r7
    3c84:	d3e4      	bcc.n	3c50 <net_if_ipv4_select_src_addr+0x8c>
		src = net_if_ipv4_get_global_addr(dst_iface,
    3c86:	2101      	movs	r1, #1
    3c88:	4628      	mov	r0, r5
    3c8a:	f004 ff9d 	bl	8bc8 <net_if_ipv4_get_global_addr>
		if (src) {
    3c8e:	4604      	mov	r4, r0
    3c90:	2800      	cmp	r0, #0
    3c92:	d1cc      	bne.n	3c2e <net_if_ipv4_select_src_addr+0x6a>
		return net_ipv4_unspecified_address();
    3c94:	f000 fa50 	bl	4138 <net_ipv4_unspecified_address>
    3c98:	4604      	mov	r4, r0
    3c9a:	e7c8      	b.n	3c2e <net_if_ipv4_select_src_addr+0x6a>
			Z_STRUCT_SECTION_FOREACH(net_if, iface) {
    3c9c:	4e05      	ldr	r6, [pc, #20]	; (3cb4 <net_if_ipv4_select_src_addr+0xf0>)
    3c9e:	4f06      	ldr	r7, [pc, #24]	; (3cb8 <net_if_ipv4_select_src_addr+0xf4>)
    3ca0:	f8df 8018 	ldr.w	r8, [pc, #24]	; 3cbc <net_if_ipv4_select_src_addr+0xf8>
    3ca4:	e7dc      	b.n	3c60 <net_if_ipv4_select_src_addr+0x9c>
    3ca6:	bf00      	nop
    3ca8:	0000c08d 	.word	0x0000c08d
    3cac:	0000b021 	.word	0x0000b021
    3cb0:	0000c0a7 	.word	0x0000c0a7
    3cb4:	20000448 	.word	0x20000448
    3cb8:	20000458 	.word	0x20000458
    3cbc:	0000c063 	.word	0x0000c063

00003cc0 <net_if_ipv4_addr_lookup>:
{
    3cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3cc4:	4606      	mov	r6, r0
    3cc6:	460d      	mov	r5, r1
	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
    3cc8:	4c15      	ldr	r4, [pc, #84]	; (3d20 <net_if_ipv4_addr_lookup+0x60>)
    3cca:	4f16      	ldr	r7, [pc, #88]	; (3d24 <net_if_ipv4_addr_lookup+0x64>)
    3ccc:	f8df 8058 	ldr.w	r8, [pc, #88]	; 3d28 <net_if_ipv4_addr_lookup+0x68>
    3cd0:	42bc      	cmp	r4, r7
    3cd2:	d90e      	bls.n	3cf2 <net_if_ipv4_addr_lookup+0x32>
    3cd4:	4915      	ldr	r1, [pc, #84]	; (3d2c <net_if_ipv4_addr_lookup+0x6c>)
    3cd6:	f640 23f1 	movw	r3, #2801	; 0xaf1
    3cda:	4642      	mov	r2, r8
    3cdc:	4814      	ldr	r0, [pc, #80]	; (3d30 <net_if_ipv4_addr_lookup+0x70>)
    3cde:	f003 fdbd 	bl	785c <printk>
    3ce2:	4814      	ldr	r0, [pc, #80]	; (3d34 <net_if_ipv4_addr_lookup+0x74>)
    3ce4:	f003 fdba 	bl	785c <printk>
    3ce8:	f640 21f1 	movw	r1, #2801	; 0xaf1
    3cec:	4640      	mov	r0, r8
    3cee:	f004 f807 	bl	7d00 <assert_post_action>
    3cf2:	42bc      	cmp	r4, r7
    3cf4:	d301      	bcc.n	3cfa <net_if_ipv4_addr_lookup+0x3a>
	return NULL;
    3cf6:	2000      	movs	r0, #0
    3cf8:	e00d      	b.n	3d16 <net_if_ipv4_addr_lookup+0x56>
		struct net_if_ipv4 *ipv4 = iface->config.ip.ipv4;
    3cfa:	6860      	ldr	r0, [r4, #4]
		if (!ipv4) {
    3cfc:	b168      	cbz	r0, 3d1a <net_if_ipv4_addr_lookup+0x5a>
			if (!ipv4->unicast[i].is_used ||
    3cfe:	7d83      	ldrb	r3, [r0, #22]
    3d00:	079b      	lsls	r3, r3, #30
    3d02:	d50a      	bpl.n	3d1a <net_if_ipv4_addr_lookup+0x5a>
    3d04:	8803      	ldrh	r3, [r0, #0]
    3d06:	2b01      	cmp	r3, #1
    3d08:	d107      	bne.n	3d1a <net_if_ipv4_addr_lookup+0x5a>
			if (UNALIGNED_GET(&addr->s4_addr32[0]) ==
    3d0a:	6833      	ldr	r3, [r6, #0]
    3d0c:	6842      	ldr	r2, [r0, #4]
    3d0e:	429a      	cmp	r2, r3
    3d10:	d103      	bne.n	3d1a <net_if_ipv4_addr_lookup+0x5a>
				if (ret) {
    3d12:	b105      	cbz	r5, 3d16 <net_if_ipv4_addr_lookup+0x56>
					*ret = iface;
    3d14:	602c      	str	r4, [r5, #0]
}
    3d16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
    3d1a:	3408      	adds	r4, #8
    3d1c:	e7d8      	b.n	3cd0 <net_if_ipv4_addr_lookup+0x10>
    3d1e:	bf00      	nop
    3d20:	20000448 	.word	0x20000448
    3d24:	20000458 	.word	0x20000458
    3d28:	0000c063 	.word	0x0000c063
    3d2c:	0000c08d 	.word	0x0000c08d
    3d30:	0000b021 	.word	0x0000b021
    3d34:	0000c0a7 	.word	0x0000c0a7

00003d38 <net_if_call_link_cb>:
{
    3d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return list->head;
    3d3a:	4b08      	ldr	r3, [pc, #32]	; (3d5c <net_if_call_link_cb+0x24>)
    3d3c:	4605      	mov	r5, r0
    3d3e:	681b      	ldr	r3, [r3, #0]
    3d40:	460e      	mov	r6, r1
    3d42:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&link_callbacks, link, tmp, node) {
    3d44:	b14b      	cbz	r3, 3d5a <net_if_call_link_cb+0x22>
	return node->next;
    3d46:	681c      	ldr	r4, [r3, #0]
		link->cb(iface, lladdr, status);
    3d48:	463a      	mov	r2, r7
    3d4a:	4631      	mov	r1, r6
    3d4c:	4628      	mov	r0, r5
    3d4e:	685b      	ldr	r3, [r3, #4]
    3d50:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&link_callbacks, link, tmp, node) {
    3d52:	b114      	cbz	r4, 3d5a <net_if_call_link_cb+0x22>
    3d54:	4623      	mov	r3, r4
    3d56:	6824      	ldr	r4, [r4, #0]
    3d58:	e7f6      	b.n	3d48 <net_if_call_link_cb+0x10>
}
    3d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3d5c:	20001300 	.word	0x20001300

00003d60 <process_tx_packet>:
	struct net_linkaddr ll_dst = {
    3d60:	2300      	movs	r3, #0
{
    3d62:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d64:	b085      	sub	sp, #20
	struct net_linkaddr ll_dst = {
    3d66:	e9cd 3300 	strd	r3, r3, [sp]
	return list->head;
    3d6a:	4b1f      	ldr	r3, [pc, #124]	; (3de8 <process_tx_packet+0x88>)
{
    3d6c:	4604      	mov	r4, r0
	if (!sys_slist_is_empty(&link_callbacks)) {
    3d6e:	681b      	ldr	r3, [r3, #0]
	return pkt->iface;
    3d70:	6a06      	ldr	r6, [r0, #32]
    3d72:	b1ab      	cbz	r3, 3da0 <process_tx_packet+0x40>
		if (net_linkaddr_set(&ll_dst_storage,
    3d74:	6b01      	ldr	r1, [r0, #48]	; 0x30
    3d76:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
 * This value should always be <= NET_LINK_ADDR_MAX_LENGTH.
 */
static inline int net_linkaddr_set(struct net_linkaddr_storage *lladdr_store,
				   uint8_t *new_addr, uint8_t new_len)
{
	if (!lladdr_store || !new_addr) {
    3d7a:	b189      	cbz	r1, 3da0 <process_tx_packet+0x40>
		return -EINVAL;
	}

	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
    3d7c:	2a06      	cmp	r2, #6
    3d7e:	d80f      	bhi.n	3da0 <process_tx_packet+0x40>
		return -EMSGSIZE;
	}

	lladdr_store->len = new_len;
	memcpy(lladdr_store->addr, new_addr, new_len);
    3d80:	f10d 050a 	add.w	r5, sp, #10
    3d84:	4628      	mov	r0, r5
	lladdr_store->len = new_len;
    3d86:	f88d 2009 	strb.w	r2, [sp, #9]
	memcpy(lladdr_store->addr, new_addr, new_len);
    3d8a:	f004 fb1d 	bl	83c8 <memcpy>
			ll_dst.len = ll_dst_storage.len;
    3d8e:	f89d 3009 	ldrb.w	r3, [sp, #9]
			ll_dst.addr = ll_dst_storage.addr;
    3d92:	9500      	str	r5, [sp, #0]
			ll_dst.len = ll_dst_storage.len;
    3d94:	f88d 3004 	strb.w	r3, [sp, #4]
			ll_dst.type = net_pkt_lladdr_dst(pkt)->type;
    3d98:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
    3d9c:	f88d 3005 	strb.w	r3, [sp, #5]
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
    3da0:	2100      	movs	r1, #0
    3da2:	4630      	mov	r0, r6
	return pkt->context;
    3da4:	69e7      	ldr	r7, [r4, #28]
    3da6:	f7ff fd9f 	bl	38e8 <net_if_flag_is_set>
    3daa:	b1c8      	cbz	r0, 3de0 <process_tx_packet+0x80>
		status = net_if_l2(iface)->send(iface, pkt);
    3dac:	4630      	mov	r0, r6
    3dae:	f004 fe96 	bl	8ade <net_if_l2>
    3db2:	4621      	mov	r1, r4
    3db4:	6843      	ldr	r3, [r0, #4]
    3db6:	4630      	mov	r0, r6
    3db8:	4798      	blx	r3
	if (status < 0) {
    3dba:	1e05      	subs	r5, r0, #0
    3dbc:	da02      	bge.n	3dc4 <process_tx_packet+0x64>
		net_pkt_unref(pkt);
    3dbe:	4620      	mov	r0, r4
    3dc0:	f005 f92a 	bl	9018 <net_pkt_unref>
	if (context) {
    3dc4:	b11f      	cbz	r7, 3dce <process_tx_packet+0x6e>
		net_context_send_cb(context, status);
    3dc6:	4629      	mov	r1, r5
    3dc8:	4638      	mov	r0, r7
    3dca:	f004 fe8d 	bl	8ae8 <net_context_send_cb>
	if (ll_dst.addr) {
    3dce:	9b00      	ldr	r3, [sp, #0]
    3dd0:	b123      	cbz	r3, 3ddc <process_tx_packet+0x7c>
		net_if_call_link_cb(iface, &ll_dst, status);
    3dd2:	462a      	mov	r2, r5
    3dd4:	4669      	mov	r1, sp
    3dd6:	4630      	mov	r0, r6
    3dd8:	f7ff ffae 	bl	3d38 <net_if_call_link_cb>
}
    3ddc:	b005      	add	sp, #20
    3dde:	bdf0      	pop	{r4, r5, r6, r7, pc}
		status = -ENETDOWN;
    3de0:	f06f 053d 	mvn.w	r5, #61	; 0x3d
    3de4:	e7eb      	b.n	3dbe <process_tx_packet+0x5e>
    3de6:	bf00      	nop
    3de8:	20001300 	.word	0x20001300

00003dec <net_if_up>:
		cb(iface, user_data);
	}
}

int net_if_up(struct net_if *iface)
{
    3dec:	b538      	push	{r3, r4, r5, lr}
	int status;

	NET_DBG("iface %p", iface);

	if (net_if_flag_is_set(iface, NET_IF_UP)) {
    3dee:	2100      	movs	r1, #0
{
    3df0:	4605      	mov	r5, r0
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
    3df2:	f7ff fd79 	bl	38e8 <net_if_flag_is_set>
    3df6:	b928      	cbnz	r0, 3e04 <net_if_up+0x18>
	return (iface->if_dev->offload != NULL);
    3df8:	682b      	ldr	r3, [r5, #0]

	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
	     net_if_is_ip_offloaded(iface)) ||
	    (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD) &&
	     net_if_is_socket_offloaded(iface))) {
		net_if_flag_set(iface, NET_IF_UP);
    3dfa:	4628      	mov	r0, r5
	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
    3dfc:	699b      	ldr	r3, [r3, #24]
    3dfe:	b11b      	cbz	r3, 3e08 <net_if_up+0x1c>
		net_if_flag_set(iface, NET_IF_UP);
    3e00:	f7ff fd98 	bl	3934 <net_if_flag_set.constprop.0>
		return 0;
    3e04:	2000      	movs	r0, #0
    3e06:	e023      	b.n	3e50 <net_if_up+0x64>
		goto exit;
	}

	/* If the L2 does not support enable just set the flag */
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
    3e08:	f004 fe69 	bl	8ade <net_if_l2>
    3e0c:	b9c0      	cbnz	r0, 3e40 <net_if_up+0x54>

done:
	/* In many places it's assumed that link address was set with
	 * net_if_set_link_addr(). Better check that now.
	 */
	NET_ASSERT(net_if_get_link_addr(iface)->addr != NULL);
    3e0e:	682b      	ldr	r3, [r5, #0]
    3e10:	691b      	ldr	r3, [r3, #16]
    3e12:	b973      	cbnz	r3, 3e32 <net_if_up+0x46>
    3e14:	490f      	ldr	r1, [pc, #60]	; (3e54 <net_if_up+0x68>)
    3e16:	f640 538c 	movw	r3, #3468	; 0xd8c
    3e1a:	4a0f      	ldr	r2, [pc, #60]	; (3e58 <net_if_up+0x6c>)
    3e1c:	480f      	ldr	r0, [pc, #60]	; (3e5c <net_if_up+0x70>)
    3e1e:	f003 fd1d 	bl	785c <printk>
    3e22:	480f      	ldr	r0, [pc, #60]	; (3e60 <net_if_up+0x74>)
    3e24:	f003 fd1a 	bl	785c <printk>
    3e28:	f640 518c 	movw	r1, #3468	; 0xd8c
    3e2c:	480a      	ldr	r0, [pc, #40]	; (3e58 <net_if_up+0x6c>)
    3e2e:	f003 ff67 	bl	7d00 <assert_post_action>

	net_if_flag_set(iface, NET_IF_UP);
    3e32:	4628      	mov	r0, r5
    3e34:	f7ff fd7e 	bl	3934 <net_if_flag_set.constprop.0>

	/* If the interface is only having point-to-point traffic then we do
	 * not need to run DAD etc for it.
	 */
	if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
    3e38:	4628      	mov	r0, r5
    3e3a:	f004 fe5f 	bl	8afc <l2_flags_get>
    3e3e:	e7e1      	b.n	3e04 <net_if_up+0x18>
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
    3e40:	6883      	ldr	r3, [r0, #8]
    3e42:	2b00      	cmp	r3, #0
    3e44:	d0e3      	beq.n	3e0e <net_if_up+0x22>
	status = net_if_l2(iface)->enable(iface, true);
    3e46:	2101      	movs	r1, #1
    3e48:	4628      	mov	r0, r5
    3e4a:	4798      	blx	r3
	if (status < 0) {
    3e4c:	2800      	cmp	r0, #0
    3e4e:	dade      	bge.n	3e0e <net_if_up+0x22>

exit:
	net_mgmt_event_notify(NET_EVENT_IF_UP, iface);

	return 0;
}
    3e50:	bd38      	pop	{r3, r4, r5, pc}
    3e52:	bf00      	nop
    3e54:	0000c0c6 	.word	0x0000c0c6
    3e58:	0000c063 	.word	0x0000c063
    3e5c:	0000b021 	.word	0x0000b021
    3e60:	0000bfd5 	.word	0x0000bfd5

00003e64 <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
    3e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	NET_DBG("");

	net_tc_tx_init();

	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
    3e66:	4c1e      	ldr	r4, [pc, #120]	; (3ee0 <net_if_init+0x7c>)
	net_tc_tx_init();
    3e68:	f000 fac2 	bl	43f0 <net_tc_tx_init>
	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
    3e6c:	4627      	mov	r7, r4
    3e6e:	4d1d      	ldr	r5, [pc, #116]	; (3ee4 <net_if_init+0x80>)
    3e70:	4e1d      	ldr	r6, [pc, #116]	; (3ee8 <net_if_init+0x84>)
    3e72:	42ac      	cmp	r4, r5
    3e74:	d90e      	bls.n	3e94 <net_if_init+0x30>
    3e76:	491d      	ldr	r1, [pc, #116]	; (3eec <net_if_init+0x88>)
    3e78:	f640 636b 	movw	r3, #3691	; 0xe6b
    3e7c:	4632      	mov	r2, r6
    3e7e:	481c      	ldr	r0, [pc, #112]	; (3ef0 <net_if_init+0x8c>)
    3e80:	f003 fcec 	bl	785c <printk>
    3e84:	481b      	ldr	r0, [pc, #108]	; (3ef4 <net_if_init+0x90>)
    3e86:	f003 fce9 	bl	785c <printk>
    3e8a:	f640 616b 	movw	r1, #3691	; 0xe6b
    3e8e:	4630      	mov	r0, r6
    3e90:	f003 ff36 	bl	7d00 <assert_post_action>
    3e94:	42ac      	cmp	r4, r5
    3e96:	d318      	bcc.n	3eca <net_if_init+0x66>
		init_iface(iface);
		if_count++;
	}

	if (if_count == 0) {
    3e98:	4b17      	ldr	r3, [pc, #92]	; (3ef8 <net_if_init+0x94>)
    3e9a:	4a18      	ldr	r2, [pc, #96]	; (3efc <net_if_init+0x98>)
    3e9c:	1bdb      	subs	r3, r3, r7
    3e9e:	08db      	lsrs	r3, r3, #3
    3ea0:	42aa      	cmp	r2, r5
    3ea2:	bf88      	it	hi
    3ea4:	2300      	movhi	r3, #0
    3ea6:	b17b      	cbz	r3, 3ec8 <net_if_init+0x64>
		ipv4_addresses[i].ipv4.ttl = CONFIG_NET_INITIAL_TTL;
    3ea8:	2240      	movs	r2, #64	; 0x40
    3eaa:	4b15      	ldr	r3, [pc, #84]	; (3f00 <net_if_init+0x9c>)
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    3eac:	2100      	movs	r1, #0
    3eae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    3eb2:	4b14      	ldr	r3, [pc, #80]	; (3f04 <net_if_init+0xa0>)
    3eb4:	2230      	movs	r2, #48	; 0x30
    3eb6:	4618      	mov	r0, r3
    3eb8:	f004 fab1 	bl	841e <memset>
    3ebc:	4a12      	ldr	r2, [pc, #72]	; (3f08 <net_if_init+0xa4>)
	list->head = NULL;
    3ebe:	4b13      	ldr	r3, [pc, #76]	; (3f0c <net_if_init+0xa8>)
    3ec0:	6042      	str	r2, [r0, #4]
    3ec2:	2200      	movs	r2, #0
	list->tail = NULL;
    3ec4:	e9c3 2200 	strd	r2, r2, [r3]
		NET_WARN("You have configured only %d VLAN interfaces"
			 " but you have %d network interfaces.",
			 CONFIG_NET_VLAN_COUNT, if_count);
	}
#endif
}
    3ec8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return iface->if_dev->dev;
    3eca:	6823      	ldr	r3, [r4, #0]
	const struct net_if_api *api = net_if_get_device(iface)->api;
    3ecc:	681b      	ldr	r3, [r3, #0]
    3ece:	689b      	ldr	r3, [r3, #8]
	if (!api || !api->init) {
    3ed0:	b11b      	cbz	r3, 3eda <net_if_init+0x76>
    3ed2:	681b      	ldr	r3, [r3, #0]
    3ed4:	b10b      	cbz	r3, 3eda <net_if_init+0x76>
	api->init(iface);
    3ed6:	4620      	mov	r0, r4
    3ed8:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
    3eda:	3408      	adds	r4, #8
    3edc:	e7c9      	b.n	3e72 <net_if_init+0xe>
    3ede:	bf00      	nop
    3ee0:	20000448 	.word	0x20000448
    3ee4:	20000458 	.word	0x20000458
    3ee8:	0000c063 	.word	0x0000c063
    3eec:	0000c08d 	.word	0x0000c08d
    3ef0:	0000b021 	.word	0x0000b021
    3ef4:	0000c0a7 	.word	0x0000c0a7
    3ef8:	2000045f 	.word	0x2000045f
    3efc:	20000441 	.word	0x20000441
    3f00:	200012c0 	.word	0x200012c0
    3f04:	20000d20 	.word	0x20000d20
    3f08:	00003aa1 	.word	0x00003aa1
    3f0c:	200012b8 	.word	0x200012b8

00003f10 <net_if_post_init>:

void net_if_post_init(void)
{
    3f10:	b570      	push	{r4, r5, r6, lr}
	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
    3f12:	4c10      	ldr	r4, [pc, #64]	; (3f54 <net_if_post_init+0x44>)
    3f14:	4d10      	ldr	r5, [pc, #64]	; (3f58 <net_if_post_init+0x48>)
    3f16:	4e11      	ldr	r6, [pc, #68]	; (3f5c <net_if_post_init+0x4c>)
    3f18:	42ac      	cmp	r4, r5
    3f1a:	d90e      	bls.n	3f3a <net_if_post_init+0x2a>
    3f1c:	4910      	ldr	r1, [pc, #64]	; (3f60 <net_if_post_init+0x50>)
    3f1e:	f640 639a 	movw	r3, #3738	; 0xe9a
    3f22:	4632      	mov	r2, r6
    3f24:	480f      	ldr	r0, [pc, #60]	; (3f64 <net_if_post_init+0x54>)
    3f26:	f003 fc99 	bl	785c <printk>
    3f2a:	480f      	ldr	r0, [pc, #60]	; (3f68 <net_if_post_init+0x58>)
    3f2c:	f003 fc96 	bl	785c <printk>
    3f30:	f640 619a 	movw	r1, #3738	; 0xe9a
    3f34:	4630      	mov	r0, r6
    3f36:	f003 fee3 	bl	7d00 <assert_post_action>
    3f3a:	42ac      	cmp	r4, r5
    3f3c:	d300      	bcc.n	3f40 <net_if_post_init+0x30>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
		}
	}
}
    3f3e:	bd70      	pop	{r4, r5, r6, pc}
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
    3f40:	2103      	movs	r1, #3
    3f42:	4620      	mov	r0, r4
    3f44:	f7ff fcd0 	bl	38e8 <net_if_flag_is_set>
    3f48:	b910      	cbnz	r0, 3f50 <net_if_post_init+0x40>
			net_if_up(iface);
    3f4a:	4620      	mov	r0, r4
    3f4c:	f7ff ff4e 	bl	3dec <net_if_up>
	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
    3f50:	3408      	adds	r4, #8
    3f52:	e7e1      	b.n	3f18 <net_if_post_init+0x8>
    3f54:	20000448 	.word	0x20000448
    3f58:	20000458 	.word	0x20000458
    3f5c:	0000c063 	.word	0x0000c063
    3f60:	0000c08d 	.word	0x0000c08d
    3f64:	0000b021 	.word	0x0000b021
    3f68:	0000c0a7 	.word	0x0000c0a7

00003f6c <z_impl_net_addr_ntop>:
	struct in6_addr *addr6;
	uint16_t *w;
	uint8_t i, bl, bh, longest = 1U;
	int8_t pos = -1;
	char delim = ':';
	unsigned char zeros[8] = { 0 };
    3f6c:	2300      	movs	r3, #0
{
    3f6e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char *ptr = dst;
	int len = -1;
	uint16_t value;
	bool needcolon = false;

	if (family == AF_INET6) {
    3f72:	2802      	cmp	r0, #2
{
    3f74:	b089      	sub	sp, #36	; 0x24
    3f76:	4606      	mov	r6, r0
    3f78:	4615      	mov	r5, r2
	unsigned char zeros[8] = { 0 };
    3f7a:	e9cd 3306 	strd	r3, r3, [sp, #24]
{
    3f7e:	9101      	str	r1, [sp, #4]
	if (family == AF_INET6) {
    3f80:	d13c      	bne.n	3ffc <z_impl_net_addr_ntop+0x90>
		addr6 = (struct in6_addr *)src;
		w = (uint16_t *)addr6->s6_addr16;
    3f82:	a806      	add	r0, sp, #24
    3f84:	9104      	str	r1, [sp, #16]
    3f86:	4601      	mov	r1, r0
{
    3f88:	461a      	mov	r2, r3
    3f8a:	e006      	b.n	3f9a <z_impl_net_addr_ntop+0x2e>
			for (j = i; j < 8; j++) {
				if (UNALIGNED_GET(&w[j]) != 0) {
					break;
				}

				zeros[i]++;
    3f8c:	780c      	ldrb	r4, [r1, #0]
			for (j = i; j < 8; j++) {
    3f8e:	3201      	adds	r2, #1
				zeros[i]++;
    3f90:	3401      	adds	r4, #1
    3f92:	700c      	strb	r4, [r1, #0]
			for (j = i; j < 8; j++) {
    3f94:	b2d4      	uxtb	r4, r2
    3f96:	2c07      	cmp	r4, #7
    3f98:	d804      	bhi.n	3fa4 <z_impl_net_addr_ntop+0x38>
				if (UNALIGNED_GET(&w[j]) != 0) {
    3f9a:	9c01      	ldr	r4, [sp, #4]
    3f9c:	f834 4012 	ldrh.w	r4, [r4, r2, lsl #1]
    3fa0:	2c00      	cmp	r4, #0
    3fa2:	d0f3      	beq.n	3f8c <z_impl_net_addr_ntop+0x20>
		for (i = 0U; i < 8; i++) {
    3fa4:	3301      	adds	r3, #1
    3fa6:	2b08      	cmp	r3, #8
    3fa8:	f101 0101 	add.w	r1, r1, #1
    3fac:	d1ec      	bne.n	3f88 <z_impl_net_addr_ntop+0x1c>
	int8_t pos = -1;
    3fae:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	uint8_t i, bl, bh, longest = 1U;
    3fb2:	f04f 0801 	mov.w	r8, #1
			}
		}

		for (i = 0U; i < 8; i++) {
    3fb6:	2300      	movs	r3, #0
			if (zeros[i] > longest) {
    3fb8:	f810 2b01 	ldrb.w	r2, [r0], #1
    3fbc:	4542      	cmp	r2, r8
				longest = zeros[i];
				pos = i;
    3fbe:	bf88      	it	hi
    3fc0:	b25f      	sxtbhi	r7, r3
		for (i = 0U; i < 8; i++) {
    3fc2:	f103 0301 	add.w	r3, r3, #1
    3fc6:	b2db      	uxtb	r3, r3
				pos = i;
    3fc8:	bf88      	it	hi
    3fca:	4690      	movhi	r8, r2
		for (i = 0U; i < 8; i++) {
    3fcc:	2b08      	cmp	r3, #8
    3fce:	d1f3      	bne.n	3fb8 <z_impl_net_addr_ntop+0x4c>
		len = 8;
    3fd0:	f1b8 0f01 	cmp.w	r8, #1
    3fd4:	469b      	mov	fp, r3
    3fd6:	f04f 0a3a 	mov.w	sl, #58	; 0x3a
    3fda:	bf08      	it	eq
    3fdc:	f04f 37ff 	moveq.w	r7, #4294967295	; 0xffffffff
	bool needcolon = false;
    3fe0:	2100      	movs	r1, #0
		delim = '.';
	} else {
		return NULL;
	}

	for (i = 0U; i < len; i++) {
    3fe2:	4628      	mov	r0, r5
    3fe4:	460c      	mov	r4, r1
    3fe6:	455c      	cmp	r4, fp
    3fe8:	db17      	blt.n	401a <z_impl_net_addr_ntop+0xae>
		}

		needcolon = true;
	}

	if (!(ptr - dst)) {
    3fea:	42a8      	cmp	r0, r5
    3fec:	d008      	beq.n	4000 <z_impl_net_addr_ntop+0x94>
		return NULL;
	}

	if (family == AF_INET) {
    3fee:	2300      	movs	r3, #0
    3ff0:	2e01      	cmp	r6, #1
		*(ptr - 1) = '\0';
    3ff2:	bf0c      	ite	eq
    3ff4:	f800 3c01 	strbeq.w	r3, [r0, #-1]
	} else {
		*ptr = '\0';
    3ff8:	7003      	strbne	r3, [r0, #0]
    3ffa:	e002      	b.n	4002 <z_impl_net_addr_ntop+0x96>
	} else if (family == AF_INET) {
    3ffc:	2801      	cmp	r0, #1
    3ffe:	d004      	beq.n	400a <z_impl_net_addr_ntop+0x9e>
		return NULL;
    4000:	2500      	movs	r5, #0
	}

	return dst;
}
    4002:	4628      	mov	r0, r5
    4004:	b009      	add	sp, #36	; 0x24
    4006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		len = 4;
    400a:	f04f 0b04 	mov.w	fp, #4
		delim = '.';
    400e:	f04f 0a2e 	mov.w	sl, #46	; 0x2e
	int8_t pos = -1;
    4012:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	uint8_t i, bl, bh, longest = 1U;
    4016:	4680      	mov	r8, r0
    4018:	e7e2      	b.n	3fe0 <z_impl_net_addr_ntop+0x74>
		if (len == 4) {
    401a:	f1bb 0f04 	cmp.w	fp, #4
    401e:	d13f      	bne.n	40a0 <z_impl_net_addr_ntop+0x134>
			value = (uint32_t)addr->s4_addr[i];
    4020:	9b01      	ldr	r3, [sp, #4]
    4022:	5d1a      	ldrb	r2, [r3, r4]
			if (value == 0U) {
    4024:	b94a      	cbnz	r2, 403a <z_impl_net_addr_ntop+0xce>
				*ptr++ = '0';
    4026:	4602      	mov	r2, r0
    4028:	2330      	movs	r3, #48	; 0x30
    402a:	f802 3b02 	strb.w	r3, [r2], #2
				*ptr++ = delim;
    402e:	f880 a001 	strb.w	sl, [r0, #1]
	for (i = 0U; i < len; i++) {
    4032:	3401      	adds	r4, #1
    4034:	4610      	mov	r0, r2
    4036:	b2e4      	uxtb	r4, r4
    4038:	e7d5      	b.n	3fe6 <z_impl_net_addr_ntop+0x7a>
			l = net_value_to_udec(ptr, value, 0);
    403a:	f04f 0e00 	mov.w	lr, #0
    403e:	4603      	mov	r3, r0
    4040:	f04f 0c09 	mov.w	ip, #9
    4044:	f8cd e008 	str.w	lr, [sp, #8]
    4048:	f8df e0e8 	ldr.w	lr, [pc, #232]	; 4134 <z_impl_net_addr_ntop+0x1c8>
		temp = value / divisor;
    404c:	fbb2 f9fe 	udiv	r9, r2, lr
    4050:	9203      	str	r2, [sp, #12]
    4052:	f8cd 9014 	str.w	r9, [sp, #20]
		value = value % divisor;
    4056:	fb0e 2219 	mls	r2, lr, r9, r2
		if ((precision > i) || (temp != 0)) {
    405a:	f8dd 9008 	ldr.w	r9, [sp, #8]
    405e:	45e1      	cmp	r9, ip
    4060:	dc03      	bgt.n	406a <z_impl_net_addr_ntop+0xfe>
    4062:	f8dd 900c 	ldr.w	r9, [sp, #12]
    4066:	45f1      	cmp	r9, lr
    4068:	d307      	bcc.n	407a <z_impl_net_addr_ntop+0x10e>
			*buf++ = (char) (temp + '0');
    406a:	f8dd 9014 	ldr.w	r9, [sp, #20]
    406e:	f8cd c008 	str.w	ip, [sp, #8]
    4072:	f109 0930 	add.w	r9, r9, #48	; 0x30
    4076:	f803 9b01 	strb.w	r9, [r3], #1
	for (i = 9; i >= 0; i--, divisor /= 10U) {
    407a:	f04f 090a 	mov.w	r9, #10
    407e:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    4082:	f1bc 3fff 	cmp.w	ip, #4294967295	; 0xffffffff
    4086:	fbbe fef9 	udiv	lr, lr, r9
    408a:	d1df      	bne.n	404c <z_impl_net_addr_ntop+0xe0>
	*buf = 0;
    408c:	f04f 0200 	mov.w	r2, #0
    4090:	701a      	strb	r2, [r3, #0]
	return buf - start;
    4092:	1a1b      	subs	r3, r3, r0
			ptr += l;
    4094:	b2db      	uxtb	r3, r3
    4096:	18c2      	adds	r2, r0, r3
			*ptr++ = delim;
    4098:	3201      	adds	r2, #1
    409a:	f800 a003 	strb.w	sl, [r0, r3]
			continue;
    409e:	e7c8      	b.n	4032 <z_impl_net_addr_ntop+0xc6>
		if (i == pos) {
    40a0:	42a7      	cmp	r7, r4
    40a2:	d10e      	bne.n	40c2 <z_impl_net_addr_ntop+0x156>
			if (needcolon || i == 0U) {
    40a4:	b901      	cbnz	r1, 40a8 <z_impl_net_addr_ntop+0x13c>
    40a6:	b917      	cbnz	r7, 40ae <z_impl_net_addr_ntop+0x142>
				*ptr++ = ':';
    40a8:	233a      	movs	r3, #58	; 0x3a
    40aa:	f800 3b01 	strb.w	r3, [r0], #1
			*ptr++ = ':';
    40ae:	233a      	movs	r3, #58	; 0x3a
    40b0:	4602      	mov	r2, r0
    40b2:	f802 3b01 	strb.w	r3, [r2], #1
			i += longest - 1U;
    40b6:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    40ba:	441c      	add	r4, r3
			needcolon = false;
    40bc:	2100      	movs	r1, #0
			i += longest - 1U;
    40be:	b2e4      	uxtb	r4, r4
			continue;
    40c0:	e7b7      	b.n	4032 <z_impl_net_addr_ntop+0xc6>
		if (needcolon) {
    40c2:	b111      	cbz	r1, 40ca <z_impl_net_addr_ntop+0x15e>
			*ptr++ = ':';
    40c4:	233a      	movs	r3, #58	; 0x3a
    40c6:	f800 3b01 	strb.w	r3, [r0], #1
		value = (uint32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
    40ca:	9b04      	ldr	r3, [sp, #16]
    40cc:	f833 1014 	ldrh.w	r1, [r3, r4, lsl #1]
    40d0:	ba49      	rev16	r1, r1
		if (bh) {
    40d2:	f411 4f7f 	tst.w	r1, #65280	; 0xff00
    40d6:	b28a      	uxth	r2, r1
		bh = value >> 8;
    40d8:	f3c1 2307 	ubfx	r3, r1, #8, #8
		bl = value & 0xff;
    40dc:	fa5f f981 	uxtb.w	r9, r1
		if (bh) {
    40e0:	d019      	beq.n	4116 <z_impl_net_addr_ntop+0x1aa>
			if (bh > 0x0f) {
    40e2:	2b0f      	cmp	r3, #15
		bh = value >> 8;
    40e4:	b2d9      	uxtb	r1, r3
			if (bh > 0x0f) {
    40e6:	d90d      	bls.n	4104 <z_impl_net_addr_ntop+0x198>
				ptr = net_byte_to_hex(ptr, bh, 'a', false);
    40e8:	2300      	movs	r3, #0
    40ea:	2261      	movs	r2, #97	; 0x61
    40ec:	f004 fde0 	bl	8cb0 <net_byte_to_hex>
    40f0:	4684      	mov	ip, r0
			ptr = net_byte_to_hex(ptr, bl, 'a', true);
    40f2:	2301      	movs	r3, #1
    40f4:	2261      	movs	r2, #97	; 0x61
    40f6:	4649      	mov	r1, r9
    40f8:	4660      	mov	r0, ip
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
    40fa:	f004 fdd9 	bl	8cb0 <net_byte_to_hex>
    40fe:	4602      	mov	r2, r0
		needcolon = true;
    4100:	2101      	movs	r1, #1
    4102:	e796      	b.n	4032 <z_impl_net_addr_ntop+0xc6>
					*ptr++ = (char)(bh + '0');
    4104:	b25b      	sxtb	r3, r3
				if (bh < 10) {
    4106:	2909      	cmp	r1, #9
					*ptr++ = (char)(bh + '0');
    4108:	bf94      	ite	ls
    410a:	3330      	addls	r3, #48	; 0x30
					*ptr++ = (char) (bh - 10 + 'a');
    410c:	3357      	addhi	r3, #87	; 0x57
					*ptr++ = (char)(bh + '0');
    410e:	f100 0c01 	add.w	ip, r0, #1
					*ptr++ = (char) (bh - 10 + 'a');
    4112:	7003      	strb	r3, [r0, #0]
    4114:	e7ed      	b.n	40f2 <z_impl_net_addr_ntop+0x186>
		} else if (bl > 0x0f) {
    4116:	f1b9 0f0f 	cmp.w	r9, #15
    411a:	d902      	bls.n	4122 <z_impl_net_addr_ntop+0x1b6>
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
    411c:	2261      	movs	r2, #97	; 0x61
    411e:	4649      	mov	r1, r9
    4120:	e7eb      	b.n	40fa <z_impl_net_addr_ntop+0x18e>
				*ptr++ = (char)(bl + '0');
    4122:	b253      	sxtb	r3, r2
			if (bl < 10) {
    4124:	f1b9 0f09 	cmp.w	r9, #9
				*ptr++ = (char)(bl + '0');
    4128:	bf94      	ite	ls
    412a:	3330      	addls	r3, #48	; 0x30
				*ptr++ = (char) (bl - 10 + 'a');
    412c:	3357      	addhi	r3, #87	; 0x57
					*ptr++ = (char)(bh + '0');
    412e:	1c42      	adds	r2, r0, #1
				*ptr++ = (char) (bl - 10 + 'a');
    4130:	7003      	strb	r3, [r0, #0]
    4132:	e7e5      	b.n	4100 <z_impl_net_addr_ntop+0x194>
    4134:	3b9aca00 	.word	0x3b9aca00

00004138 <net_ipv4_unspecified_address>:
const struct in_addr *net_ipv4_unspecified_address(void)
{
	static const struct in_addr addr;

	return &addr;
}
    4138:	4800      	ldr	r0, [pc, #0]	; (413c <net_ipv4_unspecified_address+0x4>)
    413a:	4770      	bx	lr
    413c:	0000a7f4 	.word	0x0000a7f4

00004140 <net_ipv4_broadcast_address>:
const struct in_addr *net_ipv4_broadcast_address(void)
{
	static const struct in_addr addr = { { { 255, 255, 255, 255 } } };

	return &addr;
}
    4140:	4800      	ldr	r0, [pc, #0]	; (4144 <net_ipv4_broadcast_address+0x4>)
    4142:	4770      	bx	lr
    4144:	0000a7f0 	.word	0x0000a7f0

00004148 <net_context_init>:
	return z_impl_k_sem_init(sem, initial_count, limit);
    4148:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    414c:	2101      	movs	r1, #1
    414e:	4801      	ldr	r0, [pc, #4]	; (4154 <net_context_init+0xc>)
    4150:	f006 b832 	b.w	a1b8 <z_impl_k_sem_init>
    4154:	20001308 	.word	0x20001308

00004158 <net_pkt_get_reserve_rx_data>:
}

#else /* NET_LOG_LEVEL >= LOG_LEVEL_DBG */

struct net_buf *net_pkt_get_reserve_rx_data(k_timeout_t timeout)
{
    4158:	4602      	mov	r2, r0
    415a:	460b      	mov	r3, r1
	return net_pkt_get_reserve_data(&rx_bufs, timeout);
    415c:	4801      	ldr	r0, [pc, #4]	; (4164 <net_pkt_get_reserve_rx_data+0xc>)
    415e:	f004 bf2a 	b.w	8fb6 <net_pkt_get_reserve_data>
    4162:	bf00      	nop
    4164:	200003f0 	.word	0x200003f0

00004168 <net_pkt_get_reserve_tx_data>:
}

struct net_buf *net_pkt_get_reserve_tx_data(k_timeout_t timeout)
{
    4168:	4602      	mov	r2, r0
    416a:	460b      	mov	r3, r1
	return net_pkt_get_reserve_data(&tx_bufs, timeout);
    416c:	4801      	ldr	r0, [pc, #4]	; (4174 <net_pkt_get_reserve_tx_data+0xc>)
    416e:	f004 bf22 	b.w	8fb6 <net_pkt_get_reserve_data>
    4172:	bf00      	nop
    4174:	2000041c 	.word	0x2000041c

00004178 <net_pkt_get_frag>:
{
    4178:	b410      	push	{r4}
    417a:	4604      	mov	r4, r0
    417c:	4619      	mov	r1, r3
    417e:	4610      	mov	r0, r2
	if (pkt->slab == &rx_pkts) {
    4180:	4b04      	ldr	r3, [pc, #16]	; (4194 <net_pkt_get_frag+0x1c>)
    4182:	68e2      	ldr	r2, [r4, #12]
    4184:	429a      	cmp	r2, r3
    4186:	d102      	bne.n	418e <net_pkt_get_frag+0x16>
}
    4188:	bc10      	pop	{r4}
		return net_pkt_get_reserve_rx_data(timeout);
    418a:	f7ff bfe5 	b.w	4158 <net_pkt_get_reserve_rx_data>
}
    418e:	bc10      	pop	{r4}
	return net_pkt_get_reserve_tx_data(timeout);
    4190:	f7ff bfea 	b.w	4168 <net_pkt_get_reserve_tx_data>
    4194:	20000378 	.word	0x20000378

00004198 <pkt_alloc>:
static struct net_pkt *pkt_alloc(struct k_mem_slab *slab, k_timeout_t timeout,
				 const char *caller, int line)
#else
static struct net_pkt *pkt_alloc(struct k_mem_slab *slab, k_timeout_t timeout)
#endif
{
    4198:	b573      	push	{r0, r1, r4, r5, r6, lr}
    419a:	4604      	mov	r4, r0
    419c:	4616      	mov	r6, r2
    419e:	461d      	mov	r5, r3
	struct net_pkt *pkt;
	int ret;

	if (k_is_in_isr()) {
    41a0:	f006 f81a 	bl	a1d8 <k_is_in_isr>
    41a4:	b108      	cbz	r0, 41aa <pkt_alloc+0x12>
		timeout = K_NO_WAIT;
    41a6:	2600      	movs	r6, #0
    41a8:	4635      	mov	r5, r6
	}

	ret = k_mem_slab_alloc(slab, (void **)&pkt, timeout);
    41aa:	462b      	mov	r3, r5
    41ac:	4632      	mov	r2, r6
    41ae:	4620      	mov	r0, r4
    41b0:	a901      	add	r1, sp, #4
    41b2:	f000 ff83 	bl	50bc <k_mem_slab_alloc>
	if (ret) {
    41b6:	4605      	mov	r5, r0
    41b8:	b9c0      	cbnz	r0, 41ec <pkt_alloc+0x54>
		return NULL;
	}

	memset(pkt, 0, sizeof(struct net_pkt));
    41ba:	2240      	movs	r2, #64	; 0x40
    41bc:	4601      	mov	r1, r0
    41be:	9801      	ldr	r0, [sp, #4]
    41c0:	f004 f92d 	bl	841e <memset>

	pkt->atomic_ref = ATOMIC_INIT(1);
    41c4:	2301      	movs	r3, #1
#define RX_DEFAULT_PRIORITY CONFIG_NET_RX_DEFAULT_PRIORITY
#else
#define RX_DEFAULT_PRIORITY 0
#endif

	if (&tx_pkts == slab) {
    41c6:	4a0a      	ldr	r2, [pc, #40]	; (41f0 <pkt_alloc+0x58>)
	pkt->atomic_ref = ATOMIC_INIT(1);
    41c8:	9801      	ldr	r0, [sp, #4]
	if (&tx_pkts == slab) {
    41ca:	4294      	cmp	r4, r2
	pkt->atomic_ref = ATOMIC_INIT(1);
    41cc:	6243      	str	r3, [r0, #36]	; 0x24
	pkt->slab = slab;
    41ce:	60c4      	str	r4, [r0, #12]
	if (&tx_pkts == slab) {
    41d0:	d106      	bne.n	41e0 <pkt_alloc+0x48>
	pkt->priority = priority;
    41d2:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f

#if NET_LOG_LEVEL >= LOG_LEVEL_DBG
	net_pkt_alloc_add(pkt, true, caller, line);
#endif

	net_pkt_cursor_init(pkt);
    41d6:	f004 ff7f 	bl	90d8 <net_pkt_cursor_init>

	return pkt;
    41da:	9801      	ldr	r0, [sp, #4]
}
    41dc:	b002      	add	sp, #8
    41de:	bd70      	pop	{r4, r5, r6, pc}
	} else if (&rx_pkts == slab) {
    41e0:	4b04      	ldr	r3, [pc, #16]	; (41f4 <pkt_alloc+0x5c>)
    41e2:	429c      	cmp	r4, r3
    41e4:	bf08      	it	eq
    41e6:	f880 503f 	strbeq.w	r5, [r0, #63]	; 0x3f
}
    41ea:	e7f4      	b.n	41d6 <pkt_alloc+0x3e>
		return NULL;
    41ec:	2000      	movs	r0, #0
    41ee:	e7f5      	b.n	41dc <pkt_alloc+0x44>
    41f0:	20000394 	.word	0x20000394
    41f4:	20000378 	.word	0x20000378

000041f8 <net_pkt_rx_alloc_on_iface>:
						int line)
#else
struct net_pkt *net_pkt_rx_alloc_on_iface(struct net_if *iface,
					  k_timeout_t timeout)
#endif
{
    41f8:	4601      	mov	r1, r0
#if NET_LOG_LEVEL >= LOG_LEVEL_DBG
	return pkt_alloc_on_iface(&rx_pkts, iface, timeout, caller, line);
#else
	return pkt_alloc_on_iface(&rx_pkts, iface, timeout);
    41fa:	4801      	ldr	r0, [pc, #4]	; (4200 <net_pkt_rx_alloc_on_iface+0x8>)
    41fc:	f004 bf72 	b.w	90e4 <pkt_alloc_on_iface>
    4200:	20000378 	.word	0x20000378

00004204 <net_pkt_alloc_buffer>:
{
    4204:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4208:	4607      	mov	r7, r0
    420a:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
    420e:	460c      	mov	r4, r1
	uint64_t end = z_timeout_end_calc(timeout);
    4210:	4650      	mov	r0, sl
    4212:	4631      	mov	r1, r6
{
    4214:	4615      	mov	r5, r2
	uint64_t end = z_timeout_end_calc(timeout);
    4216:	f006 f84d 	bl	a2b4 <z_timeout_end_calc>
    421a:	4680      	mov	r8, r0
    421c:	4689      	mov	r9, r1
	if (!size && proto == 0 && net_pkt_family(pkt) == AF_UNSPEC) {
    421e:	b93c      	cbnz	r4, 4230 <net_pkt_alloc_buffer+0x2c>
    4220:	b935      	cbnz	r5, 4230 <net_pkt_alloc_buffer+0x2c>
	return pkt->family;
    4222:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    4226:	f013 0f0e 	tst.w	r3, #14
    422a:	f3c3 0042 	ubfx	r0, r3, #1, #3
    422e:	d056      	beq.n	42de <net_pkt_alloc_buffer+0xda>
	if (k_is_in_isr()) {
    4230:	f005 ffd2 	bl	a1d8 <k_is_in_isr>
    4234:	b110      	cbz	r0, 423c <net_pkt_alloc_buffer+0x38>
		timeout = K_NO_WAIT;
    4236:	f04f 0a00 	mov.w	sl, #0
    423a:	4656      	mov	r6, sl
	alloc_len = net_pkt_available_buffer(pkt);
    423c:	4638      	mov	r0, r7
    423e:	f004 ff1f 	bl	9080 <net_pkt_available_buffer>
	if (!alloc_len) {
    4242:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    4246:	2800      	cmp	r0, #0
    4248:	d152      	bne.n	42f0 <net_pkt_alloc_buffer+0xec>
	if (family == AF_UNSPEC) {
    424a:	f013 0f0e 	tst.w	r3, #14
		hdr_len = pkt_estimate_headers_length(pkt,
    424e:	f3c3 0242 	ubfx	r2, r3, #1, #3
	if (family == AF_UNSPEC) {
    4252:	d04f      	beq.n	42f4 <net_pkt_alloc_buffer+0xf0>
		hdr_len += NET_IPV4H_LEN;
    4254:	2a01      	cmp	r2, #1
    4256:	bf14      	ite	ne
    4258:	2100      	movne	r1, #0
    425a:	2114      	moveq	r1, #20
	} else if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
    425c:	2d11      	cmp	r5, #17
    425e:	d141      	bne.n	42e4 <net_pkt_alloc_buffer+0xe0>
		hdr_len += NET_UDPH_LEN;
    4260:	3108      	adds	r1, #8
	return pkt->iface;
    4262:	6a3d      	ldr	r5, [r7, #32]
	alloc_len = pkt_buffer_length(pkt, size + hdr_len, proto, alloc_len);
    4264:	4421      	add	r1, r4
	return pkt->family;
    4266:	f3c3 0342 	ubfx	r3, r3, #1, #3
	if (net_pkt_iface(pkt)) {
    426a:	2d00      	cmp	r5, #0
    426c:	d044      	beq.n	42f8 <net_pkt_alloc_buffer+0xf4>
 *
 * @return the MTU
 */
static inline uint16_t net_if_get_mtu(struct net_if *iface)
{
	return iface->if_dev->mtu;
    426e:	682a      	ldr	r2, [r5, #0]
	} else if (IS_ENABLED(CONFIG_NET_IPV4) && family == AF_INET) {
    4270:	2b01      	cmp	r3, #1
		max_len = net_if_get_mtu(net_pkt_iface(pkt));
    4272:	8b95      	ldrh	r5, [r2, #28]
	} else if (IS_ENABLED(CONFIG_NET_IPV4) && family == AF_INET) {
    4274:	d144      	bne.n	4300 <net_pkt_alloc_buffer+0xfc>
		max_len = MAX(max_len, NET_IPV4_MTU);
    4276:	f5b5 7f10 	cmp.w	r5, #576	; 0x240
    427a:	bf38      	it	cc
    427c:	f44f 7510 	movcc.w	r5, #576	; 0x240
	max_len -= existing;
    4280:	1a2c      	subs	r4, r5, r0
	return MIN(size, max_len);
    4282:	428c      	cmp	r4, r1
    4284:	bf28      	it	cs
    4286:	460c      	movcs	r4, r1
		pool = pkt->slab == &tx_pkts ? &tx_bufs : &rx_bufs;
    4288:	4b3a      	ldr	r3, [pc, #232]	; (4374 <net_pkt_alloc_buffer+0x170>)
    428a:	68fa      	ldr	r2, [r7, #12]
    428c:	483a      	ldr	r0, [pc, #232]	; (4378 <net_pkt_alloc_buffer+0x174>)
    428e:	493b      	ldr	r1, [pc, #236]	; (437c <net_pkt_alloc_buffer+0x178>)
    4290:	4282      	cmp	r2, r0
    4292:	bf0c      	ite	eq
    4294:	468b      	moveq	fp, r1
    4296:	469b      	movne	fp, r3
	if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    4298:	ea5a 0306 	orrs.w	r3, sl, r6
    429c:	d010      	beq.n	42c0 <net_pkt_alloc_buffer+0xbc>
    429e:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
    42a2:	bf08      	it	eq
    42a4:	f1ba 3fff 	cmpeq.w	sl, #4294967295	; 0xffffffff
    42a8:	d00a      	beq.n	42c0 <net_pkt_alloc_buffer+0xbc>
		int64_t remaining = end - z_tick_get();
    42aa:	f003 f9bd 	bl	7628 <z_tick_get>
    42ae:	ebb8 0a00 	subs.w	sl, r8, r0
    42b2:	eb69 0601 	sbc.w	r6, r9, r1
    42b6:	2e00      	cmp	r6, #0
    42b8:	bfbc      	itt	lt
    42ba:	f04f 0a00 	movlt.w	sl, #0
    42be:	4656      	movlt	r6, sl
	uint64_t end = z_timeout_end_calc(timeout);
    42c0:	4650      	mov	r0, sl
    42c2:	4631      	mov	r1, r6
    42c4:	f005 fff6 	bl	a2b4 <z_timeout_end_calc>
    42c8:	4689      	mov	r9, r1
	struct net_buf *current = NULL;
    42ca:	2100      	movs	r1, #0
	uint64_t end = z_timeout_end_calc(timeout);
    42cc:	4680      	mov	r8, r0
	struct net_buf *first = NULL;
    42ce:	460d      	mov	r5, r1
	while (size) {
    42d0:	b9e4      	cbnz	r4, 430c <net_pkt_alloc_buffer+0x108>
	if (!buf) {
    42d2:	b32d      	cbz	r5, 4320 <net_pkt_alloc_buffer+0x11c>
	net_pkt_append_buffer(pkt, buf);
    42d4:	4638      	mov	r0, r7
    42d6:	4629      	mov	r1, r5
    42d8:	f004 ff13 	bl	9102 <net_pkt_append_buffer>
	return 0;
    42dc:	2000      	movs	r0, #0
}
    42de:	b003      	add	sp, #12
    42e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (proto == IPPROTO_ICMP || proto == IPPROTO_ICMPV6) {
    42e4:	2d01      	cmp	r5, #1
    42e6:	d001      	beq.n	42ec <net_pkt_alloc_buffer+0xe8>
    42e8:	2d3a      	cmp	r5, #58	; 0x3a
    42ea:	d1ba      	bne.n	4262 <net_pkt_alloc_buffer+0x5e>
		hdr_len += NET_ICMPH_LEN;
    42ec:	3104      	adds	r1, #4
    42ee:	e7b8      	b.n	4262 <net_pkt_alloc_buffer+0x5e>
	size_t hdr_len = 0;
    42f0:	2100      	movs	r1, #0
    42f2:	e7b6      	b.n	4262 <net_pkt_alloc_buffer+0x5e>
    42f4:	4601      	mov	r1, r0
    42f6:	e7b4      	b.n	4262 <net_pkt_alloc_buffer+0x5e>
	} else if (IS_ENABLED(CONFIG_NET_IPV4) && family == AF_INET) {
    42f8:	2b01      	cmp	r3, #1
    42fa:	d0bc      	beq.n	4276 <net_pkt_alloc_buffer+0x72>
			max_len = size;
    42fc:	460d      	mov	r5, r1
    42fe:	e7bf      	b.n	4280 <net_pkt_alloc_buffer+0x7c>
		if (net_if_l2(net_pkt_iface(pkt)) ==
    4300:	6852      	ldr	r2, [r2, #4]
    4302:	4b1f      	ldr	r3, [pc, #124]	; (4380 <net_pkt_alloc_buffer+0x17c>)
    4304:	429a      	cmp	r2, r3
    4306:	d1f9      	bne.n	42fc <net_pkt_alloc_buffer+0xf8>
			max_len += NET_ETH_MAX_HDR_SIZE;
    4308:	350e      	adds	r5, #14
    430a:	e7b9      	b.n	4280 <net_pkt_alloc_buffer+0x7c>
		new = net_buf_alloc_fixed(pool, timeout);
    430c:	4633      	mov	r3, r6
    430e:	4652      	mov	r2, sl
    4310:	4658      	mov	r0, fp
    4312:	9101      	str	r1, [sp, #4]
    4314:	f004 f8aa 	bl	846c <net_buf_alloc_fixed>
		if (!new) {
    4318:	9901      	ldr	r1, [sp, #4]
    431a:	4603      	mov	r3, r0
    431c:	b918      	cbnz	r0, 4326 <net_pkt_alloc_buffer+0x122>
	if (first) {
    431e:	bb2d      	cbnz	r5, 436c <net_pkt_alloc_buffer+0x168>
		return -ENOMEM;
    4320:	f06f 000b 	mvn.w	r0, #11
    4324:	e7db      	b.n	42de <net_pkt_alloc_buffer+0xda>
		if (!first && !current) {
    4326:	b905      	cbnz	r5, 432a <net_pkt_alloc_buffer+0x126>
    4328:	b1f1      	cbz	r1, 4368 <net_pkt_alloc_buffer+0x164>
			current->frags = new;
    432a:	600b      	str	r3, [r1, #0]
		if (current->size > size) {
    432c:	89da      	ldrh	r2, [r3, #14]
    432e:	42a2      	cmp	r2, r4
			current->size = size;
    4330:	bf88      	it	hi
    4332:	81dc      	strhhi	r4, [r3, #14]
		size -= current->size;
    4334:	89da      	ldrh	r2, [r3, #14]
    4336:	1aa4      	subs	r4, r4, r2
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    4338:	ea5a 0206 	orrs.w	r2, sl, r6
    433c:	d012      	beq.n	4364 <net_pkt_alloc_buffer+0x160>
    433e:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
    4342:	bf08      	it	eq
    4344:	f1ba 3fff 	cmpeq.w	sl, #4294967295	; 0xffffffff
    4348:	d00c      	beq.n	4364 <net_pkt_alloc_buffer+0x160>
    434a:	9301      	str	r3, [sp, #4]
			int64_t remaining = end - z_tick_get();
    434c:	f003 f96c 	bl	7628 <z_tick_get>
    4350:	ebb8 0a00 	subs.w	sl, r8, r0
    4354:	eb69 0601 	sbc.w	r6, r9, r1
			if (remaining <= 0) {
    4358:	f1ba 0f01 	cmp.w	sl, #1
    435c:	f176 0300 	sbcs.w	r3, r6, #0
    4360:	9b01      	ldr	r3, [sp, #4]
    4362:	dbb6      	blt.n	42d2 <net_pkt_alloc_buffer+0xce>
    4364:	4619      	mov	r1, r3
    4366:	e7b3      	b.n	42d0 <net_pkt_alloc_buffer+0xcc>
    4368:	4605      	mov	r5, r0
    436a:	e7df      	b.n	432c <net_pkt_alloc_buffer+0x128>
		net_buf_unref(first);
    436c:	4628      	mov	r0, r5
    436e:	f7fe fe99 	bl	30a4 <net_buf_unref>
	if (!buf) {
    4372:	e7d5      	b.n	4320 <net_pkt_alloc_buffer+0x11c>
    4374:	200003f0 	.word	0x200003f0
    4378:	20000394 	.word	0x20000394
    437c:	2000041c 	.word	0x2000041c
    4380:	20000498 	.word	0x20000498

00004384 <net_pkt_alloc_with_buffer>:
					  size_t size,
					  sa_family_t family,
					  enum net_ip_protocol proto,
					  k_timeout_t timeout)
#endif
{
    4384:	b530      	push	{r4, r5, lr}
    4386:	b085      	sub	sp, #20
#if NET_LOG_LEVEL >= LOG_LEVEL_DBG
	return pkt_alloc_with_buffer(&tx_pkts, iface, size, family,
				     proto, timeout, caller, line);
#else
	return pkt_alloc_with_buffer(&tx_pkts, iface, size, family,
    4388:	9300      	str	r3, [sp, #0]
    438a:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
    438e:	4613      	mov	r3, r2
    4390:	e9cd 4502 	strd	r4, r5, [sp, #8]
    4394:	460a      	mov	r2, r1
    4396:	4601      	mov	r1, r0
    4398:	4802      	ldr	r0, [pc, #8]	; (43a4 <net_pkt_alloc_with_buffer+0x20>)
    439a:	f004 fec3 	bl	9124 <pkt_alloc_with_buffer>
				     proto, timeout);
#endif
}
    439e:	b005      	add	sp, #20
    43a0:	bd30      	pop	{r4, r5, pc}
    43a2:	bf00      	nop
    43a4:	20000394 	.word	0x20000394

000043a8 <net_tc_submit_to_tx_queue>:

static struct net_traffic_class tx_classes[NET_TC_TX_COUNT];
static struct net_traffic_class rx_classes[NET_TC_RX_COUNT];

bool net_tc_submit_to_tx_queue(uint8_t tc, struct net_pkt *pkt)
{
    43a8:	b508      	push	{r3, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    43aa:	f3bf 8f5b 	dmb	ish
    43ae:	688b      	ldr	r3, [r1, #8]
    43b0:	f3bf 8f5b 	dmb	ish
	if (k_work_pending(net_pkt_work(pkt))) {
    43b4:	07db      	lsls	r3, r3, #31
    43b6:	d407      	bmi.n	43c8 <net_tc_submit_to_tx_queue+0x20>
		return false;
	}

	net_pkt_set_tx_stats_tick(pkt, k_cycle_get_32());

	k_work_submit_to_queue(&tx_classes[tc].work_q, net_pkt_work(pkt));
    43b8:	22c8      	movs	r2, #200	; 0xc8
    43ba:	4b04      	ldr	r3, [pc, #16]	; (43cc <net_tc_submit_to_tx_queue+0x24>)
    43bc:	fb02 3000 	mla	r0, r2, r0, r3
    43c0:	f005 f84b 	bl	945a <k_work_submit_to_queue>

	return true;
    43c4:	2001      	movs	r0, #1
}
    43c6:	bd08      	pop	{r3, pc}
		return false;
    43c8:	2000      	movs	r0, #0
    43ca:	e7fc      	b.n	43c6 <net_tc_submit_to_tx_queue+0x1e>
    43cc:	20000e18 	.word	0x20000e18

000043d0 <net_tc_submit_to_rx_queue>:

void net_tc_submit_to_rx_queue(uint8_t tc, struct net_pkt *pkt)
{
	net_pkt_set_rx_stats_tick(pkt, k_cycle_get_32());

	k_work_submit_to_queue(&rx_classes[tc].work_q, net_pkt_work(pkt));
    43d0:	22c8      	movs	r2, #200	; 0xc8
    43d2:	4b02      	ldr	r3, [pc, #8]	; (43dc <net_tc_submit_to_rx_queue+0xc>)
    43d4:	fb02 3000 	mla	r0, r2, r0, r3
    43d8:	f005 b83f 	b.w	945a <k_work_submit_to_queue>
    43dc:	20000d50 	.word	0x20000d50

000043e0 <net_tx_priority2tc>:

int net_tx_priority2tc(enum net_priority prio)
{
	if (prio > NET_PRIORITY_NC) {
		/* Use default value suggested in 802.1Q */
		prio = NET_PRIORITY_BE;
    43e0:	2808      	cmp	r0, #8
    43e2:	bf28      	it	cs
    43e4:	2000      	movcs	r0, #0
	}

	return tx_prio2tc_map[prio];
}
    43e6:	4b01      	ldr	r3, [pc, #4]	; (43ec <net_tx_priority2tc+0xc>)
    43e8:	5c18      	ldrb	r0, [r3, r0]
    43ea:	4770      	bx	lr
    43ec:	0000c109 	.word	0x0000c109

000043f0 <net_tc_tx_init>:
/* Create workqueue for each traffic class we are using. All the network
 * traffic goes through these classes. There needs to be at least one traffic
 * class in the system.
 */
void net_tc_tx_init(void)
{
    43f0:	b513      	push	{r0, r1, r4, lr}
			thread_priority,
			IS_ENABLED(CONFIG_NET_TC_THREAD_COOPERATIVE) ?
							"coop" : "preempt",
			priority);

		k_work_q_start(&tx_classes[i].work_q,
    43f2:	4c0b      	ldr	r4, [pc, #44]	; (4420 <net_tc_tx_init+0x30>)
    43f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    43f8:	4620      	mov	r0, r4
    43fa:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
    43fe:	4909      	ldr	r1, [pc, #36]	; (4424 <net_tc_tx_init+0x34>)
    4400:	f002 fcc4 	bl	6d8c <k_work_q_start>
			       priority);

		if (IS_ENABLED(CONFIG_THREAD_NAME)) {
			char name[MAX_NAME_LEN];

			snprintk(name, sizeof(name), "tx_q[%d]", i);
    4404:	2300      	movs	r3, #0
    4406:	2108      	movs	r1, #8
    4408:	4668      	mov	r0, sp
    440a:	4a07      	ldr	r2, [pc, #28]	; (4428 <net_tc_tx_init+0x38>)
    440c:	f003 fa33 	bl	7876 <snprintk>
	return z_impl_k_thread_name_set(thread_id, value);
    4410:	4669      	mov	r1, sp
    4412:	f104 0020 	add.w	r0, r4, #32
    4416:	f002 fb3b 	bl	6a90 <z_impl_k_thread_name_set>
			k_thread_name_set(&tx_classes[i].work_q.thread, name);
		}
	}
}
    441a:	b002      	add	sp, #8
    441c:	bd10      	pop	{r4, pc}
    441e:	bf00      	nop
    4420:	20000e18 	.word	0x20000e18
    4424:	20001860 	.word	0x20001860
    4428:	0000c0f7 	.word	0x0000c0f7

0000442c <net_tc_rx_init>:

void net_tc_rx_init(void)
{
    442c:	b513      	push	{r0, r1, r4, lr}
			thread_priority,
			IS_ENABLED(CONFIG_NET_TC_THREAD_COOPERATIVE) ?
							"coop" : "preempt",
			priority);

		k_work_q_start(&rx_classes[i].work_q,
    442e:	4c0b      	ldr	r4, [pc, #44]	; (445c <net_tc_rx_init+0x30>)
    4430:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4434:	4620      	mov	r0, r4
    4436:	f44f 62bc 	mov.w	r2, #1504	; 0x5e0
    443a:	4909      	ldr	r1, [pc, #36]	; (4460 <net_tc_rx_init+0x34>)
    443c:	f002 fca6 	bl	6d8c <k_work_q_start>
			       priority);

		if (IS_ENABLED(CONFIG_THREAD_NAME)) {
			char name[MAX_NAME_LEN];

			snprintk(name, sizeof(name), "rx_q[%d]", i);
    4440:	2300      	movs	r3, #0
    4442:	2108      	movs	r1, #8
    4444:	4668      	mov	r0, sp
    4446:	4a07      	ldr	r2, [pc, #28]	; (4464 <net_tc_rx_init+0x38>)
    4448:	f003 fa15 	bl	7876 <snprintk>
    444c:	4669      	mov	r1, sp
    444e:	f104 0020 	add.w	r0, r4, #32
    4452:	f002 fb1d 	bl	6a90 <z_impl_k_thread_name_set>
			k_thread_name_set(&rx_classes[i].work_q.thread, name);
		}
	}
}
    4456:	b002      	add	sp, #8
    4458:	bd10      	pop	{r4, pc}
    445a:	bf00      	nop
    445c:	20000d50 	.word	0x20000d50
    4460:	20001d40 	.word	0x20001d40
    4464:	0000c100 	.word	0x0000c100

00004468 <net_icmpv4_register_handler>:
	return list->head;
    4468:	4b03      	ldr	r3, [pc, #12]	; (4478 <net_icmpv4_register_handler+0x10>)
	parent->next = child;
    446a:	681a      	ldr	r2, [r3, #0]
    446c:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(slist, snode)
    446e:	685a      	ldr	r2, [r3, #4]
	list->head = node;
    4470:	6018      	str	r0, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
    4472:	b902      	cbnz	r2, 4476 <net_icmpv4_register_handler+0xe>
	list->tail = node;
    4474:	6058      	str	r0, [r3, #4]
}

void net_icmpv4_register_handler(struct net_icmpv4_handler *handler)
{
	sys_slist_prepend(&handlers, &handler->node);
}
    4476:	4770      	bx	lr
    4478:	20001320 	.word	0x20001320

0000447c <net_icmpv4_input>:
	sys_slist_find_and_remove(&handlers, &handler->node);
}

enum net_verdict net_icmpv4_input(struct net_pkt *pkt,
				  struct net_ipv4_hdr *ip_hdr)
{
    447c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmp_access,
    447e:	2304      	movs	r3, #4
    4480:	2200      	movs	r2, #0
{
    4482:	460e      	mov	r6, r1
					      struct net_icmp_hdr);
	struct net_icmp_hdr *icmp_hdr;
	struct net_icmpv4_handler *cb;

	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmp_access);
    4484:	4669      	mov	r1, sp
{
    4486:	4605      	mov	r5, r0
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmp_access,
    4488:	e9cd 2300 	strd	r2, r3, [sp]
	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmp_access);
    448c:	f004 ffc2 	bl	9414 <net_pkt_get_data>
	if (!icmp_hdr) {
    4490:	4604      	mov	r4, r0
    4492:	b910      	cbnz	r0, 449a <net_icmpv4_input+0x1e>
		NET_DBG("DROP: NULL ICMPv4 header");
		return NET_DROP;
    4494:	2002      	movs	r0, #2

drop:
	net_stats_update_icmp_drop(net_pkt_iface(pkt));

	return NET_DROP;
}
    4496:	b003      	add	sp, #12
    4498:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return net_calc_chksum(pkt, IPPROTO_ICMPV6);
}

static inline uint16_t net_calc_chksum_icmpv4(struct net_pkt *pkt)
{
	return net_calc_chksum(pkt, IPPROTO_ICMP);
    449a:	2101      	movs	r1, #1
    449c:	4628      	mov	r0, r5
    449e:	f004 fc26 	bl	8cee <net_calc_chksum>
	if (net_calc_chksum_icmpv4(pkt) != 0U) {
    44a2:	2800      	cmp	r0, #0
    44a4:	d1f6      	bne.n	4494 <net_icmpv4_input+0x18>
	return pkt->iface;
    44a6:	6a2f      	ldr	r7, [r5, #32]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
    44a8:	f7ff fe4a 	bl	4140 <net_ipv4_broadcast_address>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
    44ac:	6932      	ldr	r2, [r6, #16]
    44ae:	6803      	ldr	r3, [r0, #0]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
    44b0:	429a      	cmp	r2, r3
    44b2:	d0ef      	beq.n	4494 <net_icmpv4_input+0x18>
	return net_if_ipv4_is_addr_bcast(iface, addr);
    44b4:	4638      	mov	r0, r7
    44b6:	f106 0110 	add.w	r1, r6, #16
    44ba:	f7ff fb51 	bl	3b60 <net_if_ipv4_is_addr_bcast>
	if (net_ipv4_is_addr_bcast(net_pkt_iface(pkt), &ip_hdr->dst) &&
    44be:	2800      	cmp	r0, #0
    44c0:	d1e8      	bne.n	4494 <net_icmpv4_input+0x18>
 * Packet needs to be set to overwrite mode.
 */
static inline int net_pkt_acknowledge_data(struct net_pkt *pkt,
					   struct net_pkt_data_access *access)
{
	return net_pkt_skip(pkt, access->size);
    44c2:	4628      	mov	r0, r5
    44c4:	9901      	ldr	r1, [sp, #4]
    44c6:	f004 fe6c 	bl	91a2 <net_pkt_skip>
	return list->head;
    44ca:	4b0b      	ldr	r3, [pc, #44]	; (44f8 <net_icmpv4_input+0x7c>)
    44cc:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&handlers, cb, node) {
    44ce:	2b00      	cmp	r3, #0
    44d0:	d0e0      	beq.n	4494 <net_icmpv4_input+0x18>
		if (cb->type == icmp_hdr->type &&
    44d2:	7821      	ldrb	r1, [r4, #0]
    44d4:	7a1a      	ldrb	r2, [r3, #8]
    44d6:	428a      	cmp	r2, r1
    44d8:	d10a      	bne.n	44f0 <net_icmpv4_input+0x74>
		    (cb->code == icmp_hdr->code || cb->code == 0U)) {
    44da:	7a5a      	ldrb	r2, [r3, #9]
		if (cb->type == icmp_hdr->type &&
    44dc:	7860      	ldrb	r0, [r4, #1]
    44de:	4290      	cmp	r0, r2
    44e0:	d000      	beq.n	44e4 <net_icmpv4_input+0x68>
		    (cb->code == icmp_hdr->code || cb->code == 0U)) {
    44e2:	b92a      	cbnz	r2, 44f0 <net_icmpv4_input+0x74>
			return cb->handler(pkt, ip_hdr, icmp_hdr);
    44e4:	4622      	mov	r2, r4
    44e6:	4631      	mov	r1, r6
    44e8:	4628      	mov	r0, r5
    44ea:	685b      	ldr	r3, [r3, #4]
    44ec:	4798      	blx	r3
    44ee:	e7d2      	b.n	4496 <net_icmpv4_input+0x1a>
	return node->next;
    44f0:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&handlers, cb, node) {
    44f2:	2b00      	cmp	r3, #0
    44f4:	d1ee      	bne.n	44d4 <net_icmpv4_input+0x58>
    44f6:	e7cd      	b.n	4494 <net_icmpv4_input+0x18>
    44f8:	20001320 	.word	0x20001320

000044fc <net_icmpv4_init>:
	.handler = icmpv4_handle_echo_request,
};

void net_icmpv4_init(void)
{
	net_icmpv4_register_handler(&echo_request_handler);
    44fc:	4801      	ldr	r0, [pc, #4]	; (4504 <net_icmpv4_init+0x8>)
    44fe:	f7ff bfb3 	b.w	4468 <net_icmpv4_register_handler>
    4502:	bf00      	nop
    4504:	20000098 	.word	0x20000098

00004508 <net_conn_input>:

enum net_verdict net_conn_input(struct net_pkt *pkt,
				union net_ip_header *ip_hdr,
				uint8_t proto,
				union net_proto_header *proto_hdr)
{
    4508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct net_conn *conn;
	enum net_verdict ret;
	uint16_t src_port;
	uint16_t dst_port;

	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
    450c:	2a11      	cmp	r2, #17
{
    450e:	4605      	mov	r5, r0
    4510:	460e      	mov	r6, r1
    4512:	469b      	mov	fp, r3
    4514:	b087      	sub	sp, #28
	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
    4516:	d001      	beq.n	451c <net_conn_input+0x14>
	}

drop:
	net_stats_update_per_proto_drop(pkt_iface, proto);

	return NET_DROP;
    4518:	2002      	movs	r0, #2
}
    451a:	e06f      	b.n	45fc <net_conn_input+0xf4>
		src_port = proto_hdr->udp->src_port;
    451c:	681b      	ldr	r3, [r3, #0]
    451e:	881a      	ldrh	r2, [r3, #0]
    4520:	9203      	str	r2, [sp, #12]
		dst_port = proto_hdr->udp->dst_port;
    4522:	885b      	ldrh	r3, [r3, #2]
    4524:	9304      	str	r3, [sp, #16]
	return pkt->family;
    4526:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
	if (IS_ENABLED(CONFIG_NET_IPV4) && net_pkt_family(pkt) == AF_INET) {
    452a:	f3c3 0342 	ubfx	r3, r3, #1, #3
    452e:	2b01      	cmp	r3, #1
    4530:	d067      	beq.n	4602 <net_conn_input+0xfa>
	bool is_bcast_pkt = false;
    4532:	f04f 0900 	mov.w	r9, #0
	bool is_mcast_pkt = false, mcast_pkt_delivered = false;
    4536:	f04f 0a00 	mov.w	sl, #0
	return list->head;
    453a:	4b6f      	ldr	r3, [pc, #444]	; (46f8 <net_conn_input+0x1f0>)
    453c:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn_used, conn, node) {
    453e:	2c00      	cmp	r4, #0
    4540:	f000 80bf 	beq.w	46c2 <net_conn_input+0x1ba>
    4544:	f04f 0800 	mov.w	r8, #0
    4548:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    454c:	4641      	mov	r1, r8
    454e:	9305      	str	r3, [sp, #20]
			if ((conn->proto != proto)) {
    4550:	8ba3      	ldrh	r3, [r4, #28]
    4552:	2b11      	cmp	r3, #17
    4554:	d146      	bne.n	45e4 <net_conn_input+0xdc>
		if (conn->family != AF_UNSPEC &&
    4556:	7fa2      	ldrb	r2, [r4, #30]
    4558:	b12a      	cbz	r2, 4566 <net_conn_input+0x5e>
    455a:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
    455e:	f3c3 0342 	ubfx	r3, r3, #1, #3
    4562:	4293      	cmp	r3, r2
    4564:	d13e      	bne.n	45e4 <net_conn_input+0xdc>
			if (net_sin(&conn->remote_addr)->sin_port) {
    4566:	88e3      	ldrh	r3, [r4, #6]
    4568:	b113      	cbz	r3, 4570 <net_conn_input+0x68>
				if (net_sin(&conn->remote_addr)->sin_port !=
    456a:	9a03      	ldr	r2, [sp, #12]
    456c:	4293      	cmp	r3, r2
    456e:	d139      	bne.n	45e4 <net_conn_input+0xdc>
			if (net_sin(&conn->local_addr)->sin_port) {
    4570:	89e3      	ldrh	r3, [r4, #14]
    4572:	b113      	cbz	r3, 457a <net_conn_input+0x72>
				if (net_sin(&conn->local_addr)->sin_port !=
    4574:	9a04      	ldr	r2, [sp, #16]
    4576:	4293      	cmp	r3, r2
    4578:	d134      	bne.n	45e4 <net_conn_input+0xdc>
			if (conn->flags & NET_CONN_REMOTE_ADDR_SET) {
    457a:	7fe3      	ldrb	r3, [r4, #31]
    457c:	079f      	lsls	r7, r3, #30
    457e:	d50e      	bpl.n	459e <net_conn_input+0x96>
    4580:	f895 203b 	ldrb.w	r2, [r5, #59]	; 0x3b
	if (addr->sa_family != net_pkt_family(pkt)) {
    4584:	88a7      	ldrh	r7, [r4, #4]
    4586:	f3c2 0042 	ubfx	r0, r2, #1, #3
    458a:	4287      	cmp	r7, r0
    458c:	d12a      	bne.n	45e4 <net_conn_input+0xdc>
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
    458e:	2801      	cmp	r0, #1
    4590:	d105      	bne.n	459e <net_conn_input+0x96>
		if (net_sin(addr)->sin_addr.s_addr) {
    4592:	68a2      	ldr	r2, [r4, #8]
    4594:	b11a      	cbz	r2, 459e <net_conn_input+0x96>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
    4596:	6830      	ldr	r0, [r6, #0]
    4598:	68c0      	ldr	r0, [r0, #12]
			if (!net_ipv4_addr_cmp(&net_sin(addr)->sin_addr,
    459a:	4282      	cmp	r2, r0
    459c:	d122      	bne.n	45e4 <net_conn_input+0xdc>
			if (conn->flags & NET_CONN_LOCAL_ADDR_SET) {
    459e:	0758      	lsls	r0, r3, #29
    45a0:	d50e      	bpl.n	45c0 <net_conn_input+0xb8>
    45a2:	f895 203b 	ldrb.w	r2, [r5, #59]	; 0x3b
	if (addr->sa_family != net_pkt_family(pkt)) {
    45a6:	89a7      	ldrh	r7, [r4, #12]
    45a8:	f3c2 0042 	ubfx	r0, r2, #1, #3
    45ac:	4287      	cmp	r7, r0
    45ae:	d119      	bne.n	45e4 <net_conn_input+0xdc>
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
    45b0:	2801      	cmp	r0, #1
    45b2:	d105      	bne.n	45c0 <net_conn_input+0xb8>
		if (net_sin(addr)->sin_addr.s_addr) {
    45b4:	6922      	ldr	r2, [r4, #16]
    45b6:	b11a      	cbz	r2, 45c0 <net_conn_input+0xb8>
    45b8:	6830      	ldr	r0, [r6, #0]
    45ba:	6900      	ldr	r0, [r0, #16]
			if (!net_ipv4_addr_cmp(&net_sin(addr)->sin_addr,
    45bc:	4282      	cmp	r2, r0
    45be:	d111      	bne.n	45e4 <net_conn_input+0xdc>
			if (best_match != NULL &&
    45c0:	f1b8 0f00 	cmp.w	r8, #0
    45c4:	d003      	beq.n	45ce <net_conn_input+0xc6>
    45c6:	f898 201f 	ldrb.w	r2, [r8, #31]
    45ca:	0712      	lsls	r2, r2, #28
    45cc:	d40a      	bmi.n	45e4 <net_conn_input+0xdc>
			if (best_rank < NET_CONN_RANK(conn->flags)) {
    45ce:	9a05      	ldr	r2, [sp, #20]
    45d0:	f003 0378 	and.w	r3, r3, #120	; 0x78
    45d4:	429a      	cmp	r2, r3
    45d6:	da05      	bge.n	45e4 <net_conn_input+0xdc>
				if (!is_mcast_pkt) {
    45d8:	f1ba 0f00 	cmp.w	sl, #0
    45dc:	d148      	bne.n	4670 <net_conn_input+0x168>
					continue;
    45de:	46a0      	mov	r8, r4
					best_rank = NET_CONN_RANK(conn->flags);
    45e0:	b21b      	sxth	r3, r3
    45e2:	9305      	str	r3, [sp, #20]
	return node->next;
    45e4:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn_used, conn, node) {
    45e6:	2c00      	cmp	r4, #0
    45e8:	d1b2      	bne.n	4550 <net_conn_input+0x48>
	if ((is_mcast_pkt && mcast_pkt_delivered) || raw_pkt_delivered) {
    45ea:	f1ba 0f00 	cmp.w	sl, #0
    45ee:	d058      	beq.n	46a2 <net_conn_input+0x19a>
    45f0:	2900      	cmp	r1, #0
    45f2:	d056      	beq.n	46a2 <net_conn_input+0x19a>
			net_pkt_unref(pkt);
    45f4:	4628      	mov	r0, r5
    45f6:	f004 fd0f 	bl	9018 <net_pkt_unref>
		return NET_OK;
    45fa:	2000      	movs	r0, #0
}
    45fc:	b007      	add	sp, #28
    45fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (net_ipv4_addr_cmp(&ip_hdr->ipv4->src,
    4602:	680f      	ldr	r7, [r1, #0]
	return pkt->iface;
    4604:	f8d0 8020 	ldr.w	r8, [r0, #32]
    4608:	68fa      	ldr	r2, [r7, #12]
    460a:	693b      	ldr	r3, [r7, #16]
    460c:	429a      	cmp	r2, r3
    460e:	d06c      	beq.n	46ea <net_conn_input+0x1e2>
		    net_ipv4_is_my_addr(&ip_hdr->ipv4->src)) {
    4610:	f107 090c 	add.w	r9, r7, #12
	ret = net_if_ipv4_addr_lookup(addr, NULL) != NULL;
    4614:	2100      	movs	r1, #0
    4616:	4648      	mov	r0, r9
    4618:	f7ff fb52 	bl	3cc0 <net_if_ipv4_addr_lookup>
	if (!ret) {
    461c:	4604      	mov	r4, r0
    461e:	b950      	cbnz	r0, 4636 <net_conn_input+0x12e>
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
    4620:	f7ff fd8e 	bl	4140 <net_ipv4_broadcast_address>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
    4624:	68fa      	ldr	r2, [r7, #12]
    4626:	6803      	ldr	r3, [r0, #0]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
    4628:	429a      	cmp	r2, r3
    462a:	d004      	beq.n	4636 <net_conn_input+0x12e>
	return net_if_ipv4_is_addr_bcast(iface, addr);
    462c:	4649      	mov	r1, r9
    462e:	4620      	mov	r0, r4
    4630:	f7ff fa96 	bl	3b60 <net_if_ipv4_is_addr_bcast>
				      &ip_hdr->ipv4->dst) ||
    4634:	b120      	cbz	r0, 4640 <net_conn_input+0x138>
	if (!conn_are_end_points_valid(pkt, ip_hdr, src_port, dst_port)) {
    4636:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
    463a:	4293      	cmp	r3, r2
    463c:	f43f af6c 	beq.w	4518 <net_conn_input+0x10>
	return pkt->family;
    4640:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
	if (IS_ENABLED(CONFIG_NET_IPV4) && net_pkt_family(pkt) == AF_INET) {
    4644:	f3c3 0342 	ubfx	r3, r3, #1, #3
    4648:	2b01      	cmp	r3, #1
    464a:	f47f af72 	bne.w	4532 <net_conn_input+0x2a>
		if (net_ipv4_is_addr_mcast(&ip_hdr->ipv4->dst)) {
    464e:	6831      	ldr	r1, [r6, #0]
	return (ntohl(UNALIGNED_GET(&addr->s_addr)) & 0xF0000000) == 0xE0000000;
    4650:	690b      	ldr	r3, [r1, #16]
    4652:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    4656:	2be0      	cmp	r3, #224	; 0xe0
    4658:	d005      	beq.n	4666 <net_conn_input+0x15e>
		} else if (net_if_ipv4_is_addr_bcast(pkt_iface,
    465a:	4640      	mov	r0, r8
    465c:	3110      	adds	r1, #16
    465e:	f7ff fa7f 	bl	3b60 <net_if_ipv4_is_addr_bcast>
    4662:	4681      	mov	r9, r0
    4664:	e767      	b.n	4536 <net_conn_input+0x2e>
	bool is_bcast_pkt = false;
    4666:	f04f 0900 	mov.w	r9, #0
			is_mcast_pkt = true;
    466a:	f04f 0a01 	mov.w	sl, #1
    466e:	e764      	b.n	453a <net_conn_input+0x32>
				mcast_pkt = net_pkt_clone(pkt, CLONE_TIMEOUT);
    4670:	220a      	movs	r2, #10
    4672:	2300      	movs	r3, #0
    4674:	4628      	mov	r0, r5
    4676:	f004 fe2a 	bl	92ce <net_pkt_clone>
				if (!mcast_pkt) {
    467a:	4607      	mov	r7, r0
    467c:	2800      	cmp	r0, #0
    467e:	f43f af4b 	beq.w	4518 <net_conn_input+0x10>
				if (conn->cb(conn, mcast_pkt, ip_hdr,
    4682:	69a3      	ldr	r3, [r4, #24]
    4684:	4601      	mov	r1, r0
    4686:	9300      	str	r3, [sp, #0]
    4688:	4632      	mov	r2, r6
    468a:	465b      	mov	r3, fp
    468c:	4620      	mov	r0, r4
    468e:	f8d4 c014 	ldr.w	ip, [r4, #20]
    4692:	47e0      	blx	ip
    4694:	2802      	cmp	r0, #2
    4696:	d102      	bne.n	469e <net_conn_input+0x196>
					net_pkt_unref(mcast_pkt);
    4698:	4638      	mov	r0, r7
    469a:	f004 fcbd 	bl	9018 <net_pkt_unref>
				mcast_pkt_delivered = true;
    469e:	4651      	mov	r1, sl
    46a0:	e7a0      	b.n	45e4 <net_conn_input+0xdc>
	if (conn) {
    46a2:	f1b8 0f00 	cmp.w	r8, #0
    46a6:	d00c      	beq.n	46c2 <net_conn_input+0x1ba>
		if (conn->cb(conn, pkt, ip_hdr, proto_hdr,
    46a8:	f8d8 3018 	ldr.w	r3, [r8, #24]
    46ac:	4632      	mov	r2, r6
    46ae:	9300      	str	r3, [sp, #0]
    46b0:	4629      	mov	r1, r5
    46b2:	465b      	mov	r3, fp
    46b4:	4640      	mov	r0, r8
    46b6:	f8d8 4014 	ldr.w	r4, [r8, #20]
    46ba:	47a0      	blx	r4
    46bc:	2802      	cmp	r0, #2
    46be:	d19c      	bne.n	45fa <net_conn_input+0xf2>
    46c0:	e72a      	b.n	4518 <net_conn_input+0x10>
    46c2:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
    46c6:	f3c3 0342 	ubfx	r3, r3, #1, #3
    46ca:	2b01      	cmp	r3, #1
    46cc:	d107      	bne.n	46de <net_conn_input+0x1d6>
		   net_pkt_family(pkt) == AF_INET &&
    46ce:	f1ba 0f00 	cmp.w	sl, #0
    46d2:	f47f af21 	bne.w	4518 <net_conn_input+0x10>
		   (is_mcast_pkt || is_bcast_pkt)) {
    46d6:	f1b9 0f00 	cmp.w	r9, #0
    46da:	f47f af1d 	bne.w	4518 <net_conn_input+0x10>
		net_icmpv4_send_error(pkt, NET_ICMPV4_DST_UNREACH,
    46de:	2203      	movs	r2, #3
    46e0:	4628      	mov	r0, r5
    46e2:	4611      	mov	r1, r2
    46e4:	f004 ff60 	bl	95a8 <net_icmpv4_send_error>
    46e8:	e716      	b.n	4518 <net_conn_input+0x10>
	if (!conn_are_end_points_valid(pkt, ip_hdr, src_port, dst_port)) {
    46ea:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
    46ee:	4293      	cmp	r3, r2
    46f0:	f43f af12 	beq.w	4518 <net_conn_input+0x10>
    46f4:	e7ab      	b.n	464e <net_conn_input+0x146>
    46f6:	bf00      	nop
    46f8:	20001330 	.word	0x20001330

000046fc <net_conn_init>:
	list->tail = NULL;
    46fc:	2300      	movs	r3, #0
		cb(conn, user_data);
	}
}

void net_conn_init(void)
{
    46fe:	b570      	push	{r4, r5, r6, lr}
    4700:	4618      	mov	r0, r3
    4702:	461d      	mov	r5, r3
	int i;

	sys_slist_init(&conn_unused);
	sys_slist_init(&conn_used);

	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
    4704:	461c      	mov	r4, r3
	list->head = NULL;
    4706:	4a0b      	ldr	r2, [pc, #44]	; (4734 <net_conn_init+0x38>)
	list->tail = NULL;
    4708:	490b      	ldr	r1, [pc, #44]	; (4738 <net_conn_init+0x3c>)
    470a:	e9c2 3300 	strd	r3, r3, [r2]
    470e:	4a0b      	ldr	r2, [pc, #44]	; (473c <net_conn_init+0x40>)
    4710:	604b      	str	r3, [r1, #4]
		sys_slist_prepend(&conn_unused, &conns[i].node);
    4712:	462e      	mov	r6, r5
    4714:	4615      	mov	r5, r2
	parent->next = child;
    4716:	6016      	str	r6, [r2, #0]
Z_GENLIST_PREPEND(slist, snode)
    4718:	b908      	cbnz	r0, 471e <net_conn_init+0x22>
    471a:	4610      	mov	r0, r2
    471c:	2301      	movs	r3, #1
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
    471e:	3401      	adds	r4, #1
    4720:	2c04      	cmp	r4, #4
    4722:	f102 0220 	add.w	r2, r2, #32
    4726:	d1f4      	bne.n	4712 <net_conn_init+0x16>
    4728:	4a05      	ldr	r2, [pc, #20]	; (4740 <net_conn_init+0x44>)
    472a:	600a      	str	r2, [r1, #0]
    472c:	b103      	cbz	r3, 4730 <net_conn_init+0x34>
    472e:	6048      	str	r0, [r1, #4]
	}
}
    4730:	bd70      	pop	{r4, r5, r6, pc}
    4732:	bf00      	nop
    4734:	20001330 	.word	0x20001330
    4738:	20001328 	.word	0x20001328
    473c:	20001338 	.word	0x20001338
    4740:	20001398 	.word	0x20001398

00004744 <test_cb>:
{
	k_object_access_all_grant(&ztest_thread);
}

static void test_cb(void *a, void *dummy2, void *dummy)
{
    4744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	phase = TEST_PHASE_SETUP;
    4748:	2600      	movs	r6, #0
{
    474a:	4604      	mov	r4, r0
	struct unit_test *test = (struct unit_test *)a;

	ARG_UNUSED(dummy2);
	ARG_UNUSED(dummy);

	test_result = 1;
    474c:	f04f 0801 	mov.w	r8, #1
	phase = TEST_PHASE_SETUP;
    4750:	4f06      	ldr	r7, [pc, #24]	; (476c <test_cb+0x28>)
	test_result = 1;
    4752:	4d07      	ldr	r5, [pc, #28]	; (4770 <test_cb+0x2c>)
	test->setup();
    4754:	6883      	ldr	r3, [r0, #8]
	phase = TEST_PHASE_SETUP;
    4756:	703e      	strb	r6, [r7, #0]
	test_result = 1;
    4758:	f8c5 8000 	str.w	r8, [r5]
	test->setup();
    475c:	4798      	blx	r3
	test->test();
    475e:	6863      	ldr	r3, [r4, #4]
	phase = TEST_PHASE_TEST;
    4760:	f887 8000 	strb.w	r8, [r7]
	test->test();
    4764:	4798      	blx	r3
	run_test_functions(test);
	test_result = 0;
    4766:	602e      	str	r6, [r5, #0]
}
    4768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    476c:	20000194 	.word	0x20000194
    4770:	200013b8 	.word	0x200013b8

00004774 <ztest_test_fail>:
	test_result = -1;
    4774:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
    4778:	b508      	push	{r3, lr}
	test_result = -1;
    477a:	4b05      	ldr	r3, [pc, #20]	; (4790 <ztest_test_fail+0x1c>)
	k_thread_abort(&ztest_thread);
    477c:	4805      	ldr	r0, [pc, #20]	; (4794 <ztest_test_fail+0x20>)
	test_result = -1;
    477e:	601a      	str	r2, [r3, #0]
	k_thread_abort(&ztest_thread);
    4780:	f005 f909 	bl	9996 <k_thread_abort>
	return z_impl_k_current_get();
    4784:	f001 ff40 	bl	6608 <z_impl_k_current_get>
}
    4788:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_thread_abort(k_current_get());
    478c:	f005 b903 	b.w	9996 <k_thread_abort>
    4790:	200013b8 	.word	0x200013b8
    4794:	20000ee0 	.word	0x20000ee0

00004798 <z_ztest_run_test_suite>:
}

#endif /* !KERNEL */

void z_ztest_run_test_suite(const char *name, struct unit_test *suite)
{
    4798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int fail = 0;

	if (test_status < 0) {
    479c:	4f49      	ldr	r7, [pc, #292]	; (48c4 <z_ztest_run_test_suite+0x12c>)
{
    479e:	4605      	mov	r5, r0
	if (test_status < 0) {
    47a0:	683b      	ldr	r3, [r7, #0]
{
    47a2:	460c      	mov	r4, r1
	if (test_status < 0) {
    47a4:	2b00      	cmp	r3, #0
{
    47a6:	b08b      	sub	sp, #44	; 0x2c
	if (test_status < 0) {
    47a8:	db1d      	blt.n	47e6 <z_ztest_run_test_suite+0x4e>
		return;
	}

	init_testing();

	PRINT("Running test suite %s\n", name);
    47aa:	4601      	mov	r1, r0
    47ac:	4846      	ldr	r0, [pc, #280]	; (48c8 <z_ztest_run_test_suite+0x130>)
    47ae:	f003 f855 	bl	785c <printk>
	PRINT_LINE;
    47b2:	4846      	ldr	r0, [pc, #280]	; (48cc <z_ztest_run_test_suite+0x134>)
    47b4:	f003 f852 	bl	785c <printk>
	int fail = 0;
    47b8:	2600      	movs	r6, #0
	TC_START(test->name);
    47ba:	f8df b114 	ldr.w	fp, [pc, #276]	; 48d0 <z_ztest_run_test_suite+0x138>
	if (test_result == -1) {
    47be:	f8df a114 	ldr.w	sl, [pc, #276]	; 48d4 <z_ztest_run_test_suite+0x13c>
    47c2:	3414      	adds	r4, #20
	while (suite->test) {
    47c4:	f854 3c10 	ldr.w	r3, [r4, #-16]
    47c8:	f1a4 0814 	sub.w	r8, r4, #20
    47cc:	b973      	cbnz	r3, 47ec <z_ztest_run_test_suite+0x54>
		if (fail && FAIL_FAST) {
			break;
		}
	}
	if (fail) {
		TC_PRINT("Test suite %s failed.\n", name);
    47ce:	4629      	mov	r1, r5
	if (fail) {
    47d0:	2e00      	cmp	r6, #0
    47d2:	d075      	beq.n	48c0 <z_ztest_run_test_suite+0x128>
		TC_PRINT("Test suite %s failed.\n", name);
    47d4:	4840      	ldr	r0, [pc, #256]	; (48d8 <z_ztest_run_test_suite+0x140>)
	} else {
		TC_PRINT("Test suite %s succeeded\n", name);
    47d6:	f003 f841 	bl	785c <printk>
	}

	test_status = (test_status || fail) ? 1 : 0;
    47da:	683b      	ldr	r3, [r7, #0]
    47dc:	4333      	orrs	r3, r6
    47de:	bf14      	ite	ne
    47e0:	2301      	movne	r3, #1
    47e2:	2300      	moveq	r3, #0
    47e4:	603b      	str	r3, [r7, #0]
}
    47e6:	b00b      	add	sp, #44	; 0x2c
    47e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	TC_START(test->name);
    47ec:	f854 1c14 	ldr.w	r1, [r4, #-20]
    47f0:	4658      	mov	r0, fp
    47f2:	f003 f833 	bl	785c <printk>
			test->thread_options | K_INHERIT_PERMS,
    47f6:	f854 3c04 	ldr.w	r3, [r4, #-4]
    47fa:	f043 0108 	orr.w	r1, r3, #8
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    47fe:	2200      	movs	r2, #0
    4800:	2300      	movs	r3, #0
    4802:	f04f 0900 	mov.w	r9, #0
    4806:	e9cd 2306 	strd	r2, r3, [sp, #24]
    480a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    480e:	9104      	str	r1, [sp, #16]
    4810:	e9cd 9302 	strd	r9, r3, [sp, #8]
    4814:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    4818:	e9cd 8900 	strd	r8, r9, [sp]
    481c:	4b2f      	ldr	r3, [pc, #188]	; (48dc <z_ztest_run_test_suite+0x144>)
    481e:	4930      	ldr	r1, [pc, #192]	; (48e0 <z_ztest_run_test_suite+0x148>)
    4820:	4830      	ldr	r0, [pc, #192]	; (48e4 <z_ztest_run_test_suite+0x14c>)
    4822:	f002 f9bb 	bl	6b9c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    4826:	4930      	ldr	r1, [pc, #192]	; (48e8 <z_ztest_run_test_suite+0x150>)
    4828:	482e      	ldr	r0, [pc, #184]	; (48e4 <z_ztest_run_test_suite+0x14c>)
    482a:	f002 f931 	bl	6a90 <z_impl_k_thread_name_set>
	return z_impl_k_thread_join(thread, timeout);
    482e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4832:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4836:	482b      	ldr	r0, [pc, #172]	; (48e4 <z_ztest_run_test_suite+0x14c>)
    4838:	f001 ffa0 	bl	677c <z_impl_k_thread_join>
	phase = TEST_PHASE_TEARDOWN;
    483c:	2302      	movs	r3, #2
    483e:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 48ec <z_ztest_run_test_suite+0x154>
    4842:	f888 3000 	strb.w	r3, [r8]
	test->teardown();
    4846:	f854 3c08 	ldr.w	r3, [r4, #-8]
    484a:	4798      	blx	r3
	phase = TEST_PHASE_FRAMEWORK;
    484c:	2303      	movs	r3, #3
    484e:	f888 3000 	strb.w	r3, [r8]
	if (test_result == -1) {
    4852:	f8da 3000 	ldr.w	r3, [sl]
    4856:	1c5a      	adds	r2, r3, #1
    4858:	4253      	negs	r3, r2
    485a:	4153      	adcs	r3, r2
    485c:	9309      	str	r3, [sp, #36]	; 0x24
	mock_status = z_cleanup_mock();
    485e:	f000 f8a1 	bl	49a4 <z_cleanup_mock>
    4862:	4680      	mov	r8, r0
	k_thread_abort(&ztest_thread);
    4864:	481f      	ldr	r0, [pc, #124]	; (48e4 <z_ztest_run_test_suite+0x14c>)
    4866:	f005 f896 	bl	9996 <k_thread_abort>
	if (!ret && mock_status == 1) {
    486a:	f1b8 0f01 	cmp.w	r8, #1
    486e:	d11a      	bne.n	48a6 <z_ztest_run_test_suite+0x10e>
		PRINT("Test %s failed: Unused mock parameter values\n",
    4870:	f854 1c14 	ldr.w	r1, [r4, #-20]
    4874:	481e      	ldr	r0, [pc, #120]	; (48f0 <z_ztest_run_test_suite+0x158>)
    4876:	f002 fff1 	bl	785c <printk>
		ret |= cleanup_test(test);
    487a:	9b09      	ldr	r3, [sp, #36]	; 0x24
		Z_TC_END_RESULT(TC_SKIP, test->name);
    487c:	f854 2c14 	ldr.w	r2, [r4, #-20]
		ret |= cleanup_test(test);
    4880:	ea43 0808 	orr.w	r8, r3, r8
	if (test_result == -2) {
    4884:	f8da 3000 	ldr.w	r3, [sl]
		Z_TC_END_RESULT(ret, test->name);
    4888:	481a      	ldr	r0, [pc, #104]	; (48f4 <z_ztest_run_test_suite+0x15c>)
	if (test_result == -2) {
    488a:	3302      	adds	r3, #2
		Z_TC_END_RESULT(ret, test->name);
    488c:	bf16      	itet	ne
    488e:	4b1a      	ldrne	r3, [pc, #104]	; (48f8 <z_ztest_run_test_suite+0x160>)
		Z_TC_END_RESULT(TC_SKIP, test->name);
    4890:	491a      	ldreq	r1, [pc, #104]	; (48fc <z_ztest_run_test_suite+0x164>)
		Z_TC_END_RESULT(ret, test->name);
    4892:	f853 1028 	ldrne.w	r1, [r3, r8, lsl #2]
    4896:	f002 ffe1 	bl	785c <printk>
    489a:	480c      	ldr	r0, [pc, #48]	; (48cc <z_ztest_run_test_suite+0x134>)
    489c:	f002 ffde 	bl	785c <printk>
		fail += run_test(suite);
    48a0:	4446      	add	r6, r8
		if (fail && FAIL_FAST) {
    48a2:	3414      	adds	r4, #20
    48a4:	e78e      	b.n	47c4 <z_ztest_run_test_suite+0x2c>
	} else if (!ret && mock_status == 2) {
    48a6:	f1b8 0f02 	cmp.w	r8, #2
    48aa:	d107      	bne.n	48bc <z_ztest_run_test_suite+0x124>
		PRINT("Test %s failed: Unused mock return values\n",
    48ac:	f854 1c14 	ldr.w	r1, [r4, #-20]
    48b0:	4813      	ldr	r0, [pc, #76]	; (4900 <z_ztest_run_test_suite+0x168>)
    48b2:	f002 ffd3 	bl	785c <printk>
		ret = TC_FAIL;
    48b6:	f04f 0801 	mov.w	r8, #1
    48ba:	e7de      	b.n	487a <z_ztest_run_test_suite+0xe2>
	int ret = TC_PASS;
    48bc:	46c8      	mov	r8, r9
    48be:	e7dc      	b.n	487a <z_ztest_run_test_suite+0xe2>
		TC_PRINT("Test suite %s succeeded\n", name);
    48c0:	4810      	ldr	r0, [pc, #64]	; (4904 <z_ztest_run_test_suite+0x16c>)
    48c2:	e788      	b.n	47d6 <z_ztest_run_test_suite+0x3e>
    48c4:	200013bc 	.word	0x200013bc
    48c8:	0000c111 	.word	0x0000c111
    48cc:	0000c128 	.word	0x0000c128
    48d0:	0000c16d 	.word	0x0000c16d
    48d4:	200013b8 	.word	0x200013b8
    48d8:	0000c1ee 	.word	0x0000c1ee
    48dc:	00004745 	.word	0x00004745
    48e0:	20002340 	.word	0x20002340
    48e4:	20000ee0 	.word	0x20000ee0
    48e8:	0000c179 	.word	0x0000c179
    48ec:	20000194 	.word	0x20000194
    48f0:	0000c186 	.word	0x0000c186
    48f4:	0000c1e4 	.word	0x0000c1e4
    48f8:	0000a818 	.word	0x0000a818
    48fc:	0000c1df 	.word	0x0000c1df
    4900:	0000c1b4 	.word	0x0000c1b4
    4904:	0000c205 	.word	0x0000c205

00004908 <end_report>:

void end_report(void)
{
    4908:	b508      	push	{r3, lr}
	if (test_status) {
    490a:	4b08      	ldr	r3, [pc, #32]	; (492c <end_report+0x24>)
		TC_END_REPORT(TC_FAIL);
    490c:	4808      	ldr	r0, [pc, #32]	; (4930 <end_report+0x28>)
	if (test_status) {
    490e:	681b      	ldr	r3, [r3, #0]
    4910:	b13b      	cbz	r3, 4922 <end_report+0x1a>
		TC_END_REPORT(TC_FAIL);
    4912:	f002 ffa3 	bl	785c <printk>
    4916:	4907      	ldr	r1, [pc, #28]	; (4934 <end_report+0x2c>)
	} else {
		TC_END_REPORT(TC_PASS);
    4918:	4807      	ldr	r0, [pc, #28]	; (4938 <end_report+0x30>)
	}
}
    491a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		TC_END_REPORT(TC_PASS);
    491e:	f002 bf9d 	b.w	785c <printk>
    4922:	f002 ff9b 	bl	785c <printk>
    4926:	4905      	ldr	r1, [pc, #20]	; (493c <end_report+0x34>)
    4928:	e7f6      	b.n	4918 <end_report+0x10>
    492a:	bf00      	nop
    492c:	200013bc 	.word	0x200013bc
    4930:	0000c128 	.word	0x0000c128
    4934:	0000c21e 	.word	0x0000c21e
    4938:	0000c225 	.word	0x0000c225
    493c:	0000c23b 	.word	0x0000c23b

00004940 <free_parameter>:

static DEFINE_BITFIELD(params_allocation, CONFIG_ZTEST_PARAMETER_COUNT);
static struct parameter params[CONFIG_ZTEST_PARAMETER_COUNT];

static void free_parameter(struct parameter *param)
{
    4940:	b570      	push	{r4, r5, r6, lr}
	unsigned int allocation_index = param - params;
    4942:	4e12      	ldr	r6, [pc, #72]	; (498c <free_parameter+0x4c>)
{
    4944:	4604      	mov	r4, r0
	unsigned int allocation_index = param - params;
    4946:	1b83      	subs	r3, r0, r6
    4948:	111d      	asrs	r5, r3, #4

	if (param == NULL)
    494a:	b1f0      	cbz	r0, 498a <free_parameter+0x4a>
		return;
	__ASSERT(allocation_index < CONFIG_ZTEST_PARAMETER_COUNT,
    494c:	2b90      	cmp	r3, #144	; 0x90
    494e:	d90f      	bls.n	4970 <free_parameter+0x30>
    4950:	236f      	movs	r3, #111	; 0x6f
    4952:	4a0f      	ldr	r2, [pc, #60]	; (4990 <free_parameter+0x50>)
    4954:	490f      	ldr	r1, [pc, #60]	; (4994 <free_parameter+0x54>)
    4956:	4810      	ldr	r0, [pc, #64]	; (4998 <free_parameter+0x58>)
    4958:	f002 ff80 	bl	785c <printk>
    495c:	4621      	mov	r1, r4
    495e:	480f      	ldr	r0, [pc, #60]	; (499c <free_parameter+0x5c>)
    4960:	230a      	movs	r3, #10
    4962:	4632      	mov	r2, r6
    4964:	f002 ff7a 	bl	785c <printk>
    4968:	216f      	movs	r1, #111	; 0x6f
    496a:	4809      	ldr	r0, [pc, #36]	; (4990 <free_parameter+0x50>)
    496c:	f003 f9c8 	bl	7d00 <assert_post_action>

static ALWAYS_INLINE void sys_clear_bit(mem_addr_t addr, unsigned int bit)
{
	uint32_t temp = *(volatile uint32_t *)addr;

	*(volatile uint32_t *)addr = temp & ~(1 << bit);
    4970:	2201      	movs	r2, #1
		 "param %p given to free is not in the static buffer %p:%u",
		 param, params, CONFIG_ZTEST_PARAMETER_COUNT);
	sys_bitfield_clear_bit((mem_addr_t)params_allocation, allocation_index);
    4972:	490b      	ldr	r1, [pc, #44]	; (49a0 <free_parameter+0x60>)
}

static ALWAYS_INLINE
	void sys_bitfield_clear_bit(mem_addr_t addr, unsigned int bit)
{
	sys_clear_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
    4974:	0968      	lsrs	r0, r5, #5
	uint32_t temp = *(volatile uint32_t *)addr;
    4976:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
	sys_clear_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
    497a:	f005 051f 	and.w	r5, r5, #31
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
    497e:	fa02 f505 	lsl.w	r5, r2, r5
    4982:	ea23 0505 	bic.w	r5, r3, r5
    4986:	f841 5020 	str.w	r5, [r1, r0, lsl #2]
}
    498a:	bd70      	pop	{r4, r5, r6, pc}
    498c:	200013c0 	.word	0x200013c0
    4990:	0000c250 	.word	0x0000c250
    4994:	0000c28b 	.word	0x0000c28b
    4998:	0000b021 	.word	0x0000b021
    499c:	0000c2a1 	.word	0x0000c2a1
    49a0:	20001460 	.word	0x20001460

000049a4 <z_cleanup_mock>:
		param = next;
	}
}

int z_cleanup_mock(void)
{
    49a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int fail = 0;

	if (parameter_list.next) {
    49a6:	4e11      	ldr	r6, [pc, #68]	; (49ec <z_cleanup_mock+0x48>)
    49a8:	6834      	ldr	r4, [r6, #0]
    49aa:	b12c      	cbz	r4, 49b8 <z_cleanup_mock+0x14>
		PRINT("Parameter not used by mock: %s:%s\n",
    49ac:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    49b0:	480f      	ldr	r0, [pc, #60]	; (49f0 <z_cleanup_mock+0x4c>)
    49b2:	f002 ff53 	bl	785c <printk>
		      parameter_list.next->fn,
		      parameter_list.next->name);
		fail = 1;
    49b6:	2401      	movs	r4, #1
	}
	if (return_value_list.next) {
    49b8:	4d0e      	ldr	r5, [pc, #56]	; (49f4 <z_cleanup_mock+0x50>)
    49ba:	682b      	ldr	r3, [r5, #0]
    49bc:	b123      	cbz	r3, 49c8 <z_cleanup_mock+0x24>
		PRINT("Return value no used by mock: %s\n",
    49be:	6859      	ldr	r1, [r3, #4]
    49c0:	480d      	ldr	r0, [pc, #52]	; (49f8 <z_cleanup_mock+0x54>)
    49c2:	f002 ff4b 	bl	785c <printk>
		      return_value_list.next->fn);
		fail = 2;
    49c6:	2402      	movs	r4, #2
	}

	free_param_list(parameter_list.next);
    49c8:	6830      	ldr	r0, [r6, #0]
	while (param) {
    49ca:	b928      	cbnz	r0, 49d8 <z_cleanup_mock+0x34>
	free_param_list(return_value_list.next);
    49cc:	6828      	ldr	r0, [r5, #0]
	while (param) {
    49ce:	b940      	cbnz	r0, 49e2 <z_cleanup_mock+0x3e>

	parameter_list.next = NULL;
    49d0:	6030      	str	r0, [r6, #0]
	return_value_list.next = NULL;
    49d2:	6028      	str	r0, [r5, #0]

	return fail;
}
    49d4:	4620      	mov	r0, r4
    49d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		next = param->next;
    49d8:	6807      	ldr	r7, [r0, #0]
		free_parameter(param);
    49da:	f7ff ffb1 	bl	4940 <free_parameter>
		param = next;
    49de:	4638      	mov	r0, r7
    49e0:	e7f3      	b.n	49ca <z_cleanup_mock+0x26>
		next = param->next;
    49e2:	6807      	ldr	r7, [r0, #0]
		free_parameter(param);
    49e4:	f7ff ffac 	bl	4940 <free_parameter>
		param = next;
    49e8:	4638      	mov	r0, r7
    49ea:	e7f0      	b.n	49ce <z_cleanup_mock+0x2a>
    49ec:	200000a4 	.word	0x200000a4
    49f0:	0000c2dc 	.word	0x0000c2dc
    49f4:	200000b4 	.word	0x200000b4
    49f8:	0000c2ff 	.word	0x0000c2ff

000049fc <gpio_cmsdk_ahb_manage_callback>:
}

static int gpio_cmsdk_ahb_manage_callback(const struct device *dev,
					  struct gpio_callback *callback,
					  bool set)
{
    49fc:	b570      	push	{r4, r5, r6, lr}
    49fe:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
    4a00:	460c      	mov	r4, r1
	struct gpio_cmsdk_ahb_dev_data *data = dev->data;
    4a02:	6905      	ldr	r5, [r0, #16]
    4a04:	b961      	cbnz	r1, 4a20 <gpio_cmsdk_ahb_manage_callback+0x24>
    4a06:	4922      	ldr	r1, [pc, #136]	; (4a90 <gpio_cmsdk_ahb_manage_callback+0x94>)
    4a08:	2324      	movs	r3, #36	; 0x24
    4a0a:	4a22      	ldr	r2, [pc, #136]	; (4a94 <gpio_cmsdk_ahb_manage_callback+0x98>)
    4a0c:	4822      	ldr	r0, [pc, #136]	; (4a98 <gpio_cmsdk_ahb_manage_callback+0x9c>)
    4a0e:	f002 ff25 	bl	785c <printk>
    4a12:	4822      	ldr	r0, [pc, #136]	; (4a9c <gpio_cmsdk_ahb_manage_callback+0xa0>)
    4a14:	f002 ff22 	bl	785c <printk>
    4a18:	2124      	movs	r1, #36	; 0x24
    4a1a:	481e      	ldr	r0, [pc, #120]	; (4a94 <gpio_cmsdk_ahb_manage_callback+0x98>)
    4a1c:	f003 f970 	bl	7d00 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
    4a20:	6863      	ldr	r3, [r4, #4]
    4a22:	b963      	cbnz	r3, 4a3e <gpio_cmsdk_ahb_manage_callback+0x42>
    4a24:	491e      	ldr	r1, [pc, #120]	; (4aa0 <gpio_cmsdk_ahb_manage_callback+0xa4>)
    4a26:	2325      	movs	r3, #37	; 0x25
    4a28:	4a1a      	ldr	r2, [pc, #104]	; (4a94 <gpio_cmsdk_ahb_manage_callback+0x98>)
    4a2a:	481b      	ldr	r0, [pc, #108]	; (4a98 <gpio_cmsdk_ahb_manage_callback+0x9c>)
    4a2c:	f002 ff16 	bl	785c <printk>
    4a30:	481c      	ldr	r0, [pc, #112]	; (4aa4 <gpio_cmsdk_ahb_manage_callback+0xa8>)
    4a32:	f002 ff13 	bl	785c <printk>
    4a36:	2125      	movs	r1, #37	; 0x25
    4a38:	4816      	ldr	r0, [pc, #88]	; (4a94 <gpio_cmsdk_ahb_manage_callback+0x98>)
    4a3a:	f003 f961 	bl	7d00 <assert_post_action>
	return list->head;
    4a3e:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
    4a40:	b15b      	cbz	r3, 4a5a <gpio_cmsdk_ahb_manage_callback+0x5e>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    4a42:	2200      	movs	r2, #0
    4a44:	429c      	cmp	r4, r3
    4a46:	d112      	bne.n	4a6e <gpio_cmsdk_ahb_manage_callback+0x72>
	return node->next;
    4a48:	6823      	ldr	r3, [r4, #0]
	return list->tail;
    4a4a:	68a9      	ldr	r1, [r5, #8]
Z_GENLIST_REMOVE(slist, snode)
    4a4c:	b952      	cbnz	r2, 4a64 <gpio_cmsdk_ahb_manage_callback+0x68>
    4a4e:	42a1      	cmp	r1, r4
	list->head = node;
    4a50:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    4a52:	d100      	bne.n	4a56 <gpio_cmsdk_ahb_manage_callback+0x5a>
	list->tail = node;
    4a54:	60ab      	str	r3, [r5, #8]
	parent->next = child;
    4a56:	2300      	movs	r3, #0
    4a58:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
    4a5a:	b96e      	cbnz	r6, 4a78 <gpio_cmsdk_ahb_manage_callback+0x7c>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    4a5c:	2000      	movs	r0, #0

	return gpio_manage_callback(&data->gpio_cb, callback, set);
}
    4a5e:	bd70      	pop	{r4, r5, r6, pc}
    4a60:	460b      	mov	r3, r1
    4a62:	e7ef      	b.n	4a44 <gpio_cmsdk_ahb_manage_callback+0x48>
Z_GENLIST_REMOVE(slist, snode)
    4a64:	42a1      	cmp	r1, r4
	parent->next = child;
    4a66:	6013      	str	r3, [r2, #0]
	list->tail = node;
    4a68:	bf08      	it	eq
    4a6a:	60aa      	streq	r2, [r5, #8]
}
    4a6c:	e7f3      	b.n	4a56 <gpio_cmsdk_ahb_manage_callback+0x5a>
	return node->next;
    4a6e:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    4a70:	461a      	mov	r2, r3
    4a72:	2900      	cmp	r1, #0
    4a74:	d1f4      	bne.n	4a60 <gpio_cmsdk_ahb_manage_callback+0x64>
			if (!set) {
    4a76:	b13e      	cbz	r6, 4a88 <gpio_cmsdk_ahb_manage_callback+0x8c>
	parent->next = child;
    4a78:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
    4a7a:	68a8      	ldr	r0, [r5, #8]
	parent->next = child;
    4a7c:	6023      	str	r3, [r4, #0]
	list->head = node;
    4a7e:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
    4a80:	2800      	cmp	r0, #0
    4a82:	d1eb      	bne.n	4a5c <gpio_cmsdk_ahb_manage_callback+0x60>
	list->tail = node;
    4a84:	60ac      	str	r4, [r5, #8]
}
    4a86:	e7ea      	b.n	4a5e <gpio_cmsdk_ahb_manage_callback+0x62>
				return -EINVAL;
    4a88:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&data->gpio_cb, callback, set);
    4a8c:	e7e7      	b.n	4a5e <gpio_cmsdk_ahb_manage_callback+0x62>
    4a8e:	bf00      	nop
    4a90:	0000c34e 	.word	0x0000c34e
    4a94:	0000c321 	.word	0x0000c321
    4a98:	0000b021 	.word	0x0000b021
    4a9c:	0000c357 	.word	0x0000c357
    4aa0:	0000c366 	.word	0x0000c366
    4aa4:	0000c378 	.word	0x0000c378

00004aa8 <gpio_cmsdk_ahb_isr>:
	int_stat = cfg->port->intstatus;
    4aa8:	6843      	ldr	r3, [r0, #4]
	struct gpio_cmsdk_ahb_dev_data *data = dev->data;
    4aaa:	6902      	ldr	r2, [r0, #16]
	int_stat = cfg->port->intstatus;
    4aac:	685b      	ldr	r3, [r3, #4]
{
    4aae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int_stat = cfg->port->intstatus;
    4ab2:	6b9f      	ldr	r7, [r3, #56]	; 0x38
	cfg->port->intclear = int_stat;
    4ab4:	6854      	ldr	r4, [r2, #4]
{
    4ab6:	4605      	mov	r5, r0
	cfg->port->intclear = int_stat;
    4ab8:	639f      	str	r7, [r3, #56]	; 0x38
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    4aba:	b314      	cbz	r4, 4b02 <gpio_cmsdk_ahb_isr+0x5a>
	return node->next;
    4abc:	6826      	ldr	r6, [r4, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
    4abe:	f8df 8048 	ldr.w	r8, [pc, #72]	; 4b08 <gpio_cmsdk_ahb_isr+0x60>
    4ac2:	f8df 9048 	ldr.w	r9, [pc, #72]	; 4b0c <gpio_cmsdk_ahb_isr+0x64>
    4ac6:	f8df a048 	ldr.w	sl, [pc, #72]	; 4b10 <gpio_cmsdk_ahb_isr+0x68>
		if (cb->pin_mask & pins) {
    4aca:	68a3      	ldr	r3, [r4, #8]
    4acc:	421f      	tst	r7, r3
    4ace:	d014      	beq.n	4afa <gpio_cmsdk_ahb_isr+0x52>
			__ASSERT(cb->handler, "No callback handler!");
    4ad0:	6863      	ldr	r3, [r4, #4]
    4ad2:	b963      	cbnz	r3, 4aee <gpio_cmsdk_ahb_isr+0x46>
    4ad4:	4649      	mov	r1, r9
    4ad6:	2345      	movs	r3, #69	; 0x45
    4ad8:	4642      	mov	r2, r8
    4ada:	4650      	mov	r0, sl
    4adc:	f002 febe 	bl	785c <printk>
    4ae0:	480c      	ldr	r0, [pc, #48]	; (4b14 <gpio_cmsdk_ahb_isr+0x6c>)
    4ae2:	f002 febb 	bl	785c <printk>
    4ae6:	2145      	movs	r1, #69	; 0x45
    4ae8:	4640      	mov	r0, r8
    4aea:	f003 f909 	bl	7d00 <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
    4aee:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    4af2:	4621      	mov	r1, r4
    4af4:	4628      	mov	r0, r5
    4af6:	403a      	ands	r2, r7
    4af8:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    4afa:	b116      	cbz	r6, 4b02 <gpio_cmsdk_ahb_isr+0x5a>
    4afc:	4634      	mov	r4, r6
    4afe:	6836      	ldr	r6, [r6, #0]
    4b00:	e7e3      	b.n	4aca <gpio_cmsdk_ahb_isr+0x22>
}
    4b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4b06:	bf00      	nop
    4b08:	0000c321 	.word	0x0000c321
    4b0c:	0000c38f 	.word	0x0000c38f
    4b10:	0000b021 	.word	0x0000b021
    4b14:	0000c378 	.word	0x0000c378

00004b18 <i2c_sbcon_init>:
	.configure = i2c_sbcon_configure,
	.transfer = i2c_sbcon_transfer,
};

static int i2c_sbcon_init(const struct device *dev)
{
    4b18:	b508      	push	{r3, lr}
	struct i2c_sbcon_context *context = dev->data;
	const struct i2c_sbcon_config *config = dev->config;

	i2c_bitbang_init(&context->bitbang, &io_fns, config->sbcon);
    4b1a:	6843      	ldr	r3, [r0, #4]
    4b1c:	4903      	ldr	r1, [pc, #12]	; (4b2c <i2c_sbcon_init+0x14>)
    4b1e:	681a      	ldr	r2, [r3, #0]
    4b20:	6900      	ldr	r0, [r0, #16]
    4b22:	f005 f9bd 	bl	9ea0 <i2c_bitbang_init>

	return 0;
}
    4b26:	2000      	movs	r0, #0
    4b28:	bd08      	pop	{r3, pc}
    4b2a:	bf00      	nop
    4b2c:	0000a90c 	.word	0x0000a90c

00004b30 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4b30:	4b0e      	ldr	r3, [pc, #56]	; (4b6c <z_sys_init_run_level+0x3c>)
{
    4b32:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4b34:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    4b38:	3001      	adds	r0, #1
    4b3a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    4b3e:	42a6      	cmp	r6, r4
    4b40:	d800      	bhi.n	4b44 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    4b42:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    4b44:	e9d4 3500 	ldrd	r3, r5, [r4]
    4b48:	4628      	mov	r0, r5
    4b4a:	4798      	blx	r3
		if (dev != NULL) {
    4b4c:	b165      	cbz	r5, 4b68 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
    4b4e:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
    4b50:	b130      	cbz	r0, 4b60 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    4b52:	2800      	cmp	r0, #0
    4b54:	bfb8      	it	lt
    4b56:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    4b58:	28ff      	cmp	r0, #255	; 0xff
    4b5a:	bfa8      	it	ge
    4b5c:	20ff      	movge	r0, #255	; 0xff
    4b5e:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    4b60:	785a      	ldrb	r2, [r3, #1]
    4b62:	f042 0201 	orr.w	r2, r2, #1
    4b66:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4b68:	3408      	adds	r4, #8
    4b6a:	e7e8      	b.n	4b3e <z_sys_init_run_level+0xe>
    4b6c:	0000a9a0 	.word	0x0000a9a0

00004b70 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    4b70:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (*name == 0)) {
    4b72:	4605      	mov	r5, r0
    4b74:	b910      	cbnz	r0, 4b7c <z_impl_device_get_binding+0xc>
		return NULL;
    4b76:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    4b78:	4620      	mov	r0, r4
    4b7a:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (*name == 0)) {
    4b7c:	7803      	ldrb	r3, [r0, #0]
    4b7e:	2b00      	cmp	r3, #0
    4b80:	d0f9      	beq.n	4b76 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    4b82:	4c0e      	ldr	r4, [pc, #56]	; (4bbc <z_impl_device_get_binding+0x4c>)
    4b84:	4e0e      	ldr	r6, [pc, #56]	; (4bc0 <z_impl_device_get_binding+0x50>)
    4b86:	42b4      	cmp	r4, r6
    4b88:	d108      	bne.n	4b9c <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
    4b8a:	4c0c      	ldr	r4, [pc, #48]	; (4bbc <z_impl_device_get_binding+0x4c>)
    4b8c:	42b4      	cmp	r4, r6
    4b8e:	d0f2      	beq.n	4b76 <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    4b90:	4620      	mov	r0, r4
    4b92:	f005 fa95 	bl	a0c0 <z_device_ready>
    4b96:	b950      	cbnz	r0, 4bae <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
    4b98:	3418      	adds	r4, #24
    4b9a:	e7f7      	b.n	4b8c <z_impl_device_get_binding+0x1c>
		if (z_device_ready(dev) && (dev->name == name)) {
    4b9c:	4620      	mov	r0, r4
    4b9e:	f005 fa8f 	bl	a0c0 <z_device_ready>
    4ba2:	b110      	cbz	r0, 4baa <z_impl_device_get_binding+0x3a>
    4ba4:	6823      	ldr	r3, [r4, #0]
    4ba6:	42ab      	cmp	r3, r5
    4ba8:	d0e6      	beq.n	4b78 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    4baa:	3418      	adds	r4, #24
    4bac:	e7eb      	b.n	4b86 <z_impl_device_get_binding+0x16>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    4bae:	4628      	mov	r0, r5
    4bb0:	6821      	ldr	r1, [r4, #0]
    4bb2:	f003 fbd4 	bl	835e <strcmp>
    4bb6:	2800      	cmp	r0, #0
    4bb8:	d1ee      	bne.n	4b98 <z_impl_device_get_binding+0x28>
    4bba:	e7dd      	b.n	4b78 <z_impl_device_get_binding+0x8>
    4bbc:	20000198 	.word	0x20000198
    4bc0:	20000378 	.word	0x20000378

00004bc4 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
    4bc4:	4b01      	ldr	r3, [pc, #4]	; (4bcc <z_impl_z_errno+0x8>)
    4bc6:	6898      	ldr	r0, [r3, #8]
}
    4bc8:	3084      	adds	r0, #132	; 0x84
    4bca:	4770      	bx	lr
    4bcc:	20001510 	.word	0x20001510

00004bd0 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
    4bd0:	b510      	push	{r4, lr}
    4bd2:	4604      	mov	r4, r0
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
    4bd4:	2145      	movs	r1, #69	; 0x45
    4bd6:	4803      	ldr	r0, [pc, #12]	; (4be4 <k_sys_fatal_error_handler+0x14>)
    4bd8:	f003 f89f 	bl	7d1a <z_log_minimal_printk>
	arch_system_halt(reason);
    4bdc:	4620      	mov	r0, r4
    4bde:	f005 fa78 	bl	a0d2 <arch_system_halt>
    4be2:	bf00      	nop
    4be4:	0000c401 	.word	0x0000c401

00004be8 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    4be8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4bea:	4604      	mov	r4, r0
    4bec:	460d      	mov	r5, r1
	__asm__ volatile(
    4bee:	f04f 0320 	mov.w	r3, #32
    4bf2:	f3ef 8711 	mrs	r7, BASEPRI
    4bf6:	f383 8811 	msr	BASEPRI, r3
    4bfa:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
    4bfe:	f001 fd03 	bl	6608 <z_impl_k_current_get>
	struct k_thread *thread = k_current_get();

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    4c02:	2200      	movs	r2, #0
    4c04:	2c04      	cmp	r4, #4
    4c06:	bf98      	it	ls
    4c08:	4b1e      	ldrls	r3, [pc, #120]	; (4c84 <z_fatal_error+0x9c>)
    4c0a:	4606      	mov	r6, r0
	switch (reason) {
    4c0c:	bf94      	ite	ls
    4c0e:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
    4c12:	4b1d      	ldrhi	r3, [pc, #116]	; (4c88 <z_fatal_error+0xa0>)
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    4c14:	9200      	str	r2, [sp, #0]
    4c16:	2145      	movs	r1, #69	; 0x45
    4c18:	4622      	mov	r2, r4
    4c1a:	481c      	ldr	r0, [pc, #112]	; (4c8c <z_fatal_error+0xa4>)
    4c1c:	f003 f87d 	bl	7d1a <z_log_minimal_printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    4c20:	b13d      	cbz	r5, 4c32 <z_fatal_error+0x4a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    4c22:	69eb      	ldr	r3, [r5, #28]
    4c24:	f3c3 0308 	ubfx	r3, r3, #0, #9
    4c28:	b11b      	cbz	r3, 4c32 <z_fatal_error+0x4a>
		LOG_ERR("Fault during interrupt handling\n");
    4c2a:	2145      	movs	r1, #69	; 0x45
    4c2c:	4818      	ldr	r0, [pc, #96]	; (4c90 <z_fatal_error+0xa8>)
    4c2e:	f003 f874 	bl	7d1a <z_log_minimal_printk>
	const char *thread_name = thread ? k_thread_name_get(thread) : NULL;
    4c32:	b136      	cbz	r6, 4c42 <z_fatal_error+0x5a>
    4c34:	4630      	mov	r0, r6
    4c36:	f005 fad5 	bl	a1e4 <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
    4c3a:	4603      	mov	r3, r0
    4c3c:	b108      	cbz	r0, 4c42 <z_fatal_error+0x5a>
    4c3e:	7802      	ldrb	r2, [r0, #0]
    4c40:	b902      	cbnz	r2, 4c44 <z_fatal_error+0x5c>
		thread_name = "unknown";
    4c42:	4b14      	ldr	r3, [pc, #80]	; (4c94 <z_fatal_error+0xac>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    4c44:	2145      	movs	r1, #69	; 0x45
    4c46:	4814      	ldr	r0, [pc, #80]	; (4c98 <z_fatal_error+0xb0>)
    4c48:	4632      	mov	r2, r6
    4c4a:	f003 f866 	bl	7d1a <z_log_minimal_printk>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    4c4e:	4629      	mov	r1, r5
    4c50:	4620      	mov	r0, r4
    4c52:	f7ff ffbd 	bl	4bd0 <k_sys_fatal_error_handler>
		}
#endif /* CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	} else {
		/* Test mode */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
		if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    4c56:	b14d      	cbz	r5, 4c6c <z_fatal_error+0x84>
    4c58:	69eb      	ldr	r3, [r5, #28]
    4c5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
    4c5e:	b12b      	cbz	r3, 4c6c <z_fatal_error+0x84>
	__asm__ volatile(
    4c60:	f387 8811 	msr	BASEPRI, r7
    4c64:	f3bf 8f6f 	isb	sy
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
    4c68:	b003      	add	sp, #12
    4c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (reason == K_ERR_SPURIOUS_IRQ) {
    4c6c:	2c01      	cmp	r4, #1
    4c6e:	d0f7      	beq.n	4c60 <z_fatal_error+0x78>
    4c70:	f387 8811 	msr	BASEPRI, r7
    4c74:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    4c78:	4630      	mov	r0, r6
}
    4c7a:	b003      	add	sp, #12
    4c7c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    4c80:	f7fd bf9e 	b.w	2bc0 <z_impl_k_thread_abort>
    4c84:	0000a9b8 	.word	0x0000a9b8
    4c88:	0000c415 	.word	0x0000c415
    4c8c:	0000c42b 	.word	0x0000c42b
    4c90:	0000c458 	.word	0x0000c458
    4c94:	0000c423 	.word	0x0000c423
    4c98:	0000c47e 	.word	0x0000c47e

00004c9c <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    4c9c:	4802      	ldr	r0, [pc, #8]	; (4ca8 <z_bss_zero+0xc>)
    4c9e:	4a03      	ldr	r2, [pc, #12]	; (4cac <z_bss_zero+0x10>)
    4ca0:	2100      	movs	r1, #0
    4ca2:	1a12      	subs	r2, r2, r0
    4ca4:	f003 bbbb 	b.w	841e <memset>
    4ca8:	200004a8 	.word	0x200004a8
    4cac:	20001628 	.word	0x20001628

00004cb0 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    4cb0:	2201      	movs	r2, #1
{
    4cb2:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    4cb4:	4b09      	ldr	r3, [pc, #36]	; (4cdc <bg_thread_main+0x2c>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    4cb6:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    4cb8:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    4cba:	f7ff ff39 	bl	4b30 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    4cbe:	f002 f961 	bl	6f84 <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    4cc2:	2003      	movs	r0, #3
    4cc4:	f7ff ff34 	bl	4b30 <z_sys_init_run_level>

	z_init_static_threads();
    4cc8:	f001 ffb8 	bl	6c3c <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
    4ccc:	f004 fe66 	bl	999c <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    4cd0:	4a03      	ldr	r2, [pc, #12]	; (4ce0 <bg_thread_main+0x30>)
    4cd2:	7b13      	ldrb	r3, [r2, #12]
    4cd4:	f023 0301 	bic.w	r3, r3, #1
    4cd8:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    4cda:	bd08      	pop	{r3, pc}
    4cdc:	20001626 	.word	0x20001626
    4ce0:	20001020 	.word	0x20001020

00004ce4 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    4ce4:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    4ce8:	4b39      	ldr	r3, [pc, #228]	; (4dd0 <z_cstart+0xec>)
    4cea:	b0b1      	sub	sp, #196	; 0xc4
    4cec:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    4cf0:	4d38      	ldr	r5, [pc, #224]	; (4dd4 <z_cstart+0xf0>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4cf2:	2400      	movs	r4, #0
    4cf4:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    4cf6:	f04f 0a01 	mov.w	sl, #1
    4cfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    4cfe:	616b      	str	r3, [r5, #20]
    4d00:	23e0      	movs	r3, #224	; 0xe0
    4d02:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    4d06:	77ec      	strb	r4, [r5, #31]
    4d08:	762c      	strb	r4, [r5, #24]
    4d0a:	766c      	strb	r4, [r5, #25]
    4d0c:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    4d0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
    4d10:	4e31      	ldr	r6, [pc, #196]	; (4dd8 <z_cstart+0xf4>)
    4d12:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    4d16:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    4d18:	f7fd ff1e 	bl	2b58 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    4d1c:	f7fd fc82 	bl	2624 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    4d20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4d24:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    4d26:	62eb      	str	r3, [r5, #44]	; 0x2c
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    4d28:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    4d2c:	4d2b      	ldr	r5, [pc, #172]	; (4ddc <z_cstart+0xf8>)
	dummy_thread->base.user_options = K_ESSENTIAL;
    4d2e:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
	_current_cpu->current = dummy_thread;
    4d32:	ab08      	add	r3, sp, #32
    4d34:	60ab      	str	r3, [r5, #8]
	dummy_thread->stack_info.size = 0U;
    4d36:	e9cd 442a 	strd	r4, r4, [sp, #168]	; 0xa8
#endif
#if defined(CONFIG_MMU) && defined(CONFIG_USERSPACE)
	z_kernel_map_fixup();
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    4d3a:	f005 f9c0 	bl	a0be <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    4d3e:	4620      	mov	r0, r4
    4d40:	f7ff fef6 	bl	4b30 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    4d44:	2001      	movs	r0, #1
    4d46:	f7ff fef3 	bl	4b30 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    4d4a:	f8df 9094 	ldr.w	r9, [pc, #148]	; 4de0 <z_cstart+0xfc>
	z_sched_init();
    4d4e:	f001 fba1 	bl	6494 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    4d52:	4b24      	ldr	r3, [pc, #144]	; (4de4 <z_cstart+0x100>)
	_kernel.ready_q.cache = &z_main_thread;
    4d54:	622e      	str	r6, [r5, #32]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    4d56:	f44f 6280 	mov.w	r2, #1024	; 0x400
    4d5a:	4923      	ldr	r1, [pc, #140]	; (4de8 <z_cstart+0x104>)
    4d5c:	9305      	str	r3, [sp, #20]
    4d5e:	4630      	mov	r0, r6
    4d60:	464b      	mov	r3, r9
    4d62:	e9cd 4a03 	strd	r4, sl, [sp, #12]
    4d66:	e9cd 4401 	strd	r4, r4, [sp, #4]
    4d6a:	9400      	str	r4, [sp, #0]
    4d6c:	f001 fea0 	bl	6ab0 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    4d70:	7b73      	ldrb	r3, [r6, #13]
    4d72:	4680      	mov	r8, r0
    4d74:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
    4d78:	4630      	mov	r0, r6
	snprintk(tname, 8, "idle %02d", i);
    4d7a:	f10d 0b18 	add.w	fp, sp, #24
    4d7e:	7373      	strb	r3, [r6, #13]
	z_ready_thread(&z_main_thread);
    4d80:	f001 f9aa 	bl	60d8 <z_ready_thread>
	snprintk(tname, 8, "idle %02d", i);
    4d84:	4623      	mov	r3, r4
    4d86:	2108      	movs	r1, #8
    4d88:	4a18      	ldr	r2, [pc, #96]	; (4dec <z_cstart+0x108>)
    4d8a:	4658      	mov	r0, fp
    4d8c:	f002 fd73 	bl	7876 <snprintk>
	z_setup_new_thread(thread, stack,
    4d90:	230f      	movs	r3, #15
    4d92:	4f17      	ldr	r7, [pc, #92]	; (4df0 <z_cstart+0x10c>)
    4d94:	f44f 7280 	mov.w	r2, #256	; 0x100
    4d98:	e9cd 4302 	strd	r4, r3, [sp, #8]
    4d9c:	4915      	ldr	r1, [pc, #84]	; (4df4 <z_cstart+0x110>)
    4d9e:	4b16      	ldr	r3, [pc, #88]	; (4df8 <z_cstart+0x114>)
    4da0:	4638      	mov	r0, r7
    4da2:	e9cd ab04 	strd	sl, fp, [sp, #16]
    4da6:	e9cd 5400 	strd	r5, r4, [sp]
    4daa:	f001 fe81 	bl	6ab0 <z_setup_new_thread>
    4dae:	7b7b      	ldrb	r3, [r7, #13]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    4db0:	464a      	mov	r2, r9
    4db2:	f023 0304 	bic.w	r3, r3, #4
    4db6:	737b      	strb	r3, [r7, #13]
		_kernel.cpus[i].irq_stack =
    4db8:	4b05      	ldr	r3, [pc, #20]	; (4dd0 <z_cstart+0xec>)
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    4dba:	4641      	mov	r1, r8
		_kernel.cpus[i].irq_stack =
    4dbc:	606b      	str	r3, [r5, #4]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    4dbe:	f105 0318 	add.w	r3, r5, #24
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    4dc2:	4630      	mov	r0, r6
	list->tail = (sys_dnode_t *)list;
    4dc4:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    4dc8:	60ef      	str	r7, [r5, #12]
		_kernel.cpus[i].id = i;
    4dca:	752c      	strb	r4, [r5, #20]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    4dcc:	f7fd fc10 	bl	25f0 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    4dd0:	200040c0 	.word	0x200040c0
    4dd4:	e000ed00 	.word	0xe000ed00
    4dd8:	20001020 	.word	0x20001020
    4ddc:	20001510 	.word	0x20001510
    4de0:	00004cb1 	.word	0x00004cb1
    4de4:	0000c4e5 	.word	0x0000c4e5
    4de8:	20003360 	.word	0x20003360
    4dec:	0000c4ea 	.word	0x0000c4ea
    4df0:	20000f80 	.word	0x20000f80
    4df4:	20003780 	.word	0x20003780
    4df8:	0000a365 	.word	0x0000a365

00004dfc <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
    4dfc:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    4dfe:	4c0e      	ldr	r4, [pc, #56]	; (4e38 <statics_init+0x3c>)
    4e00:	4d0e      	ldr	r5, [pc, #56]	; (4e3c <statics_init+0x40>)
    4e02:	4e0f      	ldr	r6, [pc, #60]	; (4e40 <statics_init+0x44>)
    4e04:	42ac      	cmp	r4, r5
    4e06:	d90c      	bls.n	4e22 <statics_init+0x26>
    4e08:	490e      	ldr	r1, [pc, #56]	; (4e44 <statics_init+0x48>)
    4e0a:	2315      	movs	r3, #21
    4e0c:	4632      	mov	r2, r6
    4e0e:	480e      	ldr	r0, [pc, #56]	; (4e48 <statics_init+0x4c>)
    4e10:	f002 fd24 	bl	785c <printk>
    4e14:	480d      	ldr	r0, [pc, #52]	; (4e4c <statics_init+0x50>)
    4e16:	f002 fd21 	bl	785c <printk>
    4e1a:	2115      	movs	r1, #21
    4e1c:	4630      	mov	r0, r6
    4e1e:	f002 ff6f 	bl	7d00 <assert_post_action>
    4e22:	42ac      	cmp	r4, r5
    4e24:	d301      	bcc.n	4e2a <statics_init+0x2e>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
    4e26:	2000      	movs	r0, #0
    4e28:	bd70      	pop	{r4, r5, r6, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    4e2a:	4620      	mov	r0, r4
    4e2c:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    4e30:	f005 f958 	bl	a0e4 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    4e34:	3418      	adds	r4, #24
    4e36:	e7e5      	b.n	4e04 <statics_init+0x8>
    4e38:	200003b0 	.word	0x200003b0
    4e3c:	200003b0 	.word	0x200003b0
    4e40:	0000c4f7 	.word	0x0000c4f7
    4e44:	0000c519 	.word	0x0000c519
    4e48:	0000b021 	.word	0x0000b021
    4e4c:	0000c0a7 	.word	0x0000c0a7

00004e50 <k_heap_aligned_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
    4e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4e54:	b085      	sub	sp, #20
    4e56:	e9dd 970e 	ldrd	r9, r7, [sp, #56]	; 0x38
    4e5a:	4606      	mov	r6, r0
    4e5c:	468a      	mov	sl, r1
	int64_t now, end = z_timeout_end_calc(timeout);
    4e5e:	4648      	mov	r0, r9
    4e60:	4639      	mov	r1, r7
{
    4e62:	4690      	mov	r8, r2
	int64_t now, end = z_timeout_end_calc(timeout);
    4e64:	f005 fa26 	bl	a2b4 <z_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
    4e68:	f106 0414 	add.w	r4, r6, #20
	int64_t now, end = z_timeout_end_calc(timeout);
    4e6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
	__asm__ volatile(
    4e70:	f04f 0320 	mov.w	r3, #32
    4e74:	f3ef 8511 	mrs	r5, BASEPRI
    4e78:	f383 8811 	msr	BASEPRI, r3
    4e7c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4e80:	4620      	mov	r0, r4
    4e82:	f001 ff5f 	bl	6d44 <z_spin_lock_valid>
    4e86:	b968      	cbnz	r0, 4ea4 <k_heap_aligned_alloc+0x54>
    4e88:	2381      	movs	r3, #129	; 0x81
    4e8a:	4a3c      	ldr	r2, [pc, #240]	; (4f7c <k_heap_aligned_alloc+0x12c>)
    4e8c:	493c      	ldr	r1, [pc, #240]	; (4f80 <k_heap_aligned_alloc+0x130>)
    4e8e:	483d      	ldr	r0, [pc, #244]	; (4f84 <k_heap_aligned_alloc+0x134>)
    4e90:	f002 fce4 	bl	785c <printk>
    4e94:	4621      	mov	r1, r4
    4e96:	483c      	ldr	r0, [pc, #240]	; (4f88 <k_heap_aligned_alloc+0x138>)
    4e98:	f002 fce0 	bl	785c <printk>
    4e9c:	2181      	movs	r1, #129	; 0x81
    4e9e:	4837      	ldr	r0, [pc, #220]	; (4f7c <k_heap_aligned_alloc+0x12c>)
    4ea0:	f002 ff2e 	bl	7d00 <assert_post_action>
	z_spin_lock_set_owner(l);
    4ea4:	4620      	mov	r0, r4
    4ea6:	f001 ff69 	bl	6d7c <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4eaa:	f3ef 8305 	mrs	r3, IPSR

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
    4eae:	b17b      	cbz	r3, 4ed0 <k_heap_aligned_alloc+0x80>
    4eb0:	ea59 0307 	orrs.w	r3, r9, r7
    4eb4:	d00c      	beq.n	4ed0 <k_heap_aligned_alloc+0x80>
    4eb6:	4935      	ldr	r1, [pc, #212]	; (4f8c <k_heap_aligned_alloc+0x13c>)
    4eb8:	2324      	movs	r3, #36	; 0x24
    4eba:	4a35      	ldr	r2, [pc, #212]	; (4f90 <k_heap_aligned_alloc+0x140>)
    4ebc:	4831      	ldr	r0, [pc, #196]	; (4f84 <k_heap_aligned_alloc+0x134>)
    4ebe:	f002 fccd 	bl	785c <printk>
    4ec2:	4834      	ldr	r0, [pc, #208]	; (4f94 <k_heap_aligned_alloc+0x144>)
    4ec4:	f002 fcca 	bl	785c <printk>
    4ec8:	2124      	movs	r1, #36	; 0x24
    4eca:	4831      	ldr	r0, [pc, #196]	; (4f90 <k_heap_aligned_alloc+0x140>)
    4ecc:	f002 ff18 	bl	7d00 <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4ed0:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 4f7c <k_heap_aligned_alloc+0x12c>
    4ed4:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 4f84 <k_heap_aligned_alloc+0x134>

	while (ret == NULL) {
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
    4ed8:	4642      	mov	r2, r8
    4eda:	4651      	mov	r1, sl
    4edc:	4630      	mov	r0, r6
    4ede:	f7fc f8ab 	bl	1038 <sys_heap_aligned_alloc>
    4ee2:	4607      	mov	r7, r0

		now = z_tick_get();
    4ee4:	f002 fba0 	bl	7628 <z_tick_get>
		if ((ret != NULL) || ((end - now) <= 0)) {
    4ee8:	b1cf      	cbz	r7, 4f1e <k_heap_aligned_alloc+0xce>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4eea:	4620      	mov	r0, r4
    4eec:	f001 ff38 	bl	6d60 <z_spin_unlock_valid>
    4ef0:	b968      	cbnz	r0, 4f0e <k_heap_aligned_alloc+0xbe>
    4ef2:	23ac      	movs	r3, #172	; 0xac
    4ef4:	4a21      	ldr	r2, [pc, #132]	; (4f7c <k_heap_aligned_alloc+0x12c>)
    4ef6:	4928      	ldr	r1, [pc, #160]	; (4f98 <k_heap_aligned_alloc+0x148>)
    4ef8:	4822      	ldr	r0, [pc, #136]	; (4f84 <k_heap_aligned_alloc+0x134>)
    4efa:	f002 fcaf 	bl	785c <printk>
    4efe:	4621      	mov	r1, r4
    4f00:	4826      	ldr	r0, [pc, #152]	; (4f9c <k_heap_aligned_alloc+0x14c>)
    4f02:	f002 fcab 	bl	785c <printk>
    4f06:	21ac      	movs	r1, #172	; 0xac
    4f08:	481c      	ldr	r0, [pc, #112]	; (4f7c <k_heap_aligned_alloc+0x12c>)
    4f0a:	f002 fef9 	bl	7d00 <assert_post_action>
	__asm__ volatile(
    4f0e:	f385 8811 	msr	BASEPRI, r5
    4f12:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
    4f16:	4638      	mov	r0, r7
    4f18:	b005      	add	sp, #20
    4f1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((ret != NULL) || ((end - now) <= 0)) {
    4f1e:	9b02      	ldr	r3, [sp, #8]
    4f20:	1a18      	subs	r0, r3, r0
    4f22:	9b03      	ldr	r3, [sp, #12]
    4f24:	eb63 0101 	sbc.w	r1, r3, r1
    4f28:	2801      	cmp	r0, #1
    4f2a:	f171 0300 	sbcs.w	r3, r1, #0
    4f2e:	dbdc      	blt.n	4eea <k_heap_aligned_alloc+0x9a>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    4f30:	e9cd 0100 	strd	r0, r1, [sp]
    4f34:	f106 020c 	add.w	r2, r6, #12
    4f38:	4629      	mov	r1, r5
    4f3a:	4620      	mov	r0, r4
    4f3c:	f000 ff0a 	bl	5d54 <z_pend_curr>
	__asm__ volatile(
    4f40:	f04f 0320 	mov.w	r3, #32
    4f44:	f3ef 8511 	mrs	r5, BASEPRI
    4f48:	f383 8811 	msr	BASEPRI, r3
    4f4c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4f50:	4620      	mov	r0, r4
    4f52:	f001 fef7 	bl	6d44 <z_spin_lock_valid>
    4f56:	b968      	cbnz	r0, 4f74 <k_heap_aligned_alloc+0x124>
    4f58:	2381      	movs	r3, #129	; 0x81
    4f5a:	464a      	mov	r2, r9
    4f5c:	4658      	mov	r0, fp
    4f5e:	4908      	ldr	r1, [pc, #32]	; (4f80 <k_heap_aligned_alloc+0x130>)
    4f60:	f002 fc7c 	bl	785c <printk>
    4f64:	4621      	mov	r1, r4
    4f66:	4808      	ldr	r0, [pc, #32]	; (4f88 <k_heap_aligned_alloc+0x138>)
    4f68:	f002 fc78 	bl	785c <printk>
    4f6c:	2181      	movs	r1, #129	; 0x81
    4f6e:	4648      	mov	r0, r9
    4f70:	f002 fec6 	bl	7d00 <assert_post_action>
	z_spin_lock_set_owner(l);
    4f74:	4620      	mov	r0, r4
    4f76:	f001 ff01 	bl	6d7c <z_spin_lock_set_owner>
	return k;
    4f7a:	e7ad      	b.n	4ed8 <k_heap_aligned_alloc+0x88>
    4f7c:	0000b7ac 	.word	0x0000b7ac
    4f80:	0000b7d2 	.word	0x0000b7d2
    4f84:	0000b021 	.word	0x0000b021
    4f88:	0000b7e7 	.word	0x0000b7e7
    4f8c:	0000c52f 	.word	0x0000c52f
    4f90:	0000c4f7 	.word	0x0000c4f7
    4f94:	0000bfd5 	.word	0x0000bfd5
    4f98:	0000b7ff 	.word	0x0000b7ff
    4f9c:	0000b816 	.word	0x0000b816

00004fa0 <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
    4fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4fa2:	4605      	mov	r5, r0
    4fa4:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
    4fa6:	f100 0414 	add.w	r4, r0, #20
    4faa:	f04f 0320 	mov.w	r3, #32
    4fae:	f3ef 8711 	mrs	r7, BASEPRI
    4fb2:	f383 8811 	msr	BASEPRI, r3
    4fb6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4fba:	4620      	mov	r0, r4
    4fbc:	f001 fec2 	bl	6d44 <z_spin_lock_valid>
    4fc0:	b968      	cbnz	r0, 4fde <k_heap_free+0x3e>
    4fc2:	2381      	movs	r3, #129	; 0x81
    4fc4:	4a1a      	ldr	r2, [pc, #104]	; (5030 <k_heap_free+0x90>)
    4fc6:	491b      	ldr	r1, [pc, #108]	; (5034 <k_heap_free+0x94>)
    4fc8:	481b      	ldr	r0, [pc, #108]	; (5038 <k_heap_free+0x98>)
    4fca:	f002 fc47 	bl	785c <printk>
    4fce:	4621      	mov	r1, r4
    4fd0:	481a      	ldr	r0, [pc, #104]	; (503c <k_heap_free+0x9c>)
    4fd2:	f002 fc43 	bl	785c <printk>
    4fd6:	2181      	movs	r1, #129	; 0x81
    4fd8:	4815      	ldr	r0, [pc, #84]	; (5030 <k_heap_free+0x90>)
    4fda:	f002 fe91 	bl	7d00 <assert_post_action>
	z_spin_lock_set_owner(l);
    4fde:	4620      	mov	r0, r4
    4fe0:	f001 fecc 	bl	6d7c <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
    4fe4:	4628      	mov	r0, r5
    4fe6:	4631      	mov	r1, r6
    4fe8:	f7fb ffd0 	bl	f8c <sys_heap_free>

	if (z_unpend_all(&h->wait_q) != 0) {
    4fec:	f105 000c 	add.w	r0, r5, #12
    4ff0:	f005 f8d2 	bl	a198 <z_unpend_all>
    4ff4:	b128      	cbz	r0, 5002 <k_heap_free+0x62>
		z_reschedule(&h->lock, key);
    4ff6:	4639      	mov	r1, r7
    4ff8:	4620      	mov	r0, r4
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
    4ffa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
    4ffe:	f000 bc6f 	b.w	58e0 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5002:	4620      	mov	r0, r4
    5004:	f001 feac 	bl	6d60 <z_spin_unlock_valid>
    5008:	b968      	cbnz	r0, 5026 <k_heap_free+0x86>
    500a:	23ac      	movs	r3, #172	; 0xac
    500c:	4a08      	ldr	r2, [pc, #32]	; (5030 <k_heap_free+0x90>)
    500e:	490c      	ldr	r1, [pc, #48]	; (5040 <k_heap_free+0xa0>)
    5010:	4809      	ldr	r0, [pc, #36]	; (5038 <k_heap_free+0x98>)
    5012:	f002 fc23 	bl	785c <printk>
    5016:	4621      	mov	r1, r4
    5018:	480a      	ldr	r0, [pc, #40]	; (5044 <k_heap_free+0xa4>)
    501a:	f002 fc1f 	bl	785c <printk>
    501e:	21ac      	movs	r1, #172	; 0xac
    5020:	4803      	ldr	r0, [pc, #12]	; (5030 <k_heap_free+0x90>)
    5022:	f002 fe6d 	bl	7d00 <assert_post_action>
	__asm__ volatile(
    5026:	f387 8811 	msr	BASEPRI, r7
    502a:	f3bf 8f6f 	isb	sy
}
    502e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5030:	0000b7ac 	.word	0x0000b7ac
    5034:	0000b7d2 	.word	0x0000b7d2
    5038:	0000b021 	.word	0x0000b021
    503c:	0000b7e7 	.word	0x0000b7e7
    5040:	0000b7ff 	.word	0x0000b7ff
    5044:	0000b816 	.word	0x0000b816

00005048 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    5048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    504a:	4c16      	ldr	r4, [pc, #88]	; (50a4 <init_mem_slab_module+0x5c>)
    504c:	4d16      	ldr	r5, [pc, #88]	; (50a8 <init_mem_slab_module+0x60>)
    504e:	4e17      	ldr	r6, [pc, #92]	; (50ac <init_mem_slab_module+0x64>)
    5050:	42ac      	cmp	r4, r5
    5052:	d90c      	bls.n	506e <init_mem_slab_module+0x26>
    5054:	4916      	ldr	r1, [pc, #88]	; (50b0 <init_mem_slab_module+0x68>)
    5056:	2342      	movs	r3, #66	; 0x42
    5058:	4632      	mov	r2, r6
    505a:	4816      	ldr	r0, [pc, #88]	; (50b4 <init_mem_slab_module+0x6c>)
    505c:	f002 fbfe 	bl	785c <printk>
    5060:	4815      	ldr	r0, [pc, #84]	; (50b8 <init_mem_slab_module+0x70>)
    5062:	f002 fbfb 	bl	785c <printk>
    5066:	2142      	movs	r1, #66	; 0x42
    5068:	4630      	mov	r0, r6
    506a:	f002 fe49 	bl	7d00 <assert_post_action>
    506e:	42ac      	cmp	r4, r5
    5070:	d301      	bcc.n	5076 <init_mem_slab_module+0x2e>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
    5072:	2000      	movs	r0, #0
	return rc;
}
    5074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    5076:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    507a:	ea41 0302 	orr.w	r3, r1, r2
    507e:	f013 0303 	ands.w	r3, r3, #3
    5082:	d10b      	bne.n	509c <init_mem_slab_module+0x54>
	for (j = 0U; j < slab->num_blocks; j++) {
    5084:	68a0      	ldr	r0, [r4, #8]
	slab->free_list = NULL;
    5086:	6163      	str	r3, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    5088:	4283      	cmp	r3, r0
    508a:	d101      	bne.n	5090 <init_mem_slab_module+0x48>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    508c:	341c      	adds	r4, #28
    508e:	e7df      	b.n	5050 <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
    5090:	6967      	ldr	r7, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    5092:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
    5094:	600f      	str	r7, [r1, #0]
		slab->free_list = p;
    5096:	6161      	str	r1, [r4, #20]
		p += slab->block_size;
    5098:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    509a:	e7f5      	b.n	5088 <init_mem_slab_module+0x40>
	return rc;
    509c:	f06f 0015 	mvn.w	r0, #21
    50a0:	e7e8      	b.n	5074 <init_mem_slab_module+0x2c>
    50a2:	bf00      	nop
    50a4:	20000378 	.word	0x20000378
    50a8:	200003b0 	.word	0x200003b0
    50ac:	0000c574 	.word	0x0000c574
    50b0:	0000c599 	.word	0x0000c599
    50b4:	0000b021 	.word	0x0000b021
    50b8:	0000c0a7 	.word	0x0000c0a7

000050bc <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    50bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    50c0:	4604      	mov	r4, r0
    50c2:	460d      	mov	r5, r1
    50c4:	4617      	mov	r7, r2
    50c6:	461e      	mov	r6, r3
	__asm__ volatile(
    50c8:	f04f 0320 	mov.w	r3, #32
    50cc:	f3ef 8811 	mrs	r8, BASEPRI
    50d0:	f383 8811 	msr	BASEPRI, r3
    50d4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    50d8:	4826      	ldr	r0, [pc, #152]	; (5174 <k_mem_slab_alloc+0xb8>)
    50da:	f001 fe33 	bl	6d44 <z_spin_lock_valid>
    50de:	b968      	cbnz	r0, 50fc <k_mem_slab_alloc+0x40>
    50e0:	2381      	movs	r3, #129	; 0x81
    50e2:	4a25      	ldr	r2, [pc, #148]	; (5178 <k_mem_slab_alloc+0xbc>)
    50e4:	4925      	ldr	r1, [pc, #148]	; (517c <k_mem_slab_alloc+0xc0>)
    50e6:	4826      	ldr	r0, [pc, #152]	; (5180 <k_mem_slab_alloc+0xc4>)
    50e8:	f002 fbb8 	bl	785c <printk>
    50ec:	4921      	ldr	r1, [pc, #132]	; (5174 <k_mem_slab_alloc+0xb8>)
    50ee:	4825      	ldr	r0, [pc, #148]	; (5184 <k_mem_slab_alloc+0xc8>)
    50f0:	f002 fbb4 	bl	785c <printk>
    50f4:	2181      	movs	r1, #129	; 0x81
    50f6:	4820      	ldr	r0, [pc, #128]	; (5178 <k_mem_slab_alloc+0xbc>)
    50f8:	f002 fe02 	bl	7d00 <assert_post_action>
	z_spin_lock_set_owner(l);
    50fc:	481d      	ldr	r0, [pc, #116]	; (5174 <k_mem_slab_alloc+0xb8>)
    50fe:	f001 fe3d 	bl	6d7c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
    5102:	6963      	ldr	r3, [r4, #20]
    5104:	b1eb      	cbz	r3, 5142 <k_mem_slab_alloc+0x86>
		/* take a free block */
		*mem = slab->free_list;
    5106:	602b      	str	r3, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
    5108:	681b      	ldr	r3, [r3, #0]
    510a:	6163      	str	r3, [r4, #20]
		slab->num_used++;
    510c:	69a3      	ldr	r3, [r4, #24]
    510e:	3301      	adds	r3, #1
    5110:	61a3      	str	r3, [r4, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    5112:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5114:	4817      	ldr	r0, [pc, #92]	; (5174 <k_mem_slab_alloc+0xb8>)
    5116:	f001 fe23 	bl	6d60 <z_spin_unlock_valid>
    511a:	b968      	cbnz	r0, 5138 <k_mem_slab_alloc+0x7c>
    511c:	23ac      	movs	r3, #172	; 0xac
    511e:	4a16      	ldr	r2, [pc, #88]	; (5178 <k_mem_slab_alloc+0xbc>)
    5120:	4919      	ldr	r1, [pc, #100]	; (5188 <k_mem_slab_alloc+0xcc>)
    5122:	4817      	ldr	r0, [pc, #92]	; (5180 <k_mem_slab_alloc+0xc4>)
    5124:	f002 fb9a 	bl	785c <printk>
    5128:	4912      	ldr	r1, [pc, #72]	; (5174 <k_mem_slab_alloc+0xb8>)
    512a:	4818      	ldr	r0, [pc, #96]	; (518c <k_mem_slab_alloc+0xd0>)
    512c:	f002 fb96 	bl	785c <printk>
    5130:	21ac      	movs	r1, #172	; 0xac
    5132:	4811      	ldr	r0, [pc, #68]	; (5178 <k_mem_slab_alloc+0xbc>)
    5134:	f002 fde4 	bl	7d00 <assert_post_action>
	__asm__ volatile(
    5138:	f388 8811 	msr	BASEPRI, r8
    513c:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
    5140:	e013      	b.n	516a <k_mem_slab_alloc+0xae>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    5142:	ea57 0206 	orrs.w	r2, r7, r6
    5146:	d103      	bne.n	5150 <k_mem_slab_alloc+0x94>
		result = -ENOMEM;
    5148:	f06f 040b 	mvn.w	r4, #11
		*mem = NULL;
    514c:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
    514e:	e7e1      	b.n	5114 <k_mem_slab_alloc+0x58>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
    5150:	4622      	mov	r2, r4
    5152:	4641      	mov	r1, r8
    5154:	e9cd 7600 	strd	r7, r6, [sp]
    5158:	4806      	ldr	r0, [pc, #24]	; (5174 <k_mem_slab_alloc+0xb8>)
    515a:	f000 fdfb 	bl	5d54 <z_pend_curr>
		if (result == 0) {
    515e:	4604      	mov	r4, r0
    5160:	b918      	cbnz	r0, 516a <k_mem_slab_alloc+0xae>
			*mem = _current->base.swap_data;
    5162:	4b0b      	ldr	r3, [pc, #44]	; (5190 <k_mem_slab_alloc+0xd4>)
    5164:	689b      	ldr	r3, [r3, #8]
    5166:	695b      	ldr	r3, [r3, #20]
    5168:	602b      	str	r3, [r5, #0]
}
    516a:	4620      	mov	r0, r4
    516c:	b002      	add	sp, #8
    516e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5172:	bf00      	nop
    5174:	20001508 	.word	0x20001508
    5178:	0000b7ac 	.word	0x0000b7ac
    517c:	0000b7d2 	.word	0x0000b7d2
    5180:	0000b021 	.word	0x0000b021
    5184:	0000b7e7 	.word	0x0000b7e7
    5188:	0000b7ff 	.word	0x0000b7ff
    518c:	0000b816 	.word	0x0000b816
    5190:	20001510 	.word	0x20001510

00005194 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    5194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5196:	4604      	mov	r4, r0
    5198:	460d      	mov	r5, r1
	__asm__ volatile(
    519a:	f04f 0320 	mov.w	r3, #32
    519e:	f3ef 8611 	mrs	r6, BASEPRI
    51a2:	f383 8811 	msr	BASEPRI, r3
    51a6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    51aa:	4823      	ldr	r0, [pc, #140]	; (5238 <k_mem_slab_free+0xa4>)
    51ac:	f001 fdca 	bl	6d44 <z_spin_lock_valid>
    51b0:	b968      	cbnz	r0, 51ce <k_mem_slab_free+0x3a>
    51b2:	2381      	movs	r3, #129	; 0x81
    51b4:	4a21      	ldr	r2, [pc, #132]	; (523c <k_mem_slab_free+0xa8>)
    51b6:	4922      	ldr	r1, [pc, #136]	; (5240 <k_mem_slab_free+0xac>)
    51b8:	4822      	ldr	r0, [pc, #136]	; (5244 <k_mem_slab_free+0xb0>)
    51ba:	f002 fb4f 	bl	785c <printk>
    51be:	491e      	ldr	r1, [pc, #120]	; (5238 <k_mem_slab_free+0xa4>)
    51c0:	4821      	ldr	r0, [pc, #132]	; (5248 <k_mem_slab_free+0xb4>)
    51c2:	f002 fb4b 	bl	785c <printk>
    51c6:	2181      	movs	r1, #129	; 0x81
    51c8:	481c      	ldr	r0, [pc, #112]	; (523c <k_mem_slab_free+0xa8>)
    51ca:	f002 fd99 	bl	7d00 <assert_post_action>
	z_spin_lock_set_owner(l);
    51ce:	481a      	ldr	r0, [pc, #104]	; (5238 <k_mem_slab_free+0xa4>)
    51d0:	f001 fdd4 	bl	6d7c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (slab->free_list == NULL) {
    51d4:	6967      	ldr	r7, [r4, #20]
    51d6:	b97f      	cbnz	r7, 51f8 <k_mem_slab_free+0x64>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    51d8:	4620      	mov	r0, r4
    51da:	f001 f90b 	bl	63f4 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    51de:	b158      	cbz	r0, 51f8 <k_mem_slab_free+0x64>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    51e0:	682a      	ldr	r2, [r5, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    51e2:	f8c0 709c 	str.w	r7, [r0, #156]	; 0x9c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    51e6:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    51e8:	f000 ff76 	bl	60d8 <z_ready_thread>
			z_reschedule(&lock, key);
    51ec:	4631      	mov	r1, r6
	}
	**(char ***) mem = slab->free_list;
	slab->free_list = *(char **) mem;
	slab->num_used--;
	k_spin_unlock(&lock, key);
}
    51ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&lock, key);
    51f2:	4811      	ldr	r0, [pc, #68]	; (5238 <k_mem_slab_free+0xa4>)
    51f4:	f000 bb74 	b.w	58e0 <z_reschedule>
	**(char ***) mem = slab->free_list;
    51f8:	682b      	ldr	r3, [r5, #0]
    51fa:	6962      	ldr	r2, [r4, #20]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    51fc:	480e      	ldr	r0, [pc, #56]	; (5238 <k_mem_slab_free+0xa4>)
    51fe:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    5200:	682b      	ldr	r3, [r5, #0]
    5202:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    5204:	69a3      	ldr	r3, [r4, #24]
    5206:	3b01      	subs	r3, #1
    5208:	61a3      	str	r3, [r4, #24]
    520a:	f001 fda9 	bl	6d60 <z_spin_unlock_valid>
    520e:	b968      	cbnz	r0, 522c <k_mem_slab_free+0x98>
    5210:	23ac      	movs	r3, #172	; 0xac
    5212:	4a0a      	ldr	r2, [pc, #40]	; (523c <k_mem_slab_free+0xa8>)
    5214:	490d      	ldr	r1, [pc, #52]	; (524c <k_mem_slab_free+0xb8>)
    5216:	480b      	ldr	r0, [pc, #44]	; (5244 <k_mem_slab_free+0xb0>)
    5218:	f002 fb20 	bl	785c <printk>
    521c:	4906      	ldr	r1, [pc, #24]	; (5238 <k_mem_slab_free+0xa4>)
    521e:	480c      	ldr	r0, [pc, #48]	; (5250 <k_mem_slab_free+0xbc>)
    5220:	f002 fb1c 	bl	785c <printk>
    5224:	21ac      	movs	r1, #172	; 0xac
    5226:	4805      	ldr	r0, [pc, #20]	; (523c <k_mem_slab_free+0xa8>)
    5228:	f002 fd6a 	bl	7d00 <assert_post_action>
	__asm__ volatile(
    522c:	f386 8811 	msr	BASEPRI, r6
    5230:	f3bf 8f6f 	isb	sy
}
    5234:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5236:	bf00      	nop
    5238:	20001508 	.word	0x20001508
    523c:	0000b7ac 	.word	0x0000b7ac
    5240:	0000b7d2 	.word	0x0000b7d2
    5244:	0000b021 	.word	0x0000b021
    5248:	0000b7e7 	.word	0x0000b7e7
    524c:	0000b7ff 	.word	0x0000b7ff
    5250:	0000b816 	.word	0x0000b816

00005254 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    5254:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    5258:	4604      	mov	r4, r0
    525a:	4617      	mov	r7, r2
    525c:	461e      	mov	r6, r3
    525e:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    5262:	b163      	cbz	r3, 527e <z_impl_k_mutex_lock+0x2a>
    5264:	496a      	ldr	r1, [pc, #424]	; (5410 <z_impl_k_mutex_lock+0x1bc>)
    5266:	237d      	movs	r3, #125	; 0x7d
    5268:	4a6a      	ldr	r2, [pc, #424]	; (5414 <z_impl_k_mutex_lock+0x1c0>)
    526a:	486b      	ldr	r0, [pc, #428]	; (5418 <z_impl_k_mutex_lock+0x1c4>)
    526c:	f002 faf6 	bl	785c <printk>
    5270:	486a      	ldr	r0, [pc, #424]	; (541c <z_impl_k_mutex_lock+0x1c8>)
    5272:	f002 faf3 	bl	785c <printk>
    5276:	217d      	movs	r1, #125	; 0x7d
    5278:	4866      	ldr	r0, [pc, #408]	; (5414 <z_impl_k_mutex_lock+0x1c0>)
    527a:	f002 fd41 	bl	7d00 <assert_post_action>
	__asm__ volatile(
    527e:	f04f 0320 	mov.w	r3, #32
    5282:	f3ef 8811 	mrs	r8, BASEPRI
    5286:	f383 8811 	msr	BASEPRI, r3
    528a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    528e:	4864      	ldr	r0, [pc, #400]	; (5420 <z_impl_k_mutex_lock+0x1cc>)
    5290:	f001 fd58 	bl	6d44 <z_spin_lock_valid>
    5294:	b968      	cbnz	r0, 52b2 <z_impl_k_mutex_lock+0x5e>
    5296:	2381      	movs	r3, #129	; 0x81
    5298:	4a62      	ldr	r2, [pc, #392]	; (5424 <z_impl_k_mutex_lock+0x1d0>)
    529a:	4963      	ldr	r1, [pc, #396]	; (5428 <z_impl_k_mutex_lock+0x1d4>)
    529c:	485e      	ldr	r0, [pc, #376]	; (5418 <z_impl_k_mutex_lock+0x1c4>)
    529e:	f002 fadd 	bl	785c <printk>
    52a2:	495f      	ldr	r1, [pc, #380]	; (5420 <z_impl_k_mutex_lock+0x1cc>)
    52a4:	4861      	ldr	r0, [pc, #388]	; (542c <z_impl_k_mutex_lock+0x1d8>)
    52a6:	f002 fad9 	bl	785c <printk>
    52aa:	2181      	movs	r1, #129	; 0x81
    52ac:	485d      	ldr	r0, [pc, #372]	; (5424 <z_impl_k_mutex_lock+0x1d0>)
    52ae:	f002 fd27 	bl	7d00 <assert_post_action>
	z_spin_lock_set_owner(l);
    52b2:	485b      	ldr	r0, [pc, #364]	; (5420 <z_impl_k_mutex_lock+0x1cc>)
    52b4:	f001 fd62 	bl	6d7c <z_spin_lock_set_owner>

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    52b8:	68e3      	ldr	r3, [r4, #12]
    52ba:	4a5d      	ldr	r2, [pc, #372]	; (5430 <z_impl_k_mutex_lock+0x1dc>)
    52bc:	b1fb      	cbz	r3, 52fe <z_impl_k_mutex_lock+0xaa>
    52be:	68a0      	ldr	r0, [r4, #8]
    52c0:	6891      	ldr	r1, [r2, #8]
    52c2:	4288      	cmp	r0, r1
    52c4:	d03d      	beq.n	5342 <z_impl_k_mutex_lock+0xee>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    52c6:	ea57 0306 	orrs.w	r3, r7, r6
    52ca:	d13c      	bne.n	5346 <z_impl_k_mutex_lock+0xf2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    52cc:	4854      	ldr	r0, [pc, #336]	; (5420 <z_impl_k_mutex_lock+0x1cc>)
    52ce:	f001 fd47 	bl	6d60 <z_spin_unlock_valid>
    52d2:	b968      	cbnz	r0, 52f0 <z_impl_k_mutex_lock+0x9c>
    52d4:	23ac      	movs	r3, #172	; 0xac
    52d6:	4a53      	ldr	r2, [pc, #332]	; (5424 <z_impl_k_mutex_lock+0x1d0>)
    52d8:	4956      	ldr	r1, [pc, #344]	; (5434 <z_impl_k_mutex_lock+0x1e0>)
    52da:	484f      	ldr	r0, [pc, #316]	; (5418 <z_impl_k_mutex_lock+0x1c4>)
    52dc:	f002 fabe 	bl	785c <printk>
    52e0:	494f      	ldr	r1, [pc, #316]	; (5420 <z_impl_k_mutex_lock+0x1cc>)
    52e2:	4855      	ldr	r0, [pc, #340]	; (5438 <z_impl_k_mutex_lock+0x1e4>)
    52e4:	f002 faba 	bl	785c <printk>
    52e8:	21ac      	movs	r1, #172	; 0xac
    52ea:	484e      	ldr	r0, [pc, #312]	; (5424 <z_impl_k_mutex_lock+0x1d0>)
    52ec:	f002 fd08 	bl	7d00 <assert_post_action>
	__asm__ volatile(
    52f0:	f388 8811 	msr	BASEPRI, r8
    52f4:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
    52f8:	f06f 000f 	mvn.w	r0, #15
    52fc:	e01e      	b.n	533c <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
    52fe:	6891      	ldr	r1, [r2, #8]
    5300:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
    5304:	3301      	adds	r3, #1
    5306:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    5308:	6893      	ldr	r3, [r2, #8]
    530a:	4845      	ldr	r0, [pc, #276]	; (5420 <z_impl_k_mutex_lock+0x1cc>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    530c:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
    530e:	60a3      	str	r3, [r4, #8]
    5310:	f001 fd26 	bl	6d60 <z_spin_unlock_valid>
    5314:	b968      	cbnz	r0, 5332 <z_impl_k_mutex_lock+0xde>
    5316:	23ac      	movs	r3, #172	; 0xac
    5318:	4a42      	ldr	r2, [pc, #264]	; (5424 <z_impl_k_mutex_lock+0x1d0>)
    531a:	4946      	ldr	r1, [pc, #280]	; (5434 <z_impl_k_mutex_lock+0x1e0>)
    531c:	483e      	ldr	r0, [pc, #248]	; (5418 <z_impl_k_mutex_lock+0x1c4>)
    531e:	f002 fa9d 	bl	785c <printk>
    5322:	493f      	ldr	r1, [pc, #252]	; (5420 <z_impl_k_mutex_lock+0x1cc>)
    5324:	4844      	ldr	r0, [pc, #272]	; (5438 <z_impl_k_mutex_lock+0x1e4>)
    5326:	f002 fa99 	bl	785c <printk>
    532a:	21ac      	movs	r1, #172	; 0xac
    532c:	483d      	ldr	r0, [pc, #244]	; (5424 <z_impl_k_mutex_lock+0x1d0>)
    532e:	f002 fce7 	bl	7d00 <assert_post_action>
    5332:	f388 8811 	msr	BASEPRI, r8
    5336:	f3bf 8f6f 	isb	sy
		return 0;
    533a:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
    533c:	b002      	add	sp, #8
    533e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    5342:	6921      	ldr	r1, [r4, #16]
    5344:	e7de      	b.n	5304 <z_impl_k_mutex_lock+0xb0>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    5346:	f990 300e 	ldrsb.w	r3, [r0, #14]
    534a:	f991 100e 	ldrsb.w	r1, [r1, #14]
    534e:	4299      	cmp	r1, r3
    5350:	bfa8      	it	ge
    5352:	4619      	movge	r1, r3
    5354:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    5358:	4299      	cmp	r1, r3
    535a:	da40      	bge.n	53de <z_impl_k_mutex_lock+0x18a>
		resched = adjust_owner_prio(mutex, new_prio);
    535c:	f004 feca 	bl	a0f4 <adjust_owner_prio.isra.0>
    5360:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    5362:	4622      	mov	r2, r4
    5364:	4641      	mov	r1, r8
    5366:	e9cd 7600 	strd	r7, r6, [sp]
    536a:	482d      	ldr	r0, [pc, #180]	; (5420 <z_impl_k_mutex_lock+0x1cc>)
    536c:	f000 fcf2 	bl	5d54 <z_pend_curr>
	if (got_mutex == 0) {
    5370:	2800      	cmp	r0, #0
    5372:	d0e3      	beq.n	533c <z_impl_k_mutex_lock+0xe8>
	__asm__ volatile(
    5374:	f04f 0320 	mov.w	r3, #32
    5378:	f3ef 8611 	mrs	r6, BASEPRI
    537c:	f383 8811 	msr	BASEPRI, r3
    5380:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5384:	4826      	ldr	r0, [pc, #152]	; (5420 <z_impl_k_mutex_lock+0x1cc>)
    5386:	f001 fcdd 	bl	6d44 <z_spin_lock_valid>
    538a:	b968      	cbnz	r0, 53a8 <z_impl_k_mutex_lock+0x154>
    538c:	2381      	movs	r3, #129	; 0x81
    538e:	4a25      	ldr	r2, [pc, #148]	; (5424 <z_impl_k_mutex_lock+0x1d0>)
    5390:	4925      	ldr	r1, [pc, #148]	; (5428 <z_impl_k_mutex_lock+0x1d4>)
    5392:	4821      	ldr	r0, [pc, #132]	; (5418 <z_impl_k_mutex_lock+0x1c4>)
    5394:	f002 fa62 	bl	785c <printk>
    5398:	4921      	ldr	r1, [pc, #132]	; (5420 <z_impl_k_mutex_lock+0x1cc>)
    539a:	4824      	ldr	r0, [pc, #144]	; (542c <z_impl_k_mutex_lock+0x1d8>)
    539c:	f002 fa5e 	bl	785c <printk>
    53a0:	2181      	movs	r1, #129	; 0x81
    53a2:	4820      	ldr	r0, [pc, #128]	; (5424 <z_impl_k_mutex_lock+0x1d0>)
    53a4:	f002 fcac 	bl	7d00 <assert_post_action>
	z_spin_lock_set_owner(l);
    53a8:	481d      	ldr	r0, [pc, #116]	; (5420 <z_impl_k_mutex_lock+0x1cc>)
    53aa:	f001 fce7 	bl	6d7c <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    53ae:	6823      	ldr	r3, [r4, #0]
    53b0:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    53b2:	42a3      	cmp	r3, r4
    53b4:	d007      	beq.n	53c6 <z_impl_k_mutex_lock+0x172>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    53b6:	b133      	cbz	r3, 53c6 <z_impl_k_mutex_lock+0x172>
    53b8:	f993 300e 	ldrsb.w	r3, [r3, #14]
    53bc:	4299      	cmp	r1, r3
    53be:	bfa8      	it	ge
    53c0:	4619      	movge	r1, r3
    53c2:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    53c6:	68a0      	ldr	r0, [r4, #8]
    53c8:	f004 fe94 	bl	a0f4 <adjust_owner_prio.isra.0>
    53cc:	b900      	cbnz	r0, 53d0 <z_impl_k_mutex_lock+0x17c>
	if (resched) {
    53ce:	b145      	cbz	r5, 53e2 <z_impl_k_mutex_lock+0x18e>
		z_reschedule(&lock, key);
    53d0:	4631      	mov	r1, r6
    53d2:	4813      	ldr	r0, [pc, #76]	; (5420 <z_impl_k_mutex_lock+0x1cc>)
    53d4:	f000 fa84 	bl	58e0 <z_reschedule>
	return -EAGAIN;
    53d8:	f06f 000a 	mvn.w	r0, #10
    53dc:	e7ae      	b.n	533c <z_impl_k_mutex_lock+0xe8>
	bool resched = false;
    53de:	2500      	movs	r5, #0
    53e0:	e7bf      	b.n	5362 <z_impl_k_mutex_lock+0x10e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    53e2:	480f      	ldr	r0, [pc, #60]	; (5420 <z_impl_k_mutex_lock+0x1cc>)
    53e4:	f001 fcbc 	bl	6d60 <z_spin_unlock_valid>
    53e8:	b968      	cbnz	r0, 5406 <z_impl_k_mutex_lock+0x1b2>
    53ea:	23ac      	movs	r3, #172	; 0xac
    53ec:	4a0d      	ldr	r2, [pc, #52]	; (5424 <z_impl_k_mutex_lock+0x1d0>)
    53ee:	4911      	ldr	r1, [pc, #68]	; (5434 <z_impl_k_mutex_lock+0x1e0>)
    53f0:	4809      	ldr	r0, [pc, #36]	; (5418 <z_impl_k_mutex_lock+0x1c4>)
    53f2:	f002 fa33 	bl	785c <printk>
    53f6:	490a      	ldr	r1, [pc, #40]	; (5420 <z_impl_k_mutex_lock+0x1cc>)
    53f8:	480f      	ldr	r0, [pc, #60]	; (5438 <z_impl_k_mutex_lock+0x1e4>)
    53fa:	f002 fa2f 	bl	785c <printk>
    53fe:	21ac      	movs	r1, #172	; 0xac
    5400:	4808      	ldr	r0, [pc, #32]	; (5424 <z_impl_k_mutex_lock+0x1d0>)
    5402:	f002 fc7d 	bl	7d00 <assert_post_action>
	__asm__ volatile(
    5406:	f386 8811 	msr	BASEPRI, r6
    540a:	f3bf 8f6f 	isb	sy
    540e:	e7e3      	b.n	53d8 <z_impl_k_mutex_lock+0x184>
    5410:	0000c5d8 	.word	0x0000c5d8
    5414:	0000c5b6 	.word	0x0000c5b6
    5418:	0000b021 	.word	0x0000b021
    541c:	0000c5ea 	.word	0x0000c5ea
    5420:	2000150c 	.word	0x2000150c
    5424:	0000b7ac 	.word	0x0000b7ac
    5428:	0000b7d2 	.word	0x0000b7d2
    542c:	0000b7e7 	.word	0x0000b7e7
    5430:	20001510 	.word	0x20001510
    5434:	0000b7ff 	.word	0x0000b7ff
    5438:	0000b816 	.word	0x0000b816

0000543c <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    543c:	b538      	push	{r3, r4, r5, lr}
    543e:	4604      	mov	r4, r0
    5440:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    5444:	b163      	cbz	r3, 5460 <z_impl_k_mutex_unlock+0x24>
    5446:	4951      	ldr	r1, [pc, #324]	; (558c <z_impl_k_mutex_unlock+0x150>)
    5448:	23d8      	movs	r3, #216	; 0xd8
    544a:	4a51      	ldr	r2, [pc, #324]	; (5590 <z_impl_k_mutex_unlock+0x154>)
    544c:	4851      	ldr	r0, [pc, #324]	; (5594 <z_impl_k_mutex_unlock+0x158>)
    544e:	f002 fa05 	bl	785c <printk>
    5452:	4851      	ldr	r0, [pc, #324]	; (5598 <z_impl_k_mutex_unlock+0x15c>)
    5454:	f002 fa02 	bl	785c <printk>
    5458:	21d8      	movs	r1, #216	; 0xd8
    545a:	484d      	ldr	r0, [pc, #308]	; (5590 <z_impl_k_mutex_unlock+0x154>)
    545c:	f002 fc50 	bl	7d00 <assert_post_action>

	CHECKIF(mutex->owner == NULL) {
    5460:	68a3      	ldr	r3, [r4, #8]
    5462:	2b00      	cmp	r3, #0
    5464:	f000 808c 	beq.w	5580 <z_impl_k_mutex_unlock+0x144>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    5468:	4d4c      	ldr	r5, [pc, #304]	; (559c <z_impl_k_mutex_unlock+0x160>)
    546a:	68aa      	ldr	r2, [r5, #8]
    546c:	4293      	cmp	r3, r2
    546e:	f040 808a 	bne.w	5586 <z_impl_k_mutex_unlock+0x14a>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    5472:	68e3      	ldr	r3, [r4, #12]
    5474:	b94b      	cbnz	r3, 548a <z_impl_k_mutex_unlock+0x4e>
    5476:	494a      	ldr	r1, [pc, #296]	; (55a0 <z_impl_k_mutex_unlock+0x164>)
    5478:	4846      	ldr	r0, [pc, #280]	; (5594 <z_impl_k_mutex_unlock+0x158>)
    547a:	23ea      	movs	r3, #234	; 0xea
    547c:	4a44      	ldr	r2, [pc, #272]	; (5590 <z_impl_k_mutex_unlock+0x154>)
    547e:	f002 f9ed 	bl	785c <printk>
    5482:	21ea      	movs	r1, #234	; 0xea
    5484:	4842      	ldr	r0, [pc, #264]	; (5590 <z_impl_k_mutex_unlock+0x154>)
    5486:	f002 fc3b 	bl	7d00 <assert_post_action>
    548a:	f3ef 8305 	mrs	r3, IPSR
}

static inline void z_sched_lock(void)
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
    548e:	b163      	cbz	r3, 54aa <z_impl_k_mutex_unlock+0x6e>
    5490:	493e      	ldr	r1, [pc, #248]	; (558c <z_impl_k_mutex_unlock+0x150>)
    5492:	23ff      	movs	r3, #255	; 0xff
    5494:	4a43      	ldr	r2, [pc, #268]	; (55a4 <z_impl_k_mutex_unlock+0x168>)
    5496:	483f      	ldr	r0, [pc, #252]	; (5594 <z_impl_k_mutex_unlock+0x158>)
    5498:	f002 f9e0 	bl	785c <printk>
    549c:	4842      	ldr	r0, [pc, #264]	; (55a8 <z_impl_k_mutex_unlock+0x16c>)
    549e:	f002 f9dd 	bl	785c <printk>
    54a2:	21ff      	movs	r1, #255	; 0xff
    54a4:	483f      	ldr	r0, [pc, #252]	; (55a4 <z_impl_k_mutex_unlock+0x168>)
    54a6:	f002 fc2b 	bl	7d00 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
    54aa:	68ab      	ldr	r3, [r5, #8]
    54ac:	7bdb      	ldrb	r3, [r3, #15]
    54ae:	2b01      	cmp	r3, #1
    54b0:	d10e      	bne.n	54d0 <z_impl_k_mutex_unlock+0x94>
    54b2:	493e      	ldr	r1, [pc, #248]	; (55ac <z_impl_k_mutex_unlock+0x170>)
    54b4:	f44f 7380 	mov.w	r3, #256	; 0x100
    54b8:	4a3a      	ldr	r2, [pc, #232]	; (55a4 <z_impl_k_mutex_unlock+0x168>)
    54ba:	4836      	ldr	r0, [pc, #216]	; (5594 <z_impl_k_mutex_unlock+0x158>)
    54bc:	f002 f9ce 	bl	785c <printk>
    54c0:	4839      	ldr	r0, [pc, #228]	; (55a8 <z_impl_k_mutex_unlock+0x16c>)
    54c2:	f002 f9cb 	bl	785c <printk>
    54c6:	f44f 7180 	mov.w	r1, #256	; 0x100
    54ca:	4836      	ldr	r0, [pc, #216]	; (55a4 <z_impl_k_mutex_unlock+0x168>)
    54cc:	f002 fc18 	bl	7d00 <assert_post_action>

	--_current->base.sched_locked;
    54d0:	68aa      	ldr	r2, [r5, #8]
    54d2:	7bd3      	ldrb	r3, [r2, #15]
    54d4:	3b01      	subs	r3, #1
    54d6:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
    54d8:	68e3      	ldr	r3, [r4, #12]
    54da:	2b01      	cmp	r3, #1
    54dc:	d005      	beq.n	54ea <z_impl_k_mutex_unlock+0xae>
		mutex->lock_count--;
    54de:	3b01      	subs	r3, #1
    54e0:	60e3      	str	r3, [r4, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
    54e2:	f000 fc67 	bl	5db4 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
    54e6:	2000      	movs	r0, #0
}
    54e8:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    54ea:	f04f 0320 	mov.w	r3, #32
    54ee:	f3ef 8511 	mrs	r5, BASEPRI
    54f2:	f383 8811 	msr	BASEPRI, r3
    54f6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    54fa:	482d      	ldr	r0, [pc, #180]	; (55b0 <z_impl_k_mutex_unlock+0x174>)
    54fc:	f001 fc22 	bl	6d44 <z_spin_lock_valid>
    5500:	b968      	cbnz	r0, 551e <z_impl_k_mutex_unlock+0xe2>
    5502:	2381      	movs	r3, #129	; 0x81
    5504:	4a2b      	ldr	r2, [pc, #172]	; (55b4 <z_impl_k_mutex_unlock+0x178>)
    5506:	492c      	ldr	r1, [pc, #176]	; (55b8 <z_impl_k_mutex_unlock+0x17c>)
    5508:	4822      	ldr	r0, [pc, #136]	; (5594 <z_impl_k_mutex_unlock+0x158>)
    550a:	f002 f9a7 	bl	785c <printk>
    550e:	4928      	ldr	r1, [pc, #160]	; (55b0 <z_impl_k_mutex_unlock+0x174>)
    5510:	482a      	ldr	r0, [pc, #168]	; (55bc <z_impl_k_mutex_unlock+0x180>)
    5512:	f002 f9a3 	bl	785c <printk>
    5516:	2181      	movs	r1, #129	; 0x81
    5518:	4826      	ldr	r0, [pc, #152]	; (55b4 <z_impl_k_mutex_unlock+0x178>)
    551a:	f002 fbf1 	bl	7d00 <assert_post_action>
	z_spin_lock_set_owner(l);
    551e:	4824      	ldr	r0, [pc, #144]	; (55b0 <z_impl_k_mutex_unlock+0x174>)
    5520:	f001 fc2c 	bl	6d7c <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    5524:	6921      	ldr	r1, [r4, #16]
    5526:	68a0      	ldr	r0, [r4, #8]
    5528:	f004 fde4 	bl	a0f4 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    552c:	4620      	mov	r0, r4
    552e:	f000 ff61 	bl	63f4 <z_unpend_first_thread>
	mutex->owner = new_owner;
    5532:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    5534:	b160      	cbz	r0, 5550 <z_impl_k_mutex_unlock+0x114>
		mutex->owner_orig_prio = new_owner->base.prio;
    5536:	f990 200e 	ldrsb.w	r2, [r0, #14]
    553a:	6122      	str	r2, [r4, #16]
    553c:	2200      	movs	r2, #0
    553e:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
		z_ready_thread(new_owner);
    5542:	f000 fdc9 	bl	60d8 <z_ready_thread>
		z_reschedule(&lock, key);
    5546:	4629      	mov	r1, r5
    5548:	4819      	ldr	r0, [pc, #100]	; (55b0 <z_impl_k_mutex_unlock+0x174>)
    554a:	f000 f9c9 	bl	58e0 <z_reschedule>
    554e:	e7c8      	b.n	54e2 <z_impl_k_mutex_unlock+0xa6>
		mutex->lock_count = 0U;
    5550:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5552:	4817      	ldr	r0, [pc, #92]	; (55b0 <z_impl_k_mutex_unlock+0x174>)
    5554:	f001 fc04 	bl	6d60 <z_spin_unlock_valid>
    5558:	b968      	cbnz	r0, 5576 <z_impl_k_mutex_unlock+0x13a>
    555a:	23ac      	movs	r3, #172	; 0xac
    555c:	4a15      	ldr	r2, [pc, #84]	; (55b4 <z_impl_k_mutex_unlock+0x178>)
    555e:	4918      	ldr	r1, [pc, #96]	; (55c0 <z_impl_k_mutex_unlock+0x184>)
    5560:	480c      	ldr	r0, [pc, #48]	; (5594 <z_impl_k_mutex_unlock+0x158>)
    5562:	f002 f97b 	bl	785c <printk>
    5566:	4912      	ldr	r1, [pc, #72]	; (55b0 <z_impl_k_mutex_unlock+0x174>)
    5568:	4816      	ldr	r0, [pc, #88]	; (55c4 <z_impl_k_mutex_unlock+0x188>)
    556a:	f002 f977 	bl	785c <printk>
    556e:	21ac      	movs	r1, #172	; 0xac
    5570:	4810      	ldr	r0, [pc, #64]	; (55b4 <z_impl_k_mutex_unlock+0x178>)
    5572:	f002 fbc5 	bl	7d00 <assert_post_action>
	__asm__ volatile(
    5576:	f385 8811 	msr	BASEPRI, r5
    557a:	f3bf 8f6f 	isb	sy
    557e:	e7b0      	b.n	54e2 <z_impl_k_mutex_unlock+0xa6>
		return -EINVAL;
    5580:	f06f 0015 	mvn.w	r0, #21
    5584:	e7b0      	b.n	54e8 <z_impl_k_mutex_unlock+0xac>
		return -EPERM;
    5586:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    558a:	e7ad      	b.n	54e8 <z_impl_k_mutex_unlock+0xac>
    558c:	0000c5d8 	.word	0x0000c5d8
    5590:	0000c5b6 	.word	0x0000c5b6
    5594:	0000b021 	.word	0x0000b021
    5598:	0000c5ea 	.word	0x0000c5ea
    559c:	20001510 	.word	0x20001510
    55a0:	0000c60f 	.word	0x0000c60f
    55a4:	0000c626 	.word	0x0000c626
    55a8:	0000bfd5 	.word	0x0000bfd5
    55ac:	0000c651 	.word	0x0000c651
    55b0:	2000150c 	.word	0x2000150c
    55b4:	0000b7ac 	.word	0x0000b7ac
    55b8:	0000b7d2 	.word	0x0000b7d2
    55bc:	0000b7e7 	.word	0x0000b7e7
    55c0:	0000b7ff 	.word	0x0000b7ff
    55c4:	0000b816 	.word	0x0000b816

000055c8 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
    55c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    55cc:	4604      	mov	r4, r0
    55ce:	460e      	mov	r6, r1
    55d0:	4690      	mov	r8, r2
    55d2:	4699      	mov	r9, r3
    55d4:	f89d a020 	ldrb.w	sl, [sp, #32]
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    55d8:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    55dc:	f04f 0320 	mov.w	r3, #32
    55e0:	f3ef 8711 	mrs	r7, BASEPRI
    55e4:	f383 8811 	msr	BASEPRI, r3
    55e8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    55ec:	4628      	mov	r0, r5
    55ee:	f001 fba9 	bl	6d44 <z_spin_lock_valid>
    55f2:	b968      	cbnz	r0, 5610 <queue_insert+0x48>
    55f4:	2381      	movs	r3, #129	; 0x81
    55f6:	4a3c      	ldr	r2, [pc, #240]	; (56e8 <queue_insert+0x120>)
    55f8:	493c      	ldr	r1, [pc, #240]	; (56ec <queue_insert+0x124>)
    55fa:	483d      	ldr	r0, [pc, #244]	; (56f0 <queue_insert+0x128>)
    55fc:	f002 f92e 	bl	785c <printk>
    5600:	4629      	mov	r1, r5
    5602:	483c      	ldr	r0, [pc, #240]	; (56f4 <queue_insert+0x12c>)
    5604:	f002 f92a 	bl	785c <printk>
    5608:	2181      	movs	r1, #129	; 0x81
    560a:	4837      	ldr	r0, [pc, #220]	; (56e8 <queue_insert+0x120>)
    560c:	f002 fb78 	bl	7d00 <assert_post_action>
	z_spin_lock_set_owner(l);
    5610:	4628      	mov	r0, r5
    5612:	f001 fbb3 	bl	6d7c <z_spin_lock_set_owner>

	if (is_append) {
    5616:	f1ba 0f00 	cmp.w	sl, #0
    561a:	d000      	beq.n	561e <queue_insert+0x56>
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
    561c:	6866      	ldr	r6, [r4, #4]
		prev = sys_sflist_peek_tail(&queue->data_q);
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
    561e:	f104 000c 	add.w	r0, r4, #12
    5622:	f000 fee7 	bl	63f4 <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
    5626:	b160      	cbz	r0, 5642 <queue_insert+0x7a>
    5628:	2400      	movs	r4, #0
    562a:	f8c0 8014 	str.w	r8, [r0, #20]
    562e:	f8c0 409c 	str.w	r4, [r0, #156]	; 0x9c
	z_ready_thread(thread);
    5632:	f000 fd51 	bl	60d8 <z_ready_thread>
		sys_sfnode_init(data, 0x0);
	}

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
    5636:	4628      	mov	r0, r5
    5638:	4639      	mov	r1, r7
    563a:	f000 f951 	bl	58e0 <z_reschedule>
	return 0;
    563e:	2000      	movs	r0, #0
    5640:	e01e      	b.n	5680 <queue_insert+0xb8>
	if (alloc) {
    5642:	f1b9 0f00 	cmp.w	r9, #0
    5646:	d02d      	beq.n	56a4 <queue_insert+0xdc>
	return z_thread_aligned_alloc(0, size);
    5648:	2108      	movs	r1, #8
    564a:	f002 f8b1 	bl	77b0 <z_thread_aligned_alloc>
		if (anode == NULL) {
    564e:	b9c8      	cbnz	r0, 5684 <queue_insert+0xbc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5650:	4628      	mov	r0, r5
    5652:	f001 fb85 	bl	6d60 <z_spin_unlock_valid>
    5656:	b968      	cbnz	r0, 5674 <queue_insert+0xac>
    5658:	23ac      	movs	r3, #172	; 0xac
    565a:	4a23      	ldr	r2, [pc, #140]	; (56e8 <queue_insert+0x120>)
    565c:	4926      	ldr	r1, [pc, #152]	; (56f8 <queue_insert+0x130>)
    565e:	4824      	ldr	r0, [pc, #144]	; (56f0 <queue_insert+0x128>)
    5660:	f002 f8fc 	bl	785c <printk>
    5664:	4629      	mov	r1, r5
    5666:	4825      	ldr	r0, [pc, #148]	; (56fc <queue_insert+0x134>)
    5668:	f002 f8f8 	bl	785c <printk>
    566c:	21ac      	movs	r1, #172	; 0xac
    566e:	481e      	ldr	r0, [pc, #120]	; (56e8 <queue_insert+0x120>)
    5670:	f002 fb46 	bl	7d00 <assert_post_action>
	__asm__ volatile(
    5674:	f387 8811 	msr	BASEPRI, r7
    5678:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
    567c:	f06f 000b 	mvn.w	r0, #11
}
    5680:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
    5684:	2301      	movs	r3, #1
		anode->data = data;
    5686:	f8c0 8004 	str.w	r8, [r0, #4]
    568a:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    568c:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    568e:	f003 0203 	and.w	r2, r3, #3
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
    5692:	b95e      	cbnz	r6, 56ac <queue_insert+0xe4>
	parent->next_and_flags = cur_flags | (unative_t)child;
    5694:	6823      	ldr	r3, [r4, #0]
    5696:	4313      	orrs	r3, r2
    5698:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
    569a:	6863      	ldr	r3, [r4, #4]
	list->head = node;
    569c:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
    569e:	b973      	cbnz	r3, 56be <queue_insert+0xf6>
	list->tail = node;
    56a0:	6060      	str	r0, [r4, #4]
}
    56a2:	e00c      	b.n	56be <queue_insert+0xf6>
}
    56a4:	4640      	mov	r0, r8
	node->next_and_flags = flags;
    56a6:	f8c8 9000 	str.w	r9, [r8]
}
    56aa:	e7ef      	b.n	568c <queue_insert+0xc4>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    56ac:	6833      	ldr	r3, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
    56ae:	f033 0303 	bics.w	r3, r3, #3
    56b2:	d110      	bne.n	56d6 <queue_insert+0x10e>
	parent->next_and_flags = cur_flags | (unative_t)child;
    56b4:	6002      	str	r2, [r0, #0]
	return list->tail;
    56b6:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
    56b8:	b93a      	cbnz	r2, 56ca <queue_insert+0x102>
	list->head = node;
    56ba:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
    56be:	2104      	movs	r1, #4
    56c0:	f104 0014 	add.w	r0, r4, #20
    56c4:	f004 fe39 	bl	a33a <z_handle_obj_poll_events>
    56c8:	e7b5      	b.n	5636 <queue_insert+0x6e>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    56ca:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    56cc:	f003 0303 	and.w	r3, r3, #3
    56d0:	4303      	orrs	r3, r0
    56d2:	6013      	str	r3, [r2, #0]
    56d4:	e7e4      	b.n	56a0 <queue_insert+0xd8>
    56d6:	4313      	orrs	r3, r2
    56d8:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    56da:	6833      	ldr	r3, [r6, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    56dc:	f003 0303 	and.w	r3, r3, #3
    56e0:	4303      	orrs	r3, r0
    56e2:	6033      	str	r3, [r6, #0]
}
    56e4:	e7eb      	b.n	56be <queue_insert+0xf6>
    56e6:	bf00      	nop
    56e8:	0000b7ac 	.word	0x0000b7ac
    56ec:	0000b7d2 	.word	0x0000b7d2
    56f0:	0000b021 	.word	0x0000b021
    56f4:	0000b7e7 	.word	0x0000b7e7
    56f8:	0000b7ff 	.word	0x0000b7ff
    56fc:	0000b816 	.word	0x0000b816

00005700 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
    5700:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    5704:	4606      	mov	r6, r0
    5706:	4690      	mov	r8, r2
    5708:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    570a:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    570e:	f04f 0320 	mov.w	r3, #32
    5712:	f3ef 8911 	mrs	r9, BASEPRI
    5716:	f383 8811 	msr	BASEPRI, r3
    571a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    571e:	4628      	mov	r0, r5
    5720:	f001 fb10 	bl	6d44 <z_spin_lock_valid>
    5724:	b968      	cbnz	r0, 5742 <z_impl_k_queue_get+0x42>
    5726:	2381      	movs	r3, #129	; 0x81
    5728:	4a25      	ldr	r2, [pc, #148]	; (57c0 <z_impl_k_queue_get+0xc0>)
    572a:	4926      	ldr	r1, [pc, #152]	; (57c4 <z_impl_k_queue_get+0xc4>)
    572c:	4826      	ldr	r0, [pc, #152]	; (57c8 <z_impl_k_queue_get+0xc8>)
    572e:	f002 f895 	bl	785c <printk>
    5732:	4629      	mov	r1, r5
    5734:	4825      	ldr	r0, [pc, #148]	; (57cc <z_impl_k_queue_get+0xcc>)
    5736:	f002 f891 	bl	785c <printk>
    573a:	2181      	movs	r1, #129	; 0x81
    573c:	4820      	ldr	r0, [pc, #128]	; (57c0 <z_impl_k_queue_get+0xc0>)
    573e:	f002 fadf 	bl	7d00 <assert_post_action>
	z_spin_lock_set_owner(l);
    5742:	4628      	mov	r0, r5
    5744:	f001 fb1a 	bl	6d7c <z_spin_lock_set_owner>
	return list->head;
    5748:	6834      	ldr	r4, [r6, #0]
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
    574a:	b33c      	cbz	r4, 579c <z_impl_k_queue_get+0x9c>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    574c:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    574e:	6872      	ldr	r2, [r6, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    5750:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    5754:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
    5756:	4620      	mov	r0, r4
    5758:	f04f 0101 	mov.w	r1, #1
	list->head = node;
    575c:	6033      	str	r3, [r6, #0]
	list->tail = node;
    575e:	bf08      	it	eq
    5760:	6073      	streq	r3, [r6, #4]
    5762:	f004 fccf 	bl	a104 <z_queue_node_peek>
    5766:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5768:	4628      	mov	r0, r5
    576a:	f001 faf9 	bl	6d60 <z_spin_unlock_valid>
    576e:	b968      	cbnz	r0, 578c <z_impl_k_queue_get+0x8c>
    5770:	23ac      	movs	r3, #172	; 0xac
    5772:	4a13      	ldr	r2, [pc, #76]	; (57c0 <z_impl_k_queue_get+0xc0>)
    5774:	4916      	ldr	r1, [pc, #88]	; (57d0 <z_impl_k_queue_get+0xd0>)
    5776:	4814      	ldr	r0, [pc, #80]	; (57c8 <z_impl_k_queue_get+0xc8>)
    5778:	f002 f870 	bl	785c <printk>
    577c:	4629      	mov	r1, r5
    577e:	4815      	ldr	r0, [pc, #84]	; (57d4 <z_impl_k_queue_get+0xd4>)
    5780:	f002 f86c 	bl	785c <printk>
    5784:	21ac      	movs	r1, #172	; 0xac
    5786:	480e      	ldr	r0, [pc, #56]	; (57c0 <z_impl_k_queue_get+0xc0>)
    5788:	f002 faba 	bl	7d00 <assert_post_action>
	__asm__ volatile(
    578c:	f389 8811 	msr	BASEPRI, r9
    5790:	f3bf 8f6f 	isb	sy
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
    5794:	4620      	mov	r0, r4
    5796:	b003      	add	sp, #12
    5798:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    579c:	ea58 0307 	orrs.w	r3, r8, r7
    57a0:	d0e2      	beq.n	5768 <z_impl_k_queue_get+0x68>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
    57a2:	4649      	mov	r1, r9
    57a4:	4628      	mov	r0, r5
    57a6:	e9cd 8700 	strd	r8, r7, [sp]
    57aa:	f106 020c 	add.w	r2, r6, #12
    57ae:	f000 fad1 	bl	5d54 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
    57b2:	2800      	cmp	r0, #0
    57b4:	d1ee      	bne.n	5794 <z_impl_k_queue_get+0x94>
    57b6:	4b08      	ldr	r3, [pc, #32]	; (57d8 <z_impl_k_queue_get+0xd8>)
    57b8:	689b      	ldr	r3, [r3, #8]
    57ba:	695c      	ldr	r4, [r3, #20]
    57bc:	e7ea      	b.n	5794 <z_impl_k_queue_get+0x94>
    57be:	bf00      	nop
    57c0:	0000b7ac 	.word	0x0000b7ac
    57c4:	0000b7d2 	.word	0x0000b7d2
    57c8:	0000b021 	.word	0x0000b021
    57cc:	0000b7e7 	.word	0x0000b7e7
    57d0:	0000b7ff 	.word	0x0000b7ff
    57d4:	0000b816 	.word	0x0000b816
    57d8:	20001510 	.word	0x20001510

000057dc <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    57dc:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    57de:	4c08      	ldr	r4, [pc, #32]	; (5800 <z_reset_time_slice+0x24>)
    57e0:	6823      	ldr	r3, [r4, #0]
    57e2:	b15b      	cbz	r3, 57fc <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    57e4:	f7fc fd96 	bl	2314 <z_clock_elapsed>
    57e8:	4603      	mov	r3, r0
    57ea:	6820      	ldr	r0, [r4, #0]
    57ec:	4a05      	ldr	r2, [pc, #20]	; (5804 <z_reset_time_slice+0x28>)
    57ee:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
    57f0:	2100      	movs	r1, #0
	}
}
    57f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    57f6:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    57f8:	f001 be0c 	b.w	7414 <z_set_timeout_expiry>
}
    57fc:	bd10      	pop	{r4, pc}
    57fe:	bf00      	nop
    5800:	20001548 	.word	0x20001548
    5804:	20001510 	.word	0x20001510

00005808 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    5808:	b570      	push	{r4, r5, r6, lr}
    580a:	4604      	mov	r4, r0
    580c:	460d      	mov	r5, r1
	__asm__ volatile(
    580e:	f04f 0320 	mov.w	r3, #32
    5812:	f3ef 8611 	mrs	r6, BASEPRI
    5816:	f383 8811 	msr	BASEPRI, r3
    581a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    581e:	4826      	ldr	r0, [pc, #152]	; (58b8 <k_sched_time_slice_set+0xb0>)
    5820:	f001 fa90 	bl	6d44 <z_spin_lock_valid>
    5824:	b968      	cbnz	r0, 5842 <k_sched_time_slice_set+0x3a>
    5826:	2381      	movs	r3, #129	; 0x81
    5828:	4a24      	ldr	r2, [pc, #144]	; (58bc <k_sched_time_slice_set+0xb4>)
    582a:	4925      	ldr	r1, [pc, #148]	; (58c0 <k_sched_time_slice_set+0xb8>)
    582c:	4825      	ldr	r0, [pc, #148]	; (58c4 <k_sched_time_slice_set+0xbc>)
    582e:	f002 f815 	bl	785c <printk>
    5832:	4921      	ldr	r1, [pc, #132]	; (58b8 <k_sched_time_slice_set+0xb0>)
    5834:	4824      	ldr	r0, [pc, #144]	; (58c8 <k_sched_time_slice_set+0xc0>)
    5836:	f002 f811 	bl	785c <printk>
    583a:	2181      	movs	r1, #129	; 0x81
    583c:	481f      	ldr	r0, [pc, #124]	; (58bc <k_sched_time_slice_set+0xb4>)
    583e:	f002 fa5f 	bl	7d00 <assert_post_action>
	z_spin_lock_set_owner(l);
    5842:	481d      	ldr	r0, [pc, #116]	; (58b8 <k_sched_time_slice_set+0xb0>)
    5844:	f001 fa9a 	bl	6d7c <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    5848:	2300      	movs	r3, #0
    584a:	4a20      	ldr	r2, [pc, #128]	; (58cc <k_sched_time_slice_set+0xc4>)
		t += off;
    584c:	f114 0009 	adds.w	r0, r4, #9
    5850:	6113      	str	r3, [r2, #16]
		if (result32 && (t < BIT64(32))) {
    5852:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
		t += off;
    5856:	f143 0100 	adc.w	r1, r3, #0
		if (result32 && (t < BIT64(32))) {
    585a:	4282      	cmp	r2, r0
    585c:	418b      	sbcs	r3, r1
    585e:	d321      	bcc.n	58a4 <k_sched_time_slice_set+0x9c>
			return ((uint32_t)t) / (from_hz / to_hz);
    5860:	230a      	movs	r3, #10
    5862:	fbb0 f0f3 	udiv	r0, r0, r3
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    5866:	2c00      	cmp	r4, #0
    5868:	4b19      	ldr	r3, [pc, #100]	; (58d0 <k_sched_time_slice_set+0xc8>)
    586a:	dc20      	bgt.n	58ae <k_sched_time_slice_set+0xa6>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
    586c:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    586e:	4b19      	ldr	r3, [pc, #100]	; (58d4 <k_sched_time_slice_set+0xcc>)
    5870:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    5872:	f7ff ffb3 	bl	57dc <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5876:	4810      	ldr	r0, [pc, #64]	; (58b8 <k_sched_time_slice_set+0xb0>)
    5878:	f001 fa72 	bl	6d60 <z_spin_unlock_valid>
    587c:	b968      	cbnz	r0, 589a <k_sched_time_slice_set+0x92>
    587e:	23ac      	movs	r3, #172	; 0xac
    5880:	4a0e      	ldr	r2, [pc, #56]	; (58bc <k_sched_time_slice_set+0xb4>)
    5882:	4915      	ldr	r1, [pc, #84]	; (58d8 <k_sched_time_slice_set+0xd0>)
    5884:	480f      	ldr	r0, [pc, #60]	; (58c4 <k_sched_time_slice_set+0xbc>)
    5886:	f001 ffe9 	bl	785c <printk>
    588a:	490b      	ldr	r1, [pc, #44]	; (58b8 <k_sched_time_slice_set+0xb0>)
    588c:	4813      	ldr	r0, [pc, #76]	; (58dc <k_sched_time_slice_set+0xd4>)
    588e:	f001 ffe5 	bl	785c <printk>
    5892:	21ac      	movs	r1, #172	; 0xac
    5894:	4809      	ldr	r0, [pc, #36]	; (58bc <k_sched_time_slice_set+0xb4>)
    5896:	f002 fa33 	bl	7d00 <assert_post_action>
	__asm__ volatile(
    589a:	f386 8811 	msr	BASEPRI, r6
    589e:	f3bf 8f6f 	isb	sy
	}
}
    58a2:	bd70      	pop	{r4, r5, r6, pc}
			return t / (from_hz / to_hz);
    58a4:	220a      	movs	r2, #10
    58a6:	2300      	movs	r3, #0
    58a8:	f7fa fc0a 	bl	c0 <__aeabi_uldivmod>
    58ac:	e7db      	b.n	5866 <k_sched_time_slice_set+0x5e>
			slice_time = MAX(2, slice_time);
    58ae:	2802      	cmp	r0, #2
    58b0:	bfb8      	it	lt
    58b2:	2002      	movlt	r0, #2
    58b4:	e7da      	b.n	586c <k_sched_time_slice_set+0x64>
    58b6:	bf00      	nop
    58b8:	20001540 	.word	0x20001540
    58bc:	0000b7ac 	.word	0x0000b7ac
    58c0:	0000b7d2 	.word	0x0000b7d2
    58c4:	0000b021 	.word	0x0000b021
    58c8:	0000b7e7 	.word	0x0000b7e7
    58cc:	20001510 	.word	0x20001510
    58d0:	20001548 	.word	0x20001548
    58d4:	20001544 	.word	0x20001544
    58d8:	0000b7ff 	.word	0x0000b7ff
    58dc:	0000b816 	.word	0x0000b816

000058e0 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    58e0:	b538      	push	{r3, r4, r5, lr}
    58e2:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    58e4:	460d      	mov	r5, r1
    58e6:	b9e9      	cbnz	r1, 5924 <z_reschedule+0x44>
    58e8:	f3ef 8305 	mrs	r3, IPSR
    58ec:	b9d3      	cbnz	r3, 5924 <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
    58ee:	4b19      	ldr	r3, [pc, #100]	; (5954 <z_reschedule+0x74>)
	if (resched(key.key) && need_swap()) {
    58f0:	6a1a      	ldr	r2, [r3, #32]
    58f2:	689b      	ldr	r3, [r3, #8]
    58f4:	429a      	cmp	r2, r3
    58f6:	d015      	beq.n	5924 <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    58f8:	f001 fa32 	bl	6d60 <z_spin_unlock_valid>
    58fc:	b968      	cbnz	r0, 591a <z_reschedule+0x3a>
    58fe:	23c3      	movs	r3, #195	; 0xc3
    5900:	4a15      	ldr	r2, [pc, #84]	; (5958 <z_reschedule+0x78>)
    5902:	4916      	ldr	r1, [pc, #88]	; (595c <z_reschedule+0x7c>)
    5904:	4816      	ldr	r0, [pc, #88]	; (5960 <z_reschedule+0x80>)
    5906:	f001 ffa9 	bl	785c <printk>
    590a:	4621      	mov	r1, r4
    590c:	4815      	ldr	r0, [pc, #84]	; (5964 <z_reschedule+0x84>)
    590e:	f001 ffa5 	bl	785c <printk>
    5912:	21c3      	movs	r1, #195	; 0xc3
    5914:	4810      	ldr	r0, [pc, #64]	; (5958 <z_reschedule+0x78>)
    5916:	f002 f9f3 	bl	7d00 <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    591a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ret = arch_swap(key);
    591e:	2000      	movs	r0, #0
    5920:	f7fc bd98 	b.w	2454 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5924:	4620      	mov	r0, r4
    5926:	f001 fa1b 	bl	6d60 <z_spin_unlock_valid>
    592a:	b968      	cbnz	r0, 5948 <z_reschedule+0x68>
    592c:	23ac      	movs	r3, #172	; 0xac
    592e:	4a0a      	ldr	r2, [pc, #40]	; (5958 <z_reschedule+0x78>)
    5930:	490a      	ldr	r1, [pc, #40]	; (595c <z_reschedule+0x7c>)
    5932:	480b      	ldr	r0, [pc, #44]	; (5960 <z_reschedule+0x80>)
    5934:	f001 ff92 	bl	785c <printk>
    5938:	4621      	mov	r1, r4
    593a:	480a      	ldr	r0, [pc, #40]	; (5964 <z_reschedule+0x84>)
    593c:	f001 ff8e 	bl	785c <printk>
    5940:	21ac      	movs	r1, #172	; 0xac
    5942:	4805      	ldr	r0, [pc, #20]	; (5958 <z_reschedule+0x78>)
    5944:	f002 f9dc 	bl	7d00 <assert_post_action>
    5948:	f385 8811 	msr	BASEPRI, r5
    594c:	f3bf 8f6f 	isb	sy
    5950:	bd38      	pop	{r3, r4, r5, pc}
    5952:	bf00      	nop
    5954:	20001510 	.word	0x20001510
    5958:	0000b7ac 	.word	0x0000b7ac
    595c:	0000b7ff 	.word	0x0000b7ff
    5960:	0000b021 	.word	0x0000b021
    5964:	0000b816 	.word	0x0000b816

00005968 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
    5968:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    596a:	f04f 0320 	mov.w	r3, #32
    596e:	f3ef 8511 	mrs	r5, BASEPRI
    5972:	f383 8811 	msr	BASEPRI, r3
    5976:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    597a:	482a      	ldr	r0, [pc, #168]	; (5a24 <k_sched_lock+0xbc>)
    597c:	f001 f9e2 	bl	6d44 <z_spin_lock_valid>
    5980:	b968      	cbnz	r0, 599e <k_sched_lock+0x36>
    5982:	2381      	movs	r3, #129	; 0x81
    5984:	4a28      	ldr	r2, [pc, #160]	; (5a28 <k_sched_lock+0xc0>)
    5986:	4929      	ldr	r1, [pc, #164]	; (5a2c <k_sched_lock+0xc4>)
    5988:	4829      	ldr	r0, [pc, #164]	; (5a30 <k_sched_lock+0xc8>)
    598a:	f001 ff67 	bl	785c <printk>
    598e:	4925      	ldr	r1, [pc, #148]	; (5a24 <k_sched_lock+0xbc>)
    5990:	4828      	ldr	r0, [pc, #160]	; (5a34 <k_sched_lock+0xcc>)
    5992:	f001 ff63 	bl	785c <printk>
    5996:	2181      	movs	r1, #129	; 0x81
    5998:	4823      	ldr	r0, [pc, #140]	; (5a28 <k_sched_lock+0xc0>)
    599a:	f002 f9b1 	bl	7d00 <assert_post_action>
	z_spin_lock_set_owner(l);
    599e:	4821      	ldr	r0, [pc, #132]	; (5a24 <k_sched_lock+0xbc>)
    59a0:	f001 f9ec 	bl	6d7c <z_spin_lock_set_owner>
    59a4:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    59a8:	b163      	cbz	r3, 59c4 <k_sched_lock+0x5c>
    59aa:	4923      	ldr	r1, [pc, #140]	; (5a38 <k_sched_lock+0xd0>)
    59ac:	23ff      	movs	r3, #255	; 0xff
    59ae:	4a23      	ldr	r2, [pc, #140]	; (5a3c <k_sched_lock+0xd4>)
    59b0:	481f      	ldr	r0, [pc, #124]	; (5a30 <k_sched_lock+0xc8>)
    59b2:	f001 ff53 	bl	785c <printk>
    59b6:	4822      	ldr	r0, [pc, #136]	; (5a40 <k_sched_lock+0xd8>)
    59b8:	f001 ff50 	bl	785c <printk>
    59bc:	21ff      	movs	r1, #255	; 0xff
    59be:	481f      	ldr	r0, [pc, #124]	; (5a3c <k_sched_lock+0xd4>)
    59c0:	f002 f99e 	bl	7d00 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
    59c4:	4c1f      	ldr	r4, [pc, #124]	; (5a44 <k_sched_lock+0xdc>)
    59c6:	68a3      	ldr	r3, [r4, #8]
    59c8:	7bdb      	ldrb	r3, [r3, #15]
    59ca:	2b01      	cmp	r3, #1
    59cc:	d10e      	bne.n	59ec <k_sched_lock+0x84>
    59ce:	491e      	ldr	r1, [pc, #120]	; (5a48 <k_sched_lock+0xe0>)
    59d0:	f44f 7380 	mov.w	r3, #256	; 0x100
    59d4:	4a19      	ldr	r2, [pc, #100]	; (5a3c <k_sched_lock+0xd4>)
    59d6:	4816      	ldr	r0, [pc, #88]	; (5a30 <k_sched_lock+0xc8>)
    59d8:	f001 ff40 	bl	785c <printk>
    59dc:	4818      	ldr	r0, [pc, #96]	; (5a40 <k_sched_lock+0xd8>)
    59de:	f001 ff3d 	bl	785c <printk>
    59e2:	f44f 7180 	mov.w	r1, #256	; 0x100
    59e6:	4815      	ldr	r0, [pc, #84]	; (5a3c <k_sched_lock+0xd4>)
    59e8:	f002 f98a 	bl	7d00 <assert_post_action>
	--_current->base.sched_locked;
    59ec:	68a2      	ldr	r2, [r4, #8]
    59ee:	7bd3      	ldrb	r3, [r2, #15]
    59f0:	3b01      	subs	r3, #1
    59f2:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    59f4:	480b      	ldr	r0, [pc, #44]	; (5a24 <k_sched_lock+0xbc>)
    59f6:	f001 f9b3 	bl	6d60 <z_spin_unlock_valid>
    59fa:	b968      	cbnz	r0, 5a18 <k_sched_lock+0xb0>
    59fc:	23ac      	movs	r3, #172	; 0xac
    59fe:	4a0a      	ldr	r2, [pc, #40]	; (5a28 <k_sched_lock+0xc0>)
    5a00:	4912      	ldr	r1, [pc, #72]	; (5a4c <k_sched_lock+0xe4>)
    5a02:	480b      	ldr	r0, [pc, #44]	; (5a30 <k_sched_lock+0xc8>)
    5a04:	f001 ff2a 	bl	785c <printk>
    5a08:	4906      	ldr	r1, [pc, #24]	; (5a24 <k_sched_lock+0xbc>)
    5a0a:	4811      	ldr	r0, [pc, #68]	; (5a50 <k_sched_lock+0xe8>)
    5a0c:	f001 ff26 	bl	785c <printk>
    5a10:	21ac      	movs	r1, #172	; 0xac
    5a12:	4805      	ldr	r0, [pc, #20]	; (5a28 <k_sched_lock+0xc0>)
    5a14:	f002 f974 	bl	7d00 <assert_post_action>
	__asm__ volatile(
    5a18:	f385 8811 	msr	BASEPRI, r5
    5a1c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
    5a20:	bd38      	pop	{r3, r4, r5, pc}
    5a22:	bf00      	nop
    5a24:	20001540 	.word	0x20001540
    5a28:	0000b7ac 	.word	0x0000b7ac
    5a2c:	0000b7d2 	.word	0x0000b7d2
    5a30:	0000b021 	.word	0x0000b021
    5a34:	0000b7e7 	.word	0x0000b7e7
    5a38:	0000c5d8 	.word	0x0000c5d8
    5a3c:	0000c626 	.word	0x0000c626
    5a40:	0000bfd5 	.word	0x0000bfd5
    5a44:	20001510 	.word	0x20001510
    5a48:	0000c651 	.word	0x0000c651
    5a4c:	0000b7ff 	.word	0x0000b7ff
    5a50:	0000b816 	.word	0x0000b816

00005a54 <z_priq_dumb_remove>:
	sys_dlist_append(pq, &thread->base.qnode_dlist);
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    5a54:	4b0c      	ldr	r3, [pc, #48]	; (5a88 <z_priq_dumb_remove+0x34>)
{
    5a56:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    5a58:	4299      	cmp	r1, r3
{
    5a5a:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    5a5c:	d10b      	bne.n	5a76 <z_priq_dumb_remove+0x22>
    5a5e:	490b      	ldr	r1, [pc, #44]	; (5a8c <z_priq_dumb_remove+0x38>)
    5a60:	480b      	ldr	r0, [pc, #44]	; (5a90 <z_priq_dumb_remove+0x3c>)
    5a62:	f240 33bf 	movw	r3, #959	; 0x3bf
    5a66:	4a0b      	ldr	r2, [pc, #44]	; (5a94 <z_priq_dumb_remove+0x40>)
    5a68:	f001 fef8 	bl	785c <printk>
    5a6c:	f240 31bf 	movw	r1, #959	; 0x3bf
    5a70:	4808      	ldr	r0, [pc, #32]	; (5a94 <z_priq_dumb_remove+0x40>)
    5a72:	f002 f945 	bl	7d00 <assert_post_action>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    5a76:	e9d4 3200 	ldrd	r3, r2, [r4]
    5a7a:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    5a7c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    5a7e:	2300      	movs	r3, #0
	node->prev = NULL;
    5a80:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    5a84:	bd10      	pop	{r4, pc}
    5a86:	bf00      	nop
    5a88:	20000f80 	.word	0x20000f80
    5a8c:	0000c6a3 	.word	0x0000c6a3
    5a90:	0000b021 	.word	0x0000b021
    5a94:	0000c681 	.word	0x0000c681

00005a98 <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
    5a98:	6883      	ldr	r3, [r0, #8]
{
    5a9a:	b510      	push	{r4, lr}
    5a9c:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
    5a9e:	b95b      	cbnz	r3, 5ab8 <unpend_thread_no_timeout+0x20>
    5aa0:	490b      	ldr	r1, [pc, #44]	; (5ad0 <unpend_thread_no_timeout+0x38>)
    5aa2:	480c      	ldr	r0, [pc, #48]	; (5ad4 <unpend_thread_no_timeout+0x3c>)
    5aa4:	f240 233b 	movw	r3, #571	; 0x23b
    5aa8:	4a0b      	ldr	r2, [pc, #44]	; (5ad8 <unpend_thread_no_timeout+0x40>)
    5aaa:	f001 fed7 	bl	785c <printk>
    5aae:	f240 213b 	movw	r1, #571	; 0x23b
    5ab2:	4809      	ldr	r0, [pc, #36]	; (5ad8 <unpend_thread_no_timeout+0x40>)
    5ab4:	f002 f924 	bl	7d00 <assert_post_action>
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
    5ab8:	4621      	mov	r1, r4
    5aba:	68a0      	ldr	r0, [r4, #8]
    5abc:	f7ff ffca 	bl	5a54 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    5ac0:	7b63      	ldrb	r3, [r4, #13]
    5ac2:	f023 0302 	bic.w	r3, r3, #2
    5ac6:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    5ac8:	2300      	movs	r3, #0
    5aca:	60a3      	str	r3, [r4, #8]
}
    5acc:	bd10      	pop	{r4, pc}
    5ace:	bf00      	nop
    5ad0:	0000c6c4 	.word	0x0000c6c4
    5ad4:	0000b021 	.word	0x0000b021
    5ad8:	0000c681 	.word	0x0000c681

00005adc <z_unpend_thread>:
{
    5adc:	b538      	push	{r3, r4, r5, lr}
    5ade:	4604      	mov	r4, r0
	__asm__ volatile(
    5ae0:	f04f 0320 	mov.w	r3, #32
    5ae4:	f3ef 8511 	mrs	r5, BASEPRI
    5ae8:	f383 8811 	msr	BASEPRI, r3
    5aec:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5af0:	4819      	ldr	r0, [pc, #100]	; (5b58 <z_unpend_thread+0x7c>)
    5af2:	f001 f927 	bl	6d44 <z_spin_lock_valid>
    5af6:	b968      	cbnz	r0, 5b14 <z_unpend_thread+0x38>
    5af8:	2381      	movs	r3, #129	; 0x81
    5afa:	4a18      	ldr	r2, [pc, #96]	; (5b5c <z_unpend_thread+0x80>)
    5afc:	4918      	ldr	r1, [pc, #96]	; (5b60 <z_unpend_thread+0x84>)
    5afe:	4819      	ldr	r0, [pc, #100]	; (5b64 <z_unpend_thread+0x88>)
    5b00:	f001 feac 	bl	785c <printk>
    5b04:	4914      	ldr	r1, [pc, #80]	; (5b58 <z_unpend_thread+0x7c>)
    5b06:	4818      	ldr	r0, [pc, #96]	; (5b68 <z_unpend_thread+0x8c>)
    5b08:	f001 fea8 	bl	785c <printk>
    5b0c:	2181      	movs	r1, #129	; 0x81
    5b0e:	4813      	ldr	r0, [pc, #76]	; (5b5c <z_unpend_thread+0x80>)
    5b10:	f002 f8f6 	bl	7d00 <assert_post_action>
	z_spin_lock_set_owner(l);
    5b14:	4810      	ldr	r0, [pc, #64]	; (5b58 <z_unpend_thread+0x7c>)
    5b16:	f001 f931 	bl	6d7c <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
    5b1a:	4620      	mov	r0, r4
    5b1c:	f7ff ffbc 	bl	5a98 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5b20:	480d      	ldr	r0, [pc, #52]	; (5b58 <z_unpend_thread+0x7c>)
    5b22:	f001 f91d 	bl	6d60 <z_spin_unlock_valid>
    5b26:	b968      	cbnz	r0, 5b44 <z_unpend_thread+0x68>
    5b28:	23ac      	movs	r3, #172	; 0xac
    5b2a:	4a0c      	ldr	r2, [pc, #48]	; (5b5c <z_unpend_thread+0x80>)
    5b2c:	490f      	ldr	r1, [pc, #60]	; (5b6c <z_unpend_thread+0x90>)
    5b2e:	480d      	ldr	r0, [pc, #52]	; (5b64 <z_unpend_thread+0x88>)
    5b30:	f001 fe94 	bl	785c <printk>
    5b34:	4908      	ldr	r1, [pc, #32]	; (5b58 <z_unpend_thread+0x7c>)
    5b36:	480e      	ldr	r0, [pc, #56]	; (5b70 <z_unpend_thread+0x94>)
    5b38:	f001 fe90 	bl	785c <printk>
    5b3c:	21ac      	movs	r1, #172	; 0xac
    5b3e:	4807      	ldr	r0, [pc, #28]	; (5b5c <z_unpend_thread+0x80>)
    5b40:	f002 f8de 	bl	7d00 <assert_post_action>
	__asm__ volatile(
    5b44:	f385 8811 	msr	BASEPRI, r5
    5b48:	f3bf 8f6f 	isb	sy
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    5b4c:	f104 0018 	add.w	r0, r4, #24
}
    5b50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5b54:	f001 bb7c 	b.w	7250 <z_abort_timeout>
    5b58:	20001540 	.word	0x20001540
    5b5c:	0000b7ac 	.word	0x0000b7ac
    5b60:	0000b7d2 	.word	0x0000b7d2
    5b64:	0000b021 	.word	0x0000b021
    5b68:	0000b7e7 	.word	0x0000b7e7
    5b6c:	0000b7ff 	.word	0x0000b7ff
    5b70:	0000b816 	.word	0x0000b816

00005b74 <update_cache>:
{
    5b74:	b538      	push	{r3, r4, r5, lr}
	thread = _priq_run_best(&_kernel.ready_q.runq);
    5b76:	4c15      	ldr	r4, [pc, #84]	; (5bcc <update_cache+0x58>)
{
    5b78:	4602      	mov	r2, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
    5b7a:	f104 0024 	add.w	r0, r4, #36	; 0x24
    5b7e:	f004 fb05 	bl	a18c <z_priq_dumb_best>
	return thread ? thread : _current_cpu->idle_thread;
    5b82:	4605      	mov	r5, r0
    5b84:	b900      	cbnz	r0, 5b88 <update_cache+0x14>
    5b86:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
    5b88:	b9ca      	cbnz	r2, 5bbe <update_cache+0x4a>
	__ASSERT(_current != NULL, "");
    5b8a:	68a3      	ldr	r3, [r4, #8]
    5b8c:	b963      	cbnz	r3, 5ba8 <update_cache+0x34>
    5b8e:	4910      	ldr	r1, [pc, #64]	; (5bd0 <update_cache+0x5c>)
    5b90:	2378      	movs	r3, #120	; 0x78
    5b92:	4a10      	ldr	r2, [pc, #64]	; (5bd4 <update_cache+0x60>)
    5b94:	4810      	ldr	r0, [pc, #64]	; (5bd8 <update_cache+0x64>)
    5b96:	f001 fe61 	bl	785c <printk>
    5b9a:	4810      	ldr	r0, [pc, #64]	; (5bdc <update_cache+0x68>)
    5b9c:	f001 fe5e 	bl	785c <printk>
    5ba0:	2178      	movs	r1, #120	; 0x78
    5ba2:	480c      	ldr	r0, [pc, #48]	; (5bd4 <update_cache+0x60>)
    5ba4:	f002 f8ac 	bl	7d00 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
    5ba8:	68a3      	ldr	r3, [r4, #8]
    5baa:	7b5a      	ldrb	r2, [r3, #13]
    5bac:	06d2      	lsls	r2, r2, #27
    5bae:	d106      	bne.n	5bbe <update_cache+0x4a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    5bb0:	69aa      	ldr	r2, [r5, #24]
    5bb2:	b922      	cbnz	r2, 5bbe <update_cache+0x4a>
	if (is_preempt(_current) || is_metairq(thread)) {
    5bb4:	89da      	ldrh	r2, [r3, #14]
    5bb6:	2a7f      	cmp	r2, #127	; 0x7f
    5bb8:	d901      	bls.n	5bbe <update_cache+0x4a>
		_kernel.ready_q.cache = _current;
    5bba:	6223      	str	r3, [r4, #32]
}
    5bbc:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    5bbe:	68a3      	ldr	r3, [r4, #8]
    5bc0:	42ab      	cmp	r3, r5
    5bc2:	d001      	beq.n	5bc8 <update_cache+0x54>
			z_reset_time_slice();
    5bc4:	f7ff fe0a 	bl	57dc <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    5bc8:	6225      	str	r5, [r4, #32]
}
    5bca:	e7f7      	b.n	5bbc <update_cache+0x48>
    5bcc:	20001510 	.word	0x20001510
    5bd0:	0000c6db 	.word	0x0000c6db
    5bd4:	0000c681 	.word	0x0000c681
    5bd8:	0000b021 	.word	0x0000b021
    5bdc:	0000bfd5 	.word	0x0000bfd5

00005be0 <unready_thread>:
{
    5be0:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
    5be2:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    5be6:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    5be8:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
    5bea:	7b43      	ldrb	r3, [r0, #13]
    5bec:	da06      	bge.n	5bfc <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5bee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		_priq_run_remove(pq, thread);
    5bf2:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5bf4:	7343      	strb	r3, [r0, #13]
		_priq_run_remove(pq, thread);
    5bf6:	4806      	ldr	r0, [pc, #24]	; (5c10 <unready_thread+0x30>)
    5bf8:	f7ff ff2c 	bl	5a54 <z_priq_dumb_remove>
	update_cache(thread == _current);
    5bfc:	4b05      	ldr	r3, [pc, #20]	; (5c14 <unready_thread+0x34>)
    5bfe:	6898      	ldr	r0, [r3, #8]
    5c00:	1b03      	subs	r3, r0, r4
    5c02:	4258      	negs	r0, r3
    5c04:	4158      	adcs	r0, r3
}
    5c06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
    5c0a:	f7ff bfb3 	b.w	5b74 <update_cache>
    5c0e:	bf00      	nop
    5c10:	20001534 	.word	0x20001534
    5c14:	20001510 	.word	0x20001510

00005c18 <add_to_waitq_locked>:
{
    5c18:	b538      	push	{r3, r4, r5, lr}
    5c1a:	4604      	mov	r4, r0
    5c1c:	460d      	mov	r5, r1
	unready_thread(thread);
    5c1e:	f7ff ffdf 	bl	5be0 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    5c22:	7b63      	ldrb	r3, [r4, #13]
    5c24:	f043 0302 	orr.w	r3, r3, #2
    5c28:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    5c2a:	b1f5      	cbz	r5, 5c6a <add_to_waitq_locked+0x52>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    5c2c:	4b16      	ldr	r3, [pc, #88]	; (5c88 <add_to_waitq_locked+0x70>)
		thread->base.pended_on = wait_q;
    5c2e:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    5c30:	429c      	cmp	r4, r3
    5c32:	d10b      	bne.n	5c4c <add_to_waitq_locked+0x34>
    5c34:	4915      	ldr	r1, [pc, #84]	; (5c8c <add_to_waitq_locked+0x74>)
    5c36:	4816      	ldr	r0, [pc, #88]	; (5c90 <add_to_waitq_locked+0x78>)
    5c38:	f44f 736c 	mov.w	r3, #944	; 0x3b0
    5c3c:	4a15      	ldr	r2, [pc, #84]	; (5c94 <add_to_waitq_locked+0x7c>)
    5c3e:	f001 fe0d 	bl	785c <printk>
    5c42:	f44f 716c 	mov.w	r1, #944	; 0x3b0
    5c46:	4813      	ldr	r0, [pc, #76]	; (5c94 <add_to_waitq_locked+0x7c>)
    5c48:	f002 f85a 	bl	7d00 <assert_post_action>
	return list->head == list;
    5c4c:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5c4e:	429d      	cmp	r5, r3
    5c50:	d012      	beq.n	5c78 <add_to_waitq_locked+0x60>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5c52:	b18b      	cbz	r3, 5c78 <add_to_waitq_locked+0x60>
	if (thread_1->base.prio < thread_2->base.prio) {
    5c54:	f994 200e 	ldrsb.w	r2, [r4, #14]
    5c58:	f993 100e 	ldrsb.w	r1, [r3, #14]
    5c5c:	4291      	cmp	r1, r2
    5c5e:	dd05      	ble.n	5c6c <add_to_waitq_locked+0x54>
	node->prev = successor->prev;
    5c60:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    5c62:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
    5c66:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    5c68:	605c      	str	r4, [r3, #4]
}
    5c6a:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    5c6c:	6869      	ldr	r1, [r5, #4]
    5c6e:	428b      	cmp	r3, r1
    5c70:	d002      	beq.n	5c78 <add_to_waitq_locked+0x60>
    5c72:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5c74:	2b00      	cmp	r3, #0
    5c76:	d1ef      	bne.n	5c58 <add_to_waitq_locked+0x40>
	node->prev = list->tail;
    5c78:	686b      	ldr	r3, [r5, #4]
	node->next = list;
    5c7a:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
    5c7c:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    5c7e:	686b      	ldr	r3, [r5, #4]
    5c80:	601c      	str	r4, [r3, #0]
	list->tail = node;
    5c82:	606c      	str	r4, [r5, #4]
}
    5c84:	e7f1      	b.n	5c6a <add_to_waitq_locked+0x52>
    5c86:	bf00      	nop
    5c88:	20000f80 	.word	0x20000f80
    5c8c:	0000c6a3 	.word	0x0000c6a3
    5c90:	0000b021 	.word	0x0000b021
    5c94:	0000c681 	.word	0x0000c681

00005c98 <pend>:
{
    5c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5c9c:	4604      	mov	r4, r0
    5c9e:	4688      	mov	r8, r1
    5ca0:	4616      	mov	r6, r2
    5ca2:	461d      	mov	r5, r3
	__asm__ volatile(
    5ca4:	f04f 0320 	mov.w	r3, #32
    5ca8:	f3ef 8711 	mrs	r7, BASEPRI
    5cac:	f383 8811 	msr	BASEPRI, r3
    5cb0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5cb4:	481f      	ldr	r0, [pc, #124]	; (5d34 <pend+0x9c>)
    5cb6:	f001 f845 	bl	6d44 <z_spin_lock_valid>
    5cba:	b968      	cbnz	r0, 5cd8 <pend+0x40>
    5cbc:	2381      	movs	r3, #129	; 0x81
    5cbe:	4a1e      	ldr	r2, [pc, #120]	; (5d38 <pend+0xa0>)
    5cc0:	491e      	ldr	r1, [pc, #120]	; (5d3c <pend+0xa4>)
    5cc2:	481f      	ldr	r0, [pc, #124]	; (5d40 <pend+0xa8>)
    5cc4:	f001 fdca 	bl	785c <printk>
    5cc8:	491a      	ldr	r1, [pc, #104]	; (5d34 <pend+0x9c>)
    5cca:	481e      	ldr	r0, [pc, #120]	; (5d44 <pend+0xac>)
    5ccc:	f001 fdc6 	bl	785c <printk>
    5cd0:	2181      	movs	r1, #129	; 0x81
    5cd2:	4819      	ldr	r0, [pc, #100]	; (5d38 <pend+0xa0>)
    5cd4:	f002 f814 	bl	7d00 <assert_post_action>
	z_spin_lock_set_owner(l);
    5cd8:	4816      	ldr	r0, [pc, #88]	; (5d34 <pend+0x9c>)
    5cda:	f001 f84f 	bl	6d7c <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
    5cde:	4620      	mov	r0, r4
    5ce0:	4641      	mov	r1, r8
    5ce2:	f7ff ff99 	bl	5c18 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5ce6:	4813      	ldr	r0, [pc, #76]	; (5d34 <pend+0x9c>)
    5ce8:	f001 f83a 	bl	6d60 <z_spin_unlock_valid>
    5cec:	b968      	cbnz	r0, 5d0a <pend+0x72>
    5cee:	23ac      	movs	r3, #172	; 0xac
    5cf0:	4a11      	ldr	r2, [pc, #68]	; (5d38 <pend+0xa0>)
    5cf2:	4915      	ldr	r1, [pc, #84]	; (5d48 <pend+0xb0>)
    5cf4:	4812      	ldr	r0, [pc, #72]	; (5d40 <pend+0xa8>)
    5cf6:	f001 fdb1 	bl	785c <printk>
    5cfa:	490e      	ldr	r1, [pc, #56]	; (5d34 <pend+0x9c>)
    5cfc:	4813      	ldr	r0, [pc, #76]	; (5d4c <pend+0xb4>)
    5cfe:	f001 fdad 	bl	785c <printk>
    5d02:	21ac      	movs	r1, #172	; 0xac
    5d04:	480c      	ldr	r0, [pc, #48]	; (5d38 <pend+0xa0>)
    5d06:	f001 fffb 	bl	7d00 <assert_post_action>
	__asm__ volatile(
    5d0a:	f387 8811 	msr	BASEPRI, r7
    5d0e:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5d12:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    5d16:	bf08      	it	eq
    5d18:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    5d1c:	d008      	beq.n	5d30 <pend+0x98>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    5d1e:	4632      	mov	r2, r6
    5d20:	462b      	mov	r3, r5
    5d22:	f104 0018 	add.w	r0, r4, #24
    5d26:	490a      	ldr	r1, [pc, #40]	; (5d50 <pend+0xb8>)
}
    5d28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5d2c:	f001 b9c2 	b.w	70b4 <z_add_timeout>
    5d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5d34:	20001540 	.word	0x20001540
    5d38:	0000b7ac 	.word	0x0000b7ac
    5d3c:	0000b7d2 	.word	0x0000b7d2
    5d40:	0000b021 	.word	0x0000b021
    5d44:	0000b7e7 	.word	0x0000b7e7
    5d48:	0000b7ff 	.word	0x0000b7ff
    5d4c:	0000b816 	.word	0x0000b816
    5d50:	00006211 	.word	0x00006211

00005d54 <z_pend_curr>:
{
    5d54:	b538      	push	{r3, r4, r5, lr}
    5d56:	4604      	mov	r4, r0
	pending_current = _current;
    5d58:	4b10      	ldr	r3, [pc, #64]	; (5d9c <z_pend_curr+0x48>)
{
    5d5a:	460d      	mov	r5, r1
	pending_current = _current;
    5d5c:	6898      	ldr	r0, [r3, #8]
    5d5e:	4b10      	ldr	r3, [pc, #64]	; (5da0 <z_pend_curr+0x4c>)
{
    5d60:	4611      	mov	r1, r2
	pending_current = _current;
    5d62:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    5d64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    5d68:	f7ff ff96 	bl	5c98 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5d6c:	4620      	mov	r0, r4
    5d6e:	f000 fff7 	bl	6d60 <z_spin_unlock_valid>
    5d72:	b968      	cbnz	r0, 5d90 <z_pend_curr+0x3c>
    5d74:	23c3      	movs	r3, #195	; 0xc3
    5d76:	4a0b      	ldr	r2, [pc, #44]	; (5da4 <z_pend_curr+0x50>)
    5d78:	490b      	ldr	r1, [pc, #44]	; (5da8 <z_pend_curr+0x54>)
    5d7a:	480c      	ldr	r0, [pc, #48]	; (5dac <z_pend_curr+0x58>)
    5d7c:	f001 fd6e 	bl	785c <printk>
    5d80:	4621      	mov	r1, r4
    5d82:	480b      	ldr	r0, [pc, #44]	; (5db0 <z_pend_curr+0x5c>)
    5d84:	f001 fd6a 	bl	785c <printk>
    5d88:	21c3      	movs	r1, #195	; 0xc3
    5d8a:	4806      	ldr	r0, [pc, #24]	; (5da4 <z_pend_curr+0x50>)
    5d8c:	f001 ffb8 	bl	7d00 <assert_post_action>
    5d90:	4628      	mov	r0, r5
}
    5d92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5d96:	f7fc bb5d 	b.w	2454 <arch_swap>
    5d9a:	bf00      	nop
    5d9c:	20001510 	.word	0x20001510
    5da0:	2000153c 	.word	0x2000153c
    5da4:	0000b7ac 	.word	0x0000b7ac
    5da8:	0000b7ff 	.word	0x0000b7ff
    5dac:	0000b021 	.word	0x0000b021
    5db0:	0000b816 	.word	0x0000b816

00005db4 <k_sched_unlock>:
{
    5db4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    5db6:	f04f 0320 	mov.w	r3, #32
    5dba:	f3ef 8511 	mrs	r5, BASEPRI
    5dbe:	f383 8811 	msr	BASEPRI, r3
    5dc2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5dc6:	482d      	ldr	r0, [pc, #180]	; (5e7c <k_sched_unlock+0xc8>)
    5dc8:	f000 ffbc 	bl	6d44 <z_spin_lock_valid>
    5dcc:	b968      	cbnz	r0, 5dea <k_sched_unlock+0x36>
    5dce:	2381      	movs	r3, #129	; 0x81
    5dd0:	4a2b      	ldr	r2, [pc, #172]	; (5e80 <k_sched_unlock+0xcc>)
    5dd2:	492c      	ldr	r1, [pc, #176]	; (5e84 <k_sched_unlock+0xd0>)
    5dd4:	482c      	ldr	r0, [pc, #176]	; (5e88 <k_sched_unlock+0xd4>)
    5dd6:	f001 fd41 	bl	785c <printk>
    5dda:	4928      	ldr	r1, [pc, #160]	; (5e7c <k_sched_unlock+0xc8>)
    5ddc:	482b      	ldr	r0, [pc, #172]	; (5e8c <k_sched_unlock+0xd8>)
    5dde:	f001 fd3d 	bl	785c <printk>
    5de2:	2181      	movs	r1, #129	; 0x81
    5de4:	4826      	ldr	r0, [pc, #152]	; (5e80 <k_sched_unlock+0xcc>)
    5de6:	f001 ff8b 	bl	7d00 <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0, "");
    5dea:	4c29      	ldr	r4, [pc, #164]	; (5e90 <k_sched_unlock+0xdc>)
	z_spin_lock_set_owner(l);
    5dec:	4823      	ldr	r0, [pc, #140]	; (5e7c <k_sched_unlock+0xc8>)
    5dee:	f000 ffc5 	bl	6d7c <z_spin_lock_set_owner>
    5df2:	68a3      	ldr	r3, [r4, #8]
    5df4:	7bdb      	ldrb	r3, [r3, #15]
    5df6:	b973      	cbnz	r3, 5e16 <k_sched_unlock+0x62>
    5df8:	4926      	ldr	r1, [pc, #152]	; (5e94 <k_sched_unlock+0xe0>)
    5dfa:	f240 334f 	movw	r3, #847	; 0x34f
    5dfe:	4a26      	ldr	r2, [pc, #152]	; (5e98 <k_sched_unlock+0xe4>)
    5e00:	4821      	ldr	r0, [pc, #132]	; (5e88 <k_sched_unlock+0xd4>)
    5e02:	f001 fd2b 	bl	785c <printk>
    5e06:	4825      	ldr	r0, [pc, #148]	; (5e9c <k_sched_unlock+0xe8>)
    5e08:	f001 fd28 	bl	785c <printk>
    5e0c:	f240 314f 	movw	r1, #847	; 0x34f
    5e10:	4821      	ldr	r0, [pc, #132]	; (5e98 <k_sched_unlock+0xe4>)
    5e12:	f001 ff75 	bl	7d00 <assert_post_action>
    5e16:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
    5e1a:	b173      	cbz	r3, 5e3a <k_sched_unlock+0x86>
    5e1c:	4920      	ldr	r1, [pc, #128]	; (5ea0 <k_sched_unlock+0xec>)
    5e1e:	f44f 7354 	mov.w	r3, #848	; 0x350
    5e22:	4a1d      	ldr	r2, [pc, #116]	; (5e98 <k_sched_unlock+0xe4>)
    5e24:	4818      	ldr	r0, [pc, #96]	; (5e88 <k_sched_unlock+0xd4>)
    5e26:	f001 fd19 	bl	785c <printk>
    5e2a:	481c      	ldr	r0, [pc, #112]	; (5e9c <k_sched_unlock+0xe8>)
    5e2c:	f001 fd16 	bl	785c <printk>
    5e30:	f44f 7154 	mov.w	r1, #848	; 0x350
    5e34:	4818      	ldr	r0, [pc, #96]	; (5e98 <k_sched_unlock+0xe4>)
    5e36:	f001 ff63 	bl	7d00 <assert_post_action>
		++_current->base.sched_locked;
    5e3a:	68a2      	ldr	r2, [r4, #8]
		update_cache(0);
    5e3c:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    5e3e:	7bd3      	ldrb	r3, [r2, #15]
    5e40:	3301      	adds	r3, #1
    5e42:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    5e44:	f7ff fe96 	bl	5b74 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5e48:	480c      	ldr	r0, [pc, #48]	; (5e7c <k_sched_unlock+0xc8>)
    5e4a:	f000 ff89 	bl	6d60 <z_spin_unlock_valid>
    5e4e:	b968      	cbnz	r0, 5e6c <k_sched_unlock+0xb8>
    5e50:	23ac      	movs	r3, #172	; 0xac
    5e52:	4a0b      	ldr	r2, [pc, #44]	; (5e80 <k_sched_unlock+0xcc>)
    5e54:	4913      	ldr	r1, [pc, #76]	; (5ea4 <k_sched_unlock+0xf0>)
    5e56:	480c      	ldr	r0, [pc, #48]	; (5e88 <k_sched_unlock+0xd4>)
    5e58:	f001 fd00 	bl	785c <printk>
    5e5c:	4907      	ldr	r1, [pc, #28]	; (5e7c <k_sched_unlock+0xc8>)
    5e5e:	4812      	ldr	r0, [pc, #72]	; (5ea8 <k_sched_unlock+0xf4>)
    5e60:	f001 fcfc 	bl	785c <printk>
    5e64:	21ac      	movs	r1, #172	; 0xac
    5e66:	4806      	ldr	r0, [pc, #24]	; (5e80 <k_sched_unlock+0xcc>)
    5e68:	f001 ff4a 	bl	7d00 <assert_post_action>
	__asm__ volatile(
    5e6c:	f385 8811 	msr	BASEPRI, r5
    5e70:	f3bf 8f6f 	isb	sy
}
    5e74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
    5e78:	f004 b97e 	b.w	a178 <z_reschedule_unlocked>
    5e7c:	20001540 	.word	0x20001540
    5e80:	0000b7ac 	.word	0x0000b7ac
    5e84:	0000b7d2 	.word	0x0000b7d2
    5e88:	0000b021 	.word	0x0000b021
    5e8c:	0000b7e7 	.word	0x0000b7e7
    5e90:	20001510 	.word	0x20001510
    5e94:	0000c702 	.word	0x0000c702
    5e98:	0000c681 	.word	0x0000c681
    5e9c:	0000bfd5 	.word	0x0000bfd5
    5ea0:	0000c5d8 	.word	0x0000c5d8
    5ea4:	0000b7ff 	.word	0x0000b7ff
    5ea8:	0000b816 	.word	0x0000b816

00005eac <move_thread_to_end_of_prio_q>:
{
    5eac:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    5eae:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    5eb2:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    5eb4:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
    5eb6:	7b43      	ldrb	r3, [r0, #13]
    5eb8:	da06      	bge.n	5ec8 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5eba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		_priq_run_remove(pq, thread);
    5ebe:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5ec0:	7343      	strb	r3, [r0, #13]
		_priq_run_remove(pq, thread);
    5ec2:	481e      	ldr	r0, [pc, #120]	; (5f3c <move_thread_to_end_of_prio_q+0x90>)
    5ec4:	f7ff fdc6 	bl	5a54 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    5ec8:	7b63      	ldrb	r3, [r4, #13]
    5eca:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5ece:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    5ed0:	4b1b      	ldr	r3, [pc, #108]	; (5f40 <move_thread_to_end_of_prio_q+0x94>)
    5ed2:	429c      	cmp	r4, r3
    5ed4:	d10b      	bne.n	5eee <move_thread_to_end_of_prio_q+0x42>
    5ed6:	491b      	ldr	r1, [pc, #108]	; (5f44 <move_thread_to_end_of_prio_q+0x98>)
    5ed8:	481b      	ldr	r0, [pc, #108]	; (5f48 <move_thread_to_end_of_prio_q+0x9c>)
    5eda:	f44f 736c 	mov.w	r3, #944	; 0x3b0
    5ede:	4a1b      	ldr	r2, [pc, #108]	; (5f4c <move_thread_to_end_of_prio_q+0xa0>)
    5ee0:	f001 fcbc 	bl	785c <printk>
    5ee4:	f44f 716c 	mov.w	r1, #944	; 0x3b0
    5ee8:	4818      	ldr	r0, [pc, #96]	; (5f4c <move_thread_to_end_of_prio_q+0xa0>)
    5eea:	f001 ff09 	bl	7d00 <assert_post_action>
	return list->head == list;
    5eee:	4a18      	ldr	r2, [pc, #96]	; (5f50 <move_thread_to_end_of_prio_q+0xa4>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5ef0:	f102 0024 	add.w	r0, r2, #36	; 0x24
	return (node == list->tail) ? NULL : node->next;
    5ef4:	e9d2 3109 	ldrd	r3, r1, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5ef8:	4283      	cmp	r3, r0
    5efa:	d018      	beq.n	5f2e <move_thread_to_end_of_prio_q+0x82>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5efc:	b1bb      	cbz	r3, 5f2e <move_thread_to_end_of_prio_q+0x82>
	if (thread_1->base.prio < thread_2->base.prio) {
    5efe:	f994 500e 	ldrsb.w	r5, [r4, #14]
    5f02:	f993 600e 	ldrsb.w	r6, [r3, #14]
    5f06:	42ae      	cmp	r6, r5
    5f08:	dd0c      	ble.n	5f24 <move_thread_to_end_of_prio_q+0x78>
	node->prev = successor->prev;
    5f0a:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    5f0c:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
    5f10:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    5f12:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
    5f14:	6890      	ldr	r0, [r2, #8]
    5f16:	1b03      	subs	r3, r0, r4
    5f18:	4258      	negs	r0, r3
    5f1a:	4158      	adcs	r0, r3
}
    5f1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    5f20:	f7ff be28 	b.w	5b74 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    5f24:	4299      	cmp	r1, r3
    5f26:	d002      	beq.n	5f2e <move_thread_to_end_of_prio_q+0x82>
    5f28:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5f2a:	2b00      	cmp	r3, #0
    5f2c:	d1e9      	bne.n	5f02 <move_thread_to_end_of_prio_q+0x56>
	node->prev = list->tail;
    5f2e:	e9c4 0100 	strd	r0, r1, [r4]
	list->tail->next = node;
    5f32:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5f34:	601c      	str	r4, [r3, #0]
	list->tail = node;
    5f36:	6294      	str	r4, [r2, #40]	; 0x28
}
    5f38:	e7ec      	b.n	5f14 <move_thread_to_end_of_prio_q+0x68>
    5f3a:	bf00      	nop
    5f3c:	20001534 	.word	0x20001534
    5f40:	20000f80 	.word	0x20000f80
    5f44:	0000c6a3 	.word	0x0000c6a3
    5f48:	0000b021 	.word	0x0000b021
    5f4c:	0000c681 	.word	0x0000c681
    5f50:	20001510 	.word	0x20001510

00005f54 <z_time_slice>:
{
    5f54:	b538      	push	{r3, r4, r5, lr}
    5f56:	4604      	mov	r4, r0
	__asm__ volatile(
    5f58:	f04f 0320 	mov.w	r3, #32
    5f5c:	f3ef 8511 	mrs	r5, BASEPRI
    5f60:	f383 8811 	msr	BASEPRI, r3
    5f64:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5f68:	4829      	ldr	r0, [pc, #164]	; (6010 <z_time_slice+0xbc>)
    5f6a:	f000 feeb 	bl	6d44 <z_spin_lock_valid>
    5f6e:	b968      	cbnz	r0, 5f8c <z_time_slice+0x38>
    5f70:	2381      	movs	r3, #129	; 0x81
    5f72:	4a28      	ldr	r2, [pc, #160]	; (6014 <z_time_slice+0xc0>)
    5f74:	4928      	ldr	r1, [pc, #160]	; (6018 <z_time_slice+0xc4>)
    5f76:	4829      	ldr	r0, [pc, #164]	; (601c <z_time_slice+0xc8>)
    5f78:	f001 fc70 	bl	785c <printk>
    5f7c:	4924      	ldr	r1, [pc, #144]	; (6010 <z_time_slice+0xbc>)
    5f7e:	4828      	ldr	r0, [pc, #160]	; (6020 <z_time_slice+0xcc>)
    5f80:	f001 fc6c 	bl	785c <printk>
    5f84:	2181      	movs	r1, #129	; 0x81
    5f86:	4823      	ldr	r0, [pc, #140]	; (6014 <z_time_slice+0xc0>)
    5f88:	f001 feba 	bl	7d00 <assert_post_action>
	z_spin_lock_set_owner(l);
    5f8c:	4820      	ldr	r0, [pc, #128]	; (6010 <z_time_slice+0xbc>)
    5f8e:	f000 fef5 	bl	6d7c <z_spin_lock_set_owner>
	if (pending_current == _current) {
    5f92:	4b24      	ldr	r3, [pc, #144]	; (6024 <z_time_slice+0xd0>)
    5f94:	4a24      	ldr	r2, [pc, #144]	; (6028 <z_time_slice+0xd4>)
    5f96:	6898      	ldr	r0, [r3, #8]
    5f98:	6811      	ldr	r1, [r2, #0]
    5f9a:	4288      	cmp	r0, r1
    5f9c:	d118      	bne.n	5fd0 <z_time_slice+0x7c>
			z_reset_time_slice();
    5f9e:	f7ff fc1d 	bl	57dc <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5fa2:	481b      	ldr	r0, [pc, #108]	; (6010 <z_time_slice+0xbc>)
    5fa4:	f000 fedc 	bl	6d60 <z_spin_unlock_valid>
    5fa8:	b968      	cbnz	r0, 5fc6 <z_time_slice+0x72>
    5faa:	23ac      	movs	r3, #172	; 0xac
    5fac:	4a19      	ldr	r2, [pc, #100]	; (6014 <z_time_slice+0xc0>)
    5fae:	491f      	ldr	r1, [pc, #124]	; (602c <z_time_slice+0xd8>)
    5fb0:	481a      	ldr	r0, [pc, #104]	; (601c <z_time_slice+0xc8>)
    5fb2:	f001 fc53 	bl	785c <printk>
    5fb6:	4916      	ldr	r1, [pc, #88]	; (6010 <z_time_slice+0xbc>)
    5fb8:	481d      	ldr	r0, [pc, #116]	; (6030 <z_time_slice+0xdc>)
    5fba:	f001 fc4f 	bl	785c <printk>
    5fbe:	21ac      	movs	r1, #172	; 0xac
    5fc0:	4814      	ldr	r0, [pc, #80]	; (6014 <z_time_slice+0xc0>)
    5fc2:	f001 fe9d 	bl	7d00 <assert_post_action>
	__asm__ volatile(
    5fc6:	f385 8811 	msr	BASEPRI, r5
    5fca:	f3bf 8f6f 	isb	sy
}
    5fce:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    5fd0:	2100      	movs	r1, #0
    5fd2:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
    5fd4:	4a17      	ldr	r2, [pc, #92]	; (6034 <z_time_slice+0xe0>)
    5fd6:	6812      	ldr	r2, [r2, #0]
    5fd8:	b1ba      	cbz	r2, 600a <z_time_slice+0xb6>
		&& !z_is_idle_thread_object(thread);
    5fda:	89c2      	ldrh	r2, [r0, #14]
    5fdc:	2a7f      	cmp	r2, #127	; 0x7f
    5fde:	d814      	bhi.n	600a <z_time_slice+0xb6>
		&& !z_is_thread_prevented_from_running(thread)
    5fe0:	7b42      	ldrb	r2, [r0, #13]
    5fe2:	06d2      	lsls	r2, r2, #27
    5fe4:	d111      	bne.n	600a <z_time_slice+0xb6>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    5fe6:	4a14      	ldr	r2, [pc, #80]	; (6038 <z_time_slice+0xe4>)
    5fe8:	f990 100e 	ldrsb.w	r1, [r0, #14]
    5fec:	6812      	ldr	r2, [r2, #0]
    5fee:	4291      	cmp	r1, r2
    5ff0:	db0b      	blt.n	600a <z_time_slice+0xb6>
		&& !z_is_idle_thread_object(thread);
    5ff2:	4a12      	ldr	r2, [pc, #72]	; (603c <z_time_slice+0xe8>)
    5ff4:	4290      	cmp	r0, r2
    5ff6:	d008      	beq.n	600a <z_time_slice+0xb6>
		if (ticks >= _current_cpu->slice_ticks) {
    5ff8:	691a      	ldr	r2, [r3, #16]
    5ffa:	42a2      	cmp	r2, r4
    5ffc:	dc02      	bgt.n	6004 <z_time_slice+0xb0>
			move_thread_to_end_of_prio_q(_current);
    5ffe:	f7ff ff55 	bl	5eac <move_thread_to_end_of_prio_q>
    6002:	e7cc      	b.n	5f9e <z_time_slice+0x4a>
			_current_cpu->slice_ticks -= ticks;
    6004:	1b12      	subs	r2, r2, r4
		_current_cpu->slice_ticks = 0;
    6006:	611a      	str	r2, [r3, #16]
    6008:	e7cb      	b.n	5fa2 <z_time_slice+0x4e>
    600a:	2200      	movs	r2, #0
    600c:	e7fb      	b.n	6006 <z_time_slice+0xb2>
    600e:	bf00      	nop
    6010:	20001540 	.word	0x20001540
    6014:	0000b7ac 	.word	0x0000b7ac
    6018:	0000b7d2 	.word	0x0000b7d2
    601c:	0000b021 	.word	0x0000b021
    6020:	0000b7e7 	.word	0x0000b7e7
    6024:	20001510 	.word	0x20001510
    6028:	2000153c 	.word	0x2000153c
    602c:	0000b7ff 	.word	0x0000b7ff
    6030:	0000b816 	.word	0x0000b816
    6034:	20001548 	.word	0x20001548
    6038:	20001544 	.word	0x20001544
    603c:	20000f80 	.word	0x20000f80

00006040 <ready_thread>:
{
    6040:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    6042:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    6046:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    6048:	2a00      	cmp	r2, #0
    604a:	7b43      	ldrb	r3, [r0, #13]
    604c:	db39      	blt.n	60c2 <ready_thread+0x82>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    604e:	06da      	lsls	r2, r3, #27
    6050:	d137      	bne.n	60c2 <ready_thread+0x82>
    6052:	6982      	ldr	r2, [r0, #24]
    6054:	2a00      	cmp	r2, #0
    6056:	d134      	bne.n	60c2 <ready_thread+0x82>
	thread->base.thread_state |= _THREAD_QUEUED;
    6058:	f063 037f 	orn	r3, r3, #127	; 0x7f
    605c:	7343      	strb	r3, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    605e:	4b19      	ldr	r3, [pc, #100]	; (60c4 <ready_thread+0x84>)
    6060:	4298      	cmp	r0, r3
    6062:	d10b      	bne.n	607c <ready_thread+0x3c>
    6064:	4918      	ldr	r1, [pc, #96]	; (60c8 <ready_thread+0x88>)
    6066:	4819      	ldr	r0, [pc, #100]	; (60cc <ready_thread+0x8c>)
    6068:	f44f 736c 	mov.w	r3, #944	; 0x3b0
    606c:	4a18      	ldr	r2, [pc, #96]	; (60d0 <ready_thread+0x90>)
    606e:	f001 fbf5 	bl	785c <printk>
    6072:	f44f 716c 	mov.w	r1, #944	; 0x3b0
    6076:	4816      	ldr	r0, [pc, #88]	; (60d0 <ready_thread+0x90>)
    6078:	f001 fe42 	bl	7d00 <assert_post_action>
	return list->head == list;
    607c:	4a15      	ldr	r2, [pc, #84]	; (60d4 <ready_thread+0x94>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    607e:	f102 0024 	add.w	r0, r2, #36	; 0x24
	return (node == list->tail) ? NULL : node->next;
    6082:	e9d2 3109 	ldrd	r3, r1, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6086:	4283      	cmp	r3, r0
    6088:	d015      	beq.n	60b6 <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    608a:	b1a3      	cbz	r3, 60b6 <ready_thread+0x76>
	if (thread_1->base.prio < thread_2->base.prio) {
    608c:	f994 500e 	ldrsb.w	r5, [r4, #14]
    6090:	f993 600e 	ldrsb.w	r6, [r3, #14]
    6094:	42ae      	cmp	r6, r5
    6096:	dd09      	ble.n	60ac <ready_thread+0x6c>
	node->prev = successor->prev;
    6098:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    609a:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
    609e:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    60a0:	605c      	str	r4, [r3, #4]
		update_cache(0);
    60a2:	2000      	movs	r0, #0
}
    60a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
    60a8:	f7ff bd64 	b.w	5b74 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    60ac:	428b      	cmp	r3, r1
    60ae:	d002      	beq.n	60b6 <ready_thread+0x76>
    60b0:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    60b2:	2b00      	cmp	r3, #0
    60b4:	d1ec      	bne.n	6090 <ready_thread+0x50>
	node->prev = list->tail;
    60b6:	e9c4 0100 	strd	r0, r1, [r4]
	list->tail->next = node;
    60ba:	6a93      	ldr	r3, [r2, #40]	; 0x28
    60bc:	601c      	str	r4, [r3, #0]
	list->tail = node;
    60be:	6294      	str	r4, [r2, #40]	; 0x28
}
    60c0:	e7ef      	b.n	60a2 <ready_thread+0x62>
}
    60c2:	bd70      	pop	{r4, r5, r6, pc}
    60c4:	20000f80 	.word	0x20000f80
    60c8:	0000c6a3 	.word	0x0000c6a3
    60cc:	0000b021 	.word	0x0000b021
    60d0:	0000c681 	.word	0x0000c681
    60d4:	20001510 	.word	0x20001510

000060d8 <z_ready_thread>:
{
    60d8:	b538      	push	{r3, r4, r5, lr}
    60da:	4604      	mov	r4, r0
	__asm__ volatile(
    60dc:	f04f 0320 	mov.w	r3, #32
    60e0:	f3ef 8511 	mrs	r5, BASEPRI
    60e4:	f383 8811 	msr	BASEPRI, r3
    60e8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    60ec:	4817      	ldr	r0, [pc, #92]	; (614c <z_ready_thread+0x74>)
    60ee:	f000 fe29 	bl	6d44 <z_spin_lock_valid>
    60f2:	b968      	cbnz	r0, 6110 <z_ready_thread+0x38>
    60f4:	2381      	movs	r3, #129	; 0x81
    60f6:	4a16      	ldr	r2, [pc, #88]	; (6150 <z_ready_thread+0x78>)
    60f8:	4916      	ldr	r1, [pc, #88]	; (6154 <z_ready_thread+0x7c>)
    60fa:	4817      	ldr	r0, [pc, #92]	; (6158 <z_ready_thread+0x80>)
    60fc:	f001 fbae 	bl	785c <printk>
    6100:	4912      	ldr	r1, [pc, #72]	; (614c <z_ready_thread+0x74>)
    6102:	4816      	ldr	r0, [pc, #88]	; (615c <z_ready_thread+0x84>)
    6104:	f001 fbaa 	bl	785c <printk>
    6108:	2181      	movs	r1, #129	; 0x81
    610a:	4811      	ldr	r0, [pc, #68]	; (6150 <z_ready_thread+0x78>)
    610c:	f001 fdf8 	bl	7d00 <assert_post_action>
	z_spin_lock_set_owner(l);
    6110:	480e      	ldr	r0, [pc, #56]	; (614c <z_ready_thread+0x74>)
    6112:	f000 fe33 	bl	6d7c <z_spin_lock_set_owner>
			ready_thread(thread);
    6116:	4620      	mov	r0, r4
    6118:	f7ff ff92 	bl	6040 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    611c:	480b      	ldr	r0, [pc, #44]	; (614c <z_ready_thread+0x74>)
    611e:	f000 fe1f 	bl	6d60 <z_spin_unlock_valid>
    6122:	b968      	cbnz	r0, 6140 <z_ready_thread+0x68>
    6124:	23ac      	movs	r3, #172	; 0xac
    6126:	4a0a      	ldr	r2, [pc, #40]	; (6150 <z_ready_thread+0x78>)
    6128:	490d      	ldr	r1, [pc, #52]	; (6160 <z_ready_thread+0x88>)
    612a:	480b      	ldr	r0, [pc, #44]	; (6158 <z_ready_thread+0x80>)
    612c:	f001 fb96 	bl	785c <printk>
    6130:	4906      	ldr	r1, [pc, #24]	; (614c <z_ready_thread+0x74>)
    6132:	480c      	ldr	r0, [pc, #48]	; (6164 <z_ready_thread+0x8c>)
    6134:	f001 fb92 	bl	785c <printk>
    6138:	21ac      	movs	r1, #172	; 0xac
    613a:	4805      	ldr	r0, [pc, #20]	; (6150 <z_ready_thread+0x78>)
    613c:	f001 fde0 	bl	7d00 <assert_post_action>
	__asm__ volatile(
    6140:	f385 8811 	msr	BASEPRI, r5
    6144:	f3bf 8f6f 	isb	sy
}
    6148:	bd38      	pop	{r3, r4, r5, pc}
    614a:	bf00      	nop
    614c:	20001540 	.word	0x20001540
    6150:	0000b7ac 	.word	0x0000b7ac
    6154:	0000b7d2 	.word	0x0000b7d2
    6158:	0000b021 	.word	0x0000b021
    615c:	0000b7e7 	.word	0x0000b7e7
    6160:	0000b7ff 	.word	0x0000b7ff
    6164:	0000b816 	.word	0x0000b816

00006168 <z_sched_start>:
{
    6168:	b538      	push	{r3, r4, r5, lr}
    616a:	4604      	mov	r4, r0
	__asm__ volatile(
    616c:	f04f 0320 	mov.w	r3, #32
    6170:	f3ef 8511 	mrs	r5, BASEPRI
    6174:	f383 8811 	msr	BASEPRI, r3
    6178:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    617c:	481d      	ldr	r0, [pc, #116]	; (61f4 <z_sched_start+0x8c>)
    617e:	f000 fde1 	bl	6d44 <z_spin_lock_valid>
    6182:	b968      	cbnz	r0, 61a0 <z_sched_start+0x38>
    6184:	2381      	movs	r3, #129	; 0x81
    6186:	4a1c      	ldr	r2, [pc, #112]	; (61f8 <z_sched_start+0x90>)
    6188:	491c      	ldr	r1, [pc, #112]	; (61fc <z_sched_start+0x94>)
    618a:	481d      	ldr	r0, [pc, #116]	; (6200 <z_sched_start+0x98>)
    618c:	f001 fb66 	bl	785c <printk>
    6190:	4918      	ldr	r1, [pc, #96]	; (61f4 <z_sched_start+0x8c>)
    6192:	481c      	ldr	r0, [pc, #112]	; (6204 <z_sched_start+0x9c>)
    6194:	f001 fb62 	bl	785c <printk>
    6198:	2181      	movs	r1, #129	; 0x81
    619a:	4817      	ldr	r0, [pc, #92]	; (61f8 <z_sched_start+0x90>)
    619c:	f001 fdb0 	bl	7d00 <assert_post_action>
	z_spin_lock_set_owner(l);
    61a0:	4814      	ldr	r0, [pc, #80]	; (61f4 <z_sched_start+0x8c>)
    61a2:	f000 fdeb 	bl	6d7c <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    61a6:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
    61a8:	075a      	lsls	r2, r3, #29
    61aa:	d416      	bmi.n	61da <z_sched_start+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    61ac:	4811      	ldr	r0, [pc, #68]	; (61f4 <z_sched_start+0x8c>)
    61ae:	f000 fdd7 	bl	6d60 <z_spin_unlock_valid>
    61b2:	b968      	cbnz	r0, 61d0 <z_sched_start+0x68>
    61b4:	23ac      	movs	r3, #172	; 0xac
    61b6:	4a10      	ldr	r2, [pc, #64]	; (61f8 <z_sched_start+0x90>)
    61b8:	4913      	ldr	r1, [pc, #76]	; (6208 <z_sched_start+0xa0>)
    61ba:	4811      	ldr	r0, [pc, #68]	; (6200 <z_sched_start+0x98>)
    61bc:	f001 fb4e 	bl	785c <printk>
    61c0:	490c      	ldr	r1, [pc, #48]	; (61f4 <z_sched_start+0x8c>)
    61c2:	4812      	ldr	r0, [pc, #72]	; (620c <z_sched_start+0xa4>)
    61c4:	f001 fb4a 	bl	785c <printk>
    61c8:	21ac      	movs	r1, #172	; 0xac
    61ca:	480b      	ldr	r0, [pc, #44]	; (61f8 <z_sched_start+0x90>)
    61cc:	f001 fd98 	bl	7d00 <assert_post_action>
	__asm__ volatile(
    61d0:	f385 8811 	msr	BASEPRI, r5
    61d4:	f3bf 8f6f 	isb	sy
}
    61d8:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    61da:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
    61de:	4620      	mov	r0, r4
    61e0:	7363      	strb	r3, [r4, #13]
    61e2:	f7ff ff2d 	bl	6040 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    61e6:	4629      	mov	r1, r5
}
    61e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
    61ec:	4801      	ldr	r0, [pc, #4]	; (61f4 <z_sched_start+0x8c>)
    61ee:	f7ff bb77 	b.w	58e0 <z_reschedule>
    61f2:	bf00      	nop
    61f4:	20001540 	.word	0x20001540
    61f8:	0000b7ac 	.word	0x0000b7ac
    61fc:	0000b7d2 	.word	0x0000b7d2
    6200:	0000b021 	.word	0x0000b021
    6204:	0000b7e7 	.word	0x0000b7e7
    6208:	0000b7ff 	.word	0x0000b7ff
    620c:	0000b816 	.word	0x0000b816

00006210 <z_thread_timeout>:
{
    6210:	b570      	push	{r4, r5, r6, lr}
    6212:	4604      	mov	r4, r0
	__asm__ volatile(
    6214:	f04f 0320 	mov.w	r3, #32
    6218:	f3ef 8611 	mrs	r6, BASEPRI
    621c:	f383 8811 	msr	BASEPRI, r3
    6220:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6224:	4820      	ldr	r0, [pc, #128]	; (62a8 <z_thread_timeout+0x98>)
    6226:	f000 fd8d 	bl	6d44 <z_spin_lock_valid>
    622a:	b968      	cbnz	r0, 6248 <z_thread_timeout+0x38>
    622c:	2381      	movs	r3, #129	; 0x81
    622e:	4a1f      	ldr	r2, [pc, #124]	; (62ac <z_thread_timeout+0x9c>)
    6230:	491f      	ldr	r1, [pc, #124]	; (62b0 <z_thread_timeout+0xa0>)
    6232:	4820      	ldr	r0, [pc, #128]	; (62b4 <z_thread_timeout+0xa4>)
    6234:	f001 fb12 	bl	785c <printk>
    6238:	491b      	ldr	r1, [pc, #108]	; (62a8 <z_thread_timeout+0x98>)
    623a:	481f      	ldr	r0, [pc, #124]	; (62b8 <z_thread_timeout+0xa8>)
    623c:	f001 fb0e 	bl	785c <printk>
    6240:	2181      	movs	r1, #129	; 0x81
    6242:	481a      	ldr	r0, [pc, #104]	; (62ac <z_thread_timeout+0x9c>)
    6244:	f001 fd5c 	bl	7d00 <assert_post_action>
	z_spin_lock_set_owner(l);
    6248:	4817      	ldr	r0, [pc, #92]	; (62a8 <z_thread_timeout+0x98>)
    624a:	f000 fd97 	bl	6d7c <z_spin_lock_set_owner>
		if (!killed) {
    624e:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    6252:	f013 0f28 	tst.w	r3, #40	; 0x28
    6256:	d110      	bne.n	627a <z_thread_timeout+0x6a>
			if (thread->base.pended_on != NULL) {
    6258:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    625c:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
    6260:	b113      	cbz	r3, 6268 <z_thread_timeout+0x58>
				unpend_thread_no_timeout(thread);
    6262:	4628      	mov	r0, r5
    6264:	f7ff fc18 	bl	5a98 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    6268:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
			ready_thread(thread);
    626c:	4628      	mov	r0, r5
    626e:	f023 0314 	bic.w	r3, r3, #20
    6272:	f804 3c0b 	strb.w	r3, [r4, #-11]
    6276:	f7ff fee3 	bl	6040 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    627a:	480b      	ldr	r0, [pc, #44]	; (62a8 <z_thread_timeout+0x98>)
    627c:	f000 fd70 	bl	6d60 <z_spin_unlock_valid>
    6280:	b968      	cbnz	r0, 629e <z_thread_timeout+0x8e>
    6282:	23ac      	movs	r3, #172	; 0xac
    6284:	4a09      	ldr	r2, [pc, #36]	; (62ac <z_thread_timeout+0x9c>)
    6286:	490d      	ldr	r1, [pc, #52]	; (62bc <z_thread_timeout+0xac>)
    6288:	480a      	ldr	r0, [pc, #40]	; (62b4 <z_thread_timeout+0xa4>)
    628a:	f001 fae7 	bl	785c <printk>
    628e:	4906      	ldr	r1, [pc, #24]	; (62a8 <z_thread_timeout+0x98>)
    6290:	480b      	ldr	r0, [pc, #44]	; (62c0 <z_thread_timeout+0xb0>)
    6292:	f001 fae3 	bl	785c <printk>
    6296:	21ac      	movs	r1, #172	; 0xac
    6298:	4804      	ldr	r0, [pc, #16]	; (62ac <z_thread_timeout+0x9c>)
    629a:	f001 fd31 	bl	7d00 <assert_post_action>
	__asm__ volatile(
    629e:	f386 8811 	msr	BASEPRI, r6
    62a2:	f3bf 8f6f 	isb	sy
}
    62a6:	bd70      	pop	{r4, r5, r6, pc}
    62a8:	20001540 	.word	0x20001540
    62ac:	0000b7ac 	.word	0x0000b7ac
    62b0:	0000b7d2 	.word	0x0000b7d2
    62b4:	0000b021 	.word	0x0000b021
    62b8:	0000b7e7 	.word	0x0000b7e7
    62bc:	0000b7ff 	.word	0x0000b7ff
    62c0:	0000b816 	.word	0x0000b816

000062c4 <z_set_prio>:
{
    62c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    62c6:	4604      	mov	r4, r0
    62c8:	460d      	mov	r5, r1
	__asm__ volatile(
    62ca:	f04f 0320 	mov.w	r3, #32
    62ce:	f3ef 8611 	mrs	r6, BASEPRI
    62d2:	f383 8811 	msr	BASEPRI, r3
    62d6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    62da:	483a      	ldr	r0, [pc, #232]	; (63c4 <z_set_prio+0x100>)
    62dc:	f000 fd32 	bl	6d44 <z_spin_lock_valid>
    62e0:	b968      	cbnz	r0, 62fe <z_set_prio+0x3a>
    62e2:	2381      	movs	r3, #129	; 0x81
    62e4:	4a38      	ldr	r2, [pc, #224]	; (63c8 <z_set_prio+0x104>)
    62e6:	4939      	ldr	r1, [pc, #228]	; (63cc <z_set_prio+0x108>)
    62e8:	4839      	ldr	r0, [pc, #228]	; (63d0 <z_set_prio+0x10c>)
    62ea:	f001 fab7 	bl	785c <printk>
    62ee:	4935      	ldr	r1, [pc, #212]	; (63c4 <z_set_prio+0x100>)
    62f0:	4838      	ldr	r0, [pc, #224]	; (63d4 <z_set_prio+0x110>)
    62f2:	f001 fab3 	bl	785c <printk>
    62f6:	2181      	movs	r1, #129	; 0x81
    62f8:	4833      	ldr	r0, [pc, #204]	; (63c8 <z_set_prio+0x104>)
    62fa:	f001 fd01 	bl	7d00 <assert_post_action>
	z_spin_lock_set_owner(l);
    62fe:	4831      	ldr	r0, [pc, #196]	; (63c4 <z_set_prio+0x100>)
    6300:	f000 fd3c 	bl	6d7c <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
    6304:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
    6306:	b26d      	sxtb	r5, r5
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    6308:	06da      	lsls	r2, r3, #27
    630a:	d157      	bne.n	63bc <z_set_prio+0xf8>
		if (need_sched) {
    630c:	69a2      	ldr	r2, [r4, #24]
    630e:	2a00      	cmp	r2, #0
    6310:	d154      	bne.n	63bc <z_set_prio+0xf8>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6312:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6316:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
    6318:	4621      	mov	r1, r4
    631a:	482f      	ldr	r0, [pc, #188]	; (63d8 <z_set_prio+0x114>)
    631c:	f7ff fb9a 	bl	5a54 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    6320:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
    6322:	73a5      	strb	r5, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    6324:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6328:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    632a:	4b2c      	ldr	r3, [pc, #176]	; (63dc <z_set_prio+0x118>)
    632c:	429c      	cmp	r4, r3
    632e:	d10b      	bne.n	6348 <z_set_prio+0x84>
    6330:	492b      	ldr	r1, [pc, #172]	; (63e0 <z_set_prio+0x11c>)
    6332:	4827      	ldr	r0, [pc, #156]	; (63d0 <z_set_prio+0x10c>)
    6334:	f44f 736c 	mov.w	r3, #944	; 0x3b0
    6338:	4a2a      	ldr	r2, [pc, #168]	; (63e4 <z_set_prio+0x120>)
    633a:	f001 fa8f 	bl	785c <printk>
    633e:	f44f 716c 	mov.w	r1, #944	; 0x3b0
    6342:	4828      	ldr	r0, [pc, #160]	; (63e4 <z_set_prio+0x120>)
    6344:	f001 fcdc 	bl	7d00 <assert_post_action>
	return list->head == list;
    6348:	4a27      	ldr	r2, [pc, #156]	; (63e8 <z_set_prio+0x124>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    634a:	f102 0024 	add.w	r0, r2, #36	; 0x24
	return (node == list->tail) ? NULL : node->next;
    634e:	e9d2 3109 	ldrd	r3, r1, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6352:	4283      	cmp	r3, r0
    6354:	d02c      	beq.n	63b0 <z_set_prio+0xec>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6356:	b35b      	cbz	r3, 63b0 <z_set_prio+0xec>
	if (thread_1->base.prio < thread_2->base.prio) {
    6358:	f994 500e 	ldrsb.w	r5, [r4, #14]
    635c:	f993 700e 	ldrsb.w	r7, [r3, #14]
    6360:	42af      	cmp	r7, r5
    6362:	dd20      	ble.n	63a6 <z_set_prio+0xe2>
	node->prev = successor->prev;
    6364:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    6366:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
    636a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    636c:	605c      	str	r4, [r3, #4]
			update_cache(1);
    636e:	2001      	movs	r0, #1
    6370:	f7ff fc00 	bl	5b74 <update_cache>
    6374:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6376:	4813      	ldr	r0, [pc, #76]	; (63c4 <z_set_prio+0x100>)
    6378:	f000 fcf2 	bl	6d60 <z_spin_unlock_valid>
    637c:	b968      	cbnz	r0, 639a <z_set_prio+0xd6>
    637e:	23ac      	movs	r3, #172	; 0xac
    6380:	4a11      	ldr	r2, [pc, #68]	; (63c8 <z_set_prio+0x104>)
    6382:	491a      	ldr	r1, [pc, #104]	; (63ec <z_set_prio+0x128>)
    6384:	4812      	ldr	r0, [pc, #72]	; (63d0 <z_set_prio+0x10c>)
    6386:	f001 fa69 	bl	785c <printk>
    638a:	490e      	ldr	r1, [pc, #56]	; (63c4 <z_set_prio+0x100>)
    638c:	4818      	ldr	r0, [pc, #96]	; (63f0 <z_set_prio+0x12c>)
    638e:	f001 fa65 	bl	785c <printk>
    6392:	21ac      	movs	r1, #172	; 0xac
    6394:	480c      	ldr	r0, [pc, #48]	; (63c8 <z_set_prio+0x104>)
    6396:	f001 fcb3 	bl	7d00 <assert_post_action>
	__asm__ volatile(
    639a:	f386 8811 	msr	BASEPRI, r6
    639e:	f3bf 8f6f 	isb	sy
}
    63a2:	4620      	mov	r0, r4
    63a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    63a6:	4299      	cmp	r1, r3
    63a8:	d002      	beq.n	63b0 <z_set_prio+0xec>
    63aa:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    63ac:	2b00      	cmp	r3, #0
    63ae:	d1d5      	bne.n	635c <z_set_prio+0x98>
	node->prev = list->tail;
    63b0:	e9c4 0100 	strd	r0, r1, [r4]
	list->tail->next = node;
    63b4:	6a93      	ldr	r3, [r2, #40]	; 0x28
    63b6:	601c      	str	r4, [r3, #0]
	list->tail = node;
    63b8:	6294      	str	r4, [r2, #40]	; 0x28
}
    63ba:	e7d8      	b.n	636e <z_set_prio+0xaa>
			thread->base.prio = prio;
    63bc:	73a5      	strb	r5, [r4, #14]
    63be:	2400      	movs	r4, #0
    63c0:	e7d9      	b.n	6376 <z_set_prio+0xb2>
    63c2:	bf00      	nop
    63c4:	20001540 	.word	0x20001540
    63c8:	0000b7ac 	.word	0x0000b7ac
    63cc:	0000b7d2 	.word	0x0000b7d2
    63d0:	0000b021 	.word	0x0000b021
    63d4:	0000b7e7 	.word	0x0000b7e7
    63d8:	20001534 	.word	0x20001534
    63dc:	20000f80 	.word	0x20000f80
    63e0:	0000c6a3 	.word	0x0000c6a3
    63e4:	0000c681 	.word	0x0000c681
    63e8:	20001510 	.word	0x20001510
    63ec:	0000b7ff 	.word	0x0000b7ff
    63f0:	0000b816 	.word	0x0000b816

000063f4 <z_unpend_first_thread>:
{
    63f4:	b538      	push	{r3, r4, r5, lr}
    63f6:	4604      	mov	r4, r0
	__asm__ volatile(
    63f8:	f04f 0320 	mov.w	r3, #32
    63fc:	f3ef 8511 	mrs	r5, BASEPRI
    6400:	f383 8811 	msr	BASEPRI, r3
    6404:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6408:	481b      	ldr	r0, [pc, #108]	; (6478 <z_unpend_first_thread+0x84>)
    640a:	f000 fc9b 	bl	6d44 <z_spin_lock_valid>
    640e:	b968      	cbnz	r0, 642c <z_unpend_first_thread+0x38>
    6410:	2381      	movs	r3, #129	; 0x81
    6412:	4a1a      	ldr	r2, [pc, #104]	; (647c <z_unpend_first_thread+0x88>)
    6414:	491a      	ldr	r1, [pc, #104]	; (6480 <z_unpend_first_thread+0x8c>)
    6416:	481b      	ldr	r0, [pc, #108]	; (6484 <z_unpend_first_thread+0x90>)
    6418:	f001 fa20 	bl	785c <printk>
    641c:	4916      	ldr	r1, [pc, #88]	; (6478 <z_unpend_first_thread+0x84>)
    641e:	481a      	ldr	r0, [pc, #104]	; (6488 <z_unpend_first_thread+0x94>)
    6420:	f001 fa1c 	bl	785c <printk>
    6424:	2181      	movs	r1, #129	; 0x81
    6426:	4815      	ldr	r0, [pc, #84]	; (647c <z_unpend_first_thread+0x88>)
    6428:	f001 fc6a 	bl	7d00 <assert_post_action>
	z_spin_lock_set_owner(l);
    642c:	4812      	ldr	r0, [pc, #72]	; (6478 <z_unpend_first_thread+0x84>)
    642e:	f000 fca5 	bl	6d7c <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
    6432:	4620      	mov	r0, r4
    6434:	f003 feaa 	bl	a18c <z_priq_dumb_best>
		if (thread != NULL) {
    6438:	4604      	mov	r4, r0
    643a:	b128      	cbz	r0, 6448 <z_unpend_first_thread+0x54>
			unpend_thread_no_timeout(thread);
    643c:	f7ff fb2c 	bl	5a98 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    6440:	f104 0018 	add.w	r0, r4, #24
    6444:	f000 ff04 	bl	7250 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6448:	480b      	ldr	r0, [pc, #44]	; (6478 <z_unpend_first_thread+0x84>)
    644a:	f000 fc89 	bl	6d60 <z_spin_unlock_valid>
    644e:	b968      	cbnz	r0, 646c <z_unpend_first_thread+0x78>
    6450:	23ac      	movs	r3, #172	; 0xac
    6452:	4a0a      	ldr	r2, [pc, #40]	; (647c <z_unpend_first_thread+0x88>)
    6454:	490d      	ldr	r1, [pc, #52]	; (648c <z_unpend_first_thread+0x98>)
    6456:	480b      	ldr	r0, [pc, #44]	; (6484 <z_unpend_first_thread+0x90>)
    6458:	f001 fa00 	bl	785c <printk>
    645c:	4906      	ldr	r1, [pc, #24]	; (6478 <z_unpend_first_thread+0x84>)
    645e:	480c      	ldr	r0, [pc, #48]	; (6490 <z_unpend_first_thread+0x9c>)
    6460:	f001 f9fc 	bl	785c <printk>
    6464:	21ac      	movs	r1, #172	; 0xac
    6466:	4805      	ldr	r0, [pc, #20]	; (647c <z_unpend_first_thread+0x88>)
    6468:	f001 fc4a 	bl	7d00 <assert_post_action>
	__asm__ volatile(
    646c:	f385 8811 	msr	BASEPRI, r5
    6470:	f3bf 8f6f 	isb	sy
}
    6474:	4620      	mov	r0, r4
    6476:	bd38      	pop	{r3, r4, r5, pc}
    6478:	20001540 	.word	0x20001540
    647c:	0000b7ac 	.word	0x0000b7ac
    6480:	0000b7d2 	.word	0x0000b7d2
    6484:	0000b021 	.word	0x0000b021
    6488:	0000b7e7 	.word	0x0000b7e7
    648c:	0000b7ff 	.word	0x0000b7ff
    6490:	0000b816 	.word	0x0000b816

00006494 <z_sched_init>:
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    6494:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
    6496:	4b04      	ldr	r3, [pc, #16]	; (64a8 <z_sched_init+0x14>)
    6498:	4608      	mov	r0, r1
    649a:	f103 0224 	add.w	r2, r3, #36	; 0x24
	list->tail = (sys_dnode_t *)list;
    649e:	e9c3 2209 	strd	r2, r2, [r3, #36]	; 0x24
    64a2:	f7ff b9b1 	b.w	5808 <k_sched_time_slice_set>
    64a6:	bf00      	nop
    64a8:	20001510 	.word	0x20001510

000064ac <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    64ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    64ae:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    64b2:	b173      	cbz	r3, 64d2 <z_impl_k_yield+0x26>
    64b4:	4946      	ldr	r1, [pc, #280]	; (65d0 <z_impl_k_yield+0x124>)
    64b6:	f44f 6395 	mov.w	r3, #1192	; 0x4a8
    64ba:	4a46      	ldr	r2, [pc, #280]	; (65d4 <z_impl_k_yield+0x128>)
    64bc:	4846      	ldr	r0, [pc, #280]	; (65d8 <z_impl_k_yield+0x12c>)
    64be:	f001 f9cd 	bl	785c <printk>
    64c2:	4846      	ldr	r0, [pc, #280]	; (65dc <z_impl_k_yield+0x130>)
    64c4:	f001 f9ca 	bl	785c <printk>
    64c8:	f44f 6195 	mov.w	r1, #1192	; 0x4a8
    64cc:	4841      	ldr	r0, [pc, #260]	; (65d4 <z_impl_k_yield+0x128>)
    64ce:	f001 fc17 	bl	7d00 <assert_post_action>

	if (!z_is_idle_thread_object(_current)) {
    64d2:	4d43      	ldr	r5, [pc, #268]	; (65e0 <z_impl_k_yield+0x134>)
    64d4:	4f43      	ldr	r7, [pc, #268]	; (65e4 <z_impl_k_yield+0x138>)
    64d6:	68ab      	ldr	r3, [r5, #8]
    64d8:	42bb      	cmp	r3, r7
    64da:	d062      	beq.n	65a2 <z_impl_k_yield+0xf6>
	__asm__ volatile(
    64dc:	f04f 0320 	mov.w	r3, #32
    64e0:	f3ef 8611 	mrs	r6, BASEPRI
    64e4:	f383 8811 	msr	BASEPRI, r3
    64e8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    64ec:	483e      	ldr	r0, [pc, #248]	; (65e8 <z_impl_k_yield+0x13c>)
    64ee:	f000 fc29 	bl	6d44 <z_spin_lock_valid>
    64f2:	b968      	cbnz	r0, 6510 <z_impl_k_yield+0x64>
    64f4:	2381      	movs	r3, #129	; 0x81
    64f6:	4a3d      	ldr	r2, [pc, #244]	; (65ec <z_impl_k_yield+0x140>)
    64f8:	493d      	ldr	r1, [pc, #244]	; (65f0 <z_impl_k_yield+0x144>)
    64fa:	4837      	ldr	r0, [pc, #220]	; (65d8 <z_impl_k_yield+0x12c>)
    64fc:	f001 f9ae 	bl	785c <printk>
    6500:	4939      	ldr	r1, [pc, #228]	; (65e8 <z_impl_k_yield+0x13c>)
    6502:	483c      	ldr	r0, [pc, #240]	; (65f4 <z_impl_k_yield+0x148>)
    6504:	f001 f9aa 	bl	785c <printk>
    6508:	2181      	movs	r1, #129	; 0x81
    650a:	4838      	ldr	r0, [pc, #224]	; (65ec <z_impl_k_yield+0x140>)
    650c:	f001 fbf8 	bl	7d00 <assert_post_action>
	z_spin_lock_set_owner(l);
    6510:	4835      	ldr	r0, [pc, #212]	; (65e8 <z_impl_k_yield+0x13c>)
    6512:	f000 fc33 	bl	6d7c <z_spin_lock_set_owner>
		LOCKED(&sched_spinlock) {
			if (!IS_ENABLED(CONFIG_SMP) ||
			    z_is_thread_queued(_current)) {
				dequeue_thread(&_kernel.ready_q.runq,
    6516:	68a9      	ldr	r1, [r5, #8]
		_priq_run_remove(pq, thread);
    6518:	4837      	ldr	r0, [pc, #220]	; (65f8 <z_impl_k_yield+0x14c>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    651a:	7b4b      	ldrb	r3, [r1, #13]
    651c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6520:	734b      	strb	r3, [r1, #13]
		_priq_run_remove(pq, thread);
    6522:	f7ff fa97 	bl	5a54 <z_priq_dumb_remove>
						 _current);
			}
			queue_thread(&_kernel.ready_q.runq, _current);
    6526:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    6528:	7b63      	ldrb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    652a:	42bc      	cmp	r4, r7
	thread->base.thread_state |= _THREAD_QUEUED;
    652c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6530:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    6532:	d10b      	bne.n	654c <z_impl_k_yield+0xa0>
    6534:	4931      	ldr	r1, [pc, #196]	; (65fc <z_impl_k_yield+0x150>)
    6536:	4828      	ldr	r0, [pc, #160]	; (65d8 <z_impl_k_yield+0x12c>)
    6538:	f44f 736c 	mov.w	r3, #944	; 0x3b0
    653c:	4a25      	ldr	r2, [pc, #148]	; (65d4 <z_impl_k_yield+0x128>)
    653e:	f001 f98d 	bl	785c <printk>
    6542:	f44f 716c 	mov.w	r1, #944	; 0x3b0
    6546:	4823      	ldr	r0, [pc, #140]	; (65d4 <z_impl_k_yield+0x128>)
    6548:	f001 fbda 	bl	7d00 <assert_post_action>
	return (node == list->tail) ? NULL : node->next;
    654c:	e9d5 3209 	ldrd	r3, r2, [r5, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6550:	4929      	ldr	r1, [pc, #164]	; (65f8 <z_impl_k_yield+0x14c>)
    6552:	428b      	cmp	r3, r1
    6554:	d036      	beq.n	65c4 <z_impl_k_yield+0x118>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6556:	2b00      	cmp	r3, #0
    6558:	d034      	beq.n	65c4 <z_impl_k_yield+0x118>
	if (thread_1->base.prio < thread_2->base.prio) {
    655a:	f994 000e 	ldrsb.w	r0, [r4, #14]
    655e:	f993 700e 	ldrsb.w	r7, [r3, #14]
    6562:	4287      	cmp	r7, r0
    6564:	dd29      	ble.n	65ba <z_impl_k_yield+0x10e>
	node->prev = successor->prev;
    6566:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    6568:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
    656c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    656e:	605c      	str	r4, [r3, #4]
			update_cache(1);
    6570:	2001      	movs	r0, #1
    6572:	f7ff faff 	bl	5b74 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6576:	481c      	ldr	r0, [pc, #112]	; (65e8 <z_impl_k_yield+0x13c>)
    6578:	f000 fbf2 	bl	6d60 <z_spin_unlock_valid>
    657c:	b968      	cbnz	r0, 659a <z_impl_k_yield+0xee>
    657e:	23ac      	movs	r3, #172	; 0xac
    6580:	4a1a      	ldr	r2, [pc, #104]	; (65ec <z_impl_k_yield+0x140>)
    6582:	491f      	ldr	r1, [pc, #124]	; (6600 <z_impl_k_yield+0x154>)
    6584:	4814      	ldr	r0, [pc, #80]	; (65d8 <z_impl_k_yield+0x12c>)
    6586:	f001 f969 	bl	785c <printk>
    658a:	4917      	ldr	r1, [pc, #92]	; (65e8 <z_impl_k_yield+0x13c>)
    658c:	481d      	ldr	r0, [pc, #116]	; (6604 <z_impl_k_yield+0x158>)
    658e:	f001 f965 	bl	785c <printk>
    6592:	21ac      	movs	r1, #172	; 0xac
    6594:	4815      	ldr	r0, [pc, #84]	; (65ec <z_impl_k_yield+0x140>)
    6596:	f001 fbb3 	bl	7d00 <assert_post_action>
	__asm__ volatile(
    659a:	f386 8811 	msr	BASEPRI, r6
    659e:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    65a2:	f04f 0320 	mov.w	r3, #32
    65a6:	f3ef 8011 	mrs	r0, BASEPRI
    65aa:	f383 8811 	msr	BASEPRI, r3
    65ae:	f3bf 8f6f 	isb	sy
		}
	}
	z_swap_unlocked();
}
    65b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    65b6:	f7fb bf4d 	b.w	2454 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    65ba:	4293      	cmp	r3, r2
    65bc:	d002      	beq.n	65c4 <z_impl_k_yield+0x118>
    65be:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    65c0:	2b00      	cmp	r3, #0
    65c2:	d1cc      	bne.n	655e <z_impl_k_yield+0xb2>
	node->prev = list->tail;
    65c4:	e9c4 1200 	strd	r1, r2, [r4]
	list->tail->next = node;
    65c8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    65ca:	601c      	str	r4, [r3, #0]
	list->tail = node;
    65cc:	62ac      	str	r4, [r5, #40]	; 0x28
}
    65ce:	e7cf      	b.n	6570 <z_impl_k_yield+0xc4>
    65d0:	0000c5d8 	.word	0x0000c5d8
    65d4:	0000c681 	.word	0x0000c681
    65d8:	0000b021 	.word	0x0000b021
    65dc:	0000bfd5 	.word	0x0000bfd5
    65e0:	20001510 	.word	0x20001510
    65e4:	20000f80 	.word	0x20000f80
    65e8:	20001540 	.word	0x20001540
    65ec:	0000b7ac 	.word	0x0000b7ac
    65f0:	0000b7d2 	.word	0x0000b7d2
    65f4:	0000b7e7 	.word	0x0000b7e7
    65f8:	20001534 	.word	0x20001534
    65fc:	0000c6a3 	.word	0x0000c6a3
    6600:	0000b7ff 	.word	0x0000b7ff
    6604:	0000b816 	.word	0x0000b816

00006608 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    6608:	4b01      	ldr	r3, [pc, #4]	; (6610 <z_impl_k_current_get+0x8>)
    660a:	6898      	ldr	r0, [r3, #8]
    660c:	4770      	bx	lr
    660e:	bf00      	nop
    6610:	20001510 	.word	0x20001510

00006614 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    6614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6618:	4604      	mov	r4, r0
    661a:	f04f 0320 	mov.w	r3, #32
    661e:	f3ef 8611 	mrs	r6, BASEPRI
    6622:	f383 8811 	msr	BASEPRI, r3
    6626:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    662a:	4848      	ldr	r0, [pc, #288]	; (674c <z_thread_abort+0x138>)
    662c:	f000 fb8a 	bl	6d44 <z_spin_lock_valid>
    6630:	b968      	cbnz	r0, 664e <z_thread_abort+0x3a>
    6632:	2381      	movs	r3, #129	; 0x81
    6634:	4a46      	ldr	r2, [pc, #280]	; (6750 <z_thread_abort+0x13c>)
    6636:	4947      	ldr	r1, [pc, #284]	; (6754 <z_thread_abort+0x140>)
    6638:	4847      	ldr	r0, [pc, #284]	; (6758 <z_thread_abort+0x144>)
    663a:	f001 f90f 	bl	785c <printk>
    663e:	4943      	ldr	r1, [pc, #268]	; (674c <z_thread_abort+0x138>)
    6640:	4846      	ldr	r0, [pc, #280]	; (675c <z_thread_abort+0x148>)
    6642:	f001 f90b 	bl	785c <printk>
    6646:	2181      	movs	r1, #129	; 0x81
    6648:	4841      	ldr	r0, [pc, #260]	; (6750 <z_thread_abort+0x13c>)
    664a:	f001 fb59 	bl	7d00 <assert_post_action>
	z_spin_lock_set_owner(l);
    664e:	483f      	ldr	r0, [pc, #252]	; (674c <z_thread_abort+0x138>)
    6650:	f000 fb94 	bl	6d7c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (thread->base.thread_state & _THREAD_DEAD) {
    6654:	7b63      	ldrb	r3, [r4, #13]
    6656:	071a      	lsls	r2, r3, #28
    6658:	d517      	bpl.n	668a <z_thread_abort+0x76>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    665a:	483c      	ldr	r0, [pc, #240]	; (674c <z_thread_abort+0x138>)
    665c:	f000 fb80 	bl	6d60 <z_spin_unlock_valid>
    6660:	b968      	cbnz	r0, 667e <z_thread_abort+0x6a>
    6662:	23ac      	movs	r3, #172	; 0xac
    6664:	4a3a      	ldr	r2, [pc, #232]	; (6750 <z_thread_abort+0x13c>)
    6666:	493e      	ldr	r1, [pc, #248]	; (6760 <z_thread_abort+0x14c>)
    6668:	483b      	ldr	r0, [pc, #236]	; (6758 <z_thread_abort+0x144>)
    666a:	f001 f8f7 	bl	785c <printk>
    666e:	4937      	ldr	r1, [pc, #220]	; (674c <z_thread_abort+0x138>)
    6670:	483c      	ldr	r0, [pc, #240]	; (6764 <z_thread_abort+0x150>)
    6672:	f001 f8f3 	bl	785c <printk>
    6676:	21ac      	movs	r1, #172	; 0xac
    6678:	4835      	ldr	r0, [pc, #212]	; (6750 <z_thread_abort+0x13c>)
    667a:	f001 fb41 	bl	7d00 <assert_post_action>
	__asm__ volatile(
    667e:	f386 8811 	msr	BASEPRI, r6
    6682:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    6686:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    668a:	f023 0220 	bic.w	r2, r3, #32
    668e:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    6692:	09d2      	lsrs	r2, r2, #7
    6694:	d142      	bne.n	671c <z_thread_abort+0x108>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    6696:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
    6698:	68a3      	ldr	r3, [r4, #8]
    669a:	b113      	cbz	r3, 66a2 <z_thread_abort+0x8e>
			unpend_thread_no_timeout(thread);
    669c:	4620      	mov	r0, r4
    669e:	f7ff f9fb 	bl	5a98 <unpend_thread_no_timeout>
    66a2:	f104 0018 	add.w	r0, r4, #24
    66a6:	f000 fdd3 	bl	7250 <z_abort_timeout>
    66aa:	f04f 0800 	mov.w	r8, #0
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    66ae:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
    66b2:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    66b4:	42bd      	cmp	r5, r7
    66b6:	d001      	beq.n	66bc <z_thread_abort+0xa8>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    66b8:	2d00      	cmp	r5, #0
    66ba:	d139      	bne.n	6730 <z_thread_abort+0x11c>
		update_cache(1);
    66bc:	2001      	movs	r0, #1
    66be:	f7ff fa59 	bl	5b74 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    66c2:	4b29      	ldr	r3, [pc, #164]	; (6768 <z_thread_abort+0x154>)
    66c4:	689b      	ldr	r3, [r3, #8]
    66c6:	42a3      	cmp	r3, r4
    66c8:	d1c7      	bne.n	665a <z_thread_abort+0x46>
    66ca:	f3ef 8305 	mrs	r3, IPSR
    66ce:	2b00      	cmp	r3, #0
    66d0:	d1c3      	bne.n	665a <z_thread_abort+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    66d2:	481e      	ldr	r0, [pc, #120]	; (674c <z_thread_abort+0x138>)
    66d4:	f000 fb44 	bl	6d60 <z_spin_unlock_valid>
    66d8:	b968      	cbnz	r0, 66f6 <z_thread_abort+0xe2>
    66da:	23c3      	movs	r3, #195	; 0xc3
    66dc:	4a1c      	ldr	r2, [pc, #112]	; (6750 <z_thread_abort+0x13c>)
    66de:	4920      	ldr	r1, [pc, #128]	; (6760 <z_thread_abort+0x14c>)
    66e0:	481d      	ldr	r0, [pc, #116]	; (6758 <z_thread_abort+0x144>)
    66e2:	f001 f8bb 	bl	785c <printk>
    66e6:	4919      	ldr	r1, [pc, #100]	; (674c <z_thread_abort+0x138>)
    66e8:	481e      	ldr	r0, [pc, #120]	; (6764 <z_thread_abort+0x150>)
    66ea:	f001 f8b7 	bl	785c <printk>
    66ee:	21c3      	movs	r1, #195	; 0xc3
    66f0:	4817      	ldr	r0, [pc, #92]	; (6750 <z_thread_abort+0x13c>)
    66f2:	f001 fb05 	bl	7d00 <assert_post_action>
    66f6:	4630      	mov	r0, r6
    66f8:	f7fb feac 	bl	2454 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
    66fc:	f240 53f2 	movw	r3, #1522	; 0x5f2
    6700:	4a1a      	ldr	r2, [pc, #104]	; (676c <z_thread_abort+0x158>)
    6702:	491b      	ldr	r1, [pc, #108]	; (6770 <z_thread_abort+0x15c>)
    6704:	4814      	ldr	r0, [pc, #80]	; (6758 <z_thread_abort+0x144>)
    6706:	f001 f8a9 	bl	785c <printk>
    670a:	481a      	ldr	r0, [pc, #104]	; (6774 <z_thread_abort+0x160>)
    670c:	f001 f8a6 	bl	785c <printk>
    6710:	f240 51f2 	movw	r1, #1522	; 0x5f2
    6714:	4815      	ldr	r0, [pc, #84]	; (676c <z_thread_abort+0x158>)
    6716:	f001 faf3 	bl	7d00 <assert_post_action>
    671a:	e79e      	b.n	665a <z_thread_abort+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    671c:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    6720:	f043 0308 	orr.w	r3, r3, #8
		_priq_run_remove(pq, thread);
    6724:	4621      	mov	r1, r4
    6726:	4814      	ldr	r0, [pc, #80]	; (6778 <z_thread_abort+0x164>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6728:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
    672a:	f7ff f993 	bl	5a54 <z_priq_dumb_remove>
}
    672e:	e7b3      	b.n	6698 <z_thread_abort+0x84>
		unpend_thread_no_timeout(thread);
    6730:	4628      	mov	r0, r5
    6732:	f7ff f9b1 	bl	5a98 <unpend_thread_no_timeout>
    6736:	f105 0018 	add.w	r0, r5, #24
    673a:	f000 fd89 	bl	7250 <z_abort_timeout>
		ready_thread(thread);
    673e:	4628      	mov	r0, r5
    6740:	f8c5 809c 	str.w	r8, [r5, #156]	; 0x9c
    6744:	f7ff fc7c 	bl	6040 <ready_thread>
    6748:	e7b3      	b.n	66b2 <z_thread_abort+0x9e>
    674a:	bf00      	nop
    674c:	20001540 	.word	0x20001540
    6750:	0000b7ac 	.word	0x0000b7ac
    6754:	0000b7d2 	.word	0x0000b7d2
    6758:	0000b021 	.word	0x0000b021
    675c:	0000b7e7 	.word	0x0000b7e7
    6760:	0000b7ff 	.word	0x0000b7ff
    6764:	0000b816 	.word	0x0000b816
    6768:	20001510 	.word	0x20001510
    676c:	0000c681 	.word	0x0000c681
    6770:	0000b48d 	.word	0x0000b48d
    6774:	0000c732 	.word	0x0000c732
    6778:	20001534 	.word	0x20001534

0000677c <z_impl_k_thread_join>:
	z_thread_abort(thread);
}
#endif

int z_impl_k_thread_join(struct k_thread *thread, k_timeout_t timeout)
{
    677c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6780:	4604      	mov	r4, r0
    6782:	4616      	mov	r6, r2
    6784:	461d      	mov	r5, r3
	__asm__ volatile(
    6786:	f04f 0320 	mov.w	r3, #32
    678a:	f3ef 8811 	mrs	r8, BASEPRI
    678e:	f383 8811 	msr	BASEPRI, r3
    6792:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6796:	483f      	ldr	r0, [pc, #252]	; (6894 <z_impl_k_thread_join+0x118>)
    6798:	f000 fad4 	bl	6d44 <z_spin_lock_valid>
    679c:	b968      	cbnz	r0, 67ba <z_impl_k_thread_join+0x3e>
    679e:	2381      	movs	r3, #129	; 0x81
    67a0:	4a3d      	ldr	r2, [pc, #244]	; (6898 <z_impl_k_thread_join+0x11c>)
    67a2:	493e      	ldr	r1, [pc, #248]	; (689c <z_impl_k_thread_join+0x120>)
    67a4:	483e      	ldr	r0, [pc, #248]	; (68a0 <z_impl_k_thread_join+0x124>)
    67a6:	f001 f859 	bl	785c <printk>
    67aa:	493a      	ldr	r1, [pc, #232]	; (6894 <z_impl_k_thread_join+0x118>)
    67ac:	483d      	ldr	r0, [pc, #244]	; (68a4 <z_impl_k_thread_join+0x128>)
    67ae:	f001 f855 	bl	785c <printk>
    67b2:	2181      	movs	r1, #129	; 0x81
    67b4:	4838      	ldr	r0, [pc, #224]	; (6898 <z_impl_k_thread_join+0x11c>)
    67b6:	f001 faa3 	bl	7d00 <assert_post_action>
	z_spin_lock_set_owner(l);
    67ba:	4836      	ldr	r0, [pc, #216]	; (6894 <z_impl_k_thread_join+0x118>)
    67bc:	f000 fade 	bl	6d7c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);
	int ret = 0;

	if (thread->base.thread_state & _THREAD_DEAD) {
    67c0:	7b63      	ldrb	r3, [r4, #13]
    67c2:	071b      	lsls	r3, r3, #28
    67c4:	d445      	bmi.n	6852 <z_impl_k_thread_join+0xd6>
		ret = 0;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    67c6:	ea55 0306 	orrs.w	r3, r5, r6
    67ca:	d05c      	beq.n	6886 <z_impl_k_thread_join+0x10a>
		ret = -EBUSY;
	} else if (thread == _current ||
    67cc:	4f36      	ldr	r7, [pc, #216]	; (68a8 <z_impl_k_thread_join+0x12c>)
    67ce:	68bb      	ldr	r3, [r7, #8]
    67d0:	42a3      	cmp	r3, r4
    67d2:	d05b      	beq.n	688c <z_impl_k_thread_join+0x110>
    67d4:	68a2      	ldr	r2, [r4, #8]
		   thread->base.pended_on == &_current->join_queue) {
    67d6:	3358      	adds	r3, #88	; 0x58
	} else if (thread == _current ||
    67d8:	429a      	cmp	r2, r3
    67da:	d057      	beq.n	688c <z_impl_k_thread_join+0x110>
    67dc:	f3ef 8305 	mrs	r3, IPSR
		ret = -EDEADLK;
	} else {
		__ASSERT(!arch_is_in_isr(), "cannot join in ISR");
    67e0:	b173      	cbz	r3, 6800 <z_impl_k_thread_join+0x84>
    67e2:	4932      	ldr	r1, [pc, #200]	; (68ac <z_impl_k_thread_join+0x130>)
    67e4:	f240 630b 	movw	r3, #1547	; 0x60b
    67e8:	4a31      	ldr	r2, [pc, #196]	; (68b0 <z_impl_k_thread_join+0x134>)
    67ea:	482d      	ldr	r0, [pc, #180]	; (68a0 <z_impl_k_thread_join+0x124>)
    67ec:	f001 f836 	bl	785c <printk>
    67f0:	4830      	ldr	r0, [pc, #192]	; (68b4 <z_impl_k_thread_join+0x138>)
    67f2:	f001 f833 	bl	785c <printk>
    67f6:	f240 610b 	movw	r1, #1547	; 0x60b
    67fa:	482d      	ldr	r0, [pc, #180]	; (68b0 <z_impl_k_thread_join+0x134>)
    67fc:	f001 fa80 	bl	7d00 <assert_post_action>
		add_to_waitq_locked(_current, &thread->join_queue);
    6800:	68b8      	ldr	r0, [r7, #8]
    6802:	f104 0158 	add.w	r1, r4, #88	; 0x58
    6806:	f7ff fa07 	bl	5c18 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    680a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    680e:	bf08      	it	eq
    6810:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    6814:	d006      	beq.n	6824 <z_impl_k_thread_join+0xa8>
		add_thread_timeout(_current, timeout);
    6816:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    6818:	4632      	mov	r2, r6
    681a:	462b      	mov	r3, r5
    681c:	4926      	ldr	r1, [pc, #152]	; (68b8 <z_impl_k_thread_join+0x13c>)
    681e:	3018      	adds	r0, #24
    6820:	f000 fc48 	bl	70b4 <z_add_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6824:	481b      	ldr	r0, [pc, #108]	; (6894 <z_impl_k_thread_join+0x118>)
    6826:	f000 fa9b 	bl	6d60 <z_spin_unlock_valid>
    682a:	b968      	cbnz	r0, 6848 <z_impl_k_thread_join+0xcc>
    682c:	23c3      	movs	r3, #195	; 0xc3
    682e:	4a1a      	ldr	r2, [pc, #104]	; (6898 <z_impl_k_thread_join+0x11c>)
    6830:	4922      	ldr	r1, [pc, #136]	; (68bc <z_impl_k_thread_join+0x140>)
    6832:	481b      	ldr	r0, [pc, #108]	; (68a0 <z_impl_k_thread_join+0x124>)
    6834:	f001 f812 	bl	785c <printk>
    6838:	4916      	ldr	r1, [pc, #88]	; (6894 <z_impl_k_thread_join+0x118>)
    683a:	4821      	ldr	r0, [pc, #132]	; (68c0 <z_impl_k_thread_join+0x144>)
    683c:	f001 f80e 	bl	785c <printk>
    6840:	21c3      	movs	r1, #195	; 0xc3
    6842:	4815      	ldr	r0, [pc, #84]	; (6898 <z_impl_k_thread_join+0x11c>)
    6844:	f001 fa5c 	bl	7d00 <assert_post_action>
    6848:	4640      	mov	r0, r8
		return z_swap(&sched_spinlock, key);
	}

	k_spin_unlock(&sched_spinlock, key);
	return ret;
}
    684a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    684e:	f7fb be01 	b.w	2454 <arch_swap>
		ret = 0;
    6852:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6854:	480f      	ldr	r0, [pc, #60]	; (6894 <z_impl_k_thread_join+0x118>)
    6856:	f000 fa83 	bl	6d60 <z_spin_unlock_valid>
    685a:	b968      	cbnz	r0, 6878 <z_impl_k_thread_join+0xfc>
    685c:	23ac      	movs	r3, #172	; 0xac
    685e:	4a0e      	ldr	r2, [pc, #56]	; (6898 <z_impl_k_thread_join+0x11c>)
    6860:	4916      	ldr	r1, [pc, #88]	; (68bc <z_impl_k_thread_join+0x140>)
    6862:	480f      	ldr	r0, [pc, #60]	; (68a0 <z_impl_k_thread_join+0x124>)
    6864:	f000 fffa 	bl	785c <printk>
    6868:	490a      	ldr	r1, [pc, #40]	; (6894 <z_impl_k_thread_join+0x118>)
    686a:	4815      	ldr	r0, [pc, #84]	; (68c0 <z_impl_k_thread_join+0x144>)
    686c:	f000 fff6 	bl	785c <printk>
    6870:	21ac      	movs	r1, #172	; 0xac
    6872:	4809      	ldr	r0, [pc, #36]	; (6898 <z_impl_k_thread_join+0x11c>)
    6874:	f001 fa44 	bl	7d00 <assert_post_action>
	__asm__ volatile(
    6878:	f388 8811 	msr	BASEPRI, r8
    687c:	f3bf 8f6f 	isb	sy
}
    6880:	4620      	mov	r0, r4
    6882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ret = -EBUSY;
    6886:	f06f 040f 	mvn.w	r4, #15
    688a:	e7e3      	b.n	6854 <z_impl_k_thread_join+0xd8>
		ret = -EDEADLK;
    688c:	f06f 0420 	mvn.w	r4, #32
    6890:	e7e0      	b.n	6854 <z_impl_k_thread_join+0xd8>
    6892:	bf00      	nop
    6894:	20001540 	.word	0x20001540
    6898:	0000b7ac 	.word	0x0000b7ac
    689c:	0000b7d2 	.word	0x0000b7d2
    68a0:	0000b021 	.word	0x0000b021
    68a4:	0000b7e7 	.word	0x0000b7e7
    68a8:	20001510 	.word	0x20001510
    68ac:	0000c5d8 	.word	0x0000c5d8
    68b0:	0000c681 	.word	0x0000c681
    68b4:	0000c754 	.word	0x0000c754
    68b8:	00006211 	.word	0x00006211
    68bc:	0000b7ff 	.word	0x0000b7ff
    68c0:	0000b816 	.word	0x0000b816

000068c4 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    68c4:	b538      	push	{r3, r4, r5, lr}
    68c6:	4604      	mov	r4, r0
	__asm__ volatile(
    68c8:	f04f 0320 	mov.w	r3, #32
    68cc:	f3ef 8511 	mrs	r5, BASEPRI
    68d0:	f383 8811 	msr	BASEPRI, r3
    68d4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    68d8:	4817      	ldr	r0, [pc, #92]	; (6938 <z_impl_k_sem_give+0x74>)
    68da:	f000 fa33 	bl	6d44 <z_spin_lock_valid>
    68de:	b968      	cbnz	r0, 68fc <z_impl_k_sem_give+0x38>
    68e0:	2381      	movs	r3, #129	; 0x81
    68e2:	4a16      	ldr	r2, [pc, #88]	; (693c <z_impl_k_sem_give+0x78>)
    68e4:	4916      	ldr	r1, [pc, #88]	; (6940 <z_impl_k_sem_give+0x7c>)
    68e6:	4817      	ldr	r0, [pc, #92]	; (6944 <z_impl_k_sem_give+0x80>)
    68e8:	f000 ffb8 	bl	785c <printk>
    68ec:	4912      	ldr	r1, [pc, #72]	; (6938 <z_impl_k_sem_give+0x74>)
    68ee:	4816      	ldr	r0, [pc, #88]	; (6948 <z_impl_k_sem_give+0x84>)
    68f0:	f000 ffb4 	bl	785c <printk>
    68f4:	2181      	movs	r1, #129	; 0x81
    68f6:	4811      	ldr	r0, [pc, #68]	; (693c <z_impl_k_sem_give+0x78>)
    68f8:	f001 fa02 	bl	7d00 <assert_post_action>
	z_spin_lock_set_owner(l);
    68fc:	480e      	ldr	r0, [pc, #56]	; (6938 <z_impl_k_sem_give+0x74>)
    68fe:	f000 fa3d 	bl	6d7c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
    6902:	4620      	mov	r0, r4
    6904:	f7ff fd76 	bl	63f4 <z_unpend_first_thread>

	if (thread != NULL) {
    6908:	b150      	cbz	r0, 6920 <z_impl_k_sem_give+0x5c>
    690a:	2200      	movs	r2, #0
    690c:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    6910:	f7ff fbe2 	bl	60d8 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    6914:	4629      	mov	r1, r5
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
    6916:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    691a:	4807      	ldr	r0, [pc, #28]	; (6938 <z_impl_k_sem_give+0x74>)
    691c:	f7fe bfe0 	b.w	58e0 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    6920:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    6924:	429a      	cmp	r2, r3
    6926:	bf18      	it	ne
    6928:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
    692a:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    692c:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
    692e:	f104 0010 	add.w	r0, r4, #16
    6932:	f003 fd02 	bl	a33a <z_handle_obj_poll_events>
}
    6936:	e7ed      	b.n	6914 <z_impl_k_sem_give+0x50>
    6938:	2000154c 	.word	0x2000154c
    693c:	0000b7ac 	.word	0x0000b7ac
    6940:	0000b7d2 	.word	0x0000b7d2
    6944:	0000b021 	.word	0x0000b021
    6948:	0000b7e7 	.word	0x0000b7e7

0000694c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    694c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    694e:	4604      	mov	r4, r0
    6950:	4616      	mov	r6, r2
    6952:	461d      	mov	r5, r3
    6954:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
    6958:	b17b      	cbz	r3, 697a <z_impl_k_sem_take+0x2e>
    695a:	ea52 0305 	orrs.w	r3, r2, r5
    695e:	d00c      	beq.n	697a <z_impl_k_sem_take+0x2e>
    6960:	4935      	ldr	r1, [pc, #212]	; (6a38 <z_impl_k_sem_take+0xec>)
    6962:	238c      	movs	r3, #140	; 0x8c
    6964:	4a35      	ldr	r2, [pc, #212]	; (6a3c <z_impl_k_sem_take+0xf0>)
    6966:	4836      	ldr	r0, [pc, #216]	; (6a40 <z_impl_k_sem_take+0xf4>)
    6968:	f000 ff78 	bl	785c <printk>
    696c:	4835      	ldr	r0, [pc, #212]	; (6a44 <z_impl_k_sem_take+0xf8>)
    696e:	f000 ff75 	bl	785c <printk>
    6972:	218c      	movs	r1, #140	; 0x8c
    6974:	4831      	ldr	r0, [pc, #196]	; (6a3c <z_impl_k_sem_take+0xf0>)
    6976:	f001 f9c3 	bl	7d00 <assert_post_action>
    697a:	f04f 0320 	mov.w	r3, #32
    697e:	f3ef 8711 	mrs	r7, BASEPRI
    6982:	f383 8811 	msr	BASEPRI, r3
    6986:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    698a:	482f      	ldr	r0, [pc, #188]	; (6a48 <z_impl_k_sem_take+0xfc>)
    698c:	f000 f9da 	bl	6d44 <z_spin_lock_valid>
    6990:	b968      	cbnz	r0, 69ae <z_impl_k_sem_take+0x62>
    6992:	2381      	movs	r3, #129	; 0x81
    6994:	4a2d      	ldr	r2, [pc, #180]	; (6a4c <z_impl_k_sem_take+0x100>)
    6996:	492e      	ldr	r1, [pc, #184]	; (6a50 <z_impl_k_sem_take+0x104>)
    6998:	4829      	ldr	r0, [pc, #164]	; (6a40 <z_impl_k_sem_take+0xf4>)
    699a:	f000 ff5f 	bl	785c <printk>
    699e:	492a      	ldr	r1, [pc, #168]	; (6a48 <z_impl_k_sem_take+0xfc>)
    69a0:	482c      	ldr	r0, [pc, #176]	; (6a54 <z_impl_k_sem_take+0x108>)
    69a2:	f000 ff5b 	bl	785c <printk>
    69a6:	2181      	movs	r1, #129	; 0x81
    69a8:	4828      	ldr	r0, [pc, #160]	; (6a4c <z_impl_k_sem_take+0x100>)
    69aa:	f001 f9a9 	bl	7d00 <assert_post_action>
	z_spin_lock_set_owner(l);
    69ae:	4826      	ldr	r0, [pc, #152]	; (6a48 <z_impl_k_sem_take+0xfc>)
    69b0:	f000 f9e4 	bl	6d7c <z_spin_lock_set_owner>
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
    69b4:	68a3      	ldr	r3, [r4, #8]
    69b6:	b1d3      	cbz	r3, 69ee <z_impl_k_sem_take+0xa2>
		sem->count--;
    69b8:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    69ba:	4823      	ldr	r0, [pc, #140]	; (6a48 <z_impl_k_sem_take+0xfc>)
    69bc:	60a3      	str	r3, [r4, #8]
    69be:	f000 f9cf 	bl	6d60 <z_spin_unlock_valid>
    69c2:	b968      	cbnz	r0, 69e0 <z_impl_k_sem_take+0x94>
    69c4:	23ac      	movs	r3, #172	; 0xac
    69c6:	4a21      	ldr	r2, [pc, #132]	; (6a4c <z_impl_k_sem_take+0x100>)
    69c8:	4923      	ldr	r1, [pc, #140]	; (6a58 <z_impl_k_sem_take+0x10c>)
    69ca:	481d      	ldr	r0, [pc, #116]	; (6a40 <z_impl_k_sem_take+0xf4>)
    69cc:	f000 ff46 	bl	785c <printk>
    69d0:	491d      	ldr	r1, [pc, #116]	; (6a48 <z_impl_k_sem_take+0xfc>)
    69d2:	4822      	ldr	r0, [pc, #136]	; (6a5c <z_impl_k_sem_take+0x110>)
    69d4:	f000 ff42 	bl	785c <printk>
    69d8:	21ac      	movs	r1, #172	; 0xac
    69da:	481c      	ldr	r0, [pc, #112]	; (6a4c <z_impl_k_sem_take+0x100>)
    69dc:	f001 f990 	bl	7d00 <assert_post_action>
	__asm__ volatile(
    69e0:	f387 8811 	msr	BASEPRI, r7
    69e4:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    69e8:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
    69ea:	b003      	add	sp, #12
    69ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    69ee:	ea56 0305 	orrs.w	r3, r6, r5
    69f2:	d118      	bne.n	6a26 <z_impl_k_sem_take+0xda>
    69f4:	4814      	ldr	r0, [pc, #80]	; (6a48 <z_impl_k_sem_take+0xfc>)
    69f6:	f000 f9b3 	bl	6d60 <z_spin_unlock_valid>
    69fa:	b968      	cbnz	r0, 6a18 <z_impl_k_sem_take+0xcc>
    69fc:	23ac      	movs	r3, #172	; 0xac
    69fe:	4a13      	ldr	r2, [pc, #76]	; (6a4c <z_impl_k_sem_take+0x100>)
    6a00:	4915      	ldr	r1, [pc, #84]	; (6a58 <z_impl_k_sem_take+0x10c>)
    6a02:	480f      	ldr	r0, [pc, #60]	; (6a40 <z_impl_k_sem_take+0xf4>)
    6a04:	f000 ff2a 	bl	785c <printk>
    6a08:	490f      	ldr	r1, [pc, #60]	; (6a48 <z_impl_k_sem_take+0xfc>)
    6a0a:	4814      	ldr	r0, [pc, #80]	; (6a5c <z_impl_k_sem_take+0x110>)
    6a0c:	f000 ff26 	bl	785c <printk>
    6a10:	21ac      	movs	r1, #172	; 0xac
    6a12:	480e      	ldr	r0, [pc, #56]	; (6a4c <z_impl_k_sem_take+0x100>)
    6a14:	f001 f974 	bl	7d00 <assert_post_action>
    6a18:	f387 8811 	msr	BASEPRI, r7
    6a1c:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    6a20:	f06f 000f 	mvn.w	r0, #15
    6a24:	e7e1      	b.n	69ea <z_impl_k_sem_take+0x9e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    6a26:	4622      	mov	r2, r4
    6a28:	4639      	mov	r1, r7
    6a2a:	e9cd 6500 	strd	r6, r5, [sp]
    6a2e:	4806      	ldr	r0, [pc, #24]	; (6a48 <z_impl_k_sem_take+0xfc>)
    6a30:	f7ff f990 	bl	5d54 <z_pend_curr>
	return ret;
    6a34:	e7d9      	b.n	69ea <z_impl_k_sem_take+0x9e>
    6a36:	bf00      	nop
    6a38:	0000c789 	.word	0x0000c789
    6a3c:	0000c769 	.word	0x0000c769
    6a40:	0000b021 	.word	0x0000b021
    6a44:	0000bfd5 	.word	0x0000bfd5
    6a48:	2000154c 	.word	0x2000154c
    6a4c:	0000b7ac 	.word	0x0000b7ac
    6a50:	0000b7d2 	.word	0x0000b7d2
    6a54:	0000b7e7 	.word	0x0000b7e7
    6a58:	0000b7ff 	.word	0x0000b7ff
    6a5c:	0000b816 	.word	0x0000b816

00006a60 <k_sys_work_q_init>:
K_KERNEL_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
    6a60:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
    6a62:	4c08      	ldr	r4, [pc, #32]	; (6a84 <k_sys_work_q_init+0x24>)
    6a64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6a68:	f44f 6280 	mov.w	r2, #1024	; 0x400
    6a6c:	4620      	mov	r0, r4
    6a6e:	4906      	ldr	r1, [pc, #24]	; (6a88 <k_sys_work_q_init+0x28>)
    6a70:	f000 f98c 	bl	6d8c <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
    6a74:	4905      	ldr	r1, [pc, #20]	; (6a8c <k_sys_work_q_init+0x2c>)
    6a76:	f104 0020 	add.w	r0, r4, #32
    6a7a:	f000 f809 	bl	6a90 <z_impl_k_thread_name_set>
		       K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
    6a7e:	2000      	movs	r0, #0
    6a80:	bd10      	pop	{r4, pc}
    6a82:	bf00      	nop
    6a84:	200010c0 	.word	0x200010c0
    6a88:	200040c0 	.word	0x200040c0
    6a8c:	0000c7d6 	.word	0x0000c7d6

00006a90 <z_impl_k_thread_name_set>:
	k_spin_unlock(&z_thread_monitor_lock, key);
}
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
    6a90:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
    6a92:	4604      	mov	r4, r0
    6a94:	b908      	cbnz	r0, 6a9a <z_impl_k_thread_name_set+0xa>
		thread = _current;
    6a96:	4b05      	ldr	r3, [pc, #20]	; (6aac <z_impl_k_thread_name_set+0x1c>)
    6a98:	689c      	ldr	r4, [r3, #8]
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN);
    6a9a:	2220      	movs	r2, #32
    6a9c:	f104 0062 	add.w	r0, r4, #98	; 0x62
    6aa0:	f001 fc2d 	bl	82fe <strncpy>
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    6aa4:	2000      	movs	r0, #0
    6aa6:	f884 0081 	strb.w	r0, [r4, #129]	; 0x81
#else
	ARG_UNUSED(thread);
	ARG_UNUSED(value);
	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
    6aaa:	bd10      	pop	{r4, pc}
    6aac:	20001510 	.word	0x20001510

00006ab0 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    6ab0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    6ab4:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
    6ab8:	4604      	mov	r4, r0
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
    6aba:	f1ba 0f0f 	cmp.w	sl, #15
{
    6abe:	460f      	mov	r7, r1
    6ac0:	4615      	mov	r5, r2
    6ac2:	4698      	mov	r8, r3
    6ac4:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
	Z_ASSERT_VALID_PRIO(prio, entry);
    6ac8:	d140      	bne.n	6b4c <z_setup_new_thread+0x9c>
    6aca:	4b2e      	ldr	r3, [pc, #184]	; (6b84 <z_setup_new_thread+0xd4>)
    6acc:	4598      	cmp	r8, r3
    6ace:	d141      	bne.n	6b54 <z_setup_new_thread+0xa4>
	sys_dlist_init(&w->waitq);
    6ad0:	f104 0358 	add.w	r3, r4, #88	; 0x58
	list->tail = (sys_dnode_t *)list;
    6ad4:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    6ad8:	9b10      	ldr	r3, [sp, #64]	; 0x40
	thread_base->pended_on = NULL;
    6ada:	2600      	movs	r6, #0
	thread_base->user_options = (uint8_t)options;
    6adc:	7323      	strb	r3, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    6ade:	2304      	movs	r3, #4
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    6ae0:	3507      	adds	r5, #7
	thread_base->thread_state = (uint8_t)initial_state;
    6ae2:	7363      	strb	r3, [r4, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    6ae4:	f025 0507 	bic.w	r5, r5, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    6ae8:	f107 0320 	add.w	r3, r7, #32
	new_thread->stack_info.size = stack_buf_size;
    6aec:	e9c4 3522 	strd	r3, r5, [r4, #136]	; 0x88
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6af0:	9b0e      	ldr	r3, [sp, #56]	; 0x38

	thread_base->prio = priority;
    6af2:	f884 a00e 	strb.w	sl, [r4, #14]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6af6:	9302      	str	r3, [sp, #8]
    6af8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    6afa:	f105 0a20 	add.w	sl, r5, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6afe:	9301      	str	r3, [sp, #4]
    6b00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	stack_ptr = (char *)stack + stack_obj_size;
    6b02:	44ba      	add	sl, r7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6b04:	9300      	str	r3, [sp, #0]
    6b06:	4652      	mov	r2, sl
    6b08:	4643      	mov	r3, r8
    6b0a:	4639      	mov	r1, r7
    6b0c:	4620      	mov	r0, r4
	node->prev = NULL;
    6b0e:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
    6b12:	60a6      	str	r6, [r4, #8]

	thread_base->sched_locked = 0U;
    6b14:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
    6b16:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6b1a:	f7fb fd35 	bl	2588 <arch_new_thread>
	new_thread->init_data = NULL;
    6b1e:	6566      	str	r6, [r4, #84]	; 0x54
	if (name != NULL) {
    6b20:	f1b9 0f00 	cmp.w	r9, #0
    6b24:	d02a      	beq.n	6b7c <z_setup_new_thread+0xcc>
		strncpy(new_thread->name, name,
    6b26:	221f      	movs	r2, #31
    6b28:	4649      	mov	r1, r9
    6b2a:	f104 0062 	add.w	r0, r4, #98	; 0x62
    6b2e:	f001 fbe6 	bl	82fe <strncpy>
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    6b32:	f884 6081 	strb.w	r6, [r4, #129]	; 0x81
	if (!_current) {
    6b36:	4b14      	ldr	r3, [pc, #80]	; (6b88 <z_setup_new_thread+0xd8>)
    6b38:	689b      	ldr	r3, [r3, #8]
    6b3a:	b10b      	cbz	r3, 6b40 <z_setup_new_thread+0x90>
	new_thread->resource_pool = _current->resource_pool;
    6b3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
}
    6b40:	4650      	mov	r0, sl
    6b42:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    6b46:	b004      	add	sp, #16
    6b48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
    6b4c:	f10a 0310 	add.w	r3, sl, #16
    6b50:	2b1e      	cmp	r3, #30
    6b52:	d9bd      	bls.n	6ad0 <z_setup_new_thread+0x20>
    6b54:	f240 231d 	movw	r3, #541	; 0x21d
    6b58:	4a0c      	ldr	r2, [pc, #48]	; (6b8c <z_setup_new_thread+0xdc>)
    6b5a:	490d      	ldr	r1, [pc, #52]	; (6b90 <z_setup_new_thread+0xe0>)
    6b5c:	480d      	ldr	r0, [pc, #52]	; (6b94 <z_setup_new_thread+0xe4>)
    6b5e:	f000 fe7d 	bl	785c <printk>
    6b62:	4651      	mov	r1, sl
    6b64:	f06f 030f 	mvn.w	r3, #15
    6b68:	220e      	movs	r2, #14
    6b6a:	480b      	ldr	r0, [pc, #44]	; (6b98 <z_setup_new_thread+0xe8>)
    6b6c:	f000 fe76 	bl	785c <printk>
    6b70:	f240 211d 	movw	r1, #541	; 0x21d
    6b74:	4805      	ldr	r0, [pc, #20]	; (6b8c <z_setup_new_thread+0xdc>)
    6b76:	f001 f8c3 	bl	7d00 <assert_post_action>
    6b7a:	e7a9      	b.n	6ad0 <z_setup_new_thread+0x20>
		new_thread->name[0] = '\0';
    6b7c:	f884 9062 	strb.w	r9, [r4, #98]	; 0x62
    6b80:	e7d9      	b.n	6b36 <z_setup_new_thread+0x86>
    6b82:	bf00      	nop
    6b84:	0000a365 	.word	0x0000a365
    6b88:	20001510 	.word	0x20001510
    6b8c:	0000c7df 	.word	0x0000c7df
    6b90:	0000c802 	.word	0x0000c802
    6b94:	0000b021 	.word	0x0000b021
    6b98:	0000c882 	.word	0x0000c882

00006b9c <z_impl_k_thread_create>:
{
    6b9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6ba0:	b087      	sub	sp, #28
    6ba2:	4604      	mov	r4, r0
    6ba4:	e9dd 6514 	ldrd	r6, r5, [sp, #80]	; 0x50
    6ba8:	460f      	mov	r7, r1
    6baa:	4690      	mov	r8, r2
    6bac:	4699      	mov	r9, r3
    6bae:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
    6bb2:	b173      	cbz	r3, 6bd2 <z_impl_k_thread_create+0x36>
    6bb4:	491c      	ldr	r1, [pc, #112]	; (6c28 <z_impl_k_thread_create+0x8c>)
    6bb6:	f240 2385 	movw	r3, #645	; 0x285
    6bba:	4a1c      	ldr	r2, [pc, #112]	; (6c2c <z_impl_k_thread_create+0x90>)
    6bbc:	481c      	ldr	r0, [pc, #112]	; (6c30 <z_impl_k_thread_create+0x94>)
    6bbe:	f000 fe4d 	bl	785c <printk>
    6bc2:	481c      	ldr	r0, [pc, #112]	; (6c34 <z_impl_k_thread_create+0x98>)
    6bc4:	f000 fe4a 	bl	785c <printk>
    6bc8:	f240 2185 	movw	r1, #645	; 0x285
    6bcc:	4817      	ldr	r0, [pc, #92]	; (6c2c <z_impl_k_thread_create+0x90>)
    6bce:	f001 f897 	bl	7d00 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    6bd2:	2300      	movs	r3, #0
    6bd4:	9305      	str	r3, [sp, #20]
    6bd6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6bd8:	4642      	mov	r2, r8
    6bda:	9304      	str	r3, [sp, #16]
    6bdc:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6bde:	4639      	mov	r1, r7
    6be0:	9303      	str	r3, [sp, #12]
    6be2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6be4:	4620      	mov	r0, r4
    6be6:	9302      	str	r3, [sp, #8]
    6be8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6bea:	9301      	str	r3, [sp, #4]
    6bec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    6bee:	9300      	str	r3, [sp, #0]
    6bf0:	464b      	mov	r3, r9
    6bf2:	f7ff ff5d 	bl	6ab0 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    6bf6:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    6bfa:	bf08      	it	eq
    6bfc:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    6c00:	d005      	beq.n	6c0e <z_impl_k_thread_create+0x72>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    6c02:	ea55 0306 	orrs.w	r3, r5, r6
    6c06:	d106      	bne.n	6c16 <z_impl_k_thread_create+0x7a>
	z_sched_start(thread);
    6c08:	4620      	mov	r0, r4
    6c0a:	f7ff faad 	bl	6168 <z_sched_start>
}
    6c0e:	4620      	mov	r0, r4
    6c10:	b007      	add	sp, #28
    6c12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    6c16:	4632      	mov	r2, r6
    6c18:	462b      	mov	r3, r5
    6c1a:	4907      	ldr	r1, [pc, #28]	; (6c38 <z_impl_k_thread_create+0x9c>)
    6c1c:	f104 0018 	add.w	r0, r4, #24
    6c20:	f000 fa48 	bl	70b4 <z_add_timeout>
    6c24:	e7f3      	b.n	6c0e <z_impl_k_thread_create+0x72>
    6c26:	bf00      	nop
    6c28:	0000c5d8 	.word	0x0000c5d8
    6c2c:	0000c7df 	.word	0x0000c7df
    6c30:	0000b021 	.word	0x0000b021
    6c34:	0000c8b3 	.word	0x0000c8b3
    6c38:	00006211 	.word	0x00006211

00006c3c <z_init_static_threads>:
{
    6c3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6c40:	4c39      	ldr	r4, [pc, #228]	; (6d28 <z_init_static_threads+0xec>)
	_FOREACH_STATIC_THREAD(thread_data) {
    6c42:	4d3a      	ldr	r5, [pc, #232]	; (6d2c <z_init_static_threads+0xf0>)
    6c44:	4f3a      	ldr	r7, [pc, #232]	; (6d30 <z_init_static_threads+0xf4>)
{
    6c46:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
    6c48:	42ac      	cmp	r4, r5
    6c4a:	4626      	mov	r6, r4
    6c4c:	d90e      	bls.n	6c6c <z_init_static_threads+0x30>
    6c4e:	4939      	ldr	r1, [pc, #228]	; (6d34 <z_init_static_threads+0xf8>)
    6c50:	f44f 733b 	mov.w	r3, #748	; 0x2ec
    6c54:	463a      	mov	r2, r7
    6c56:	4838      	ldr	r0, [pc, #224]	; (6d38 <z_init_static_threads+0xfc>)
    6c58:	f000 fe00 	bl	785c <printk>
    6c5c:	4837      	ldr	r0, [pc, #220]	; (6d3c <z_init_static_threads+0x100>)
    6c5e:	f000 fdfd 	bl	785c <printk>
    6c62:	f44f 713b 	mov.w	r1, #748	; 0x2ec
    6c66:	4638      	mov	r0, r7
    6c68:	f001 f84a 	bl	7d00 <assert_post_action>
    6c6c:	42ae      	cmp	r6, r5
    6c6e:	f104 0430 	add.w	r4, r4, #48	; 0x30
    6c72:	d31f      	bcc.n	6cb4 <z_init_static_threads+0x78>
	k_sched_lock();
    6c74:	f7fe fe78 	bl	5968 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    6c78:	4c2b      	ldr	r4, [pc, #172]	; (6d28 <z_init_static_threads+0xec>)
    6c7a:	4e2d      	ldr	r6, [pc, #180]	; (6d30 <z_init_static_threads+0xf4>)
    6c7c:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 6d34 <z_init_static_threads+0xf8>
    6c80:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 6d38 <z_init_static_threads+0xfc>
    6c84:	42ac      	cmp	r4, r5
    6c86:	d90e      	bls.n	6ca6 <z_init_static_threads+0x6a>
    6c88:	4641      	mov	r1, r8
    6c8a:	f240 330b 	movw	r3, #779	; 0x30b
    6c8e:	4632      	mov	r2, r6
    6c90:	4648      	mov	r0, r9
    6c92:	f000 fde3 	bl	785c <printk>
    6c96:	4829      	ldr	r0, [pc, #164]	; (6d3c <z_init_static_threads+0x100>)
    6c98:	f000 fde0 	bl	785c <printk>
    6c9c:	f240 310b 	movw	r1, #779	; 0x30b
    6ca0:	4630      	mov	r0, r6
    6ca2:	f001 f82d 	bl	7d00 <assert_post_action>
    6ca6:	42ac      	cmp	r4, r5
    6ca8:	d320      	bcc.n	6cec <z_init_static_threads+0xb0>
}
    6caa:	b007      	add	sp, #28
    6cac:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    6cb0:	f7ff b880 	b.w	5db4 <k_sched_unlock>
		z_setup_new_thread(
    6cb4:	f854 3c04 	ldr.w	r3, [r4, #-4]
    6cb8:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    6cbc:	9305      	str	r3, [sp, #20]
    6cbe:	f854 3c10 	ldr.w	r3, [r4, #-16]
    6cc2:	9304      	str	r3, [sp, #16]
    6cc4:	f854 3c14 	ldr.w	r3, [r4, #-20]
    6cc8:	9303      	str	r3, [sp, #12]
    6cca:	f854 3c18 	ldr.w	r3, [r4, #-24]
    6cce:	9302      	str	r3, [sp, #8]
    6cd0:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    6cd4:	9301      	str	r3, [sp, #4]
    6cd6:	f854 3c20 	ldr.w	r3, [r4, #-32]
    6cda:	9300      	str	r3, [sp, #0]
    6cdc:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    6ce0:	f7ff fee6 	bl	6ab0 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    6ce4:	f854 3c30 	ldr.w	r3, [r4, #-48]
    6ce8:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    6cea:	e7ad      	b.n	6c48 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    6cec:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6cee:	1c5a      	adds	r2, r3, #1
    6cf0:	d00c      	beq.n	6d0c <z_init_static_threads+0xd0>
					    K_MSEC(thread_data->init_delay));
    6cf2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    6cf6:	17d9      	asrs	r1, r3, #31
		t += off;
    6cf8:	f113 0009 	adds.w	r0, r3, #9
    6cfc:	f141 0100 	adc.w	r1, r1, #0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    6d00:	430b      	orrs	r3, r1
			schedule_new_thread(thread_data->init_thread,
    6d02:	6827      	ldr	r7, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    6d04:	d104      	bne.n	6d10 <z_init_static_threads+0xd4>
	z_sched_start(thread);
    6d06:	4638      	mov	r0, r7
    6d08:	f7ff fa2e 	bl	6168 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    6d0c:	3430      	adds	r4, #48	; 0x30
    6d0e:	e7b9      	b.n	6c84 <z_init_static_threads+0x48>
			return t / (from_hz / to_hz);
    6d10:	220a      	movs	r2, #10
    6d12:	2300      	movs	r3, #0
    6d14:	f7f9 f9d4 	bl	c0 <__aeabi_uldivmod>
    6d18:	4602      	mov	r2, r0
    6d1a:	460b      	mov	r3, r1
    6d1c:	f107 0018 	add.w	r0, r7, #24
    6d20:	4907      	ldr	r1, [pc, #28]	; (6d40 <z_init_static_threads+0x104>)
    6d22:	f000 f9c7 	bl	70b4 <z_add_timeout>
    6d26:	e7f1      	b.n	6d0c <z_init_static_threads+0xd0>
    6d28:	20000378 	.word	0x20000378
    6d2c:	20000378 	.word	0x20000378
    6d30:	0000c7df 	.word	0x0000c7df
    6d34:	0000c8d8 	.word	0x0000c8d8
    6d38:	0000b021 	.word	0x0000b021
    6d3c:	0000c0a7 	.word	0x0000c0a7
    6d40:	00006211 	.word	0x00006211

00006d44 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
    6d44:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu) {
    6d46:	b138      	cbz	r0, 6d58 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
    6d48:	4b04      	ldr	r3, [pc, #16]	; (6d5c <z_spin_lock_valid+0x18>)
    6d4a:	f000 0003 	and.w	r0, r0, #3
    6d4e:	7d1b      	ldrb	r3, [r3, #20]
    6d50:	1ac0      	subs	r0, r0, r3
    6d52:	bf18      	it	ne
    6d54:	2001      	movne	r0, #1
    6d56:	4770      	bx	lr
			return false;
		}
	}
	return true;
    6d58:	2001      	movs	r0, #1
}
    6d5a:	4770      	bx	lr
    6d5c:	20001510 	.word	0x20001510

00006d60 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    6d60:	4905      	ldr	r1, [pc, #20]	; (6d78 <z_spin_unlock_valid+0x18>)
{
    6d62:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    6d64:	688a      	ldr	r2, [r1, #8]
    6d66:	7d08      	ldrb	r0, [r1, #20]
    6d68:	6819      	ldr	r1, [r3, #0]
    6d6a:	4302      	orrs	r2, r0
    6d6c:	2000      	movs	r0, #0
    6d6e:	4291      	cmp	r1, r2
		return false;
	}
	l->thread_cpu = 0;
    6d70:	bf04      	itt	eq
    6d72:	6018      	streq	r0, [r3, #0]
	return true;
    6d74:	2001      	moveq	r0, #1
}
    6d76:	4770      	bx	lr
    6d78:	20001510 	.word	0x20001510

00006d7c <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
    6d7c:	4a02      	ldr	r2, [pc, #8]	; (6d88 <z_spin_lock_set_owner+0xc>)
    6d7e:	7d11      	ldrb	r1, [r2, #20]
    6d80:	6893      	ldr	r3, [r2, #8]
    6d82:	430b      	orrs	r3, r1
    6d84:	6003      	str	r3, [r0, #0]
}
    6d86:	4770      	bx	lr
    6d88:	20001510 	.word	0x20001510

00006d8c <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
    6d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6d90:	4604      	mov	r4, r0
    6d92:	b088      	sub	sp, #32
    6d94:	460d      	mov	r5, r1
    6d96:	4616      	mov	r6, r2
    6d98:	461f      	mov	r7, r3
	z_impl_k_queue_init(queue);
    6d9a:	f003 f9bf 	bl	a11c <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
    6d9e:	f104 0820 	add.w	r8, r4, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    6da2:	2200      	movs	r2, #0
    6da4:	2300      	movs	r3, #0
    6da6:	e9cd 7203 	strd	r7, r2, [sp, #12]
    6daa:	e9cd 2306 	strd	r2, r3, [sp, #24]
    6dae:	e9cd 2201 	strd	r2, r2, [sp, #4]
    6db2:	4629      	mov	r1, r5
    6db4:	4632      	mov	r2, r6
    6db6:	4640      	mov	r0, r8
    6db8:	4b05      	ldr	r3, [pc, #20]	; (6dd0 <k_work_q_start+0x44>)
    6dba:	9400      	str	r4, [sp, #0]
    6dbc:	f7ff feee 	bl	6b9c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    6dc0:	4640      	mov	r0, r8
    6dc2:	4904      	ldr	r1, [pc, #16]	; (6dd4 <k_work_q_start+0x48>)
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
    6dc4:	b008      	add	sp, #32
    6dc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6dca:	f7ff be61 	b.w	6a90 <z_impl_k_thread_name_set>
    6dce:	bf00      	nop
    6dd0:	00000f11 	.word	0x00000f11
    6dd4:	0000c905 	.word	0x0000c905

00006dd8 <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   k_timeout_t delay)
{
    6dd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6ddc:	4606      	mov	r6, r0
    6dde:	460d      	mov	r5, r1
    6de0:	4690      	mov	r8, r2
    6de2:	461f      	mov	r7, r3
	__asm__ volatile(
    6de4:	f04f 0320 	mov.w	r3, #32
    6de8:	f3ef 8911 	mrs	r9, BASEPRI
    6dec:	f383 8811 	msr	BASEPRI, r3
    6df0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6df4:	4834      	ldr	r0, [pc, #208]	; (6ec8 <k_delayed_work_submit_to_queue+0xf0>)
    6df6:	f7ff ffa5 	bl	6d44 <z_spin_lock_valid>
    6dfa:	b968      	cbnz	r0, 6e18 <k_delayed_work_submit_to_queue+0x40>
    6dfc:	2381      	movs	r3, #129	; 0x81
    6dfe:	4a33      	ldr	r2, [pc, #204]	; (6ecc <k_delayed_work_submit_to_queue+0xf4>)
    6e00:	4933      	ldr	r1, [pc, #204]	; (6ed0 <k_delayed_work_submit_to_queue+0xf8>)
    6e02:	4834      	ldr	r0, [pc, #208]	; (6ed4 <k_delayed_work_submit_to_queue+0xfc>)
    6e04:	f000 fd2a 	bl	785c <printk>
    6e08:	492f      	ldr	r1, [pc, #188]	; (6ec8 <k_delayed_work_submit_to_queue+0xf0>)
    6e0a:	4833      	ldr	r0, [pc, #204]	; (6ed8 <k_delayed_work_submit_to_queue+0x100>)
    6e0c:	f000 fd26 	bl	785c <printk>
    6e10:	2181      	movs	r1, #129	; 0x81
    6e12:	482e      	ldr	r0, [pc, #184]	; (6ecc <k_delayed_work_submit_to_queue+0xf4>)
    6e14:	f000 ff74 	bl	7d00 <assert_post_action>
	z_spin_lock_set_owner(l);
    6e18:	482b      	ldr	r0, [pc, #172]	; (6ec8 <k_delayed_work_submit_to_queue+0xf0>)
    6e1a:	f7ff ffaf 	bl	6d7c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
    6e1e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6e20:	b30b      	cbz	r3, 6e66 <k_delayed_work_submit_to_queue+0x8e>
    6e22:	42b3      	cmp	r3, r6
    6e24:	d14c      	bne.n	6ec0 <k_delayed_work_submit_to_queue+0xe8>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
    6e26:	4628      	mov	r0, r5
    6e28:	f003 f9fb 	bl	a222 <work_cancel>
		/* -EALREADY may indicate the work has already completed so
		 * this is likely a recurring work.  It may also indicate that
		 * the work handler is still executing.  But it's neither
		 * delayed nor pending, so it can be rescheduled.
		 */
		if (err == -EALREADY) {
    6e2c:	f110 0f45 	cmn.w	r0, #69	; 0x45
		err = work_cancel(work);
    6e30:	4604      	mov	r4, r0
		if (err == -EALREADY) {
    6e32:	d01a      	beq.n	6e6a <k_delayed_work_submit_to_queue+0x92>
			err = 0;
		} else if (err < 0) {
    6e34:	2800      	cmp	r0, #0
    6e36:	da19      	bge.n	6e6c <k_delayed_work_submit_to_queue+0x94>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6e38:	4823      	ldr	r0, [pc, #140]	; (6ec8 <k_delayed_work_submit_to_queue+0xf0>)
    6e3a:	f7ff ff91 	bl	6d60 <z_spin_unlock_valid>
    6e3e:	b968      	cbnz	r0, 6e5c <k_delayed_work_submit_to_queue+0x84>
    6e40:	23ac      	movs	r3, #172	; 0xac
    6e42:	4a22      	ldr	r2, [pc, #136]	; (6ecc <k_delayed_work_submit_to_queue+0xf4>)
    6e44:	4925      	ldr	r1, [pc, #148]	; (6edc <k_delayed_work_submit_to_queue+0x104>)
    6e46:	4823      	ldr	r0, [pc, #140]	; (6ed4 <k_delayed_work_submit_to_queue+0xfc>)
    6e48:	f000 fd08 	bl	785c <printk>
    6e4c:	491e      	ldr	r1, [pc, #120]	; (6ec8 <k_delayed_work_submit_to_queue+0xf0>)
    6e4e:	4824      	ldr	r0, [pc, #144]	; (6ee0 <k_delayed_work_submit_to_queue+0x108>)
    6e50:	f000 fd04 	bl	785c <printk>
    6e54:	21ac      	movs	r1, #172	; 0xac
    6e56:	481d      	ldr	r0, [pc, #116]	; (6ecc <k_delayed_work_submit_to_queue+0xf4>)
    6e58:	f000 ff52 	bl	7d00 <assert_post_action>
	__asm__ volatile(
    6e5c:	f389 8811 	msr	BASEPRI, r9
    6e60:	f3bf 8f6f 	isb	sy
	/* Add timeout */
	z_add_timeout(&work->timeout, work_timeout, delay);

done:
	k_spin_unlock(&lock, key);
	return err;
    6e64:	e021      	b.n	6eaa <k_delayed_work_submit_to_queue+0xd2>
	if (work->work_q == work_q) {
    6e66:	2e00      	cmp	r6, #0
    6e68:	d0dd      	beq.n	6e26 <k_delayed_work_submit_to_queue+0x4e>
	int err = 0;
    6e6a:	2400      	movs	r4, #0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    6e6c:	ea58 0307 	orrs.w	r3, r8, r7
	work->work_q = work_q;
    6e70:	62ae      	str	r6, [r5, #40]	; 0x28
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    6e72:	d11d      	bne.n	6eb0 <k_delayed_work_submit_to_queue+0xd8>
    6e74:	4814      	ldr	r0, [pc, #80]	; (6ec8 <k_delayed_work_submit_to_queue+0xf0>)
    6e76:	f7ff ff73 	bl	6d60 <z_spin_unlock_valid>
    6e7a:	b968      	cbnz	r0, 6e98 <k_delayed_work_submit_to_queue+0xc0>
    6e7c:	23ac      	movs	r3, #172	; 0xac
    6e7e:	4a13      	ldr	r2, [pc, #76]	; (6ecc <k_delayed_work_submit_to_queue+0xf4>)
    6e80:	4916      	ldr	r1, [pc, #88]	; (6edc <k_delayed_work_submit_to_queue+0x104>)
    6e82:	4814      	ldr	r0, [pc, #80]	; (6ed4 <k_delayed_work_submit_to_queue+0xfc>)
    6e84:	f000 fcea 	bl	785c <printk>
    6e88:	490f      	ldr	r1, [pc, #60]	; (6ec8 <k_delayed_work_submit_to_queue+0xf0>)
    6e8a:	4815      	ldr	r0, [pc, #84]	; (6ee0 <k_delayed_work_submit_to_queue+0x108>)
    6e8c:	f000 fce6 	bl	785c <printk>
    6e90:	21ac      	movs	r1, #172	; 0xac
    6e92:	480e      	ldr	r0, [pc, #56]	; (6ecc <k_delayed_work_submit_to_queue+0xf4>)
    6e94:	f000 ff34 	bl	7d00 <assert_post_action>
    6e98:	f389 8811 	msr	BASEPRI, r9
    6e9c:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
    6ea0:	4629      	mov	r1, r5
    6ea2:	4630      	mov	r0, r6
    6ea4:	f003 f9a0 	bl	a1e8 <k_work_submit_to_queue>
		return 0;
    6ea8:	2400      	movs	r4, #0
}
    6eaa:	4620      	mov	r0, r4
    6eac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_add_timeout(&work->timeout, work_timeout, delay);
    6eb0:	4642      	mov	r2, r8
    6eb2:	463b      	mov	r3, r7
    6eb4:	490b      	ldr	r1, [pc, #44]	; (6ee4 <k_delayed_work_submit_to_queue+0x10c>)
    6eb6:	f105 0010 	add.w	r0, r5, #16
    6eba:	f000 f8fb 	bl	70b4 <z_add_timeout>
    6ebe:	e7bb      	b.n	6e38 <k_delayed_work_submit_to_queue+0x60>
		err = -EADDRINUSE;
    6ec0:	f06f 042f 	mvn.w	r4, #47	; 0x2f
    6ec4:	e7b8      	b.n	6e38 <k_delayed_work_submit_to_queue+0x60>
    6ec6:	bf00      	nop
    6ec8:	20001550 	.word	0x20001550
    6ecc:	0000b7ac 	.word	0x0000b7ac
    6ed0:	0000b7d2 	.word	0x0000b7d2
    6ed4:	0000b021 	.word	0x0000b021
    6ed8:	0000b7e7 	.word	0x0000b7e7
    6edc:	0000b7ff 	.word	0x0000b7ff
    6ee0:	0000b816 	.word	0x0000b816
    6ee4:	0000a219 	.word	0x0000a219

00006ee8 <k_delayed_work_cancel>:

int k_delayed_work_cancel(struct k_delayed_work *work)
{
    6ee8:	b538      	push	{r3, r4, r5, lr}
    6eea:	4604      	mov	r4, r0
	__asm__ volatile(
    6eec:	f04f 0320 	mov.w	r3, #32
    6ef0:	f3ef 8511 	mrs	r5, BASEPRI
    6ef4:	f383 8811 	msr	BASEPRI, r3
    6ef8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6efc:	481a      	ldr	r0, [pc, #104]	; (6f68 <k_delayed_work_cancel+0x80>)
    6efe:	f7ff ff21 	bl	6d44 <z_spin_lock_valid>
    6f02:	b968      	cbnz	r0, 6f20 <k_delayed_work_cancel+0x38>
    6f04:	2381      	movs	r3, #129	; 0x81
    6f06:	4a19      	ldr	r2, [pc, #100]	; (6f6c <k_delayed_work_cancel+0x84>)
    6f08:	4919      	ldr	r1, [pc, #100]	; (6f70 <k_delayed_work_cancel+0x88>)
    6f0a:	481a      	ldr	r0, [pc, #104]	; (6f74 <k_delayed_work_cancel+0x8c>)
    6f0c:	f000 fca6 	bl	785c <printk>
    6f10:	4915      	ldr	r1, [pc, #84]	; (6f68 <k_delayed_work_cancel+0x80>)
    6f12:	4819      	ldr	r0, [pc, #100]	; (6f78 <k_delayed_work_cancel+0x90>)
    6f14:	f000 fca2 	bl	785c <printk>
    6f18:	2181      	movs	r1, #129	; 0x81
    6f1a:	4814      	ldr	r0, [pc, #80]	; (6f6c <k_delayed_work_cancel+0x84>)
    6f1c:	f000 fef0 	bl	7d00 <assert_post_action>
	z_spin_lock_set_owner(l);
    6f20:	4811      	ldr	r0, [pc, #68]	; (6f68 <k_delayed_work_cancel+0x80>)
    6f22:	f7ff ff2b 	bl	6d7c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = -EINVAL;

	if (work->work_q != NULL) {
    6f26:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6f28:	b1db      	cbz	r3, 6f62 <k_delayed_work_cancel+0x7a>
		ret = work_cancel(work);
    6f2a:	4620      	mov	r0, r4
    6f2c:	f003 f979 	bl	a222 <work_cancel>
    6f30:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6f32:	480d      	ldr	r0, [pc, #52]	; (6f68 <k_delayed_work_cancel+0x80>)
    6f34:	f7ff ff14 	bl	6d60 <z_spin_unlock_valid>
    6f38:	b968      	cbnz	r0, 6f56 <k_delayed_work_cancel+0x6e>
    6f3a:	23ac      	movs	r3, #172	; 0xac
    6f3c:	4a0b      	ldr	r2, [pc, #44]	; (6f6c <k_delayed_work_cancel+0x84>)
    6f3e:	490f      	ldr	r1, [pc, #60]	; (6f7c <k_delayed_work_cancel+0x94>)
    6f40:	480c      	ldr	r0, [pc, #48]	; (6f74 <k_delayed_work_cancel+0x8c>)
    6f42:	f000 fc8b 	bl	785c <printk>
    6f46:	4908      	ldr	r1, [pc, #32]	; (6f68 <k_delayed_work_cancel+0x80>)
    6f48:	480d      	ldr	r0, [pc, #52]	; (6f80 <k_delayed_work_cancel+0x98>)
    6f4a:	f000 fc87 	bl	785c <printk>
    6f4e:	21ac      	movs	r1, #172	; 0xac
    6f50:	4806      	ldr	r0, [pc, #24]	; (6f6c <k_delayed_work_cancel+0x84>)
    6f52:	f000 fed5 	bl	7d00 <assert_post_action>
	__asm__ volatile(
    6f56:	f385 8811 	msr	BASEPRI, r5
    6f5a:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
	return ret;
}
    6f5e:	4620      	mov	r0, r4
    6f60:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
    6f62:	f06f 0415 	mvn.w	r4, #21
    6f66:	e7e4      	b.n	6f32 <k_delayed_work_cancel+0x4a>
    6f68:	20001550 	.word	0x20001550
    6f6c:	0000b7ac 	.word	0x0000b7ac
    6f70:	0000b7d2 	.word	0x0000b7d2
    6f74:	0000b021 	.word	0x0000b021
    6f78:	0000b7e7 	.word	0x0000b7e7
    6f7c:	0000b7ff 	.word	0x0000b7ff
    6f80:	0000b816 	.word	0x0000b816

00006f84 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    6f84:	4a02      	ldr	r2, [pc, #8]	; (6f90 <boot_banner+0xc>)
    6f86:	4903      	ldr	r1, [pc, #12]	; (6f94 <boot_banner+0x10>)
    6f88:	4803      	ldr	r0, [pc, #12]	; (6f98 <boot_banner+0x14>)
    6f8a:	f000 bc67 	b.w	785c <printk>
    6f8e:	bf00      	nop
    6f90:	0000bfd7 	.word	0x0000bfd7
    6f94:	0000c90f 	.word	0x0000c90f
    6f98:	0000c92f 	.word	0x0000c92f

00006f9c <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    6f9c:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
    6f9e:	4806      	ldr	r0, [pc, #24]	; (6fb8 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    6fa0:	4a06      	ldr	r2, [pc, #24]	; (6fbc <z_data_copy+0x20>)
    6fa2:	4907      	ldr	r1, [pc, #28]	; (6fc0 <z_data_copy+0x24>)
    6fa4:	1a12      	subs	r2, r2, r0
    6fa6:	f001 fa0f 	bl	83c8 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    6faa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    6fae:	4a05      	ldr	r2, [pc, #20]	; (6fc4 <z_data_copy+0x28>)
    6fb0:	4905      	ldr	r1, [pc, #20]	; (6fc8 <z_data_copy+0x2c>)
    6fb2:	4806      	ldr	r0, [pc, #24]	; (6fcc <z_data_copy+0x30>)
    6fb4:	f001 ba08 	b.w	83c8 <memcpy>
    6fb8:	20000000 	.word	0x20000000
    6fbc:	200004a8 	.word	0x200004a8
    6fc0:	0000ca70 	.word	0x0000ca70
    6fc4:	00000000 	.word	0x00000000
    6fc8:	0000ca70 	.word	0x0000ca70
    6fcc:	20000000 	.word	0x20000000

00006fd0 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0U;
    6fd0:	4b03      	ldr	r3, [pc, #12]	; (6fe0 <elapsed+0x10>)
    6fd2:	681b      	ldr	r3, [r3, #0]
    6fd4:	b90b      	cbnz	r3, 6fda <elapsed+0xa>
    6fd6:	f7fb b99d 	b.w	2314 <z_clock_elapsed>
}
    6fda:	2000      	movs	r0, #0
    6fdc:	4770      	bx	lr
    6fde:	bf00      	nop
    6fe0:	20001554 	.word	0x20001554

00006fe4 <next_timeout>:
	return list->head == list;
    6fe4:	4b11      	ldr	r3, [pc, #68]	; (702c <next_timeout+0x48>)

static int32_t next_timeout(void)
{
    6fe6:	b510      	push	{r4, lr}
    6fe8:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6fea:	429c      	cmp	r4, r3
    6fec:	bf08      	it	eq
    6fee:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    6ff0:	f7ff ffee 	bl	6fd0 <elapsed>
    6ff4:	4603      	mov	r3, r0
	int32_t ret = to == NULL ? MAX_WAIT
    6ff6:	b16c      	cbz	r4, 7014 <next_timeout+0x30>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    6ff8:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
    6ffc:	1ac0      	subs	r0, r0, r3
    6ffe:	eb62 73e3 	sbc.w	r3, r2, r3, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    7002:	2801      	cmp	r0, #1
    7004:	f173 0200 	sbcs.w	r2, r3, #0
    7008:	db0d      	blt.n	7026 <next_timeout+0x42>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    700a:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
    700e:	f173 0300 	sbcs.w	r3, r3, #0
    7012:	db01      	blt.n	7018 <next_timeout+0x34>
	int32_t ret = to == NULL ? MAX_WAIT
    7014:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    7018:	4b05      	ldr	r3, [pc, #20]	; (7030 <next_timeout+0x4c>)
    701a:	691b      	ldr	r3, [r3, #16]
    701c:	b113      	cbz	r3, 7024 <next_timeout+0x40>
    701e:	4298      	cmp	r0, r3
    7020:	bfa8      	it	ge
    7022:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    7024:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    7026:	2000      	movs	r0, #0
    7028:	e7f6      	b.n	7018 <next_timeout+0x34>
    702a:	bf00      	nop
    702c:	2000018c 	.word	0x2000018c
    7030:	20001510 	.word	0x20001510

00007034 <remove_timeout>:
{
    7034:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
    7036:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    7038:	b168      	cbz	r0, 7056 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    703a:	4a0a      	ldr	r2, [pc, #40]	; (7064 <remove_timeout+0x30>)
    703c:	6852      	ldr	r2, [r2, #4]
    703e:	4290      	cmp	r0, r2
    7040:	d009      	beq.n	7056 <remove_timeout+0x22>
	if (next(t) != NULL) {
    7042:	b143      	cbz	r3, 7056 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    7044:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    7048:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    704c:	1912      	adds	r2, r2, r4
    704e:	eb41 0105 	adc.w	r1, r1, r5
    7052:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
    7056:	6842      	ldr	r2, [r0, #4]
    7058:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    705a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    705c:	2300      	movs	r3, #0
	node->prev = NULL;
    705e:	e9c0 3300 	strd	r3, r3, [r0]
}
    7062:	bd30      	pop	{r4, r5, pc}
    7064:	2000018c 	.word	0x2000018c

00007068 <timeout_rem>:
	return ret;
}

/* must be locked */
static k_ticks_t timeout_rem(const struct _timeout *timeout)
{
    7068:	b570      	push	{r4, r5, r6, lr}
	k_ticks_t ticks = 0;

	if (z_is_inactive_timeout(timeout)) {
    706a:	6804      	ldr	r4, [r0, #0]
    706c:	b1e4      	cbz	r4, 70a8 <timeout_rem+0x40>
	return list->head == list;
    706e:	4a10      	ldr	r2, [pc, #64]	; (70b0 <timeout_rem+0x48>)
    7070:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7072:	4293      	cmp	r3, r2
    7074:	d015      	beq.n	70a2 <timeout_rem+0x3a>
	return (node == list->tail) ? NULL : node->next;
    7076:	2400      	movs	r4, #0
    7078:	4625      	mov	r5, r4
    707a:	6851      	ldr	r1, [r2, #4]
		return 0;
	}

	for (struct _timeout *t = first(); t != NULL; t = next(t)) {
    707c:	b933      	cbnz	r3, 708c <timeout_rem+0x24>
		if (timeout == t) {
			break;
		}
	}

	return ticks - elapsed();
    707e:	f7ff ffa7 	bl	6fd0 <elapsed>
    7082:	4601      	mov	r1, r0
    7084:	1a20      	subs	r0, r4, r0
    7086:	eb65 71e1 	sbc.w	r1, r5, r1, asr #31
}
    708a:	bd70      	pop	{r4, r5, r6, pc}
		ticks += t->dticks;
    708c:	e9d3 2604 	ldrd	r2, r6, [r3, #16]
    7090:	18a4      	adds	r4, r4, r2
    7092:	eb45 0506 	adc.w	r5, r5, r6
		if (timeout == t) {
    7096:	4283      	cmp	r3, r0
    7098:	d0f1      	beq.n	707e <timeout_rem+0x16>
    709a:	428b      	cmp	r3, r1
    709c:	d0ef      	beq.n	707e <timeout_rem+0x16>
    709e:	681b      	ldr	r3, [r3, #0]
    70a0:	e7ec      	b.n	707c <timeout_rem+0x14>
    70a2:	2400      	movs	r4, #0
    70a4:	4625      	mov	r5, r4
    70a6:	e7ea      	b.n	707e <timeout_rem+0x16>
		return 0;
    70a8:	4620      	mov	r0, r4
    70aa:	4621      	mov	r1, r4
    70ac:	e7ed      	b.n	708a <timeout_rem+0x22>
    70ae:	bf00      	nop
    70b0:	2000018c 	.word	0x2000018c

000070b4 <z_add_timeout>:
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    70b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    70b8:	bf08      	it	eq
    70ba:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    70be:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    70c2:	4604      	mov	r4, r0
    70c4:	460e      	mov	r6, r1
    70c6:	4691      	mov	r9, r2
    70c8:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    70ca:	f000 809c 	beq.w	7206 <z_add_timeout+0x152>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    70ce:	f06f 0a01 	mvn.w	sl, #1
    70d2:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
	k_ticks_t ticks = timeout.ticks + 1;
    70d6:	1c55      	adds	r5, r2, #1
    70d8:	f143 0700 	adc.w	r7, r3, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    70dc:	ebba 0305 	subs.w	r3, sl, r5
    70e0:	eb6b 0307 	sbc.w	r3, fp, r7
    70e4:	2b00      	cmp	r3, #0
    70e6:	db0f      	blt.n	7108 <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(timeout.ticks) - (curr_tick + elapsed());
    70e8:	f7ff ff72 	bl	6fd0 <elapsed>
    70ec:	4a4b      	ldr	r2, [pc, #300]	; (721c <z_add_timeout+0x168>)
    70ee:	e9d2 3700 	ldrd	r3, r7, [r2]
    70f2:	ebba 0303 	subs.w	r3, sl, r3
    70f6:	eb6b 0707 	sbc.w	r7, fp, r7
    70fa:	ebb3 0309 	subs.w	r3, r3, r9
    70fe:	eb67 0708 	sbc.w	r7, r7, r8
    7102:	1a1d      	subs	r5, r3, r0
    7104:	eb67 77e0 	sbc.w	r7, r7, r0, asr #31
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
    7108:	6823      	ldr	r3, [r4, #0]
    710a:	b163      	cbz	r3, 7126 <z_add_timeout+0x72>
    710c:	4944      	ldr	r1, [pc, #272]	; (7220 <z_add_timeout+0x16c>)
    710e:	2363      	movs	r3, #99	; 0x63
    7110:	4a44      	ldr	r2, [pc, #272]	; (7224 <z_add_timeout+0x170>)
    7112:	4845      	ldr	r0, [pc, #276]	; (7228 <z_add_timeout+0x174>)
    7114:	f000 fba2 	bl	785c <printk>
    7118:	4844      	ldr	r0, [pc, #272]	; (722c <z_add_timeout+0x178>)
    711a:	f000 fb9f 	bl	785c <printk>
    711e:	2163      	movs	r1, #99	; 0x63
    7120:	4840      	ldr	r0, [pc, #256]	; (7224 <z_add_timeout+0x170>)
    7122:	f000 fded 	bl	7d00 <assert_post_action>
	ticks = MAX(1, ticks);
    7126:	2d01      	cmp	r5, #1
    7128:	f177 0300 	sbcs.w	r3, r7, #0
    712c:	bfbc      	itt	lt
    712e:	2501      	movlt	r5, #1
    7130:	2700      	movlt	r7, #0
	to->fn = fn;
    7132:	60a6      	str	r6, [r4, #8]
	__asm__ volatile(
    7134:	f04f 0320 	mov.w	r3, #32
    7138:	f3ef 8611 	mrs	r6, BASEPRI
    713c:	f383 8811 	msr	BASEPRI, r3
    7140:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7144:	483a      	ldr	r0, [pc, #232]	; (7230 <z_add_timeout+0x17c>)
    7146:	f7ff fdfd 	bl	6d44 <z_spin_lock_valid>
    714a:	b968      	cbnz	r0, 7168 <z_add_timeout+0xb4>
    714c:	2381      	movs	r3, #129	; 0x81
    714e:	4a39      	ldr	r2, [pc, #228]	; (7234 <z_add_timeout+0x180>)
    7150:	4939      	ldr	r1, [pc, #228]	; (7238 <z_add_timeout+0x184>)
    7152:	4835      	ldr	r0, [pc, #212]	; (7228 <z_add_timeout+0x174>)
    7154:	f000 fb82 	bl	785c <printk>
    7158:	4935      	ldr	r1, [pc, #212]	; (7230 <z_add_timeout+0x17c>)
    715a:	4838      	ldr	r0, [pc, #224]	; (723c <z_add_timeout+0x188>)
    715c:	f000 fb7e 	bl	785c <printk>
    7160:	2181      	movs	r1, #129	; 0x81
    7162:	4834      	ldr	r0, [pc, #208]	; (7234 <z_add_timeout+0x180>)
    7164:	f000 fdcc 	bl	7d00 <assert_post_action>
	z_spin_lock_set_owner(l);
    7168:	4831      	ldr	r0, [pc, #196]	; (7230 <z_add_timeout+0x17c>)
    716a:	f7ff fe07 	bl	6d7c <z_spin_lock_set_owner>
		to->dticks = ticks + elapsed();
    716e:	f7ff ff2f 	bl	6fd0 <elapsed>
    7172:	1945      	adds	r5, r0, r5
    7174:	eb47 70e0 	adc.w	r0, r7, r0, asr #31
	return list->head == list;
    7178:	4f31      	ldr	r7, [pc, #196]	; (7240 <z_add_timeout+0x18c>)
    717a:	e9c4 5004 	strd	r5, r0, [r4, #16]
    717e:	683b      	ldr	r3, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7180:	42bb      	cmp	r3, r7
    7182:	d002      	beq.n	718a <z_add_timeout+0xd6>
	return (node == list->tail) ? NULL : node->next;
    7184:	f8d7 c004 	ldr.w	ip, [r7, #4]
		for (t = first(); t != NULL; t = next(t)) {
    7188:	b933      	cbnz	r3, 7198 <z_add_timeout+0xe4>
	node->prev = list->tail;
    718a:	687b      	ldr	r3, [r7, #4]
	node->next = list;
    718c:	6027      	str	r7, [r4, #0]
	node->prev = list->tail;
    718e:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    7190:	687b      	ldr	r3, [r7, #4]
    7192:	601c      	str	r4, [r3, #0]
	list->tail = node;
    7194:	607c      	str	r4, [r7, #4]
}
    7196:	e011      	b.n	71bc <z_add_timeout+0x108>
			if (t->dticks > to->dticks) {
    7198:	e9d3 1504 	ldrd	r1, r5, [r3, #16]
    719c:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
    71a0:	428a      	cmp	r2, r1
    71a2:	eb70 0e05 	sbcs.w	lr, r0, r5
    71a6:	da30      	bge.n	720a <z_add_timeout+0x156>
				t->dticks -= to->dticks;
    71a8:	1a8a      	subs	r2, r1, r2
    71aa:	eb65 0000 	sbc.w	r0, r5, r0
    71ae:	e9c3 2004 	strd	r2, r0, [r3, #16]
	node->prev = successor->prev;
    71b2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    71b4:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
    71b8:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    71ba:	605c      	str	r4, [r3, #4]
	return list->head == list;
    71bc:	683b      	ldr	r3, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    71be:	42bb      	cmp	r3, r7
    71c0:	d00b      	beq.n	71da <z_add_timeout+0x126>
		if (to == first()) {
    71c2:	429c      	cmp	r4, r3
    71c4:	d109      	bne.n	71da <z_add_timeout+0x126>
			int32_t next_time = next_timeout();
    71c6:	f7ff ff0d 	bl	6fe4 <next_timeout>
			if (next_time == 0 ||
    71ca:	b118      	cbz	r0, 71d4 <z_add_timeout+0x120>
			    _current_cpu->slice_ticks != next_time) {
    71cc:	4b1d      	ldr	r3, [pc, #116]	; (7244 <z_add_timeout+0x190>)
			if (next_time == 0 ||
    71ce:	691b      	ldr	r3, [r3, #16]
    71d0:	4283      	cmp	r3, r0
    71d2:	d002      	beq.n	71da <z_add_timeout+0x126>
				z_clock_set_timeout(next_time, false);
    71d4:	2100      	movs	r1, #0
    71d6:	f7fb f807 	bl	21e8 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    71da:	4815      	ldr	r0, [pc, #84]	; (7230 <z_add_timeout+0x17c>)
    71dc:	f7ff fdc0 	bl	6d60 <z_spin_unlock_valid>
    71e0:	b968      	cbnz	r0, 71fe <z_add_timeout+0x14a>
    71e2:	23ac      	movs	r3, #172	; 0xac
    71e4:	4a13      	ldr	r2, [pc, #76]	; (7234 <z_add_timeout+0x180>)
    71e6:	4918      	ldr	r1, [pc, #96]	; (7248 <z_add_timeout+0x194>)
    71e8:	480f      	ldr	r0, [pc, #60]	; (7228 <z_add_timeout+0x174>)
    71ea:	f000 fb37 	bl	785c <printk>
    71ee:	4910      	ldr	r1, [pc, #64]	; (7230 <z_add_timeout+0x17c>)
    71f0:	4816      	ldr	r0, [pc, #88]	; (724c <z_add_timeout+0x198>)
    71f2:	f000 fb33 	bl	785c <printk>
    71f6:	21ac      	movs	r1, #172	; 0xac
    71f8:	480e      	ldr	r0, [pc, #56]	; (7234 <z_add_timeout+0x180>)
    71fa:	f000 fd81 	bl	7d00 <assert_post_action>
	__asm__ volatile(
    71fe:	f386 8811 	msr	BASEPRI, r6
    7202:	f3bf 8f6f 	isb	sy
}
    7206:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
    720a:	1a52      	subs	r2, r2, r1
    720c:	eb60 0005 	sbc.w	r0, r0, r5
	return (node == list->tail) ? NULL : node->next;
    7210:	4563      	cmp	r3, ip
    7212:	e9c4 2004 	strd	r2, r0, [r4, #16]
    7216:	d0b8      	beq.n	718a <z_add_timeout+0xd6>
    7218:	681b      	ldr	r3, [r3, #0]
    721a:	e7b5      	b.n	7188 <z_add_timeout+0xd4>
    721c:	20001180 	.word	0x20001180
    7220:	0000c97a 	.word	0x0000c97a
    7224:	0000c956 	.word	0x0000c956
    7228:	0000b021 	.word	0x0000b021
    722c:	0000bfd5 	.word	0x0000bfd5
    7230:	20001558 	.word	0x20001558
    7234:	0000b7ac 	.word	0x0000b7ac
    7238:	0000b7d2 	.word	0x0000b7d2
    723c:	0000b7e7 	.word	0x0000b7e7
    7240:	2000018c 	.word	0x2000018c
    7244:	20001510 	.word	0x20001510
    7248:	0000b7ff 	.word	0x0000b7ff
    724c:	0000b816 	.word	0x0000b816

00007250 <z_abort_timeout>:
{
    7250:	b538      	push	{r3, r4, r5, lr}
    7252:	4604      	mov	r4, r0
	__asm__ volatile(
    7254:	f04f 0320 	mov.w	r3, #32
    7258:	f3ef 8511 	mrs	r5, BASEPRI
    725c:	f383 8811 	msr	BASEPRI, r3
    7260:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7264:	481a      	ldr	r0, [pc, #104]	; (72d0 <z_abort_timeout+0x80>)
    7266:	f7ff fd6d 	bl	6d44 <z_spin_lock_valid>
    726a:	b968      	cbnz	r0, 7288 <z_abort_timeout+0x38>
    726c:	2381      	movs	r3, #129	; 0x81
    726e:	4a19      	ldr	r2, [pc, #100]	; (72d4 <z_abort_timeout+0x84>)
    7270:	4919      	ldr	r1, [pc, #100]	; (72d8 <z_abort_timeout+0x88>)
    7272:	481a      	ldr	r0, [pc, #104]	; (72dc <z_abort_timeout+0x8c>)
    7274:	f000 faf2 	bl	785c <printk>
    7278:	4915      	ldr	r1, [pc, #84]	; (72d0 <z_abort_timeout+0x80>)
    727a:	4819      	ldr	r0, [pc, #100]	; (72e0 <z_abort_timeout+0x90>)
    727c:	f000 faee 	bl	785c <printk>
    7280:	2181      	movs	r1, #129	; 0x81
    7282:	4814      	ldr	r0, [pc, #80]	; (72d4 <z_abort_timeout+0x84>)
    7284:	f000 fd3c 	bl	7d00 <assert_post_action>
	z_spin_lock_set_owner(l);
    7288:	4811      	ldr	r0, [pc, #68]	; (72d0 <z_abort_timeout+0x80>)
    728a:	f7ff fd77 	bl	6d7c <z_spin_lock_set_owner>
		if (sys_dnode_is_linked(&to->node)) {
    728e:	6823      	ldr	r3, [r4, #0]
    7290:	b1db      	cbz	r3, 72ca <z_abort_timeout+0x7a>
			remove_timeout(to);
    7292:	4620      	mov	r0, r4
    7294:	f7ff fece 	bl	7034 <remove_timeout>
			ret = 0;
    7298:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    729a:	480d      	ldr	r0, [pc, #52]	; (72d0 <z_abort_timeout+0x80>)
    729c:	f7ff fd60 	bl	6d60 <z_spin_unlock_valid>
    72a0:	b968      	cbnz	r0, 72be <z_abort_timeout+0x6e>
    72a2:	23ac      	movs	r3, #172	; 0xac
    72a4:	4a0b      	ldr	r2, [pc, #44]	; (72d4 <z_abort_timeout+0x84>)
    72a6:	490f      	ldr	r1, [pc, #60]	; (72e4 <z_abort_timeout+0x94>)
    72a8:	480c      	ldr	r0, [pc, #48]	; (72dc <z_abort_timeout+0x8c>)
    72aa:	f000 fad7 	bl	785c <printk>
    72ae:	4908      	ldr	r1, [pc, #32]	; (72d0 <z_abort_timeout+0x80>)
    72b0:	480d      	ldr	r0, [pc, #52]	; (72e8 <z_abort_timeout+0x98>)
    72b2:	f000 fad3 	bl	785c <printk>
    72b6:	21ac      	movs	r1, #172	; 0xac
    72b8:	4806      	ldr	r0, [pc, #24]	; (72d4 <z_abort_timeout+0x84>)
    72ba:	f000 fd21 	bl	7d00 <assert_post_action>
	__asm__ volatile(
    72be:	f385 8811 	msr	BASEPRI, r5
    72c2:	f3bf 8f6f 	isb	sy
}
    72c6:	4620      	mov	r0, r4
    72c8:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
    72ca:	f06f 0415 	mvn.w	r4, #21
    72ce:	e7e4      	b.n	729a <z_abort_timeout+0x4a>
    72d0:	20001558 	.word	0x20001558
    72d4:	0000b7ac 	.word	0x0000b7ac
    72d8:	0000b7d2 	.word	0x0000b7d2
    72dc:	0000b021 	.word	0x0000b021
    72e0:	0000b7e7 	.word	0x0000b7e7
    72e4:	0000b7ff 	.word	0x0000b7ff
    72e8:	0000b816 	.word	0x0000b816

000072ec <z_timeout_remaining>:

k_ticks_t z_timeout_remaining(const struct _timeout *timeout)
{
    72ec:	b570      	push	{r4, r5, r6, lr}
    72ee:	4604      	mov	r4, r0
	__asm__ volatile(
    72f0:	f04f 0320 	mov.w	r3, #32
    72f4:	f3ef 8611 	mrs	r6, BASEPRI
    72f8:	f383 8811 	msr	BASEPRI, r3
    72fc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7300:	4819      	ldr	r0, [pc, #100]	; (7368 <z_timeout_remaining+0x7c>)
    7302:	f7ff fd1f 	bl	6d44 <z_spin_lock_valid>
    7306:	b968      	cbnz	r0, 7324 <z_timeout_remaining+0x38>
    7308:	2381      	movs	r3, #129	; 0x81
    730a:	4a18      	ldr	r2, [pc, #96]	; (736c <z_timeout_remaining+0x80>)
    730c:	4918      	ldr	r1, [pc, #96]	; (7370 <z_timeout_remaining+0x84>)
    730e:	4819      	ldr	r0, [pc, #100]	; (7374 <z_timeout_remaining+0x88>)
    7310:	f000 faa4 	bl	785c <printk>
    7314:	4914      	ldr	r1, [pc, #80]	; (7368 <z_timeout_remaining+0x7c>)
    7316:	4818      	ldr	r0, [pc, #96]	; (7378 <z_timeout_remaining+0x8c>)
    7318:	f000 faa0 	bl	785c <printk>
    731c:	2181      	movs	r1, #129	; 0x81
    731e:	4813      	ldr	r0, [pc, #76]	; (736c <z_timeout_remaining+0x80>)
    7320:	f000 fcee 	bl	7d00 <assert_post_action>
	z_spin_lock_set_owner(l);
    7324:	4810      	ldr	r0, [pc, #64]	; (7368 <z_timeout_remaining+0x7c>)
    7326:	f7ff fd29 	bl	6d7c <z_spin_lock_set_owner>
	k_ticks_t ticks = 0;

	LOCKED(&timeout_lock) {
		ticks = timeout_rem(timeout);
    732a:	4620      	mov	r0, r4
    732c:	f7ff fe9c 	bl	7068 <timeout_rem>
    7330:	4605      	mov	r5, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7332:	480d      	ldr	r0, [pc, #52]	; (7368 <z_timeout_remaining+0x7c>)
    7334:	460c      	mov	r4, r1
    7336:	f7ff fd13 	bl	6d60 <z_spin_unlock_valid>
    733a:	b968      	cbnz	r0, 7358 <z_timeout_remaining+0x6c>
    733c:	23ac      	movs	r3, #172	; 0xac
    733e:	4a0b      	ldr	r2, [pc, #44]	; (736c <z_timeout_remaining+0x80>)
    7340:	490e      	ldr	r1, [pc, #56]	; (737c <z_timeout_remaining+0x90>)
    7342:	480c      	ldr	r0, [pc, #48]	; (7374 <z_timeout_remaining+0x88>)
    7344:	f000 fa8a 	bl	785c <printk>
    7348:	4907      	ldr	r1, [pc, #28]	; (7368 <z_timeout_remaining+0x7c>)
    734a:	480d      	ldr	r0, [pc, #52]	; (7380 <z_timeout_remaining+0x94>)
    734c:	f000 fa86 	bl	785c <printk>
    7350:	21ac      	movs	r1, #172	; 0xac
    7352:	4806      	ldr	r0, [pc, #24]	; (736c <z_timeout_remaining+0x80>)
    7354:	f000 fcd4 	bl	7d00 <assert_post_action>
	__asm__ volatile(
    7358:	f386 8811 	msr	BASEPRI, r6
    735c:	f3bf 8f6f 	isb	sy
	}

	return ticks;
}
    7360:	4628      	mov	r0, r5
    7362:	4621      	mov	r1, r4
    7364:	bd70      	pop	{r4, r5, r6, pc}
    7366:	bf00      	nop
    7368:	20001558 	.word	0x20001558
    736c:	0000b7ac 	.word	0x0000b7ac
    7370:	0000b7d2 	.word	0x0000b7d2
    7374:	0000b021 	.word	0x0000b021
    7378:	0000b7e7 	.word	0x0000b7e7
    737c:	0000b7ff 	.word	0x0000b7ff
    7380:	0000b816 	.word	0x0000b816

00007384 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
    7384:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    7386:	f04f 0320 	mov.w	r3, #32
    738a:	f3ef 8511 	mrs	r5, BASEPRI
    738e:	f383 8811 	msr	BASEPRI, r3
    7392:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7396:	4818      	ldr	r0, [pc, #96]	; (73f8 <z_get_next_timeout_expiry+0x74>)
    7398:	f7ff fcd4 	bl	6d44 <z_spin_lock_valid>
    739c:	b968      	cbnz	r0, 73ba <z_get_next_timeout_expiry+0x36>
    739e:	2381      	movs	r3, #129	; 0x81
    73a0:	4a16      	ldr	r2, [pc, #88]	; (73fc <z_get_next_timeout_expiry+0x78>)
    73a2:	4917      	ldr	r1, [pc, #92]	; (7400 <z_get_next_timeout_expiry+0x7c>)
    73a4:	4817      	ldr	r0, [pc, #92]	; (7404 <z_get_next_timeout_expiry+0x80>)
    73a6:	f000 fa59 	bl	785c <printk>
    73aa:	4913      	ldr	r1, [pc, #76]	; (73f8 <z_get_next_timeout_expiry+0x74>)
    73ac:	4816      	ldr	r0, [pc, #88]	; (7408 <z_get_next_timeout_expiry+0x84>)
    73ae:	f000 fa55 	bl	785c <printk>
    73b2:	2181      	movs	r1, #129	; 0x81
    73b4:	4811      	ldr	r0, [pc, #68]	; (73fc <z_get_next_timeout_expiry+0x78>)
    73b6:	f000 fca3 	bl	7d00 <assert_post_action>
	z_spin_lock_set_owner(l);
    73ba:	480f      	ldr	r0, [pc, #60]	; (73f8 <z_get_next_timeout_expiry+0x74>)
    73bc:	f7ff fcde 	bl	6d7c <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
    73c0:	f7ff fe10 	bl	6fe4 <next_timeout>
    73c4:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    73c6:	480c      	ldr	r0, [pc, #48]	; (73f8 <z_get_next_timeout_expiry+0x74>)
    73c8:	f7ff fcca 	bl	6d60 <z_spin_unlock_valid>
    73cc:	b968      	cbnz	r0, 73ea <z_get_next_timeout_expiry+0x66>
    73ce:	23ac      	movs	r3, #172	; 0xac
    73d0:	4a0a      	ldr	r2, [pc, #40]	; (73fc <z_get_next_timeout_expiry+0x78>)
    73d2:	490e      	ldr	r1, [pc, #56]	; (740c <z_get_next_timeout_expiry+0x88>)
    73d4:	480b      	ldr	r0, [pc, #44]	; (7404 <z_get_next_timeout_expiry+0x80>)
    73d6:	f000 fa41 	bl	785c <printk>
    73da:	4907      	ldr	r1, [pc, #28]	; (73f8 <z_get_next_timeout_expiry+0x74>)
    73dc:	480c      	ldr	r0, [pc, #48]	; (7410 <z_get_next_timeout_expiry+0x8c>)
    73de:	f000 fa3d 	bl	785c <printk>
    73e2:	21ac      	movs	r1, #172	; 0xac
    73e4:	4805      	ldr	r0, [pc, #20]	; (73fc <z_get_next_timeout_expiry+0x78>)
    73e6:	f000 fc8b 	bl	7d00 <assert_post_action>
	__asm__ volatile(
    73ea:	f385 8811 	msr	BASEPRI, r5
    73ee:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
    73f2:	4620      	mov	r0, r4
    73f4:	bd38      	pop	{r3, r4, r5, pc}
    73f6:	bf00      	nop
    73f8:	20001558 	.word	0x20001558
    73fc:	0000b7ac 	.word	0x0000b7ac
    7400:	0000b7d2 	.word	0x0000b7d2
    7404:	0000b021 	.word	0x0000b021
    7408:	0000b7e7 	.word	0x0000b7e7
    740c:	0000b7ff 	.word	0x0000b7ff
    7410:	0000b816 	.word	0x0000b816

00007414 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    7414:	b570      	push	{r4, r5, r6, lr}
    7416:	4604      	mov	r4, r0
    7418:	460d      	mov	r5, r1
	__asm__ volatile(
    741a:	f04f 0320 	mov.w	r3, #32
    741e:	f3ef 8611 	mrs	r6, BASEPRI
    7422:	f383 8811 	msr	BASEPRI, r3
    7426:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    742a:	481b      	ldr	r0, [pc, #108]	; (7498 <z_set_timeout_expiry+0x84>)
    742c:	f7ff fc8a 	bl	6d44 <z_spin_lock_valid>
    7430:	b968      	cbnz	r0, 744e <z_set_timeout_expiry+0x3a>
    7432:	2381      	movs	r3, #129	; 0x81
    7434:	4a19      	ldr	r2, [pc, #100]	; (749c <z_set_timeout_expiry+0x88>)
    7436:	491a      	ldr	r1, [pc, #104]	; (74a0 <z_set_timeout_expiry+0x8c>)
    7438:	481a      	ldr	r0, [pc, #104]	; (74a4 <z_set_timeout_expiry+0x90>)
    743a:	f000 fa0f 	bl	785c <printk>
    743e:	4916      	ldr	r1, [pc, #88]	; (7498 <z_set_timeout_expiry+0x84>)
    7440:	4819      	ldr	r0, [pc, #100]	; (74a8 <z_set_timeout_expiry+0x94>)
    7442:	f000 fa0b 	bl	785c <printk>
    7446:	2181      	movs	r1, #129	; 0x81
    7448:	4814      	ldr	r0, [pc, #80]	; (749c <z_set_timeout_expiry+0x88>)
    744a:	f000 fc59 	bl	7d00 <assert_post_action>
	z_spin_lock_set_owner(l);
    744e:	4812      	ldr	r0, [pc, #72]	; (7498 <z_set_timeout_expiry+0x84>)
    7450:	f7ff fc94 	bl	6d7c <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
    7454:	f7ff fdc6 	bl	6fe4 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    7458:	2801      	cmp	r0, #1
    745a:	dd05      	ble.n	7468 <z_set_timeout_expiry+0x54>
    745c:	42a0      	cmp	r0, r4
    745e:	db03      	blt.n	7468 <z_set_timeout_expiry+0x54>
			z_clock_set_timeout(MIN(ticks, next_to), is_idle);
    7460:	4629      	mov	r1, r5
    7462:	4620      	mov	r0, r4
    7464:	f7fa fec0 	bl	21e8 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7468:	480b      	ldr	r0, [pc, #44]	; (7498 <z_set_timeout_expiry+0x84>)
    746a:	f7ff fc79 	bl	6d60 <z_spin_unlock_valid>
    746e:	b968      	cbnz	r0, 748c <z_set_timeout_expiry+0x78>
    7470:	23ac      	movs	r3, #172	; 0xac
    7472:	4a0a      	ldr	r2, [pc, #40]	; (749c <z_set_timeout_expiry+0x88>)
    7474:	490d      	ldr	r1, [pc, #52]	; (74ac <z_set_timeout_expiry+0x98>)
    7476:	480b      	ldr	r0, [pc, #44]	; (74a4 <z_set_timeout_expiry+0x90>)
    7478:	f000 f9f0 	bl	785c <printk>
    747c:	4906      	ldr	r1, [pc, #24]	; (7498 <z_set_timeout_expiry+0x84>)
    747e:	480c      	ldr	r0, [pc, #48]	; (74b0 <z_set_timeout_expiry+0x9c>)
    7480:	f000 f9ec 	bl	785c <printk>
    7484:	21ac      	movs	r1, #172	; 0xac
    7486:	4805      	ldr	r0, [pc, #20]	; (749c <z_set_timeout_expiry+0x88>)
    7488:	f000 fc3a 	bl	7d00 <assert_post_action>
	__asm__ volatile(
    748c:	f386 8811 	msr	BASEPRI, r6
    7490:	f3bf 8f6f 	isb	sy
		}
	}
}
    7494:	bd70      	pop	{r4, r5, r6, pc}
    7496:	bf00      	nop
    7498:	20001558 	.word	0x20001558
    749c:	0000b7ac 	.word	0x0000b7ac
    74a0:	0000b7d2 	.word	0x0000b7d2
    74a4:	0000b021 	.word	0x0000b021
    74a8:	0000b7e7 	.word	0x0000b7e7
    74ac:	0000b7ff 	.word	0x0000b7ff
    74b0:	0000b816 	.word	0x0000b816

000074b4 <z_clock_announce>:

void z_clock_announce(int32_t ticks)
{
    74b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    74b8:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    74ba:	f7fe fd4b 	bl	5f54 <z_time_slice>
	__asm__ volatile(
    74be:	f04f 0320 	mov.w	r3, #32
    74c2:	f3ef 8511 	mrs	r5, BASEPRI
    74c6:	f383 8811 	msr	BASEPRI, r3
    74ca:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    74ce:	484c      	ldr	r0, [pc, #304]	; (7600 <z_clock_announce+0x14c>)
    74d0:	f7ff fc38 	bl	6d44 <z_spin_lock_valid>
    74d4:	b968      	cbnz	r0, 74f2 <z_clock_announce+0x3e>
    74d6:	2381      	movs	r3, #129	; 0x81
    74d8:	4a4a      	ldr	r2, [pc, #296]	; (7604 <z_clock_announce+0x150>)
    74da:	494b      	ldr	r1, [pc, #300]	; (7608 <z_clock_announce+0x154>)
    74dc:	484b      	ldr	r0, [pc, #300]	; (760c <z_clock_announce+0x158>)
    74de:	f000 f9bd 	bl	785c <printk>
    74e2:	4947      	ldr	r1, [pc, #284]	; (7600 <z_clock_announce+0x14c>)
    74e4:	484a      	ldr	r0, [pc, #296]	; (7610 <z_clock_announce+0x15c>)
    74e6:	f000 f9b9 	bl	785c <printk>
    74ea:	2181      	movs	r1, #129	; 0x81
    74ec:	4845      	ldr	r0, [pc, #276]	; (7604 <z_clock_announce+0x150>)
    74ee:	f000 fc07 	bl	7d00 <assert_post_action>
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    74f2:	4f48      	ldr	r7, [pc, #288]	; (7614 <z_clock_announce+0x160>)
	z_spin_lock_set_owner(l);
    74f4:	4842      	ldr	r0, [pc, #264]	; (7600 <z_clock_announce+0x14c>)
	return list->head == list;
    74f6:	f8df 8120 	ldr.w	r8, [pc, #288]	; 7618 <z_clock_announce+0x164>

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    74fa:	4e48      	ldr	r6, [pc, #288]	; (761c <z_clock_announce+0x168>)
    74fc:	f7ff fc3e 	bl	6d7c <z_spin_lock_set_owner>
	announce_remaining = ticks;
    7500:	603c      	str	r4, [r7, #0]
    7502:	f8d8 4000 	ldr.w	r4, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    7506:	683a      	ldr	r2, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7508:	4544      	cmp	r4, r8
    750a:	ea4f 70e2 	mov.w	r0, r2, asr #31
		curr_tick += dt;
    750e:	e9d6 1e00 	ldrd	r1, lr, [r6]
    7512:	d00b      	beq.n	752c <z_clock_announce+0x78>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    7514:	b154      	cbz	r4, 752c <z_clock_announce+0x78>
    7516:	e9d4 3c04 	ldrd	r3, ip, [r4, #16]
    751a:	429a      	cmp	r2, r3
    751c:	eb70 090c 	sbcs.w	r9, r0, ip
    7520:	da28      	bge.n	7574 <z_clock_announce+0xc0>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    7522:	1a9b      	subs	r3, r3, r2
    7524:	eb6c 0c00 	sbc.w	ip, ip, r0
    7528:	e9c4 3c04 	strd	r3, ip, [r4, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
    752c:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    752e:	1852      	adds	r2, r2, r1
    7530:	eb4e 0000 	adc.w	r0, lr, r0
    7534:	e9c6 2000 	strd	r2, r0, [r6]
	announce_remaining = 0;
    7538:	603c      	str	r4, [r7, #0]

	z_clock_set_timeout(next_timeout(), false);
    753a:	f7ff fd53 	bl	6fe4 <next_timeout>
    753e:	4621      	mov	r1, r4
    7540:	f7fa fe52 	bl	21e8 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7544:	482e      	ldr	r0, [pc, #184]	; (7600 <z_clock_announce+0x14c>)
    7546:	f7ff fc0b 	bl	6d60 <z_spin_unlock_valid>
    754a:	b968      	cbnz	r0, 7568 <z_clock_announce+0xb4>
    754c:	23ac      	movs	r3, #172	; 0xac
    754e:	4a2d      	ldr	r2, [pc, #180]	; (7604 <z_clock_announce+0x150>)
    7550:	4933      	ldr	r1, [pc, #204]	; (7620 <z_clock_announce+0x16c>)
    7552:	482e      	ldr	r0, [pc, #184]	; (760c <z_clock_announce+0x158>)
    7554:	f000 f982 	bl	785c <printk>
    7558:	4929      	ldr	r1, [pc, #164]	; (7600 <z_clock_announce+0x14c>)
    755a:	4832      	ldr	r0, [pc, #200]	; (7624 <z_clock_announce+0x170>)
    755c:	f000 f97e 	bl	785c <printk>
    7560:	21ac      	movs	r1, #172	; 0xac
    7562:	4828      	ldr	r0, [pc, #160]	; (7604 <z_clock_announce+0x150>)
    7564:	f000 fbcc 	bl	7d00 <assert_post_action>
	__asm__ volatile(
    7568:	f385 8811 	msr	BASEPRI, r5
    756c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    7570:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    7574:	1859      	adds	r1, r3, r1
    7576:	eb4e 70e3 	adc.w	r0, lr, r3, asr #31
		announce_remaining -= dt;
    757a:	1ad3      	subs	r3, r2, r3
    757c:	603b      	str	r3, [r7, #0]
		t->dticks = 0;
    757e:	2200      	movs	r2, #0
    7580:	2300      	movs	r3, #0
		curr_tick += dt;
    7582:	e9c6 1000 	strd	r1, r0, [r6]
		t->dticks = 0;
    7586:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    758a:	4620      	mov	r0, r4
    758c:	f7ff fd52 	bl	7034 <remove_timeout>
    7590:	481b      	ldr	r0, [pc, #108]	; (7600 <z_clock_announce+0x14c>)
    7592:	f7ff fbe5 	bl	6d60 <z_spin_unlock_valid>
    7596:	b968      	cbnz	r0, 75b4 <z_clock_announce+0x100>
    7598:	23ac      	movs	r3, #172	; 0xac
    759a:	4a1a      	ldr	r2, [pc, #104]	; (7604 <z_clock_announce+0x150>)
    759c:	4920      	ldr	r1, [pc, #128]	; (7620 <z_clock_announce+0x16c>)
    759e:	481b      	ldr	r0, [pc, #108]	; (760c <z_clock_announce+0x158>)
    75a0:	f000 f95c 	bl	785c <printk>
    75a4:	4916      	ldr	r1, [pc, #88]	; (7600 <z_clock_announce+0x14c>)
    75a6:	481f      	ldr	r0, [pc, #124]	; (7624 <z_clock_announce+0x170>)
    75a8:	f000 f958 	bl	785c <printk>
    75ac:	21ac      	movs	r1, #172	; 0xac
    75ae:	4815      	ldr	r0, [pc, #84]	; (7604 <z_clock_announce+0x150>)
    75b0:	f000 fba6 	bl	7d00 <assert_post_action>
    75b4:	f385 8811 	msr	BASEPRI, r5
    75b8:	f3bf 8f6f 	isb	sy
		t->fn(t);
    75bc:	4620      	mov	r0, r4
    75be:	68a3      	ldr	r3, [r4, #8]
    75c0:	4798      	blx	r3
	__asm__ volatile(
    75c2:	f04f 0320 	mov.w	r3, #32
    75c6:	f3ef 8511 	mrs	r5, BASEPRI
    75ca:	f383 8811 	msr	BASEPRI, r3
    75ce:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    75d2:	480b      	ldr	r0, [pc, #44]	; (7600 <z_clock_announce+0x14c>)
    75d4:	f7ff fbb6 	bl	6d44 <z_spin_lock_valid>
    75d8:	b968      	cbnz	r0, 75f6 <z_clock_announce+0x142>
    75da:	2381      	movs	r3, #129	; 0x81
    75dc:	4a09      	ldr	r2, [pc, #36]	; (7604 <z_clock_announce+0x150>)
    75de:	490a      	ldr	r1, [pc, #40]	; (7608 <z_clock_announce+0x154>)
    75e0:	480a      	ldr	r0, [pc, #40]	; (760c <z_clock_announce+0x158>)
    75e2:	f000 f93b 	bl	785c <printk>
    75e6:	4906      	ldr	r1, [pc, #24]	; (7600 <z_clock_announce+0x14c>)
    75e8:	4809      	ldr	r0, [pc, #36]	; (7610 <z_clock_announce+0x15c>)
    75ea:	f000 f937 	bl	785c <printk>
    75ee:	2181      	movs	r1, #129	; 0x81
    75f0:	4804      	ldr	r0, [pc, #16]	; (7604 <z_clock_announce+0x150>)
    75f2:	f000 fb85 	bl	7d00 <assert_post_action>
	z_spin_lock_set_owner(l);
    75f6:	4802      	ldr	r0, [pc, #8]	; (7600 <z_clock_announce+0x14c>)
    75f8:	f7ff fbc0 	bl	6d7c <z_spin_lock_set_owner>
	return k;
    75fc:	e781      	b.n	7502 <z_clock_announce+0x4e>
    75fe:	bf00      	nop
    7600:	20001558 	.word	0x20001558
    7604:	0000b7ac 	.word	0x0000b7ac
    7608:	0000b7d2 	.word	0x0000b7d2
    760c:	0000b021 	.word	0x0000b021
    7610:	0000b7e7 	.word	0x0000b7e7
    7614:	20001554 	.word	0x20001554
    7618:	2000018c 	.word	0x2000018c
    761c:	20001180 	.word	0x20001180
    7620:	0000b7ff 	.word	0x0000b7ff
    7624:	0000b816 	.word	0x0000b816

00007628 <z_tick_get>:

int64_t z_tick_get(void)
{
    7628:	b570      	push	{r4, r5, r6, lr}
    762a:	f04f 0320 	mov.w	r3, #32
    762e:	f3ef 8611 	mrs	r6, BASEPRI
    7632:	f383 8811 	msr	BASEPRI, r3
    7636:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    763a:	481b      	ldr	r0, [pc, #108]	; (76a8 <z_tick_get+0x80>)
    763c:	f7ff fb82 	bl	6d44 <z_spin_lock_valid>
    7640:	b968      	cbnz	r0, 765e <z_tick_get+0x36>
    7642:	2381      	movs	r3, #129	; 0x81
    7644:	4a19      	ldr	r2, [pc, #100]	; (76ac <z_tick_get+0x84>)
    7646:	491a      	ldr	r1, [pc, #104]	; (76b0 <z_tick_get+0x88>)
    7648:	481a      	ldr	r0, [pc, #104]	; (76b4 <z_tick_get+0x8c>)
    764a:	f000 f907 	bl	785c <printk>
    764e:	4916      	ldr	r1, [pc, #88]	; (76a8 <z_tick_get+0x80>)
    7650:	4819      	ldr	r0, [pc, #100]	; (76b8 <z_tick_get+0x90>)
    7652:	f000 f903 	bl	785c <printk>
    7656:	2181      	movs	r1, #129	; 0x81
    7658:	4814      	ldr	r0, [pc, #80]	; (76ac <z_tick_get+0x84>)
    765a:	f000 fb51 	bl	7d00 <assert_post_action>
	z_spin_lock_set_owner(l);
    765e:	4812      	ldr	r0, [pc, #72]	; (76a8 <z_tick_get+0x80>)
    7660:	f7ff fb8c 	bl	6d7c <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
    7664:	f7fa fe56 	bl	2314 <z_clock_elapsed>
    7668:	4b14      	ldr	r3, [pc, #80]	; (76bc <z_tick_get+0x94>)
    766a:	e9d3 4500 	ldrd	r4, r5, [r3]
    766e:	1904      	adds	r4, r0, r4
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7670:	480d      	ldr	r0, [pc, #52]	; (76a8 <z_tick_get+0x80>)
    7672:	f145 0500 	adc.w	r5, r5, #0
    7676:	f7ff fb73 	bl	6d60 <z_spin_unlock_valid>
    767a:	b968      	cbnz	r0, 7698 <z_tick_get+0x70>
    767c:	23ac      	movs	r3, #172	; 0xac
    767e:	4a0b      	ldr	r2, [pc, #44]	; (76ac <z_tick_get+0x84>)
    7680:	490f      	ldr	r1, [pc, #60]	; (76c0 <z_tick_get+0x98>)
    7682:	480c      	ldr	r0, [pc, #48]	; (76b4 <z_tick_get+0x8c>)
    7684:	f000 f8ea 	bl	785c <printk>
    7688:	4907      	ldr	r1, [pc, #28]	; (76a8 <z_tick_get+0x80>)
    768a:	480e      	ldr	r0, [pc, #56]	; (76c4 <z_tick_get+0x9c>)
    768c:	f000 f8e6 	bl	785c <printk>
    7690:	21ac      	movs	r1, #172	; 0xac
    7692:	4806      	ldr	r0, [pc, #24]	; (76ac <z_tick_get+0x84>)
    7694:	f000 fb34 	bl	7d00 <assert_post_action>
	__asm__ volatile(
    7698:	f386 8811 	msr	BASEPRI, r6
    769c:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    76a0:	4620      	mov	r0, r4
    76a2:	4629      	mov	r1, r5
    76a4:	bd70      	pop	{r4, r5, r6, pc}
    76a6:	bf00      	nop
    76a8:	20001558 	.word	0x20001558
    76ac:	0000b7ac 	.word	0x0000b7ac
    76b0:	0000b7d2 	.word	0x0000b7d2
    76b4:	0000b021 	.word	0x0000b021
    76b8:	0000b7e7 	.word	0x0000b7e7
    76bc:	20001180 	.word	0x20001180
    76c0:	0000b7ff 	.word	0x0000b7ff
    76c4:	0000b816 	.word	0x0000b816

000076c8 <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, uint32_t state)
{
    76c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
    76cc:	6884      	ldr	r4, [r0, #8]
{
    76ce:	4605      	mov	r5, r0
    76d0:	460e      	mov	r6, r1
	int retcode = 0;

	if (poller) {
    76d2:	b1d4      	cbz	r4, 770a <signal_poll_event+0x42>
		if (poller->mode == MODE_POLL) {
    76d4:	7863      	ldrb	r3, [r4, #1]
    76d6:	2b01      	cmp	r3, #1
    76d8:	d149      	bne.n	776e <signal_poll_event+0xa6>
	__ASSERT(thread != NULL, "poller should have a thread\n");
    76da:	f1b4 0760 	subs.w	r7, r4, #96	; 0x60
    76de:	d10e      	bne.n	76fe <signal_poll_event+0x36>
    76e0:	23e3      	movs	r3, #227	; 0xe3
    76e2:	4a2f      	ldr	r2, [pc, #188]	; (77a0 <signal_poll_event+0xd8>)
    76e4:	492f      	ldr	r1, [pc, #188]	; (77a4 <signal_poll_event+0xdc>)
    76e6:	4830      	ldr	r0, [pc, #192]	; (77a8 <signal_poll_event+0xe0>)
    76e8:	f000 f8b8 	bl	785c <printk>
    76ec:	482f      	ldr	r0, [pc, #188]	; (77ac <signal_poll_event+0xe4>)
    76ee:	f000 f8b5 	bl	785c <printk>
    76f2:	21e3      	movs	r1, #227	; 0xe3
    76f4:	482a      	ldr	r0, [pc, #168]	; (77a0 <signal_poll_event+0xd8>)
    76f6:	f000 fb03 	bl	7d00 <assert_post_action>
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
    76fa:	7b7b      	ldrb	r3, [r7, #13]
    76fc:	deff      	udf	#255	; 0xff
	if (!z_is_thread_pending(thread)) {
    76fe:	f814 3c53 	ldrb.w	r3, [r4, #-83]
    7702:	f013 0302 	ands.w	r3, r3, #2
    7706:	d10a      	bne.n	771e <signal_poll_event+0x56>
			retcode = signal_poller(event, state);
		} else if (poller->mode == MODE_TRIGGERED) {
			retcode = signal_triggered_work(event, state);
		}

		poller->is_polling = false;
    7708:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
    770a:	2000      	movs	r0, #0
	event->state |= state;
    770c:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
    770e:	60a8      	str	r0, [r5, #8]
	event->state |= state;
    7710:	f3c3 3104 	ubfx	r1, r3, #12, #5
    7714:	430e      	orrs	r6, r1
    7716:	f366 3310 	bfi	r3, r6, #12, #5
    771a:	60eb      	str	r3, [r5, #12]
			return retcode;
		}
	}

	set_event_ready(event, state);
	return retcode;
    771c:	e00b      	b.n	7736 <signal_poll_event+0x6e>
	if (z_is_thread_timeout_expired(thread)) {
    771e:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
    7722:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    7726:	bf08      	it	eq
    7728:	f112 0f02 	cmneq.w	r2, #2
    772c:	d105      	bne.n	773a <signal_poll_event+0x72>
		poller->is_polling = false;
    772e:	2300      	movs	r3, #0
		return -EAGAIN;
    7730:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
    7734:	7023      	strb	r3, [r4, #0]
}
    7736:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_unpend_thread(thread);
    773a:	4638      	mov	r0, r7
    773c:	f7fe f9ce 	bl	5adc <z_unpend_thread>
	arch_thread_return_value_set(thread,
    7740:	2e08      	cmp	r6, #8
    7742:	bf0c      	ite	eq
    7744:	f06f 0303 	mvneq.w	r3, #3
    7748:	2300      	movne	r3, #0
    774a:	63e3      	str	r3, [r4, #60]	; 0x3c
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    774c:	f814 3c53 	ldrb.w	r3, [r4, #-83]
    7750:	06db      	lsls	r3, r3, #27
    7752:	d104      	bne.n	775e <signal_poll_event+0x96>
	if (!z_is_thread_ready(thread)) {
    7754:	f854 8c48 	ldr.w	r8, [r4, #-72]
    7758:	f1b8 0f00 	cmp.w	r8, #0
    775c:	d001      	beq.n	7762 <signal_poll_event+0x9a>
		poller->is_polling = false;
    775e:	2300      	movs	r3, #0
    7760:	e7d2      	b.n	7708 <signal_poll_event+0x40>
	z_ready_thread(thread);
    7762:	4638      	mov	r0, r7
    7764:	f7fe fcb8 	bl	60d8 <z_ready_thread>
		poller->is_polling = false;
    7768:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
    776c:	e7cd      	b.n	770a <signal_poll_event+0x42>
		} else if (poller->mode == MODE_TRIGGERED) {
    776e:	2b02      	cmp	r3, #2
    7770:	d1f5      	bne.n	775e <signal_poll_event+0x96>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
    7772:	7823      	ldrb	r3, [r4, #0]
    7774:	2b00      	cmp	r3, #0
    7776:	d0c8      	beq.n	770a <signal_poll_event+0x42>
    7778:	f854 7c04 	ldr.w	r7, [r4, #-4]
    777c:	b177      	cbz	r7, 779c <signal_poll_event+0xd4>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
    777e:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
    7782:	f1a4 0910 	sub.w	r9, r4, #16
    7786:	f104 0010 	add.w	r0, r4, #16
    778a:	f7ff fd61 	bl	7250 <z_abort_timeout>
		k_work_submit_to_queue(work_q, &twork->work);
    778e:	4649      	mov	r1, r9
    7790:	4638      	mov	r0, r7
		twork->poll_result = 0;
    7792:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
		k_work_submit_to_queue(work_q, &twork->work);
    7796:	f002 fdb8 	bl	a30a <k_work_submit_to_queue>
    779a:	e7e5      	b.n	7768 <signal_poll_event+0xa0>
		poller->is_polling = false;
    779c:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
    779e:	e7b4      	b.n	770a <signal_poll_event+0x42>
    77a0:	0000c99a 	.word	0x0000c99a
    77a4:	0000c9bb 	.word	0x0000c9bb
    77a8:	0000b021 	.word	0x0000b021
    77ac:	0000c9d1 	.word	0x0000c9d1

000077b0 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
    77b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    77b2:	4606      	mov	r6, r0
    77b4:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
    77b6:	f002 fd0f 	bl	a1d8 <k_is_in_isr>
    77ba:	b980      	cbnz	r0, 77de <z_thread_aligned_alloc+0x2e>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
    77bc:	4b15      	ldr	r3, [pc, #84]	; (7814 <z_thread_aligned_alloc+0x64>)
    77be:	689b      	ldr	r3, [r3, #8]
    77c0:	f8d3 4094 	ldr.w	r4, [r3, #148]	; 0x94
	}

	if (heap) {
    77c4:	b314      	cbz	r4, 780c <z_thread_aligned_alloc+0x5c>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
    77c6:	1d2a      	adds	r2, r5, #4
    77c8:	d209      	bcs.n	77de <z_thread_aligned_alloc+0x2e>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
    77ca:	2000      	movs	r0, #0
    77cc:	2100      	movs	r1, #0
    77ce:	e9cd 0100 	strd	r0, r1, [sp]
    77d2:	4620      	mov	r0, r4
    77d4:	f046 0104 	orr.w	r1, r6, #4
    77d8:	f7fd fb3a 	bl	4e50 <k_heap_aligned_alloc>
	if (mem == NULL) {
    77dc:	b908      	cbnz	r0, 77e2 <z_thread_aligned_alloc+0x32>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
    77de:	2400      	movs	r4, #0
	}

	return ret;
    77e0:	e014      	b.n	780c <z_thread_aligned_alloc+0x5c>
	*heap_ref = heap;
    77e2:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
    77e4:	1d04      	adds	r4, r0, #4
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
    77e6:	b18e      	cbz	r6, 780c <z_thread_aligned_alloc+0x5c>
    77e8:	1e73      	subs	r3, r6, #1
    77ea:	421c      	tst	r4, r3
    77ec:	d00e      	beq.n	780c <z_thread_aligned_alloc+0x5c>
    77ee:	2325      	movs	r3, #37	; 0x25
    77f0:	4a09      	ldr	r2, [pc, #36]	; (7818 <z_thread_aligned_alloc+0x68>)
    77f2:	490a      	ldr	r1, [pc, #40]	; (781c <z_thread_aligned_alloc+0x6c>)
    77f4:	480a      	ldr	r0, [pc, #40]	; (7820 <z_thread_aligned_alloc+0x70>)
    77f6:	f000 f831 	bl	785c <printk>
    77fa:	4621      	mov	r1, r4
    77fc:	4809      	ldr	r0, [pc, #36]	; (7824 <z_thread_aligned_alloc+0x74>)
    77fe:	4632      	mov	r2, r6
    7800:	f000 f82c 	bl	785c <printk>
    7804:	2125      	movs	r1, #37	; 0x25
    7806:	4804      	ldr	r0, [pc, #16]	; (7818 <z_thread_aligned_alloc+0x68>)
    7808:	f000 fa7a 	bl	7d00 <assert_post_action>
}
    780c:	4620      	mov	r0, r4
    780e:	b002      	add	sp, #8
    7810:	bd70      	pop	{r4, r5, r6, pc}
    7812:	bf00      	nop
    7814:	20001510 	.word	0x20001510
    7818:	0000c9f0 	.word	0x0000c9f0
    781c:	0000ca14 	.word	0x0000ca14
    7820:	0000b021 	.word	0x0000b021
    7824:	0000ca46 	.word	0x0000ca46

00007828 <unit_test_noop>:
 * nothing, successfully. Can be used as a parameter to
 * ztest_unit_test_setup_teardown().
 */
static inline void unit_test_noop(void)
{
}
    7828:	4770      	bx	lr

0000782a <offload_is_supported>:
}
    782a:	2001      	movs	r0, #1
    782c:	4770      	bx	lr

0000782e <z_errno>:
    782e:	f7fd b9c9 	b.w	4bc4 <z_impl_z_errno>

00007832 <arch_printk_char_out>:
}
    7832:	2000      	movs	r0, #0
    7834:	4770      	bx	lr

00007836 <str_out>:
{
    7836:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    7838:	688a      	ldr	r2, [r1, #8]
    783a:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
    783c:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    783e:	b114      	cbz	r4, 7846 <str_out+0x10>
    7840:	684b      	ldr	r3, [r1, #4]
    7842:	4293      	cmp	r3, r2
    7844:	dc01      	bgt.n	784a <str_out+0x14>
		ctx->count++;
    7846:	608d      	str	r5, [r1, #8]
}
    7848:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
    784a:	3b01      	subs	r3, #1
    784c:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
    784e:	bf08      	it	eq
    7850:	2200      	moveq	r2, #0
    7852:	608d      	str	r5, [r1, #8]
    7854:	bf0c      	ite	eq
    7856:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
    7858:	54a0      	strbne	r0, [r4, r2]
    785a:	e7f5      	b.n	7848 <str_out+0x12>

0000785c <printk>:
{
    785c:	b40f      	push	{r0, r1, r2, r3}
    785e:	b507      	push	{r0, r1, r2, lr}
    7860:	a904      	add	r1, sp, #16
    7862:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    7866:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
    7868:	f7f9 fb30 	bl	ecc <vprintk>
}
    786c:	b003      	add	sp, #12
    786e:	f85d eb04 	ldr.w	lr, [sp], #4
    7872:	b004      	add	sp, #16
    7874:	4770      	bx	lr

00007876 <snprintk>:
{
    7876:	b40c      	push	{r2, r3}
    7878:	b507      	push	{r0, r1, r2, lr}
    787a:	ab04      	add	r3, sp, #16
    787c:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
    7880:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
    7882:	f7f9 fb31 	bl	ee8 <vsnprintk>
}
    7886:	b003      	add	sp, #12
    7888:	f85d eb04 	ldr.w	lr, [sp], #4
    788c:	b002      	add	sp, #8
    788e:	4770      	bx	lr

00007890 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    7890:	4604      	mov	r4, r0
    7892:	b508      	push	{r3, lr}
    7894:	4608      	mov	r0, r1
    7896:	4611      	mov	r1, r2
	entry(p1, p2, p3);
    7898:	461a      	mov	r2, r3
    789a:	47a0      	blx	r4
	return z_impl_k_current_get();
    789c:	f7fe feb4 	bl	6608 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
    78a0:	f7fb f98e 	bl	2bc0 <z_impl_k_thread_abort>

000078a4 <chunk_field>:
	if (big_heap(h)) {
    78a4:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
    78a6:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
    78aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
    78ae:	bf2c      	ite	cs
    78b0:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
		return ((uint16_t *)cmem)[f];
    78b4:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
}
    78b8:	4770      	bx	lr

000078ba <chunk_set>:
	void *cmem = &buf[c];
    78ba:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
    78be:	6880      	ldr	r0, [r0, #8]
    78c0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		((uint32_t *)cmem)[f] = val;
    78c4:	bf2c      	ite	cs
    78c6:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
		((uint16_t *)cmem)[f] = val;
    78ca:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
}
    78ce:	4770      	bx	lr

000078d0 <chunk_size>:
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    78d0:	2201      	movs	r2, #1
{
    78d2:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    78d4:	f7ff ffe6 	bl	78a4 <chunk_field>
}
    78d8:	40d0      	lsrs	r0, r2
    78da:	bd08      	pop	{r3, pc}

000078dc <set_chunk_used>:
	if (big_heap(h)) {
    78dc:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
    78de:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
    78e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    78e6:	d308      	bcc.n	78fa <set_chunk_used+0x1e>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
    78e8:	684b      	ldr	r3, [r1, #4]
		if (used) {
    78ea:	b11a      	cbz	r2, 78f4 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
    78ec:	f043 0301 	orr.w	r3, r3, #1
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
    78f0:	604b      	str	r3, [r1, #4]
    78f2:	4770      	bx	lr
    78f4:	f023 0301 	bic.w	r3, r3, #1
    78f8:	e7fa      	b.n	78f0 <set_chunk_used+0x14>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    78fa:	884b      	ldrh	r3, [r1, #2]
		if (used) {
    78fc:	b11a      	cbz	r2, 7906 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    78fe:	f043 0301 	orr.w	r3, r3, #1
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    7902:	804b      	strh	r3, [r1, #2]
}
    7904:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    7906:	f023 0301 	bic.w	r3, r3, #1
    790a:	e7fa      	b.n	7902 <set_chunk_used+0x26>

0000790c <set_chunk_size>:
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    790c:	0053      	lsls	r3, r2, #1
    790e:	2201      	movs	r2, #1
    7910:	f7ff bfd3 	b.w	78ba <chunk_set>

00007914 <bytes_to_chunksz.isra.0>:
	return big_heap(h) ? 8 : 4;
    7914:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    7918:	bf2c      	ite	cs
    791a:	2008      	movcs	r0, #8
    791c:	2004      	movcc	r0, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    791e:	3107      	adds	r1, #7
    7920:	4408      	add	r0, r1
}
    7922:	08c0      	lsrs	r0, r0, #3
    7924:	4770      	bx	lr

00007926 <bucket_idx.isra.0>:
static inline int bucket_idx(struct z_heap *h, size_t sz)
    7926:	b508      	push	{r3, lr}
    7928:	460b      	mov	r3, r1
    792a:	2101      	movs	r1, #1
    792c:	f7ff fff2 	bl	7914 <bytes_to_chunksz.isra.0>
	size_t usable_sz = sz - min_chunk_size(h) + 1;
    7930:	3301      	adds	r3, #1
    7932:	1a1b      	subs	r3, r3, r0
	return 31 - __builtin_clz(usable_sz);
    7934:	fab3 f083 	clz	r0, r3
}
    7938:	f1c0 001f 	rsb	r0, r0, #31
    793c:	bd08      	pop	{r3, pc}

0000793e <free_list_remove_bidx>:
{
    793e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7942:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
    7944:	2203      	movs	r2, #3
    7946:	460e      	mov	r6, r1
    7948:	4604      	mov	r4, r0
    794a:	f7ff ffab 	bl	78a4 <chunk_field>
	if (next_free_chunk(h, c) == c) {
    794e:	4286      	cmp	r6, r0
    7950:	4605      	mov	r5, r0
    7952:	f107 0804 	add.w	r8, r7, #4
    7956:	d10b      	bne.n	7970 <free_list_remove_bidx+0x32>
		h->avail_buckets &= ~(1 << bidx);
    7958:	2301      	movs	r3, #1
    795a:	fa03 f707 	lsl.w	r7, r3, r7
    795e:	68e3      	ldr	r3, [r4, #12]
    7960:	ea23 0307 	bic.w	r3, r3, r7
    7964:	60e3      	str	r3, [r4, #12]
		b->next = 0;
    7966:	2300      	movs	r3, #0
    7968:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
    796c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
    7970:	4631      	mov	r1, r6
    7972:	2202      	movs	r2, #2
    7974:	4620      	mov	r0, r4
    7976:	f7ff ff95 	bl	78a4 <chunk_field>
    797a:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
    797c:	462b      	mov	r3, r5
    797e:	4601      	mov	r1, r0
    7980:	2203      	movs	r2, #3
    7982:	4620      	mov	r0, r4
		b->next = second;
    7984:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
    7988:	f7ff ff97 	bl	78ba <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
    798c:	4633      	mov	r3, r6
    798e:	4629      	mov	r1, r5
    7990:	4620      	mov	r0, r4
}
    7992:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7996:	2202      	movs	r2, #2
    7998:	f7ff bf8f 	b.w	78ba <chunk_set>

0000799c <free_list_remove>:
{
    799c:	b570      	push	{r4, r5, r6, lr}
    799e:	460d      	mov	r5, r1
	return big_heap_chunks(h->len);
    79a0:	6886      	ldr	r6, [r0, #8]
    79a2:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
    79a4:	f7ff ff94 	bl	78d0 <chunk_size>
    79a8:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
    79ac:	4601      	mov	r1, r0
    79ae:	d301      	bcc.n	79b4 <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
    79b0:	2801      	cmp	r0, #1
    79b2:	d009      	beq.n	79c8 <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
    79b4:	4630      	mov	r0, r6
    79b6:	f7ff ffb6 	bl	7926 <bucket_idx.isra.0>
		free_list_remove_bidx(h, c, bidx);
    79ba:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
    79bc:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
    79be:	4620      	mov	r0, r4
}
    79c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		free_list_remove_bidx(h, c, bidx);
    79c4:	f7ff bfbb 	b.w	793e <free_list_remove_bidx>
}
    79c8:	bd70      	pop	{r4, r5, r6, pc}

000079ca <alloc_chunk>:
{
    79ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    79ce:	6886      	ldr	r6, [r0, #8]
    79d0:	4604      	mov	r4, r0
	int bi = bucket_idx(h, sz);
    79d2:	4630      	mov	r0, r6
{
    79d4:	4688      	mov	r8, r1
	int bi = bucket_idx(h, sz);
    79d6:	f7ff ffa6 	bl	7926 <bucket_idx.isra.0>
	if (bi > bucket_idx(h, h->len)) {
    79da:	4631      	mov	r1, r6
	int bi = bucket_idx(h, sz);
    79dc:	4605      	mov	r5, r0
	if (bi > bucket_idx(h, h->len)) {
    79de:	4630      	mov	r0, r6
    79e0:	f7ff ffa1 	bl	7926 <bucket_idx.isra.0>
    79e4:	42a8      	cmp	r0, r5
    79e6:	da03      	bge.n	79f0 <alloc_chunk+0x26>
		return 0;
    79e8:	2600      	movs	r6, #0
}
    79ea:	4630      	mov	r0, r6
    79ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (b->next) {
    79f0:	eb04 0a85 	add.w	sl, r4, r5, lsl #2
    79f4:	f8da 9010 	ldr.w	r9, [sl, #16]
    79f8:	f1b9 0f00 	cmp.w	r9, #0
    79fc:	d019      	beq.n	7a32 <alloc_chunk+0x68>
    79fe:	2703      	movs	r7, #3
			chunkid_t c = b->next;
    7a00:	f8da 6010 	ldr.w	r6, [sl, #16]
			if (chunk_size(h, c) >= sz) {
    7a04:	4620      	mov	r0, r4
    7a06:	4631      	mov	r1, r6
    7a08:	f7ff ff62 	bl	78d0 <chunk_size>
    7a0c:	4540      	cmp	r0, r8
    7a0e:	d305      	bcc.n	7a1c <alloc_chunk+0x52>
				free_list_remove_bidx(h, c, bi);
    7a10:	462a      	mov	r2, r5
		free_list_remove_bidx(h, c, minbucket);
    7a12:	4631      	mov	r1, r6
    7a14:	4620      	mov	r0, r4
    7a16:	f7ff ff92 	bl	793e <free_list_remove_bidx>
		return c;
    7a1a:	e7e6      	b.n	79ea <alloc_chunk+0x20>
	return chunk_field(h, c, FREE_NEXT);
    7a1c:	2203      	movs	r2, #3
    7a1e:	4631      	mov	r1, r6
    7a20:	4620      	mov	r0, r4
    7a22:	f7ff ff3f 	bl	78a4 <chunk_field>
		} while (--i && b->next != first);
    7a26:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
    7a28:	f8ca 0010 	str.w	r0, [sl, #16]
		} while (--i && b->next != first);
    7a2c:	d001      	beq.n	7a32 <alloc_chunk+0x68>
    7a2e:	4581      	cmp	r9, r0
    7a30:	d1e6      	bne.n	7a00 <alloc_chunk+0x36>
	size_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
    7a32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7a36:	68e3      	ldr	r3, [r4, #12]
    7a38:	3501      	adds	r5, #1
    7a3a:	40aa      	lsls	r2, r5
	if ((bmask & h->avail_buckets) != 0U) {
    7a3c:	401a      	ands	r2, r3
    7a3e:	d0d3      	beq.n	79e8 <alloc_chunk+0x1e>
		int minbucket = __builtin_ctz(bmask & h->avail_buckets);
    7a40:	fa92 f2a2 	rbit	r2, r2
    7a44:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
    7a48:	1d13      	adds	r3, r2, #4
    7a4a:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]
    7a4e:	e7e0      	b.n	7a12 <alloc_chunk+0x48>

00007a50 <split_chunks>:
{
    7a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7a54:	4614      	mov	r4, r2
    7a56:	460e      	mov	r6, r1
    7a58:	4605      	mov	r5, r0
	size_t sz0 = chunk_size(h, lc);
    7a5a:	f7ff ff39 	bl	78d0 <chunk_size>
	size_t lsz = rc - lc;
    7a5e:	eba4 0806 	sub.w	r8, r4, r6
	size_t rsz = sz0 - lsz;
    7a62:	1b37      	subs	r7, r6, r4
    7a64:	4407      	add	r7, r0
	set_chunk_size(h, lc, lsz);
    7a66:	4642      	mov	r2, r8
    7a68:	4631      	mov	r1, r6
    7a6a:	4628      	mov	r0, r5
    7a6c:	f7ff ff4e 	bl	790c <set_chunk_size>
	set_chunk_size(h, rc, rsz);
    7a70:	463a      	mov	r2, r7
    7a72:	4621      	mov	r1, r4
    7a74:	4628      	mov	r0, r5
    7a76:	f7ff ff49 	bl	790c <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
    7a7a:	4643      	mov	r3, r8
    7a7c:	2200      	movs	r2, #0
    7a7e:	4621      	mov	r1, r4
    7a80:	4628      	mov	r0, r5
    7a82:	f7ff ff1a 	bl	78ba <chunk_set>
	return c + chunk_size(h, c);
    7a86:	4621      	mov	r1, r4
    7a88:	4628      	mov	r0, r5
    7a8a:	f7ff ff21 	bl	78d0 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
    7a8e:	463b      	mov	r3, r7
    7a90:	1821      	adds	r1, r4, r0
    7a92:	2200      	movs	r2, #0
    7a94:	4628      	mov	r0, r5
}
    7a96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7a9a:	f7ff bf0e 	b.w	78ba <chunk_set>

00007a9e <merge_chunks>:
{
    7a9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7aa2:	4616      	mov	r6, r2
    7aa4:	4604      	mov	r4, r0
    7aa6:	460f      	mov	r7, r1
	size_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
    7aa8:	f7ff ff12 	bl	78d0 <chunk_size>
    7aac:	4631      	mov	r1, r6
    7aae:	4605      	mov	r5, r0
    7ab0:	4620      	mov	r0, r4
    7ab2:	f7ff ff0d 	bl	78d0 <chunk_size>
    7ab6:	4405      	add	r5, r0
	set_chunk_size(h, lc, newsz);
    7ab8:	462a      	mov	r2, r5
    7aba:	4639      	mov	r1, r7
    7abc:	4620      	mov	r0, r4
    7abe:	f7ff ff25 	bl	790c <set_chunk_size>
	return c + chunk_size(h, c);
    7ac2:	4631      	mov	r1, r6
    7ac4:	4620      	mov	r0, r4
    7ac6:	f7ff ff03 	bl	78d0 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
    7aca:	462b      	mov	r3, r5
    7acc:	1831      	adds	r1, r6, r0
    7ace:	2200      	movs	r2, #0
    7ad0:	4620      	mov	r0, r4
}
    7ad2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7ad6:	f7ff bef0 	b.w	78ba <chunk_set>

00007ada <free_list_add>:
{
    7ada:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7ade:	460d      	mov	r5, r1
	return big_heap_chunks(h->len);
    7ae0:	6886      	ldr	r6, [r0, #8]
    7ae2:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
    7ae4:	f7ff fef4 	bl	78d0 <chunk_size>
    7ae8:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
    7aec:	4601      	mov	r1, r0
    7aee:	d301      	bcc.n	7af4 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
    7af0:	2801      	cmp	r0, #1
    7af2:	d033      	beq.n	7b5c <free_list_add+0x82>
		int bidx = bucket_idx(h, chunk_size(h, c));
    7af4:	4630      	mov	r0, r6
    7af6:	f7ff ff16 	bl	7926 <bucket_idx.isra.0>
	if (b->next == 0U) {
    7afa:	eb04 0280 	add.w	r2, r4, r0, lsl #2
    7afe:	6916      	ldr	r6, [r2, #16]
    7b00:	b99e      	cbnz	r6, 7b2a <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
    7b02:	2301      	movs	r3, #1
    7b04:	fa03 f000 	lsl.w	r0, r3, r0
    7b08:	68e3      	ldr	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
    7b0a:	4629      	mov	r1, r5
    7b0c:	4303      	orrs	r3, r0
    7b0e:	60e3      	str	r3, [r4, #12]
    7b10:	4620      	mov	r0, r4
		b->next = c;
    7b12:	6115      	str	r5, [r2, #16]
    7b14:	462b      	mov	r3, r5
    7b16:	2202      	movs	r2, #2
    7b18:	f7ff fecf 	bl	78ba <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
    7b1c:	2203      	movs	r2, #3
    7b1e:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
    7b20:	4620      	mov	r0, r4
}
    7b22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7b26:	f7ff bec8 	b.w	78ba <chunk_set>
	return chunk_field(h, c, FREE_PREV);
    7b2a:	2202      	movs	r2, #2
    7b2c:	4631      	mov	r1, r6
    7b2e:	4620      	mov	r0, r4
    7b30:	f7ff feb8 	bl	78a4 <chunk_field>
    7b34:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
    7b36:	4603      	mov	r3, r0
    7b38:	4629      	mov	r1, r5
    7b3a:	4620      	mov	r0, r4
    7b3c:	f7ff febd 	bl	78ba <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
    7b40:	2203      	movs	r2, #3
    7b42:	4633      	mov	r3, r6
    7b44:	4629      	mov	r1, r5
    7b46:	4620      	mov	r0, r4
    7b48:	f7ff feb7 	bl	78ba <chunk_set>
    7b4c:	4639      	mov	r1, r7
    7b4e:	462b      	mov	r3, r5
    7b50:	4620      	mov	r0, r4
    7b52:	f7ff feb2 	bl	78ba <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
    7b56:	2202      	movs	r2, #2
    7b58:	4631      	mov	r1, r6
    7b5a:	e7e1      	b.n	7b20 <free_list_add+0x46>
    7b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00007b60 <free_chunk>:
{
    7b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7b62:	460c      	mov	r4, r1
    7b64:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
    7b66:	f7ff feb3 	bl	78d0 <chunk_size>
    7b6a:	1826      	adds	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    7b6c:	2201      	movs	r2, #1
    7b6e:	4631      	mov	r1, r6
    7b70:	4628      	mov	r0, r5
    7b72:	f7ff fe97 	bl	78a4 <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
    7b76:	07c3      	lsls	r3, r0, #31
    7b78:	d40c      	bmi.n	7b94 <free_chunk+0x34>
		free_list_remove(h, right_chunk(h, c));
    7b7a:	4631      	mov	r1, r6
    7b7c:	4628      	mov	r0, r5
    7b7e:	f7ff ff0d 	bl	799c <free_list_remove>
	return c + chunk_size(h, c);
    7b82:	4621      	mov	r1, r4
    7b84:	4628      	mov	r0, r5
    7b86:	f7ff fea3 	bl	78d0 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
    7b8a:	4621      	mov	r1, r4
    7b8c:	1822      	adds	r2, r4, r0
    7b8e:	4628      	mov	r0, r5
    7b90:	f7ff ff85 	bl	7a9e <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
    7b94:	2200      	movs	r2, #0
    7b96:	4621      	mov	r1, r4
    7b98:	4628      	mov	r0, r5
    7b9a:	f7ff fe83 	bl	78a4 <chunk_field>
    7b9e:	1a27      	subs	r7, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    7ba0:	2201      	movs	r2, #1
    7ba2:	4639      	mov	r1, r7
    7ba4:	4628      	mov	r0, r5
    7ba6:	f7ff fe7d 	bl	78a4 <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
    7baa:	ea10 0602 	ands.w	r6, r0, r2
    7bae:	d113      	bne.n	7bd8 <free_chunk+0x78>
		free_list_remove(h, left_chunk(h, c));
    7bb0:	4639      	mov	r1, r7
    7bb2:	4628      	mov	r0, r5
    7bb4:	f7ff fef2 	bl	799c <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
    7bb8:	4621      	mov	r1, r4
    7bba:	4632      	mov	r2, r6
    7bbc:	4628      	mov	r0, r5
    7bbe:	f7ff fe71 	bl	78a4 <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
    7bc2:	4622      	mov	r2, r4
    7bc4:	1a21      	subs	r1, r4, r0
    7bc6:	4628      	mov	r0, r5
    7bc8:	f7ff ff69 	bl	7a9e <merge_chunks>
    7bcc:	4621      	mov	r1, r4
    7bce:	4632      	mov	r2, r6
    7bd0:	4628      	mov	r0, r5
    7bd2:	f7ff fe67 	bl	78a4 <chunk_field>
    7bd6:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
    7bd8:	4621      	mov	r1, r4
    7bda:	4628      	mov	r0, r5
}
    7bdc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
    7be0:	f7ff bf7b 	b.w	7ada <free_list_add>

00007be4 <sys_heap_alloc>:
{
    7be4:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
    7be6:	6806      	ldr	r6, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
    7be8:	b909      	cbnz	r1, 7bee <sys_heap_alloc+0xa>
		return NULL;
    7bea:	2000      	movs	r0, #0
}
    7bec:	bd70      	pop	{r4, r5, r6, pc}
	return (bytes / CHUNK_UNIT) >= h->len;
    7bee:	68b0      	ldr	r0, [r6, #8]
	if (bytes == 0U || size_too_big(h, bytes)) {
    7bf0:	ebb0 0fd1 	cmp.w	r0, r1, lsr #3
    7bf4:	d9f9      	bls.n	7bea <sys_heap_alloc+0x6>
	size_t chunk_sz = bytes_to_chunksz(h, bytes);
    7bf6:	f7ff fe8d 	bl	7914 <bytes_to_chunksz.isra.0>
	chunkid_t c = alloc_chunk(h, chunk_sz);
    7bfa:	4601      	mov	r1, r0
	size_t chunk_sz = bytes_to_chunksz(h, bytes);
    7bfc:	4605      	mov	r5, r0
	chunkid_t c = alloc_chunk(h, chunk_sz);
    7bfe:	4630      	mov	r0, r6
    7c00:	f7ff fee3 	bl	79ca <alloc_chunk>
	if (c == 0U) {
    7c04:	4604      	mov	r4, r0
    7c06:	2800      	cmp	r0, #0
    7c08:	d0ef      	beq.n	7bea <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
    7c0a:	4601      	mov	r1, r0
    7c0c:	4630      	mov	r0, r6
    7c0e:	f7ff fe5f 	bl	78d0 <chunk_size>
    7c12:	42a8      	cmp	r0, r5
    7c14:	d909      	bls.n	7c2a <sys_heap_alloc+0x46>
		split_chunks(h, c, c + chunk_sz);
    7c16:	4425      	add	r5, r4
    7c18:	4621      	mov	r1, r4
    7c1a:	4630      	mov	r0, r6
    7c1c:	462a      	mov	r2, r5
    7c1e:	f7ff ff17 	bl	7a50 <split_chunks>
		free_list_add(h, c + chunk_sz);
    7c22:	4629      	mov	r1, r5
    7c24:	4630      	mov	r0, r6
    7c26:	f7ff ff58 	bl	7ada <free_list_add>
	set_chunk_used(h, c, true);
    7c2a:	4621      	mov	r1, r4
    7c2c:	4630      	mov	r0, r6
    7c2e:	2201      	movs	r2, #1
    7c30:	f7ff fe54 	bl	78dc <set_chunk_used>
	return big_heap(h) ? 8 : 4;
    7c34:	68b3      	ldr	r3, [r6, #8]
    7c36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    7c3a:	bf2c      	ite	cs
    7c3c:	2308      	movcs	r3, #8
    7c3e:	2304      	movcc	r3, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
    7c40:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
    7c44:	4420      	add	r0, r4
	return chunk_mem(h, c);
    7c46:	e7d1      	b.n	7bec <sys_heap_alloc+0x8>

00007c48 <encode_uint>:
{
    7c48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7c4c:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    7c4e:	78d3      	ldrb	r3, [r2, #3]
{
    7c50:	4680      	mov	r8, r0
	switch (specifier) {
    7c52:	2b6f      	cmp	r3, #111	; 0x6f
{
    7c54:	460f      	mov	r7, r1
    7c56:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    7c58:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    7c5c:	d029      	beq.n	7cb2 <encode_uint+0x6a>
    7c5e:	d824      	bhi.n	7caa <encode_uint+0x62>
		return 16;
    7c60:	2b58      	cmp	r3, #88	; 0x58
    7c62:	bf14      	ite	ne
    7c64:	260a      	movne	r6, #10
    7c66:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
    7c68:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    7c6c:	4632      	mov	r2, r6
    7c6e:	2300      	movs	r3, #0
    7c70:	4640      	mov	r0, r8
    7c72:	4639      	mov	r1, r7
    7c74:	f7f8 fa24 	bl	c0 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    7c78:	2a09      	cmp	r2, #9
    7c7a:	b2d4      	uxtb	r4, r2
    7c7c:	d81e      	bhi.n	7cbc <encode_uint+0x74>
    7c7e:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    7c80:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    7c82:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    7c84:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    7c88:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    7c8c:	d301      	bcc.n	7c92 <encode_uint+0x4a>
    7c8e:	45d1      	cmp	r9, sl
    7c90:	d811      	bhi.n	7cb6 <encode_uint+0x6e>
	if (conv->flag_hash) {
    7c92:	782b      	ldrb	r3, [r5, #0]
    7c94:	069b      	lsls	r3, r3, #26
    7c96:	d505      	bpl.n	7ca4 <encode_uint+0x5c>
		if (radix == 8) {
    7c98:	2e08      	cmp	r6, #8
    7c9a:	d115      	bne.n	7cc8 <encode_uint+0x80>
			conv->altform_0 = true;
    7c9c:	78ab      	ldrb	r3, [r5, #2]
    7c9e:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    7ca2:	70ab      	strb	r3, [r5, #2]
}
    7ca4:	4648      	mov	r0, r9
    7ca6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    7caa:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    7cae:	2b70      	cmp	r3, #112	; 0x70
    7cb0:	e7d7      	b.n	7c62 <encode_uint+0x1a>
	switch (specifier) {
    7cb2:	2608      	movs	r6, #8
    7cb4:	e7d8      	b.n	7c68 <encode_uint+0x20>
		value /= radix;
    7cb6:	4680      	mov	r8, r0
    7cb8:	460f      	mov	r7, r1
    7cba:	e7d7      	b.n	7c6c <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    7cbc:	f1bb 0f19 	cmp.w	fp, #25
    7cc0:	bf94      	ite	ls
    7cc2:	3437      	addls	r4, #55	; 0x37
    7cc4:	3457      	addhi	r4, #87	; 0x57
    7cc6:	e7db      	b.n	7c80 <encode_uint+0x38>
		} else if (radix == 16) {
    7cc8:	2e10      	cmp	r6, #16
    7cca:	d1eb      	bne.n	7ca4 <encode_uint+0x5c>
			conv->altform_0c = true;
    7ccc:	78ab      	ldrb	r3, [r5, #2]
    7cce:	f043 0310 	orr.w	r3, r3, #16
    7cd2:	e7e6      	b.n	7ca2 <encode_uint+0x5a>

00007cd4 <outs>:
{
    7cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7cd8:	4607      	mov	r7, r0
    7cda:	4688      	mov	r8, r1
    7cdc:	4615      	mov	r5, r2
    7cde:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    7ce0:	4614      	mov	r4, r2
    7ce2:	42b4      	cmp	r4, r6
    7ce4:	eba4 0005 	sub.w	r0, r4, r5
    7ce8:	d302      	bcc.n	7cf0 <outs+0x1c>
    7cea:	b93e      	cbnz	r6, 7cfc <outs+0x28>
    7cec:	7823      	ldrb	r3, [r4, #0]
    7cee:	b12b      	cbz	r3, 7cfc <outs+0x28>
		int rc = out((int)*sp++, ctx);
    7cf0:	4641      	mov	r1, r8
    7cf2:	f814 0b01 	ldrb.w	r0, [r4], #1
    7cf6:	47b8      	blx	r7
		if (rc < 0) {
    7cf8:	2800      	cmp	r0, #0
    7cfa:	daf2      	bge.n	7ce2 <outs+0xe>
}
    7cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00007d00 <assert_post_action>:
	if (_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
    7d00:	4040      	eors	r0, r0
    7d02:	f380 8811 	msr	BASEPRI, r0
    7d06:	f04f 0004 	mov.w	r0, #4
    7d0a:	df02      	svc	2
}
    7d0c:	4770      	bx	lr

00007d0e <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    7d0e:	4770      	bx	lr

00007d10 <arm_mps2_init>:
 * @brief Perform basic hardware initialization at boot.
 *
 * @return 0
 */
static int arm_mps2_init(const struct device *arg)
{
    7d10:	b508      	push	{r3, lr}

	/*
	 * Install default handler that simply resets the CPU
	 * if configured in the kernel, NOP otherwise
	 */
	NMI_INIT();
    7d12:	f7fa fcd5 	bl	26c0 <z_arm_nmi_init>

	return 0;
}
    7d16:	2000      	movs	r0, #0
    7d18:	bd08      	pop	{r3, pc}

00007d1a <z_log_minimal_printk>:
#include <sys/printk.h>

#define HEXDUMP_BYTES_IN_LINE 8

void z_log_minimal_printk(const char *fmt, ...)
{
    7d1a:	b40f      	push	{r0, r1, r2, r3}
    7d1c:	b507      	push	{r0, r1, r2, lr}
    7d1e:	a904      	add	r1, sp, #16
    7d20:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    7d24:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
    7d26:	f7f9 f8d1 	bl	ecc <vprintk>
	va_end(ap);
}
    7d2a:	b003      	add	sp, #12
    7d2c:	f85d eb04 	ldr.w	lr, [sp], #4
    7d30:	b004      	add	sp, #16
    7d32:	4770      	bx	lr

00007d34 <modem_context_get_addr_port>:
	if (!addr || !port) {
    7d34:	b150      	cbz	r0, 7d4c <modem_context_get_addr_port+0x18>
    7d36:	b149      	cbz	r1, 7d4c <modem_context_get_addr_port+0x18>
	} else if (addr->sa_family == AF_INET) {
    7d38:	8803      	ldrh	r3, [r0, #0]
    7d3a:	3b01      	subs	r3, #1
    7d3c:	b29b      	uxth	r3, r3
    7d3e:	2b01      	cmp	r3, #1
    7d40:	d807      	bhi.n	7d52 <modem_context_get_addr_port+0x1e>
		*port = ntohs(net_sin6(addr)->sin6_port);
    7d42:	8843      	ldrh	r3, [r0, #2]
		return 0;
    7d44:	2000      	movs	r0, #0
		*port = ntohs(net_sin6(addr)->sin6_port);
    7d46:	ba5b      	rev16	r3, r3
    7d48:	800b      	strh	r3, [r1, #0]
		return 0;
    7d4a:	4770      	bx	lr
		return -EINVAL;
    7d4c:	f06f 0015 	mvn.w	r0, #21
    7d50:	4770      	bx	lr
	return -EPROTONOSUPPORT;
    7d52:	f06f 002a 	mvn.w	r0, #42	; 0x2a
}
    7d56:	4770      	bx	lr

00007d58 <modem_pin_init>:

int modem_pin_init(struct modem_context *ctx)
{
    7d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7d5a:	4605      	mov	r5, r0
	int i, ret;

	/* setup port devices and pin directions */
	for (i = 0; i < ctx->pins_len; i++) {
    7d5c:	2400      	movs	r4, #0
    7d5e:	69ab      	ldr	r3, [r5, #24]
    7d60:	42a3      	cmp	r3, r4
    7d62:	d801      	bhi.n	7d68 <modem_pin_init+0x10>
		if (ret < 0) {
			return ret;
		}
	}

	return 0;
    7d64:	2000      	movs	r0, #0
}
    7d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				device_get_binding(ctx->pins[i].dev_name);
    7d68:	696f      	ldr	r7, [r5, #20]
    7d6a:	0126      	lsls	r6, r4, #4
    7d6c:	eb07 1304 	add.w	r3, r7, r4, lsl #4
    7d70:	6858      	ldr	r0, [r3, #4]
    7d72:	f7fc fefd 	bl	4b70 <z_impl_device_get_binding>
		if (!ctx->pins[i].gpio_port_dev) {
    7d76:	696b      	ldr	r3, [r5, #20]
		ctx->pins[i].gpio_port_dev =
    7d78:	51b8      	str	r0, [r7, r6]
		if (!ctx->pins[i].gpio_port_dev) {
    7d7a:	599b      	ldr	r3, [r3, r6]
    7d7c:	b143      	cbz	r3, 7d90 <modem_pin_init+0x38>
		ret = modem_pin_config(ctx, i, true);
    7d7e:	2201      	movs	r2, #1
    7d80:	4621      	mov	r1, r4
    7d82:	4628      	mov	r0, r5
    7d84:	f7f9 ff4a 	bl	1c1c <modem_pin_config>
		if (ret < 0) {
    7d88:	2800      	cmp	r0, #0
    7d8a:	dbec      	blt.n	7d66 <modem_pin_init+0xe>
	for (i = 0; i < ctx->pins_len; i++) {
    7d8c:	3401      	adds	r4, #1
    7d8e:	e7e6      	b.n	7d5e <modem_pin_init+0x6>
			return -ENODEV;
    7d90:	f06f 0012 	mvn.w	r0, #18
    7d94:	e7e7      	b.n	7d66 <modem_pin_init+0xe>

00007d96 <k_sem_take>:
	return z_impl_k_sem_take(sem, timeout);
    7d96:	f7fe bdd9 	b.w	694c <z_impl_k_sem_take>

00007d9a <k_sem_give>:
	z_impl_k_sem_give(sem);
    7d9a:	f7fe bd93 	b.w	68c4 <z_impl_k_sem_give>

00007d9e <modem_socket_next_packet_size>:
 * Packet Size Support Functions
 */

uint16_t modem_socket_next_packet_size(struct modem_socket_config *cfg,
				    struct modem_socket *sock)
{
    7d9e:	b570      	push	{r4, r5, r6, lr}
    7da0:	460c      	mov	r4, r1
	uint16_t total = 0U;

	k_sem_take(&cfg->sem_lock, K_FOREVER);
    7da2:	f100 0624 	add.w	r6, r0, #36	; 0x24
    7da6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7daa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7dae:	4630      	mov	r0, r6
    7db0:	f7ff fff1 	bl	7d96 <k_sem_take>

	if (!sock || !sock->packet_count) {
    7db4:	b13c      	cbz	r4, 7dc6 <modem_socket_next_packet_size+0x28>
    7db6:	8d25      	ldrh	r5, [r4, #40]	; 0x28
    7db8:	b105      	cbz	r5, 7dbc <modem_socket_next_packet_size+0x1e>
		goto exit;
	}

	total = sock->packet_sizes[0];
    7dba:	8ba5      	ldrh	r5, [r4, #28]

exit:
	k_sem_give(&cfg->sem_lock);
    7dbc:	4630      	mov	r0, r6
    7dbe:	f7ff ffec 	bl	7d9a <k_sem_give>
	return total;
}
    7dc2:	4628      	mov	r0, r5
    7dc4:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t total = 0U;
    7dc6:	4625      	mov	r5, r4
    7dc8:	e7f8      	b.n	7dbc <modem_socket_next_packet_size+0x1e>

00007dca <modem_socket_packet_size_update>:
	return 0;
}

int modem_socket_packet_size_update(struct modem_socket_config *cfg,
				    struct modem_socket *sock, int new_total)
{
    7dca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7dcc:	4615      	mov	r5, r2
	uint16_t old_total = 0U;

	if (!sock) {
    7dce:	460c      	mov	r4, r1
    7dd0:	2900      	cmp	r1, #0
    7dd2:	d071      	beq.n	7eb8 <modem_socket_packet_size_update+0xee>
		return -EINVAL;
	}

	k_sem_take(&cfg->sem_lock, K_FOREVER);
    7dd4:	f100 0624 	add.w	r6, r0, #36	; 0x24
    7dd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7ddc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7de0:	4630      	mov	r0, r6
    7de2:	f7ff ffd8 	bl	7d96 <k_sem_take>

	if (new_total < 0) {
    7de6:	2d00      	cmp	r5, #0
    7de8:	da0d      	bge.n	7e06 <modem_socket_packet_size_update+0x3c>
	if (!sock || !sock->packet_count) {
    7dea:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    7dec:	b1ba      	cbz	r2, 7e1e <modem_socket_packet_size_update+0x54>
	uint16_t total = 0U;
    7dee:	2300      	movs	r3, #0
	for (i = 0; i < sock->packet_count; i++) {
    7df0:	4619      	mov	r1, r3
    7df2:	f104 001c 	add.w	r0, r4, #28
		total += sock->packet_sizes[i];
    7df6:	f830 7b02 	ldrh.w	r7, [r0], #2
	for (i = 0; i < sock->packet_count; i++) {
    7dfa:	3101      	adds	r1, #1
		total += sock->packet_sizes[i];
    7dfc:	443b      	add	r3, r7
	for (i = 0; i < sock->packet_count; i++) {
    7dfe:	4291      	cmp	r1, r2
		total += sock->packet_sizes[i];
    7e00:	b29b      	uxth	r3, r3
	for (i = 0; i < sock->packet_count; i++) {
    7e02:	dbf8      	blt.n	7df6 <modem_socket_packet_size_update+0x2c>
		new_total += modem_socket_packet_get_total(sock);
    7e04:	441d      	add	r5, r3
	}

	if (new_total <= 0) {
    7e06:	2d00      	cmp	r5, #0
    7e08:	f04f 0700 	mov.w	r7, #0
    7e0c:	dc09      	bgt.n	7e22 <modem_socket_packet_size_update+0x58>
		/* reset outstanding value here */
		sock->packet_count = 0U;
		sock->packet_sizes[0] = 0U;
		k_sem_give(&cfg->sem_lock);
    7e0e:	4630      	mov	r0, r6
		sock->packet_count = 0U;
    7e10:	8527      	strh	r7, [r4, #40]	; 0x28
		sock->packet_sizes[0] = 0U;
    7e12:	83a7      	strh	r7, [r4, #28]
		k_sem_give(&cfg->sem_lock);
    7e14:	f7ff ffc1 	bl	7d9a <k_sem_give>
		return 0;
    7e18:	463d      	mov	r5, r7
	}

data_ready:
	k_sem_give(&cfg->sem_lock);
	return new_total;
}
    7e1a:	4628      	mov	r0, r5
    7e1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0U;
    7e1e:	4613      	mov	r3, r2
    7e20:	e7f0      	b.n	7e04 <modem_socket_packet_size_update+0x3a>
	if (!sock || !sock->packet_count) {
    7e22:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    7e24:	b1ea      	cbz	r2, 7e62 <modem_socket_packet_size_update+0x98>
	uint16_t total = 0U;
    7e26:	463b      	mov	r3, r7
	for (i = 0; i < sock->packet_count; i++) {
    7e28:	4639      	mov	r1, r7
    7e2a:	f104 0c1c 	add.w	ip, r4, #28
		total += sock->packet_sizes[i];
    7e2e:	f83c 0b02 	ldrh.w	r0, [ip], #2
	for (i = 0; i < sock->packet_count; i++) {
    7e32:	3101      	adds	r1, #1
		total += sock->packet_sizes[i];
    7e34:	4403      	add	r3, r0
	for (i = 0; i < sock->packet_count; i++) {
    7e36:	4291      	cmp	r1, r2
		total += sock->packet_sizes[i];
    7e38:	b29b      	uxth	r3, r3
	for (i = 0; i < sock->packet_count; i++) {
    7e3a:	dbf8      	blt.n	7e2e <modem_socket_packet_size_update+0x64>
	if (new_total == old_total) {
    7e3c:	42ab      	cmp	r3, r5
    7e3e:	d00c      	beq.n	7e5a <modem_socket_packet_size_update+0x90>
	if (new_total < old_total) {
    7e40:	dd26      	ble.n	7e90 <modem_socket_packet_size_update+0xc6>
	sock->packet_sizes[sock->packet_count] = 0U;
    7e42:	2700      	movs	r7, #0
		while (old_total > new_total && sock->packet_count > 0) {
    7e44:	42ab      	cmp	r3, r5
    7e46:	dd08      	ble.n	7e5a <modem_socket_packet_size_update+0x90>
    7e48:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    7e4a:	b132      	cbz	r2, 7e5a <modem_socket_packet_size_update+0x90>
			if (old_total - new_total < sock->packet_sizes[0]) {
    7e4c:	8ba1      	ldrh	r1, [r4, #28]
    7e4e:	1b58      	subs	r0, r3, r5
    7e50:	4288      	cmp	r0, r1
    7e52:	da08      	bge.n	7e66 <modem_socket_packet_size_update+0x9c>
				sock->packet_sizes[0] -= old_total - new_total;
    7e54:	4429      	add	r1, r5
    7e56:	1acb      	subs	r3, r1, r3
    7e58:	83a3      	strh	r3, [r4, #28]
	k_sem_give(&cfg->sem_lock);
    7e5a:	4630      	mov	r0, r6
    7e5c:	f7ff ff9d 	bl	7d9a <k_sem_give>
	return new_total;
    7e60:	e7db      	b.n	7e1a <modem_socket_packet_size_update+0x50>
		return 0U;
    7e62:	4613      	mov	r3, r2
    7e64:	e7ea      	b.n	7e3c <modem_socket_packet_size_update+0x72>
			old_total -= sock->packet_sizes[0];
    7e66:	1a5b      	subs	r3, r3, r1
	for (i = 0; i < sock->packet_count; i++) {
    7e68:	2100      	movs	r1, #0
	sock->packet_count--;
    7e6a:	3a01      	subs	r2, #1
    7e6c:	b292      	uxth	r2, r2
			old_total -= sock->packet_sizes[0];
    7e6e:	b29b      	uxth	r3, r3
	sock->packet_count--;
    7e70:	8522      	strh	r2, [r4, #40]	; 0x28
	for (i = 0; i < sock->packet_count; i++) {
    7e72:	f104 001c 	add.w	r0, r4, #28
    7e76:	4291      	cmp	r1, r2
    7e78:	db04      	blt.n	7e84 <modem_socket_packet_size_update+0xba>
	sock->packet_sizes[sock->packet_count] = 0U;
    7e7a:	320c      	adds	r2, #12
    7e7c:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    7e80:	8097      	strh	r7, [r2, #4]
	return 0;
    7e82:	e7df      	b.n	7e44 <modem_socket_packet_size_update+0x7a>
		sock->packet_sizes[i] =
    7e84:	f8b0 c002 	ldrh.w	ip, [r0, #2]
			sock->packet_sizes[i + 1];
    7e88:	3101      	adds	r1, #1
		sock->packet_sizes[i] =
    7e8a:	f820 cb02 	strh.w	ip, [r0], #2
	for (i = 0; i < sock->packet_count; i++) {
    7e8e:	e7f2      	b.n	7e76 <modem_socket_packet_size_update+0xac>
	if (sock->packet_count >= CONFIG_MODEM_SOCKET_PACKET_COUNT) {
    7e90:	2a05      	cmp	r2, #5
    7e92:	d905      	bls.n	7ea0 <modem_socket_packet_size_update+0xd6>
		k_sem_give(&cfg->sem_lock);
    7e94:	4630      	mov	r0, r6
    7e96:	f7ff ff80 	bl	7d9a <k_sem_give>
		return -ENOMEM;
    7e9a:	f06f 050b 	mvn.w	r5, #11
    7e9e:	e7bc      	b.n	7e1a <modem_socket_packet_size_update+0x50>
	if (new_total - old_total > 0) {
    7ea0:	1aeb      	subs	r3, r5, r3
    7ea2:	2b00      	cmp	r3, #0
    7ea4:	dd05      	ble.n	7eb2 <modem_socket_packet_size_update+0xe8>
		sock->packet_sizes[sock->packet_count] = new_total - old_total;
    7ea6:	eb04 0142 	add.w	r1, r4, r2, lsl #1
		sock->packet_count++;
    7eaa:	3201      	adds	r2, #1
		sock->packet_sizes[sock->packet_count] = new_total - old_total;
    7eac:	838b      	strh	r3, [r1, #28]
		sock->packet_count++;
    7eae:	8522      	strh	r2, [r4, #40]	; 0x28
    7eb0:	e7d3      	b.n	7e5a <modem_socket_packet_size_update+0x90>
		k_sem_give(&cfg->sem_lock);
    7eb2:	4630      	mov	r0, r6
    7eb4:	f7ff ff71 	bl	7d9a <k_sem_give>
		return -EINVAL;
    7eb8:	f06f 0515 	mvn.w	r5, #21
    7ebc:	e7ad      	b.n	7e1a <modem_socket_packet_size_update+0x50>

00007ebe <modem_socket_get>:
 * Socket Support Functions
 */

int modem_socket_get(struct modem_socket_config *cfg,
		     int family, int type, int proto)
{
    7ebe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7ec2:	4604      	mov	r4, r0
	int i;

	k_sem_take(&cfg->sem_lock, K_FOREVER);
    7ec4:	f100 0524 	add.w	r5, r0, #36	; 0x24
{
    7ec8:	4691      	mov	r9, r2
    7eca:	469a      	mov	sl, r3
	k_sem_take(&cfg->sem_lock, K_FOREVER);
    7ecc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7ed0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7ed4:	4628      	mov	r0, r5
{
    7ed6:	4688      	mov	r8, r1
	k_sem_take(&cfg->sem_lock, K_FOREVER);
    7ed8:	f7ff ff5d 	bl	7d96 <k_sem_take>

	for (i = 0; i < cfg->sockets_len; i++) {
    7edc:	2100      	movs	r1, #0
    7ede:	f04f 0c4c 	mov.w	ip, #76	; 0x4c
    7ee2:	6860      	ldr	r0, [r4, #4]
    7ee4:	4288      	cmp	r0, r1
    7ee6:	d105      	bne.n	7ef4 <modem_socket_get+0x36>
			break;
		}
	}

	if (i >= cfg->sockets_len) {
		k_sem_give(&cfg->sem_lock);
    7ee8:	4628      	mov	r0, r5
    7eea:	f7ff ff56 	bl	7d9a <k_sem_give>
		return -ENOMEM;
    7eee:	f06f 000b 	mvn.w	r0, #11
    7ef2:	e02b      	b.n	7f4c <modem_socket_get+0x8e>
		if (cfg->sockets[i].id < cfg->base_socket_num) {
    7ef4:	fb0c f601 	mul.w	r6, ip, r1
    7ef8:	6827      	ldr	r7, [r4, #0]
    7efa:	68a3      	ldr	r3, [r4, #8]
    7efc:	4437      	add	r7, r6
    7efe:	697a      	ldr	r2, [r7, #20]
    7f00:	429a      	cmp	r2, r3
    7f02:	db14      	blt.n	7f2e <modem_socket_get+0x70>
	for (i = 0; i < cfg->sockets_len; i++) {
    7f04:	3101      	adds	r1, #1
    7f06:	e7ed      	b.n	7ee4 <modem_socket_get+0x26>
	if (cfg->sockets[i].sock_fd < 0) {
		k_sem_give(&cfg->sem_lock);
		return -errno;
	}

	cfg->sockets[i].family = family;
    7f08:	f823 8006 	strh.w	r8, [r3, r6]
	cfg->sockets[i].type = type;
    7f0c:	f881 9002 	strb.w	r9, [r1, #2]
	cfg->sockets[i].ip_proto = proto;
    7f10:	f881 a003 	strb.w	sl, [r1, #3]
	/* socket # needs assigning */
	cfg->sockets[i].id = cfg->sockets_len + 1;
    7f14:	6863      	ldr	r3, [r4, #4]
	z_finalize_fd(cfg->sockets[i].sock_fd, &cfg->sockets[i],
    7f16:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	cfg->sockets[i].id = cfg->sockets_len + 1;
    7f18:	3301      	adds	r3, #1
    7f1a:	614b      	str	r3, [r1, #20]
	z_finalize_fd(cfg->sockets[i].sock_fd, &cfg->sockets[i],
    7f1c:	f7f8 ffbe 	bl	e9c <z_finalize_fd>
		      (const struct fd_op_vtable *)cfg->vtable);

	k_sem_give(&cfg->sem_lock);
    7f20:	4628      	mov	r0, r5
    7f22:	f7ff ff3a 	bl	7d9a <k_sem_give>
	return cfg->sockets[i].sock_fd;
    7f26:	6823      	ldr	r3, [r4, #0]
    7f28:	441e      	add	r6, r3
    7f2a:	69b0      	ldr	r0, [r6, #24]
    7f2c:	e00e      	b.n	7f4c <modem_socket_get+0x8e>
	cfg->sockets[i].sock_fd = z_reserve_fd();
    7f2e:	f7f8 ff7d 	bl	e2c <z_reserve_fd>
	if (cfg->sockets[i].sock_fd < 0) {
    7f32:	6823      	ldr	r3, [r4, #0]
	cfg->sockets[i].sock_fd = z_reserve_fd();
    7f34:	61b8      	str	r0, [r7, #24]
	if (cfg->sockets[i].sock_fd < 0) {
    7f36:	1999      	adds	r1, r3, r6
    7f38:	6988      	ldr	r0, [r1, #24]
    7f3a:	2800      	cmp	r0, #0
    7f3c:	dae4      	bge.n	7f08 <modem_socket_get+0x4a>
		k_sem_give(&cfg->sem_lock);
    7f3e:	4628      	mov	r0, r5
    7f40:	f7ff ff2b 	bl	7d9a <k_sem_give>
    7f44:	f7fc fe3e 	bl	4bc4 <z_impl_z_errno>
		return -errno;
    7f48:	6800      	ldr	r0, [r0, #0]
    7f4a:	4240      	negs	r0, r0
}
    7f4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00007f50 <modem_socket_from_fd>:

struct modem_socket *modem_socket_from_fd(struct modem_socket_config *cfg,
					  int sock_fd)
{
    7f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7f52:	4604      	mov	r4, r0
	int i;

	k_sem_take(&cfg->sem_lock, K_FOREVER);
    7f54:	f100 0524 	add.w	r5, r0, #36	; 0x24
    7f58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7f5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7f60:	4628      	mov	r0, r5
{
    7f62:	460e      	mov	r6, r1
	k_sem_take(&cfg->sem_lock, K_FOREVER);
    7f64:	f7ff ff17 	bl	7d96 <k_sem_take>

	for (i = 0; i < cfg->sockets_len; i++) {
    7f68:	2300      	movs	r3, #0
    7f6a:	204c      	movs	r0, #76	; 0x4c
    7f6c:	6861      	ldr	r1, [r4, #4]
    7f6e:	428b      	cmp	r3, r1
    7f70:	d104      	bne.n	7f7c <modem_socket_from_fd+0x2c>
			k_sem_give(&cfg->sem_lock);
			return &cfg->sockets[i];
		}
	}

	k_sem_give(&cfg->sem_lock);
    7f72:	4628      	mov	r0, r5
    7f74:	f7ff ff11 	bl	7d9a <k_sem_give>

	return NULL;
    7f78:	2000      	movs	r0, #0
    7f7a:	e00b      	b.n	7f94 <modem_socket_from_fd+0x44>
		if (cfg->sockets[i].sock_fd == sock_fd) {
    7f7c:	fb00 f703 	mul.w	r7, r0, r3
    7f80:	6822      	ldr	r2, [r4, #0]
    7f82:	443a      	add	r2, r7
    7f84:	6992      	ldr	r2, [r2, #24]
    7f86:	42b2      	cmp	r2, r6
    7f88:	d105      	bne.n	7f96 <modem_socket_from_fd+0x46>
			k_sem_give(&cfg->sem_lock);
    7f8a:	4628      	mov	r0, r5
    7f8c:	f7ff ff05 	bl	7d9a <k_sem_give>
			return &cfg->sockets[i];
    7f90:	6820      	ldr	r0, [r4, #0]
    7f92:	4438      	add	r0, r7
}
    7f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (i = 0; i < cfg->sockets_len; i++) {
    7f96:	3301      	adds	r3, #1
    7f98:	e7e9      	b.n	7f6e <modem_socket_from_fd+0x1e>

00007f9a <modem_socket_from_id>:

struct modem_socket *modem_socket_from_id(struct modem_socket_config *cfg,
					  int id)
{
    7f9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i;

	if (id < cfg->base_socket_num) {
    7f9c:	6883      	ldr	r3, [r0, #8]
{
    7f9e:	4604      	mov	r4, r0
	if (id < cfg->base_socket_num) {
    7fa0:	428b      	cmp	r3, r1
{
    7fa2:	460d      	mov	r5, r1
	if (id < cfg->base_socket_num) {
    7fa4:	dc10      	bgt.n	7fc8 <modem_socket_from_id+0x2e>
		return NULL;
	}

	k_sem_take(&cfg->sem_lock, K_FOREVER);
    7fa6:	f100 0624 	add.w	r6, r0, #36	; 0x24
    7faa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7fae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7fb2:	4630      	mov	r0, r6
    7fb4:	f7ff feef 	bl	7d96 <k_sem_take>

	for (i = 0; i < cfg->sockets_len; i++) {
    7fb8:	2300      	movs	r3, #0
    7fba:	204c      	movs	r0, #76	; 0x4c
    7fbc:	6861      	ldr	r1, [r4, #4]
    7fbe:	428b      	cmp	r3, r1
    7fc0:	d104      	bne.n	7fcc <modem_socket_from_id+0x32>
			k_sem_give(&cfg->sem_lock);
			return &cfg->sockets[i];
		}
	}

	k_sem_give(&cfg->sem_lock);
    7fc2:	4630      	mov	r0, r6
    7fc4:	f7ff fee9 	bl	7d9a <k_sem_give>
		return NULL;
    7fc8:	2000      	movs	r0, #0
    7fca:	e00b      	b.n	7fe4 <modem_socket_from_id+0x4a>
		if (cfg->sockets[i].id == id) {
    7fcc:	fb00 f703 	mul.w	r7, r0, r3
    7fd0:	6822      	ldr	r2, [r4, #0]
    7fd2:	443a      	add	r2, r7
    7fd4:	6952      	ldr	r2, [r2, #20]
    7fd6:	42aa      	cmp	r2, r5
    7fd8:	d105      	bne.n	7fe6 <modem_socket_from_id+0x4c>
			k_sem_give(&cfg->sem_lock);
    7fda:	4630      	mov	r0, r6
    7fdc:	f7ff fedd 	bl	7d9a <k_sem_give>
			return &cfg->sockets[i];
    7fe0:	6820      	ldr	r0, [r4, #0]
    7fe2:	4438      	add	r0, r7

	return NULL;
}
    7fe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (i = 0; i < cfg->sockets_len; i++) {
    7fe6:	3301      	adds	r3, #1
    7fe8:	e7e9      	b.n	7fbe <modem_socket_from_id+0x24>

00007fea <modem_socket_put>:
{
	return modem_socket_from_id(cfg, cfg->sockets_len + 1);
}

void modem_socket_put(struct modem_socket_config *cfg, int sock_fd)
{
    7fea:	b570      	push	{r4, r5, r6, lr}
    7fec:	4605      	mov	r5, r0
	struct modem_socket *sock = modem_socket_from_fd(cfg, sock_fd);
    7fee:	f7ff ffaf 	bl	7f50 <modem_socket_from_fd>

	if (!sock) {
    7ff2:	4604      	mov	r4, r0
    7ff4:	b358      	cbz	r0, 804e <modem_socket_put+0x64>
		return;
	}

	k_sem_take(&cfg->sem_lock, K_FOREVER);
    7ff6:	f105 0624 	add.w	r6, r5, #36	; 0x24
    7ffa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7ffe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8002:	4630      	mov	r0, r6
    8004:	f7ff fec7 	bl	7d96 <k_sem_take>

	sock->id = cfg->base_socket_num - 1;
    8008:	68ab      	ldr	r3, [r5, #8]
	sock->sock_fd = -1;
	sock->is_waiting = false;
	sock->is_polled = false;
	sock->is_connected = false;
    800a:	2500      	movs	r5, #0
	sock->id = cfg->base_socket_num - 1;
    800c:	3b01      	subs	r3, #1
    800e:	6163      	str	r3, [r4, #20]
	sock->sock_fd = -1;
    8010:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	(void)memset(&sock->src, 0, sizeof(struct sockaddr));
    8014:	4629      	mov	r1, r5
	sock->sock_fd = -1;
    8016:	61a3      	str	r3, [r4, #24]
	(void)memset(&sock->src, 0, sizeof(struct sockaddr));
    8018:	2208      	movs	r2, #8
	sock->is_connected = false;
    801a:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
	sock->is_polled = false;
    801e:	f884 5046 	strb.w	r5, [r4, #70]	; 0x46
	(void)memset(&sock->src, 0, sizeof(struct sockaddr));
    8022:	1d20      	adds	r0, r4, #4
    8024:	f000 f9fb 	bl	841e <memset>
	(void)memset(&sock->dst, 0, sizeof(struct sockaddr));
    8028:	4629      	mov	r1, r5
    802a:	2208      	movs	r2, #8
    802c:	f104 000c 	add.w	r0, r4, #12
    8030:	f000 f9f5 	bl	841e <memset>
	memset(&sock->packet_sizes, 0, sizeof(sock->packet_sizes));
    8034:	220c      	movs	r2, #12
    8036:	4629      	mov	r1, r5
    8038:	f104 001c 	add.w	r0, r4, #28
    803c:	f000 f9ef 	bl	841e <memset>
	sock->packet_count = 0;
    8040:	8525      	strh	r5, [r4, #40]	; 0x28
	k_sem_reset(&sock->sem_data_ready);

	k_sem_give(&cfg->sem_lock);
    8042:	4630      	mov	r0, r6
	sem->count = 0U;
    8044:	6365      	str	r5, [r4, #52]	; 0x34
}
    8046:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_sem_give(&cfg->sem_lock);
    804a:	f7ff bea6 	b.w	7d9a <k_sem_give>
}
    804e:	bd70      	pop	{r4, r5, r6, pc}

00008050 <modem_socket_wait_data>:
	return found_count;
}

void modem_socket_wait_data(struct modem_socket_config *cfg,
			    struct modem_socket *sock)
{
    8050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	k_sem_take(&cfg->sem_lock, K_FOREVER);
    8054:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    8058:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    805c:	f100 0524 	add.w	r5, r0, #36	; 0x24
    8060:	4632      	mov	r2, r6
    8062:	463b      	mov	r3, r7
    8064:	4628      	mov	r0, r5
{
    8066:	460c      	mov	r4, r1
	k_sem_take(&cfg->sem_lock, K_FOREVER);
    8068:	f7ff fe95 	bl	7d96 <k_sem_take>
	sock->is_waiting = true;
    806c:	2301      	movs	r3, #1
	k_sem_give(&cfg->sem_lock);
    806e:	4628      	mov	r0, r5
	sock->is_waiting = true;
    8070:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	k_sem_give(&cfg->sem_lock);
    8074:	f7ff fe91 	bl	7d9a <k_sem_give>

	k_sem_take(&sock->sem_data_ready, K_FOREVER);
    8078:	4632      	mov	r2, r6
    807a:	463b      	mov	r3, r7
    807c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
}
    8080:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_sem_take(&sock->sem_data_ready, K_FOREVER);
    8084:	f7ff be87 	b.w	7d96 <k_sem_take>

00008088 <modem_socket_data_ready>:

void modem_socket_data_ready(struct modem_socket_config *cfg,
			     struct modem_socket *sock)
{
    8088:	b570      	push	{r4, r5, r6, lr}
    808a:	460c      	mov	r4, r1
	k_sem_take(&cfg->sem_lock, K_FOREVER);
    808c:	f100 0624 	add.w	r6, r0, #36	; 0x24
    8090:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
{
    8094:	4605      	mov	r5, r0
	k_sem_take(&cfg->sem_lock, K_FOREVER);
    8096:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    809a:	4630      	mov	r0, r6
    809c:	f7ff fe7b 	bl	7d96 <k_sem_take>

	if (sock->is_waiting) {
    80a0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    80a4:	b133      	cbz	r3, 80b4 <modem_socket_data_ready+0x2c>
		/* unblock sockets waiting on recv() */
		sock->is_waiting = false;
    80a6:	2300      	movs	r3, #0
		k_sem_give(&sock->sem_data_ready);
    80a8:	f104 002c 	add.w	r0, r4, #44	; 0x2c
		sock->is_waiting = false;
    80ac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		k_sem_give(&sock->sem_data_ready);
    80b0:	f7ff fe73 	bl	7d9a <k_sem_give>
	}

	if (sock->is_polled) {
    80b4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
    80b8:	b11b      	cbz	r3, 80c2 <modem_socket_data_ready+0x3a>
		/* unblock poll() */
		k_sem_give(&cfg->sem_poll);
    80ba:	f105 000c 	add.w	r0, r5, #12
    80be:	f7ff fe6c 	bl	7d9a <k_sem_give>
	}

	k_sem_give(&cfg->sem_lock);
    80c2:	4630      	mov	r0, r6
}
    80c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_sem_give(&cfg->sem_lock);
    80c8:	f7ff be67 	b.w	7d9a <k_sem_give>

000080cc <modem_socket_init>:

int modem_socket_init(struct modem_socket_config *cfg,
		      const struct socket_op_vtable *vtable)
{
    80cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    80d0:	4604      	mov	r4, r0
    80d2:	460e      	mov	r6, r1
	return z_impl_k_sem_init(sem, initial_count, limit);
    80d4:	2201      	movs	r2, #1
    80d6:	2100      	movs	r1, #0
    80d8:	300c      	adds	r0, #12
    80da:	f002 f86d 	bl	a1b8 <z_impl_k_sem_init>
    80de:	2201      	movs	r2, #1
    80e0:	f104 0024 	add.w	r0, r4, #36	; 0x24
    80e4:	4611      	mov	r1, r2
    80e6:	f002 f867 	bl	a1b8 <z_impl_k_sem_init>
	int i;

	k_sem_init(&cfg->sem_poll, 0, 1);
	k_sem_init(&cfg->sem_lock, 1, 1);
	for (i = 0; i < cfg->sockets_len; i++) {
    80ea:	2500      	movs	r5, #0
    80ec:	274c      	movs	r7, #76	; 0x4c
    80ee:	6863      	ldr	r3, [r4, #4]
    80f0:	42ab      	cmp	r3, r5
    80f2:	d803      	bhi.n	80fc <modem_socket_init+0x30>
	}

	cfg->vtable = vtable;

	return 0;
}
    80f4:	2000      	movs	r0, #0
	cfg->vtable = vtable;
    80f6:	63e6      	str	r6, [r4, #60]	; 0x3c
}
    80f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		k_sem_init(&cfg->sockets[i].sem_data_ready, 0, 1);
    80fc:	fb07 f805 	mul.w	r8, r7, r5
    8100:	6820      	ldr	r0, [r4, #0]
    8102:	4440      	add	r0, r8
    8104:	302c      	adds	r0, #44	; 0x2c
    8106:	2201      	movs	r2, #1
    8108:	2100      	movs	r1, #0
    810a:	f002 f855 	bl	a1b8 <z_impl_k_sem_init>
		cfg->sockets[i].id = cfg->base_socket_num - 1;
    810e:	6823      	ldr	r3, [r4, #0]
    8110:	68a2      	ldr	r2, [r4, #8]
    8112:	4443      	add	r3, r8
    8114:	3a01      	subs	r2, #1
    8116:	615a      	str	r2, [r3, #20]
	for (i = 0; i < cfg->sockets_len; i++) {
    8118:	3501      	adds	r5, #1
    811a:	e7e8      	b.n	80ee <modem_socket_init+0x22>

0000811c <eth_capabilities>:
	return ETHERNET_HW_VLAN
#if defined(CONFIG_NET_LLDP)
		| ETHERNET_LLDP
#endif
		;
}
    811c:	2004      	movs	r0, #4
    811e:	4770      	bx	lr

00008120 <slip_writeb>:
{
    8120:	b507      	push	{r0, r1, r2, lr}
	uart_pipe_send(&buf[0], 1);
    8122:	2101      	movs	r1, #1
	uint8_t buf[1] = { c };
    8124:	f88d 0004 	strb.w	r0, [sp, #4]
	uart_pipe_send(&buf[0], 1);
    8128:	a801      	add	r0, sp, #4
    812a:	f7f9 fce9 	bl	1b00 <uart_pipe_send>
}
    812e:	b003      	add	sp, #12
    8130:	f85d fb04 	ldr.w	pc, [sp], #4

00008134 <slip_send>:
	if (!pkt->buffer) {
    8134:	690b      	ldr	r3, [r1, #16]
{
    8136:	b570      	push	{r4, r5, r6, lr}
    8138:	460c      	mov	r4, r1
	if (!pkt->buffer) {
    813a:	b31b      	cbz	r3, 8184 <slip_send+0x50>
	slip_writeb(SLIP_END);
    813c:	20c0      	movs	r0, #192	; 0xc0
    813e:	f7ff ffef 	bl	8120 <slip_writeb>
	for (buf = pkt->buffer; buf; buf = buf->frags) {
    8142:	6924      	ldr	r4, [r4, #16]
    8144:	b924      	cbnz	r4, 8150 <slip_send+0x1c>
	slip_writeb(SLIP_END);
    8146:	20c0      	movs	r0, #192	; 0xc0
    8148:	f7ff ffea 	bl	8120 <slip_writeb>
	return 0;
    814c:	4620      	mov	r0, r4
}
    814e:	bd70      	pop	{r4, r5, r6, pc}
		for (i = 0U; i < buf->len; ++i) {
    8150:	2500      	movs	r5, #0
		ptr = buf->data;
    8152:	68a6      	ldr	r6, [r4, #8]
		for (i = 0U; i < buf->len; ++i) {
    8154:	89a2      	ldrh	r2, [r4, #12]
    8156:	b2ab      	uxth	r3, r5
    8158:	429a      	cmp	r2, r3
    815a:	d801      	bhi.n	8160 <slip_send+0x2c>
	for (buf = pkt->buffer; buf; buf = buf->frags) {
    815c:	6824      	ldr	r4, [r4, #0]
    815e:	e7f1      	b.n	8144 <slip_send+0x10>
			c = *ptr++;
    8160:	5d70      	ldrb	r0, [r6, r5]
	switch (c) {
    8162:	28c0      	cmp	r0, #192	; 0xc0
    8164:	d005      	beq.n	8172 <slip_send+0x3e>
    8166:	28db      	cmp	r0, #219	; 0xdb
    8168:	d008      	beq.n	817c <slip_send+0x48>
		slip_writeb(c);
    816a:	f7ff ffd9 	bl	8120 <slip_writeb>
		for (i = 0U; i < buf->len; ++i) {
    816e:	3501      	adds	r5, #1
    8170:	e7f0      	b.n	8154 <slip_send+0x20>
		slip_writeb(SLIP_ESC);
    8172:	20db      	movs	r0, #219	; 0xdb
    8174:	f7ff ffd4 	bl	8120 <slip_writeb>
		slip_writeb(SLIP_ESC_END);
    8178:	20dc      	movs	r0, #220	; 0xdc
    817a:	e7f6      	b.n	816a <slip_send+0x36>
		slip_writeb(SLIP_ESC);
    817c:	f7ff ffd0 	bl	8120 <slip_writeb>
		slip_writeb(SLIP_ESC_ESC);
    8180:	20dd      	movs	r0, #221	; 0xdd
    8182:	e7f2      	b.n	816a <slip_send+0x36>
		return -ENODATA;
    8184:	f06f 004d 	mvn.w	r0, #77	; 0x4d
    8188:	e7e1      	b.n	814e <slip_send+0x1a>

0000818a <slip_iface_init>:
{
    818a:	b538      	push	{r3, r4, r5, lr}
	return iface->if_dev->dev;
    818c:	6803      	ldr	r3, [r0, #0]
    818e:	4605      	mov	r5, r0
	struct slip_context *slip = net_if_get_device(iface)->data;
    8190:	681b      	ldr	r3, [r3, #0]
    8192:	691c      	ldr	r4, [r3, #16]
	ethernet_init(iface);
    8194:	f000 fa92 	bl	86bc <ethernet_init>
	if (slip->init_done) {
    8198:	7823      	ldrb	r3, [r4, #0]
    819a:	bb13      	cbnz	r3, 81e2 <slip_iface_init+0x58>
	slip->ll_addr.addr = slip->mac_addr;
    819c:	f104 0215 	add.w	r2, r4, #21
    81a0:	61e2      	str	r2, [r4, #28]
		slip->mac_addr[0] = 0x00;
    81a2:	7563      	strb	r3, [r4, #21]
	slip->ll_addr.len = sizeof(slip->mac_addr);
    81a4:	2206      	movs	r2, #6
		slip->mac_addr[1] = 0x00;
    81a6:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
	slip->ll_addr.len = sizeof(slip->mac_addr);
    81aa:	f884 2020 	strb.w	r2, [r4, #32]
		slip->mac_addr[1] = 0x00;
    81ae:	82e3      	strh	r3, [r4, #22]
	slip->init_done = true;
    81b0:	2201      	movs	r2, #1
		slip->mac_addr[3] = 0x00;
    81b2:	f44f 43a6 	mov.w	r3, #21248	; 0x5300
	slip->init_done = true;
    81b6:	7022      	strb	r2, [r4, #0]
	slip->iface = iface;
    81b8:	6125      	str	r5, [r4, #16]
		slip->mac_addr[3] = 0x00;
    81ba:	8323      	strh	r3, [r4, #24]
	if (z_syscall_trap()) {
		return (uint32_t) arch_syscall_invoke0(K_SYSCALL_SYS_RAND32_GET);
	}
#endif
	compiler_barrier();
	return z_impl_sys_rand32_get();
    81bc:	f7f8 fd20 	bl	c00 <z_impl_sys_rand32_get>
		slip->mac_addr[5] = sys_rand32_get();
    81c0:	76a0      	strb	r0, [r4, #26]
	net_if_set_link_addr(iface, ll_addr->addr, ll_addr->len,
    81c2:	69e1      	ldr	r1, [r4, #28]
    81c4:	f894 2020 	ldrb.w	r2, [r4, #32]
    81c8:	682b      	ldr	r3, [r5, #0]
    81ca:	f3bf 8f5b 	dmb	ish
    81ce:	68db      	ldr	r3, [r3, #12]
    81d0:	f3bf 8f5b 	dmb	ish
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
    81d4:	07db      	lsls	r3, r3, #31
    81d6:	d404      	bmi.n	81e2 <slip_iface_init+0x58>
	return &iface->if_dev->link_addr;
    81d8:	682b      	ldr	r3, [r5, #0]
	net_if_get_link_addr(iface)->len = len;
    81da:	751a      	strb	r2, [r3, #20]
	net_if_get_link_addr(iface)->type = type;
    81dc:	2203      	movs	r2, #3
	net_if_get_link_addr(iface)->addr = addr;
    81de:	6119      	str	r1, [r3, #16]
	net_if_get_link_addr(iface)->type = type;
    81e0:	755a      	strb	r2, [r3, #21]
}
    81e2:	bd38      	pop	{r3, r4, r5, pc}

000081e4 <sys_clock_disable>:
	}
}

void sys_clock_disable(void)
{
	SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
    81e4:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    81e8:	6913      	ldr	r3, [r2, #16]
    81ea:	f023 0301 	bic.w	r3, r3, #1
    81ee:	6113      	str	r3, [r2, #16]
}
    81f0:	4770      	bx	lr

000081f2 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    81f2:	2100      	movs	r1, #0
    81f4:	2001      	movs	r0, #1
    81f6:	f7fa ba29 	b.w	264c <z_arm_fatal_error>

000081fa <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    81fa:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    81fc:	6800      	ldr	r0, [r0, #0]
    81fe:	f7fa ba25 	b.w	264c <z_arm_fatal_error>

00008202 <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
    8202:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8206:	4684      	mov	ip, r0
    8208:	4688      	mov	r8, r1
	register const char *s = nptr;
    820a:	4604      	mov	r4, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
    820c:	4621      	mov	r1, r4
    820e:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
    8212:	2b20      	cmp	r3, #32
    8214:	d0fa      	beq.n	820c <strtol+0xa>
    8216:	f1a3 0009 	sub.w	r0, r3, #9
    821a:	2804      	cmp	r0, #4
    821c:	d9f6      	bls.n	820c <strtol+0xa>
	} while (isspace(c));
	if (c == '-') {
    821e:	2b2d      	cmp	r3, #45	; 0x2d
    8220:	d12d      	bne.n	827e <strtol+0x7c>
		neg = 1;
		c = *s++;
    8222:	784b      	ldrb	r3, [r1, #1]
    8224:	1c8c      	adds	r4, r1, #2
		neg = 1;
    8226:	2101      	movs	r1, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
    8228:	2a00      	cmp	r2, #0
    822a:	d05a      	beq.n	82e2 <strtol+0xe0>
    822c:	2a10      	cmp	r2, #16
    822e:	d109      	bne.n	8244 <strtol+0x42>
    8230:	2b30      	cmp	r3, #48	; 0x30
    8232:	d107      	bne.n	8244 <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
    8234:	7823      	ldrb	r3, [r4, #0]
    8236:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    823a:	2b58      	cmp	r3, #88	; 0x58
    823c:	d14c      	bne.n	82d8 <strtol+0xd6>
		c = s[1];
		s += 2;
		base = 16;
    823e:	2210      	movs	r2, #16
		c = s[1];
    8240:	7863      	ldrb	r3, [r4, #1]
		s += 2;
    8242:	3402      	adds	r4, #2
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
    8244:	2600      	movs	r6, #0
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
    8246:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
    824a:	3f01      	subs	r7, #1
	cutlim = cutoff % (unsigned long)base;
    824c:	fbb7 fef2 	udiv	lr, r7, r2
	for (acc = 0, any = 0;; c = *s++) {
    8250:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
    8252:	fb02 791e 	mls	r9, r2, lr, r7
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    8256:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
    825a:	2d09      	cmp	r5, #9
    825c:	d815      	bhi.n	828a <strtol+0x88>
			c -= '0';
    825e:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
    8260:	429a      	cmp	r2, r3
    8262:	dd22      	ble.n	82aa <strtol+0xa8>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
    8264:	1c75      	adds	r5, r6, #1
    8266:	d007      	beq.n	8278 <strtol+0x76>
    8268:	4570      	cmp	r0, lr
    826a:	d81b      	bhi.n	82a4 <strtol+0xa2>
    826c:	d101      	bne.n	8272 <strtol+0x70>
    826e:	454b      	cmp	r3, r9
    8270:	dc18      	bgt.n	82a4 <strtol+0xa2>
			any = -1;
		} else {
			any = 1;
    8272:	2601      	movs	r6, #1
			acc *= base;
			acc += c;
    8274:	fb00 3002 	mla	r0, r0, r2, r3
	for (acc = 0, any = 0;; c = *s++) {
    8278:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
    827c:	e7eb      	b.n	8256 <strtol+0x54>
	} else if (c == '+') {
    827e:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
    8280:	bf04      	itt	eq
    8282:	784b      	ldrbeq	r3, [r1, #1]
    8284:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
    8286:	2100      	movs	r1, #0
    8288:	e7ce      	b.n	8228 <strtol+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
    828a:	f043 0520 	orr.w	r5, r3, #32
    828e:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
    8290:	2d19      	cmp	r5, #25
    8292:	d80a      	bhi.n	82aa <strtol+0xa8>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    8294:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
    8298:	2d1a      	cmp	r5, #26
    829a:	bf34      	ite	cc
    829c:	2537      	movcc	r5, #55	; 0x37
    829e:	2557      	movcs	r5, #87	; 0x57
    82a0:	1b5b      	subs	r3, r3, r5
    82a2:	e7dd      	b.n	8260 <strtol+0x5e>
			any = -1;
    82a4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    82a8:	e7e6      	b.n	8278 <strtol+0x76>
		}
	}

	if (any < 0) {
    82aa:	1c73      	adds	r3, r6, #1
    82ac:	d109      	bne.n	82c2 <strtol+0xc0>
    82ae:	f7fc fc89 	bl	4bc4 <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
    82b2:	2326      	movs	r3, #38	; 0x26
    82b4:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
    82b6:	4638      	mov	r0, r7
	} else if (neg) {
		acc = -acc;
	}

	if (endptr != NULL) {
    82b8:	f1b8 0f00 	cmp.w	r8, #0
    82bc:	d107      	bne.n	82ce <strtol+0xcc>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
    82be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg) {
    82c2:	b101      	cbz	r1, 82c6 <strtol+0xc4>
		acc = -acc;
    82c4:	4240      	negs	r0, r0
	if (endptr != NULL) {
    82c6:	f1b8 0f00 	cmp.w	r8, #0
    82ca:	d0f8      	beq.n	82be <strtol+0xbc>
		*endptr = (char *)(any ? s - 1 : nptr);
    82cc:	b10e      	cbz	r6, 82d2 <strtol+0xd0>
    82ce:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
    82d2:	f8c8 c000 	str.w	ip, [r8]
	return acc;
    82d6:	e7f2      	b.n	82be <strtol+0xbc>
	if (base == 0) {
    82d8:	2330      	movs	r3, #48	; 0x30
    82da:	2a00      	cmp	r2, #0
    82dc:	d1b2      	bne.n	8244 <strtol+0x42>
		base = c == '0' ? 8 : 10;
    82de:	2208      	movs	r2, #8
    82e0:	e7b0      	b.n	8244 <strtol+0x42>
	if ((base == 0 || base == 16) &&
    82e2:	2b30      	cmp	r3, #48	; 0x30
    82e4:	d0a6      	beq.n	8234 <strtol+0x32>
		base = c == '0' ? 8 : 10;
    82e6:	220a      	movs	r2, #10
    82e8:	e7ac      	b.n	8244 <strtol+0x42>

000082ea <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    82ea:	4603      	mov	r3, r0
    82ec:	3901      	subs	r1, #1
    82ee:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    82f2:	b90a      	cbnz	r2, 82f8 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    82f4:	701a      	strb	r2, [r3, #0]

	return dest;
}
    82f6:	4770      	bx	lr
		*d = *s;
    82f8:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    82fc:	e7f7      	b.n	82ee <strcpy+0x4>

000082fe <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
    82fe:	b570      	push	{r4, r5, r6, lr}
    8300:	4605      	mov	r5, r0
    8302:	462b      	mov	r3, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
    8304:	b142      	cbz	r2, 8318 <strncpy+0x1a>
    8306:	f811 4b01 	ldrb.w	r4, [r1], #1
		*d = *s;
		s++;
		d++;
		n--;
    830a:	1e56      	subs	r6, r2, #1
	while ((n > 0) && *s != '\0') {
    830c:	b92c      	cbnz	r4, 831a <strncpy+0x1c>
    830e:	442a      	add	r2, r5
	}

	while (n > 0) {
		*d = '\0';
    8310:	f803 4b01 	strb.w	r4, [r3], #1
	while (n > 0) {
    8314:	429a      	cmp	r2, r3
    8316:	d1fb      	bne.n	8310 <strncpy+0x12>
		d++;
		n--;
	}

	return dest;
}
    8318:	bd70      	pop	{r4, r5, r6, pc}
		n--;
    831a:	4632      	mov	r2, r6
		*d = *s;
    831c:	f805 4b01 	strb.w	r4, [r5], #1
		n--;
    8320:	e7ef      	b.n	8302 <strncpy+0x4>

00008322 <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
    8322:	4603      	mov	r3, r0
    8324:	b2c9      	uxtb	r1, r1

	while ((*s != tmp) && (*s != '\0')) {
    8326:	781a      	ldrb	r2, [r3, #0]
    8328:	4618      	mov	r0, r3
    832a:	428a      	cmp	r2, r1
    832c:	f103 0301 	add.w	r3, r3, #1
    8330:	d004      	beq.n	833c <strchr+0x1a>
    8332:	2a00      	cmp	r2, #0
    8334:	d1f7      	bne.n	8326 <strchr+0x4>
		s++;
	}

	return (*s == tmp) ? (char *) s : NULL;
    8336:	2900      	cmp	r1, #0
    8338:	bf18      	it	ne
    833a:	2000      	movne	r0, #0
}
    833c:	4770      	bx	lr

0000833e <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    833e:	4603      	mov	r3, r0
	size_t n = 0;
    8340:	2000      	movs	r0, #0

	while (*s != '\0') {
    8342:	5c1a      	ldrb	r2, [r3, r0]
    8344:	b902      	cbnz	r2, 8348 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    8346:	4770      	bx	lr
		n++;
    8348:	3001      	adds	r0, #1
    834a:	e7fa      	b.n	8342 <strlen+0x4>

0000834c <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    834c:	4603      	mov	r3, r0
	size_t n = 0;
    834e:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    8350:	5c1a      	ldrb	r2, [r3, r0]
    8352:	b10a      	cbz	r2, 8358 <strnlen+0xc>
    8354:	4288      	cmp	r0, r1
    8356:	d100      	bne.n	835a <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    8358:	4770      	bx	lr
		n++;
    835a:	3001      	adds	r0, #1
    835c:	e7f8      	b.n	8350 <strnlen+0x4>

0000835e <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    835e:	1e43      	subs	r3, r0, #1
    8360:	3901      	subs	r1, #1
    8362:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    8366:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    836a:	4282      	cmp	r2, r0
    836c:	d101      	bne.n	8372 <strcmp+0x14>
    836e:	2a00      	cmp	r2, #0
    8370:	d1f7      	bne.n	8362 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    8372:	1a10      	subs	r0, r2, r0
    8374:	4770      	bx	lr

00008376 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    8376:	4603      	mov	r3, r0
    8378:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
    837a:	b15a      	cbz	r2, 8394 <memcmp+0x1e>
    837c:	3901      	subs	r1, #1
    837e:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
    8380:	f813 0b01 	ldrb.w	r0, [r3], #1
    8384:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    8388:	42a3      	cmp	r3, r4
    838a:	d001      	beq.n	8390 <memcmp+0x1a>
    838c:	4290      	cmp	r0, r2
    838e:	d0f7      	beq.n	8380 <memcmp+0xa>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    8390:	1a80      	subs	r0, r0, r2
}
    8392:	bd10      	pop	{r4, pc}
		return 0;
    8394:	4610      	mov	r0, r2
    8396:	e7fc      	b.n	8392 <memcmp+0x1c>

00008398 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
    8398:	1a43      	subs	r3, r0, r1
    839a:	4293      	cmp	r3, r2
{
    839c:	b510      	push	{r4, lr}
    839e:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
    83a2:	d308      	bcc.n	83b6 <memmove+0x1e>
	char *dest = d;
    83a4:	4602      	mov	r2, r0
    83a6:	3901      	subs	r1, #1
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
    83a8:	429a      	cmp	r2, r3
    83aa:	d007      	beq.n	83bc <memmove+0x24>
			*dest = *src;
    83ac:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    83b0:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
    83b4:	e7f8      	b.n	83a8 <memmove+0x10>
    83b6:	440a      	add	r2, r1
		while (n > 0) {
    83b8:	428a      	cmp	r2, r1
    83ba:	d100      	bne.n	83be <memmove+0x26>
		}
	}

	return d;
}
    83bc:	bd10      	pop	{r4, pc}
			dest[n] = src[n];
    83be:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
    83c2:	f803 4d01 	strb.w	r4, [r3, #-1]!
    83c6:	e7f7      	b.n	83b8 <memmove+0x20>

000083c8 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    83c8:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    83ca:	ea81 0400 	eor.w	r4, r1, r0
    83ce:	07a5      	lsls	r5, r4, #30
    83d0:	4603      	mov	r3, r0
    83d2:	d00b      	beq.n	83ec <memcpy+0x24>
    83d4:	3b01      	subs	r3, #1
    83d6:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    83d8:	4291      	cmp	r1, r2
    83da:	d11b      	bne.n	8414 <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    83dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
    83de:	2a00      	cmp	r2, #0
    83e0:	d0fc      	beq.n	83dc <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
    83e2:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
    83e6:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
    83e8:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
    83ec:	079c      	lsls	r4, r3, #30
    83ee:	d1f6      	bne.n	83de <memcpy+0x16>
    83f0:	f022 0403 	bic.w	r4, r2, #3
    83f4:	1f1d      	subs	r5, r3, #4
    83f6:	0896      	lsrs	r6, r2, #2
    83f8:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
    83fa:	42b9      	cmp	r1, r7
    83fc:	d105      	bne.n	840a <memcpy+0x42>
    83fe:	f06f 0503 	mvn.w	r5, #3
		d_byte = (unsigned char *)d_word;
    8402:	4423      	add	r3, r4
    8404:	fb05 2206 	mla	r2, r5, r6, r2
    8408:	e7e4      	b.n	83d4 <memcpy+0xc>
			*(d_word++) = *(s_word++);
    840a:	f851 cb04 	ldr.w	ip, [r1], #4
    840e:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
    8412:	e7f2      	b.n	83fa <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
    8414:	f811 4b01 	ldrb.w	r4, [r1], #1
    8418:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    841c:	e7dc      	b.n	83d8 <memcpy+0x10>

0000841e <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    841e:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
    8420:	4604      	mov	r4, r0
	unsigned char c_byte = (unsigned char)c;
    8422:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    8424:	07a3      	lsls	r3, r4, #30
    8426:	d111      	bne.n	844c <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
    8428:	ea41 2301 	orr.w	r3, r1, r1, lsl #8
	c_word |= c_word << 16;
    842c:	ea43 4503 	orr.w	r5, r3, r3, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    8430:	f022 0303 	bic.w	r3, r2, #3
    8434:	0896      	lsrs	r6, r2, #2
    8436:	4423      	add	r3, r4
    8438:	429c      	cmp	r4, r3
    843a:	d10d      	bne.n	8458 <memset+0x3a>
    843c:	f06f 0403 	mvn.w	r4, #3
    8440:	fb04 2206 	mla	r2, r4, r6, r2
    8444:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    8446:	4293      	cmp	r3, r2
    8448:	d109      	bne.n	845e <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    844a:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
    844c:	2a00      	cmp	r2, #0
    844e:	d0fc      	beq.n	844a <memset+0x2c>
		*(d_byte++) = c_byte;
    8450:	f804 1b01 	strb.w	r1, [r4], #1
		n--;
    8454:	3a01      	subs	r2, #1
    8456:	e7e5      	b.n	8424 <memset+0x6>
		*(d_word++) = c_word;
    8458:	f844 5b04 	str.w	r5, [r4], #4
		n -= sizeof(mem_word_t);
    845c:	e7ec      	b.n	8438 <memset+0x1a>
		*(d_byte++) = c_byte;
    845e:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    8462:	e7f0      	b.n	8446 <memset+0x28>

00008464 <_stdout_hook_default>:
}
    8464:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8468:	4770      	bx	lr

0000846a <fixed_data_unref>:
}
    846a:	4770      	bx	lr

0000846c <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    846c:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
    846e:	6849      	ldr	r1, [r1, #4]
    8470:	6809      	ldr	r1, [r1, #0]
    8472:	f7fa bd61 	b.w	2f38 <net_buf_alloc_len>

00008476 <net_buf_linearize>:
{
    8476:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    847a:	4607      	mov	r7, r0
    847c:	460d      	mov	r5, r1
    847e:	4614      	mov	r4, r2
	while (frag && offset >= frag->len) {
    8480:	b30c      	cbz	r4, 84c6 <net_buf_linearize+0x50>
    8482:	89a2      	ldrh	r2, [r4, #12]
    8484:	429a      	cmp	r2, r3
    8486:	d91b      	bls.n	84c0 <net_buf_linearize+0x4a>
	len = MIN(len, dst_len);
    8488:	9906      	ldr	r1, [sp, #24]
    848a:	f04f 0800 	mov.w	r8, #0
    848e:	428d      	cmp	r5, r1
    8490:	bf28      	it	cs
    8492:	460d      	movcs	r5, r1
	while (frag && len > 0) {
    8494:	b18d      	cbz	r5, 84ba <net_buf_linearize+0x44>
		to_copy = MIN(len, frag->len - offset);
    8496:	89a6      	ldrh	r6, [r4, #12]
		memcpy((uint8_t *)dst + copied, frag->data + offset, to_copy);
    8498:	68a1      	ldr	r1, [r4, #8]
		to_copy = MIN(len, frag->len - offset);
    849a:	1af6      	subs	r6, r6, r3
    849c:	42ae      	cmp	r6, r5
    849e:	bf28      	it	cs
    84a0:	462e      	movcs	r6, r5
		memcpy((uint8_t *)dst + copied, frag->data + offset, to_copy);
    84a2:	4419      	add	r1, r3
    84a4:	eb07 0008 	add.w	r0, r7, r8
    84a8:	4632      	mov	r2, r6
    84aa:	f7ff ff8d 	bl	83c8 <memcpy>
		frag = frag->frags;
    84ae:	6824      	ldr	r4, [r4, #0]
		offset = 0;
    84b0:	2300      	movs	r3, #0
		copied += to_copy;
    84b2:	44b0      	add	r8, r6
		len -= to_copy;
    84b4:	1bad      	subs	r5, r5, r6
	while (frag && len > 0) {
    84b6:	2c00      	cmp	r4, #0
    84b8:	d1ec      	bne.n	8494 <net_buf_linearize+0x1e>
}
    84ba:	4640      	mov	r0, r8
    84bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		frag = frag->frags;
    84c0:	6824      	ldr	r4, [r4, #0]
		offset -= frag->len;
    84c2:	1a9b      	subs	r3, r3, r2
		frag = frag->frags;
    84c4:	e7dc      	b.n	8480 <net_buf_linearize+0xa>
    84c6:	46a0      	mov	r8, r4
	return copied;
    84c8:	e7f7      	b.n	84ba <net_buf_linearize+0x44>

000084ca <net_buf_simple_tailroom>:
	return buf->data - buf->__buf;
}

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
    84ca:	8883      	ldrh	r3, [r0, #4]
    84cc:	88c2      	ldrh	r2, [r0, #6]
    84ce:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
    84d0:	6803      	ldr	r3, [r0, #0]
    84d2:	6880      	ldr	r0, [r0, #8]
    84d4:	1a18      	subs	r0, r3, r0
}
    84d6:	1a10      	subs	r0, r2, r0
    84d8:	4770      	bx	lr

000084da <net_buf_simple_add_u8>:
{
    84da:	b510      	push	{r4, lr}
    84dc:	460c      	mov	r4, r1
	u8 = net_buf_simple_add(buf, 1);
    84de:	2101      	movs	r1, #1
    84e0:	f7fa fe8c 	bl	31fc <net_buf_simple_add>
	*u8 = val;
    84e4:	7004      	strb	r4, [r0, #0]
}
    84e6:	bd10      	pop	{r4, pc}

000084e8 <net_buf_simple_max_len>:
	return buf->data - buf->__buf;
    84e8:	6803      	ldr	r3, [r0, #0]
    84ea:	6882      	ldr	r2, [r0, #8]

uint16_t net_buf_simple_max_len(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf);
    84ec:	88c0      	ldrh	r0, [r0, #6]
	return buf->data - buf->__buf;
    84ee:	1a9b      	subs	r3, r3, r2
	return buf->size - net_buf_simple_headroom(buf);
    84f0:	1ac0      	subs	r0, r0, r3
}
    84f2:	b280      	uxth	r0, r0
    84f4:	4770      	bx	lr

000084f6 <net_ipv4_is_addr_mcast>:
    84f6:	6800      	ldr	r0, [r0, #0]
    84f8:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
}
    84fc:	f1a0 03e0 	sub.w	r3, r0, #224	; 0xe0
    8500:	4258      	negs	r0, r3
    8502:	4158      	adcs	r0, r3
    8504:	4770      	bx	lr

00008506 <ethernet_flags>:
	return iface->if_dev->l2_data;
    8506:	6803      	ldr	r3, [r0, #0]

enum net_l2_flags ethernet_flags(struct net_if *iface)
{
	struct ethernet_context *ctx = net_if_l2_data(iface);

	return ctx->ethernet_l2_flags;
    8508:	689b      	ldr	r3, [r3, #8]
}
    850a:	7c18      	ldrb	r0, [r3, #16]
    850c:	4770      	bx	lr

0000850e <ethernet_enable>:
	return iface->if_dev->dev;
    850e:	6803      	ldr	r3, [r0, #0]
{
    8510:	b570      	push	{r4, r5, r6, lr}
    8512:	681a      	ldr	r2, [r3, #0]
    8514:	4605      	mov	r5, r0
	const struct ethernet_api *eth =
    8516:	6896      	ldr	r6, [r2, #8]
	if (!eth) {
    8518:	b17e      	cbz	r6, 853a <ethernet_enable+0x2c>
	if (!state) {
    851a:	b949      	cbnz	r1, 8530 <ethernet_enable+0x22>
		net_arp_clear_cache(iface);
    851c:	f7fb f916 	bl	374c <net_arp_clear_cache>
		if (eth->stop) {
    8520:	68b3      	ldr	r3, [r6, #8]
    8522:	b90b      	cbnz	r3, 8528 <ethernet_enable+0x1a>
	return 0;
    8524:	2000      	movs	r0, #0
}
    8526:	bd70      	pop	{r4, r5, r6, pc}
    8528:	682a      	ldr	r2, [r5, #0]
			eth->stop(net_if_get_device(iface));
    852a:	6810      	ldr	r0, [r2, #0]
			eth->start(net_if_get_device(iface));
    852c:	4798      	blx	r3
    852e:	e7f9      	b.n	8524 <ethernet_enable+0x16>
		if (eth->start) {
    8530:	6873      	ldr	r3, [r6, #4]
    8532:	2b00      	cmp	r3, #0
    8534:	d0f6      	beq.n	8524 <ethernet_enable+0x16>
			eth->start(net_if_get_device(iface));
    8536:	4610      	mov	r0, r2
    8538:	e7f8      	b.n	852c <ethernet_enable+0x1e>
		return -ENOENT;
    853a:	f06f 0001 	mvn.w	r0, #1
    853e:	e7f2      	b.n	8526 <ethernet_enable+0x18>

00008540 <net_eth_is_addr_broadcast>:
	if (addr->addr[0] == 0xff &&
    8540:	7803      	ldrb	r3, [r0, #0]
    8542:	2bff      	cmp	r3, #255	; 0xff
    8544:	d111      	bne.n	856a <net_eth_is_addr_broadcast+0x2a>
    8546:	7843      	ldrb	r3, [r0, #1]
    8548:	2bff      	cmp	r3, #255	; 0xff
    854a:	d10e      	bne.n	856a <net_eth_is_addr_broadcast+0x2a>
	    addr->addr[1] == 0xff &&
    854c:	7883      	ldrb	r3, [r0, #2]
    854e:	2bff      	cmp	r3, #255	; 0xff
    8550:	d10b      	bne.n	856a <net_eth_is_addr_broadcast+0x2a>
	    addr->addr[2] == 0xff &&
    8552:	78c3      	ldrb	r3, [r0, #3]
    8554:	2bff      	cmp	r3, #255	; 0xff
    8556:	d108      	bne.n	856a <net_eth_is_addr_broadcast+0x2a>
	    addr->addr[3] == 0xff &&
    8558:	7903      	ldrb	r3, [r0, #4]
    855a:	2bff      	cmp	r3, #255	; 0xff
    855c:	d105      	bne.n	856a <net_eth_is_addr_broadcast+0x2a>
	    addr->addr[4] == 0xff &&
    855e:	7940      	ldrb	r0, [r0, #5]
    8560:	f1a0 03ff 	sub.w	r3, r0, #255	; 0xff
    8564:	4258      	negs	r0, r3
    8566:	4158      	adcs	r0, r3
    8568:	4770      	bx	lr
	return false;
    856a:	2000      	movs	r0, #0
}
    856c:	4770      	bx	lr

0000856e <net_eth_get_hw_capabilities.isra.0>:
    856e:	6800      	ldr	r0, [r0, #0]
	if (!eth->get_capabilities) {
    8570:	6883      	ldr	r3, [r0, #8]
    8572:	68db      	ldr	r3, [r3, #12]
    8574:	b103      	cbz	r3, 8578 <net_eth_get_hw_capabilities.isra.0+0xa>
	return eth->get_capabilities(net_if_get_device(iface));
    8576:	4718      	bx	r3
}
    8578:	4618      	mov	r0, r3
    857a:	4770      	bx	lr

0000857c <ethernet_recv>:
	return pkt->frags->data;
    857c:	690b      	ldr	r3, [r1, #16]
{
    857e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8582:	689d      	ldr	r5, [r3, #8]
    8584:	460c      	mov	r4, r1
	if (hdr == NULL || pkt->buffer->len < hdr_len) {
    8586:	b90d      	cbnz	r5, 858c <ethernet_recv+0x10>
	switch (type) {
    8588:	2002      	movs	r0, #2
    858a:	e085      	b.n	8698 <ethernet_recv+0x11c>
	if (hdr == NULL || pkt->buffer->len < hdr_len) {
    858c:	899b      	ldrh	r3, [r3, #12]
    858e:	2b0d      	cmp	r3, #13
    8590:	d9fa      	bls.n	8588 <ethernet_recv+0xc>
	switch (type) {
    8592:	f248 63dd 	movw	r3, #34525	; 0x86dd
    8596:	89ae      	ldrh	r6, [r5, #12]
	return iface->if_dev->l2_data;
    8598:	6807      	ldr	r7, [r0, #0]
	type = ntohs(hdr->type);
    859a:	ba76      	rev16	r6, r6
    859c:	b2b6      	uxth	r6, r6
	switch (type) {
    859e:	429e      	cmp	r6, r3
    85a0:	d04e      	beq.n	8640 <ethernet_recv+0xc4>
    85a2:	d8f1      	bhi.n	8588 <ethernet_recv+0xc>
    85a4:	f5b6 6f00 	cmp.w	r6, #2048	; 0x800
    85a8:	d003      	beq.n	85b2 <ethernet_recv+0x36>
    85aa:	f640 0306 	movw	r3, #2054	; 0x806
    85ae:	429e      	cmp	r6, r3
    85b0:	d1ea      	bne.n	8588 <ethernet_recv+0xc>
	pkt->family = family;
    85b2:	f04f 0801 	mov.w	r8, #1
    85b6:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
    85ba:	f368 0343 	bfi	r3, r8, #1, #3
    85be:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
	lladdr->addr = hdr->src.addr;
    85c2:	1dab      	adds	r3, r5, #6
    85c4:	62a3      	str	r3, [r4, #40]	; 0x28
	lladdr->len = sizeof(struct net_eth_addr);
    85c6:	f240 3306 	movw	r3, #774	; 0x306
	if (!net_eth_is_addr_broadcast((struct net_eth_addr *)lladdr->addr) &&
    85ca:	4628      	mov	r0, r5
	lladdr->len = sizeof(struct net_eth_addr);
    85cc:	85a3      	strh	r3, [r4, #44]	; 0x2c
	lladdr->addr = hdr->dst.addr;
    85ce:	6325      	str	r5, [r4, #48]	; 0x30
	lladdr->len = sizeof(struct net_eth_addr);
    85d0:	86a3      	strh	r3, [r4, #52]	; 0x34
	if (!net_eth_is_addr_broadcast((struct net_eth_addr *)lladdr->addr) &&
    85d2:	f7ff ffb5 	bl	8540 <net_eth_is_addr_broadcast>
    85d6:	b3c0      	cbz	r0, 864a <ethernet_recv+0xce>
	return net_buf_simple_pull(&buf->b, len);
    85d8:	6920      	ldr	r0, [r4, #16]
    85da:	210e      	movs	r1, #14
    85dc:	3008      	adds	r0, #8
    85de:	f7fa fded 	bl	31bc <net_buf_simple_pull>
	if (IS_ENABLED(CONFIG_NET_IPV4) && type == NET_ETH_PTYPE_IP &&
    85e2:	f5b6 6f00 	cmp.w	r6, #2048	; 0x800
    85e6:	d11b      	bne.n	8620 <ethernet_recv+0xa4>
	if (net_eth_is_addr_broadcast(&hdr->dst) &&
    85e8:	4628      	mov	r0, r5
    85ea:	f7ff ffa9 	bl	8540 <net_eth_is_addr_broadcast>
    85ee:	b1b8      	cbz	r0, 8620 <ethernet_recv+0xa4>
	return pkt->frags->data;
    85f0:	6923      	ldr	r3, [r4, #16]
    85f2:	f8d3 9008 	ldr.w	r9, [r3, #8]
	    !(net_ipv4_is_addr_mcast(&NET_IPV4_HDR(pkt)->dst) ||
    85f6:	f109 0710 	add.w	r7, r9, #16
    85fa:	4638      	mov	r0, r7
    85fc:	f7ff ff7b 	bl	84f6 <net_ipv4_is_addr_mcast>
	if (net_eth_is_addr_broadcast(&hdr->dst) &&
    8600:	b970      	cbnz	r0, 8620 <ethernet_recv+0xa4>
	return pkt->iface;
    8602:	f8d4 a020 	ldr.w	sl, [r4, #32]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
    8606:	f7fb fd9b 	bl	4140 <net_ipv4_broadcast_address>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
    860a:	f8d9 2010 	ldr.w	r2, [r9, #16]
    860e:	6803      	ldr	r3, [r0, #0]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
    8610:	429a      	cmp	r2, r3
    8612:	d005      	beq.n	8620 <ethernet_recv+0xa4>
	return net_if_ipv4_is_addr_bcast(iface, addr);
    8614:	4639      	mov	r1, r7
    8616:	4650      	mov	r0, sl
    8618:	f7fb faa2 	bl	3b60 <net_if_ipv4_is_addr_bcast>
	    !(net_ipv4_is_addr_mcast(&NET_IPV4_HDR(pkt)->dst) ||
    861c:	2800      	cmp	r0, #0
    861e:	d0b3      	beq.n	8588 <ethernet_recv+0xc>
	ethernet_update_rx_stats(iface, pkt, net_pkt_get_len(pkt) + hdr_len);
    8620:	6922      	ldr	r2, [r4, #16]
		family = AF_INET6;
    8622:	4613      	mov	r3, r2
	while (buf) {
    8624:	bb4b      	cbnz	r3, 867a <ethernet_recv+0xfe>
	if (IS_ENABLED(CONFIG_NET_ARP) &&
    8626:	f1b8 0f01 	cmp.w	r8, #1
    862a:	d128      	bne.n	867e <ethernet_recv+0x102>
	    family == AF_INET && type == NET_ETH_PTYPE_ARP) {
    862c:	f640 0306 	movw	r3, #2054	; 0x806
    8630:	429e      	cmp	r6, r3
    8632:	d124      	bne.n	867e <ethernet_recv+0x102>
		return net_arp_input(pkt, hdr);
    8634:	4629      	mov	r1, r5
    8636:	4620      	mov	r0, r4
}
    8638:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return net_arp_input(pkt, hdr);
    863c:	f000 b8a9 	b.w	8792 <net_arp_input>
	pkt->family = family;
    8640:	f04f 0802 	mov.w	r8, #2
    8644:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
    8648:	e7b7      	b.n	85ba <ethernet_recv+0x3e>
	if (addr->addr[0] == 0x01 &&
    864a:	782b      	ldrb	r3, [r5, #0]
    864c:	2b01      	cmp	r3, #1
    864e:	d104      	bne.n	865a <ethernet_recv+0xde>
    8650:	786b      	ldrb	r3, [r5, #1]
    8652:	b913      	cbnz	r3, 865a <ethernet_recv+0xde>
	    addr->addr[1] == 0x00 &&
    8654:	78ab      	ldrb	r3, [r5, #2]
    8656:	2b5e      	cmp	r3, #94	; 0x5e
    8658:	d0be      	beq.n	85d8 <ethernet_recv+0x5c>
	if (!lladdr1 || !lladdr2) {
    865a:	f117 0f10 	cmn.w	r7, #16
    865e:	d093      	beq.n	8588 <ethernet_recv+0xc>
    8660:	f114 0f30 	cmn.w	r4, #48	; 0x30
    8664:	d090      	beq.n	8588 <ethernet_recv+0xc>
	if (lladdr1->len != lladdr2->len) {
    8666:	7d3a      	ldrb	r2, [r7, #20]
    8668:	2a06      	cmp	r2, #6
    866a:	d18d      	bne.n	8588 <ethernet_recv+0xc>
	return !memcmp(lladdr1->addr, lladdr2->addr, lladdr1->len);
    866c:	4629      	mov	r1, r5
    866e:	6938      	ldr	r0, [r7, #16]
    8670:	f7ff fe81 	bl	8376 <memcmp>
		    (struct net_eth_addr *)lladdr->addr) &&
    8674:	2800      	cmp	r0, #0
    8676:	d0af      	beq.n	85d8 <ethernet_recv+0x5c>
    8678:	e786      	b.n	8588 <ethernet_recv+0xc>
		buf = buf->frags;
    867a:	681b      	ldr	r3, [r3, #0]
    867c:	e7d2      	b.n	8624 <ethernet_recv+0xa8>
	return pkt->family;
    867e:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
	return pkt->frags->data;
    8682:	6891      	ldr	r1, [r2, #8]
	if (net_pkt_family(pkt) == AF_INET) {
    8684:	f3c3 0342 	ubfx	r3, r3, #1, #3
    8688:	2b01      	cmp	r3, #1
    868a:	d107      	bne.n	869c <ethernet_recv+0x120>
    868c:	884b      	ldrh	r3, [r1, #2]
    868e:	ba5b      	rev16	r3, r3
		len = ntohs(NET_IPV6_HDR(pkt)->len) + NET_IPV6H_LEN;
    8690:	b29b      	uxth	r3, r3
	if (len < NET_ETH_MINIMAL_FRAME_SIZE - sizeof(struct net_eth_hdr)) {
    8692:	2b2d      	cmp	r3, #45	; 0x2d
    8694:	d906      	bls.n	86a4 <ethernet_recv+0x128>
	return NET_CONTINUE;
    8696:	2001      	movs	r0, #1
}
    8698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		len = ntohs(NET_IPV6_HDR(pkt)->len) + NET_IPV6H_LEN;
    869c:	888b      	ldrh	r3, [r1, #4]
    869e:	ba5b      	rev16	r3, r3
    86a0:	3328      	adds	r3, #40	; 0x28
    86a2:	e7f5      	b.n	8690 <ethernet_recv+0x114>
			if (frag->len < len) {
    86a4:	8991      	ldrh	r1, [r2, #12]
    86a6:	428b      	cmp	r3, r1
				frag->len = len;
    86a8:	bf98      	it	ls
    86aa:	8193      	strhls	r3, [r2, #12]
		for (frag = pkt->frags; frag; frag = frag->frags) {
    86ac:	6812      	ldr	r2, [r2, #0]
				len -= frag->len;
    86ae:	bf8a      	itet	hi
    86b0:	1a5b      	subhi	r3, r3, r1
				len = 0U;
    86b2:	2300      	movls	r3, #0
				len -= frag->len;
    86b4:	b29b      	uxthhi	r3, r3
		for (frag = pkt->frags; frag; frag = frag->frags) {
    86b6:	2a00      	cmp	r2, #0
    86b8:	d1f4      	bne.n	86a4 <ethernet_recv+0x128>
    86ba:	e7ec      	b.n	8696 <ethernet_recv+0x11a>

000086bc <ethernet_init>:
	int i;
#endif

	NET_DBG("Initializing Ethernet L2 %p for iface %p", ctx, iface);

	ctx->ethernet_l2_flags = NET_L2_MULTICAST;
    86bc:	2301      	movs	r3, #1
    86be:	6800      	ldr	r0, [r0, #0]
{
    86c0:	b510      	push	{r4, lr}
    86c2:	6884      	ldr	r4, [r0, #8]
	ctx->ethernet_l2_flags = NET_L2_MULTICAST;
    86c4:	7423      	strb	r3, [r4, #16]

	if (net_eth_get_hw_capabilities(iface) & ETHERNET_PROMISC_MODE) {
    86c6:	f7ff ff52 	bl	856e <net_eth_get_hw_capabilities.isra.0>
    86ca:	0543      	lsls	r3, r0, #21
		ctx->ethernet_l2_flags |= NET_L2_PROMISC_MODE;
    86cc:	bf42      	ittt	mi
    86ce:	7c23      	ldrbmi	r3, [r4, #16]
    86d0:	f043 0304 	orrmi.w	r3, r3, #4
    86d4:	7423      	strbmi	r3, [r4, #16]
			break;
		}
	}
#endif

	net_arp_init();
    86d6:	f7fb f891 	bl	37fc <net_arp_init>

	ctx->is_init = true;
    86da:	2301      	movs	r3, #1
    86dc:	7463      	strb	r3, [r4, #17]
}
    86de:	bd10      	pop	{r4, pc}

000086e0 <sys_slist_prepend>:
	parent->next = child;
    86e0:	6803      	ldr	r3, [r0, #0]
    86e2:	600b      	str	r3, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    86e4:	6843      	ldr	r3, [r0, #4]
	list->head = node;
    86e6:	6001      	str	r1, [r0, #0]
Z_GENLIST_PREPEND(slist, snode)
    86e8:	b903      	cbnz	r3, 86ec <sys_slist_prepend+0xc>
	list->tail = node;
    86ea:	6041      	str	r1, [r0, #4]
Z_GENLIST_PREPEND(slist, snode)
    86ec:	4770      	bx	lr

000086ee <sys_slist_remove>:
Z_GENLIST_REMOVE(slist, snode)
    86ee:	b510      	push	{r4, lr}
	return node->next;
    86f0:	6813      	ldr	r3, [r2, #0]
	return list->tail;
    86f2:	6844      	ldr	r4, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
    86f4:	b931      	cbnz	r1, 8704 <sys_slist_remove+0x16>
    86f6:	42a2      	cmp	r2, r4
	list->head = node;
    86f8:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
    86fa:	d100      	bne.n	86fe <sys_slist_remove+0x10>
	list->tail = node;
    86fc:	6043      	str	r3, [r0, #4]
	parent->next = child;
    86fe:	2300      	movs	r3, #0
    8700:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    8702:	bd10      	pop	{r4, pc}
    8704:	42a2      	cmp	r2, r4
	parent->next = child;
    8706:	600b      	str	r3, [r1, #0]
	list->tail = node;
    8708:	bf08      	it	eq
    870a:	6041      	streq	r1, [r0, #4]
}
    870c:	e7f7      	b.n	86fe <sys_slist_remove+0x10>

0000870e <k_uptime_get_32>:
{
    870e:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
    8710:	f001 fdce 	bl	a2b0 <z_impl_k_uptime_ticks>
}
    8714:	230a      	movs	r3, #10
    8716:	4358      	muls	r0, r3
    8718:	bd08      	pop	{r3, pc}

0000871a <arp_entry_cleanup>:
{
    871a:	b538      	push	{r3, r4, r5, lr}
    871c:	4604      	mov	r4, r0
	if (pending) {
    871e:	b121      	cbz	r1, 872a <arp_entry_cleanup+0x10>
		net_pkt_unref(entry->pending);
    8720:	6900      	ldr	r0, [r0, #16]
    8722:	f000 fc79 	bl	9018 <net_pkt_unref>
		entry->pending = NULL;
    8726:	2300      	movs	r3, #0
    8728:	6123      	str	r3, [r4, #16]
	entry->iface = NULL;
    872a:	2500      	movs	r5, #0
	(void)memset(&entry->ip, 0, sizeof(struct in_addr));
    872c:	2204      	movs	r2, #4
    872e:	4629      	mov	r1, r5
	entry->iface = NULL;
    8730:	60a5      	str	r5, [r4, #8]
	(void)memset(&entry->ip, 0, sizeof(struct in_addr));
    8732:	f104 000c 	add.w	r0, r4, #12
    8736:	f7ff fe72 	bl	841e <memset>
	(void)memset(&entry->eth, 0, sizeof(struct net_eth_addr));
    873a:	4629      	mov	r1, r5
    873c:	f104 0010 	add.w	r0, r4, #16
    8740:	2206      	movs	r2, #6
}
    8742:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	(void)memset(&entry->eth, 0, sizeof(struct net_eth_addr));
    8746:	f7ff be6a 	b.w	841e <memset>

0000874a <if_get_addr.isra.0>:
	if (!ipv4) {
    874a:	b970      	cbnz	r0, 876a <if_get_addr.isra.0+0x20>
    874c:	4770      	bx	lr
		if (ipv4->unicast[i].is_used &&
    874e:	8803      	ldrh	r3, [r0, #0]
    8750:	2b01      	cmp	r3, #1
    8752:	d10d      	bne.n	8770 <if_get_addr.isra.0+0x26>
		    ipv4->unicast[i].address.family == AF_INET &&
    8754:	f990 3015 	ldrsb.w	r3, [r0, #21]
    8758:	2b01      	cmp	r3, #1
    875a:	d109      	bne.n	8770 <if_get_addr.isra.0+0x26>
		    ipv4->unicast[i].addr_state == NET_ADDR_PREFERRED &&
    875c:	b119      	cbz	r1, 8766 <if_get_addr.isra.0+0x1c>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
    875e:	680a      	ldr	r2, [r1, #0]
    8760:	6843      	ldr	r3, [r0, #4]
		    (!addr ||
    8762:	429a      	cmp	r2, r3
    8764:	d104      	bne.n	8770 <if_get_addr.isra.0+0x26>
			return &ipv4->unicast[i].address.in_addr;
    8766:	3004      	adds	r0, #4
    8768:	4770      	bx	lr
		if (ipv4->unicast[i].is_used &&
    876a:	7d83      	ldrb	r3, [r0, #22]
    876c:	079b      	lsls	r3, r3, #30
    876e:	d4ee      	bmi.n	874e <if_get_addr.isra.0+0x4>
	return NULL;
    8770:	2000      	movs	r0, #0
    8772:	4770      	bx	lr

00008774 <arp_entry_find.isra.0>:
static struct arp_entry *arp_entry_find(sys_slist_t *list,
    8774:	b530      	push	{r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(list, entry, node) {
    8776:	b908      	cbnz	r0, 877c <arp_entry_find.isra.0+0x8>
	return NULL;
    8778:	2000      	movs	r0, #0
}
    877a:	bd30      	pop	{r4, r5, pc}
		if (entry->iface == iface &&
    877c:	6884      	ldr	r4, [r0, #8]
    877e:	428c      	cmp	r4, r1
    8780:	d103      	bne.n	878a <arp_entry_find.isra.0+0x16>
    8782:	68c5      	ldr	r5, [r0, #12]
    8784:	6814      	ldr	r4, [r2, #0]
    8786:	42a5      	cmp	r5, r4
    8788:	d0f7      	beq.n	877a <arp_entry_find.isra.0+0x6>
		if (previous) {
    878a:	b103      	cbz	r3, 878e <arp_entry_find.isra.0+0x1a>
			*previous = &entry->node;
    878c:	6018      	str	r0, [r3, #0]
	return node->next;
    878e:	6800      	ldr	r0, [r0, #0]
    8790:	e7f1      	b.n	8776 <arp_entry_find.isra.0+0x2>

00008792 <net_arp_input>:
{
    8792:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8796:	6902      	ldr	r2, [r0, #16]
    8798:	460e      	mov	r6, r1
    879a:	4605      	mov	r5, r0
    879c:	4611      	mov	r1, r2
	size_t bytes = 0;
    879e:	2300      	movs	r3, #0
	while (buf) {
    87a0:	b949      	cbnz	r1, 87b6 <net_arp_input+0x24>
    87a2:	6894      	ldr	r4, [r2, #8]
				    (net_pkt_ip_data(pkt) - (uint8_t *)eth_hdr))) {
    87a4:	1ba2      	subs	r2, r4, r6
	if (net_pkt_get_len(pkt) < (sizeof(struct net_arp_hdr) -
    87a6:	f1c2 021c 	rsb	r2, r2, #28
    87aa:	429a      	cmp	r2, r3
    87ac:	d907      	bls.n	87be <net_arp_input+0x2c>
		return NET_DROP;
    87ae:	2002      	movs	r0, #2
}
    87b0:	b003      	add	sp, #12
    87b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		bytes += buf->len;
    87b6:	8988      	ldrh	r0, [r1, #12]
		buf = buf->frags;
    87b8:	6809      	ldr	r1, [r1, #0]
		bytes += buf->len;
    87ba:	4403      	add	r3, r0
		buf = buf->frags;
    87bc:	e7f0      	b.n	87a0 <net_arp_input+0xe>
	if (ntohs(arp_hdr->hwtype) != NET_ARP_HTYPE_ETH ||
    87be:	8823      	ldrh	r3, [r4, #0]
    87c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    87c4:	d1f3      	bne.n	87ae <net_arp_input+0x1c>
    87c6:	8863      	ldrh	r3, [r4, #2]
    87c8:	2b08      	cmp	r3, #8
    87ca:	d1f0      	bne.n	87ae <net_arp_input+0x1c>
	    ntohs(arp_hdr->protocol) != NET_ETH_PTYPE_IP ||
    87cc:	7927      	ldrb	r7, [r4, #4]
    87ce:	2f06      	cmp	r7, #6
    87d0:	d1ed      	bne.n	87ae <net_arp_input+0x1c>
	    arp_hdr->hwlen != sizeof(struct net_eth_addr) ||
    87d2:	7963      	ldrb	r3, [r4, #5]
    87d4:	2b04      	cmp	r3, #4
    87d6:	d1ea      	bne.n	87ae <net_arp_input+0x1c>
	    arp_hdr->protolen != NET_ARP_IPV4_PTYPE_SIZE ||
    87d8:	7ba3      	ldrb	r3, [r4, #14]
    87da:	2b7f      	cmp	r3, #127	; 0x7f
    87dc:	d0e7      	beq.n	87ae <net_arp_input+0x1c>
	switch (ntohs(arp_hdr->opcode)) {
    87de:	88e3      	ldrh	r3, [r4, #6]
    87e0:	badb      	revsh	r3, r3
    87e2:	2b01      	cmp	r3, #1
    87e4:	d007      	beq.n	87f6 <net_arp_input+0x64>
    87e6:	2b02      	cmp	r3, #2
    87e8:	f000 80b1 	beq.w	894e <net_arp_input+0x1bc>
	net_pkt_unref(pkt);
    87ec:	4628      	mov	r0, r5
    87ee:	f000 fc13 	bl	9018 <net_pkt_unref>
	return NET_OK;
    87f2:	2000      	movs	r0, #0
    87f4:	e7dc      	b.n	87b0 <net_arp_input+0x1e>
	return &iface->if_dev->link_addr;
    87f6:	6a2b      	ldr	r3, [r5, #32]
		if (memcmp(&arp_hdr->src_hwaddr,
    87f8:	f104 0808 	add.w	r8, r4, #8
			   net_if_get_link_addr(net_pkt_iface(pkt))->addr,
    87fc:	681b      	ldr	r3, [r3, #0]
		if (memcmp(&arp_hdr->src_hwaddr,
    87fe:	463a      	mov	r2, r7
    8800:	4640      	mov	r0, r8
    8802:	6919      	ldr	r1, [r3, #16]
    8804:	f7ff fdb7 	bl	8376 <memcmp>
    8808:	2800      	cmp	r0, #0
    880a:	d0d0      	beq.n	87ae <net_arp_input+0x1c>
				   net_eth_broadcast_addr(),
    880c:	f7fa fdd0 	bl	33b0 <net_eth_broadcast_addr>
			if (memcmp(&eth_hdr->dst,
    8810:	463a      	mov	r2, r7
				   net_eth_broadcast_addr(),
    8812:	4601      	mov	r1, r0
			if (memcmp(&eth_hdr->dst,
    8814:	4630      	mov	r0, r6
    8816:	f7ff fdae 	bl	8376 <memcmp>
    881a:	b9c8      	cbnz	r0, 8850 <net_arp_input+0xbe>
				   net_eth_broadcast_addr(),
    881c:	f7fa fdc8 	bl	33b0 <net_eth_broadcast_addr>
			    memcmp(&arp_hdr->dst_hwaddr,
    8820:	2206      	movs	r2, #6
				   net_eth_broadcast_addr(),
    8822:	4601      	mov	r1, r0
			    memcmp(&arp_hdr->dst_hwaddr,
    8824:	f104 0012 	add.w	r0, r4, #18
    8828:	f7ff fda5 	bl	8376 <memcmp>
				   sizeof(struct net_eth_addr)) == 0 &&
    882c:	b980      	cbnz	r0, 8850 <net_arp_input+0xbe>
			    memcmp(&arp_hdr->dst_ipaddr, &arp_hdr->src_ipaddr,
    882e:	f104 070e 	add.w	r7, r4, #14
    8832:	2204      	movs	r2, #4
    8834:	4639      	mov	r1, r7
    8836:	f104 0018 	add.w	r0, r4, #24
    883a:	f7ff fd9c 	bl	8376 <memcmp>
				   sizeof(struct net_eth_addr)) == 0 &&
    883e:	b938      	cbnz	r0, 8850 <net_arp_input+0xbe>
				arp_update(net_pkt_iface(pkt),
    8840:	2301      	movs	r3, #1
    8842:	4642      	mov	r2, r8
    8844:	4639      	mov	r1, r7
    8846:	9000      	str	r0, [sp, #0]
			arp_update(net_pkt_iface(pkt),
    8848:	6a28      	ldr	r0, [r5, #32]
    884a:	f7fa fdc9 	bl	33e0 <arp_update>
    884e:	e7cd      	b.n	87ec <net_arp_input+0x5a>
		if (memcmp(&eth_hdr->dst, net_eth_broadcast_addr(),
    8850:	f7fa fdae 	bl	33b0 <net_eth_broadcast_addr>
    8854:	2206      	movs	r2, #6
    8856:	4601      	mov	r1, r0
    8858:	4630      	mov	r0, r6
    885a:	f7ff fd8c 	bl	8376 <memcmp>
    885e:	b928      	cbnz	r0, 886c <net_arp_input+0xda>
	return (ntohl(UNALIGNED_GET(&addr->s_addr)) & 0xF0000000) == 0xE0000000;
    8860:	f8d4 300e 	ldr.w	r3, [r4, #14]
    8864:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
			   sizeof(struct net_eth_addr)) == 0 &&
    8868:	2be0      	cmp	r3, #224	; 0xe0
    886a:	d0a0      	beq.n	87ae <net_arp_input+0x1c>
	return pkt->iface;
    886c:	6a2f      	ldr	r7, [r5, #32]
		addr = if_get_addr(net_pkt_iface(pkt), &arp_hdr->dst_ipaddr);
    886e:	f104 0118 	add.w	r1, r4, #24
    8872:	6878      	ldr	r0, [r7, #4]
    8874:	f7ff ff69 	bl	874a <if_get_addr.isra.0>
		if (!addr) {
    8878:	2800      	cmp	r0, #0
    887a:	d098      	beq.n	87ae <net_arp_input+0x1c>
	if (addr->addr[0] == 0x00 &&
    887c:	7ca3      	ldrb	r3, [r4, #18]
    887e:	2b00      	cmp	r3, #0
    8880:	d162      	bne.n	8948 <net_arp_input+0x1b6>
    8882:	7ce3      	ldrb	r3, [r4, #19]
    8884:	2b00      	cmp	r3, #0
    8886:	d15f      	bne.n	8948 <net_arp_input+0x1b6>
	    addr->addr[1] == 0x00 &&
    8888:	7d23      	ldrb	r3, [r4, #20]
    888a:	2b00      	cmp	r3, #0
    888c:	d15c      	bne.n	8948 <net_arp_input+0x1b6>
	    addr->addr[2] == 0x00 &&
    888e:	7d63      	ldrb	r3, [r4, #21]
    8890:	2b00      	cmp	r3, #0
    8892:	d159      	bne.n	8948 <net_arp_input+0x1b6>
	    addr->addr[3] == 0x00 &&
    8894:	7da3      	ldrb	r3, [r4, #22]
    8896:	2b00      	cmp	r3, #0
    8898:	d156      	bne.n	8948 <net_arp_input+0x1b6>
	    addr->addr[4] == 0x00 &&
    889a:	7de3      	ldrb	r3, [r4, #23]
    889c:	2b00      	cmp	r3, #0
    889e:	d153      	bne.n	8948 <net_arp_input+0x1b6>
			arp_update(net_pkt_iface(pkt),
    88a0:	2201      	movs	r2, #1
    88a2:	4638      	mov	r0, r7
    88a4:	9200      	str	r2, [sp, #0]
    88a6:	f104 010e 	add.w	r1, r4, #14
    88aa:	4642      	mov	r2, r8
    88ac:	f7fa fd98 	bl	33e0 <arp_update>
					AF_UNSPEC, 0, NET_BUF_TIMEOUT);
    88b0:	220a      	movs	r2, #10
    88b2:	2300      	movs	r3, #0
	pkt = net_pkt_alloc_with_buffer(iface, sizeof(struct net_arp_hdr),
    88b4:	e9cd 2300 	strd	r2, r3, [sp]
    88b8:	2300      	movs	r3, #0
    88ba:	f8d5 9020 	ldr.w	r9, [r5, #32]
    88be:	461a      	mov	r2, r3
    88c0:	211c      	movs	r1, #28
    88c2:	4648      	mov	r0, r9
    88c4:	f7fb fd5e 	bl	4384 <net_pkt_alloc_with_buffer>
	if (!pkt) {
    88c8:	4606      	mov	r6, r0
    88ca:	2800      	cmp	r0, #0
    88cc:	d08e      	beq.n	87ec <net_arp_input+0x5a>
	return net_buf_simple_add(&buf->b, len);
    88ce:	6900      	ldr	r0, [r0, #16]
    88d0:	211c      	movs	r1, #28
    88d2:	3008      	adds	r0, #8
    88d4:	f7fa fc92 	bl	31fc <net_buf_simple_add>
	hdr->hwtype = htons(NET_ARP_HTYPE_ETH);
    88d8:	2201      	movs	r2, #1
	return pkt->frags->data;
    88da:	6933      	ldr	r3, [r6, #16]
	hdr->hwlen = sizeof(struct net_eth_addr);
    88dc:	2706      	movs	r7, #6
    88de:	689c      	ldr	r4, [r3, #8]
    88e0:	692b      	ldr	r3, [r5, #16]
	memcpy(&hdr->dst_hwaddr.addr, &dst_addr->addr,
    88e2:	f104 0a12 	add.w	sl, r4, #18
    88e6:	f8d3 b008 	ldr.w	fp, [r3, #8]
	hdr->hwtype = htons(NET_ARP_HTYPE_ETH);
    88ea:	2300      	movs	r3, #0
    88ec:	7062      	strb	r2, [r4, #1]
	hdr->protocol = htons(NET_ETH_PTYPE_IP);
    88ee:	2208      	movs	r2, #8
	hdr->hwtype = htons(NET_ARP_HTYPE_ETH);
    88f0:	7023      	strb	r3, [r4, #0]
	hdr->protocol = htons(NET_ETH_PTYPE_IP);
    88f2:	70a2      	strb	r2, [r4, #2]
    88f4:	70e3      	strb	r3, [r4, #3]
	hdr->opcode = htons(NET_ARP_REPLY);
    88f6:	71a3      	strb	r3, [r4, #6]
	hdr->protolen = sizeof(struct in_addr);
    88f8:	2204      	movs	r2, #4
	hdr->opcode = htons(NET_ARP_REPLY);
    88fa:	2302      	movs	r3, #2
	memcpy(&hdr->dst_hwaddr.addr, &dst_addr->addr,
    88fc:	4641      	mov	r1, r8
	hdr->protolen = sizeof(struct in_addr);
    88fe:	7162      	strb	r2, [r4, #5]
	hdr->opcode = htons(NET_ARP_REPLY);
    8900:	71e3      	strb	r3, [r4, #7]
	memcpy(&hdr->dst_hwaddr.addr, &dst_addr->addr,
    8902:	463a      	mov	r2, r7
    8904:	4650      	mov	r0, sl
	hdr->hwlen = sizeof(struct net_eth_addr);
    8906:	7127      	strb	r7, [r4, #4]
	memcpy(&hdr->dst_hwaddr.addr, &dst_addr->addr,
    8908:	f7ff fd5e 	bl	83c8 <memcpy>
	memcpy(&hdr->src_hwaddr.addr, net_if_get_link_addr(iface)->addr,
    890c:	f8d9 3000 	ldr.w	r3, [r9]
    8910:	463a      	mov	r2, r7
    8912:	6919      	ldr	r1, [r3, #16]
    8914:	f104 0008 	add.w	r0, r4, #8
    8918:	f7ff fd56 	bl	83c8 <memcpy>
	net_ipaddr_copy(&hdr->dst_ipaddr, &query->src_ipaddr);
    891c:	f8db 300e 	ldr.w	r3, [fp, #14]
    8920:	61a3      	str	r3, [r4, #24]
	net_ipaddr_copy(&hdr->src_ipaddr, &query->dst_ipaddr);
    8922:	f8db 3018 	ldr.w	r3, [fp, #24]
    8926:	f8c4 300e 	str.w	r3, [r4, #14]
	net_pkt_lladdr_src(pkt)->addr = net_if_get_link_addr(iface)->addr;
    892a:	f8d9 3000 	ldr.w	r3, [r9]
			net_if_queue_tx(net_pkt_iface(reply), reply);
    892e:	4631      	mov	r1, r6
	net_pkt_lladdr_src(pkt)->addr = net_if_get_link_addr(iface)->addr;
    8930:	691b      	ldr	r3, [r3, #16]
			net_if_queue_tx(net_pkt_iface(reply), reply);
    8932:	6a30      	ldr	r0, [r6, #32]
	net_pkt_lladdr_src(pkt)->addr = net_if_get_link_addr(iface)->addr;
    8934:	62b3      	str	r3, [r6, #40]	; 0x28
	net_pkt_lladdr_src(pkt)->len = sizeof(struct net_eth_addr);
    8936:	f886 702c 	strb.w	r7, [r6, #44]	; 0x2c
	net_pkt_lladdr_dst(pkt)->addr = (uint8_t *)&hdr->dst_hwaddr.addr;
    893a:	f8c6 a030 	str.w	sl, [r6, #48]	; 0x30
	net_pkt_lladdr_dst(pkt)->len = sizeof(struct net_eth_addr);
    893e:	f886 7034 	strb.w	r7, [r6, #52]	; 0x34
			net_if_queue_tx(net_pkt_iface(reply), reply);
    8942:	f7fb f8f9 	bl	3b38 <net_if_queue_tx>
    8946:	e751      	b.n	87ec <net_arp_input+0x5a>
			dst_hw_addr = &eth_hdr->src;
    8948:	f106 0806 	add.w	r8, r6, #6
    894c:	e7b0      	b.n	88b0 <net_arp_input+0x11e>
		if (net_ipv4_is_my_addr(&arp_hdr->dst_ipaddr)) {
    894e:	f104 0618 	add.w	r6, r4, #24
	ret = net_if_ipv4_addr_lookup(addr, NULL) != NULL;
    8952:	4630      	mov	r0, r6
    8954:	f7fb f9b4 	bl	3cc0 <net_if_ipv4_addr_lookup>
	if (!ret) {
    8958:	b130      	cbz	r0, 8968 <net_arp_input+0x1d6>
			arp_update(net_pkt_iface(pkt),
    895a:	2300      	movs	r3, #0
    895c:	f104 0208 	add.w	r2, r4, #8
    8960:	9300      	str	r3, [sp, #0]
    8962:	f104 010e 	add.w	r1, r4, #14
    8966:	e76f      	b.n	8848 <net_arp_input+0xb6>
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
    8968:	f7fb fbea 	bl	4140 <net_ipv4_broadcast_address>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
    896c:	69a2      	ldr	r2, [r4, #24]
    896e:	6803      	ldr	r3, [r0, #0]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
    8970:	429a      	cmp	r2, r3
    8972:	d0f2      	beq.n	895a <net_arp_input+0x1c8>
	return net_if_ipv4_is_addr_bcast(iface, addr);
    8974:	4631      	mov	r1, r6
    8976:	2000      	movs	r0, #0
    8978:	f7fb f8f2 	bl	3b60 <net_if_ipv4_is_addr_bcast>
		if (net_ipv4_is_my_addr(&arp_hdr->dst_ipaddr)) {
    897c:	2800      	cmp	r0, #0
    897e:	f43f af35 	beq.w	87ec <net_arp_input+0x5a>
    8982:	e7ea      	b.n	895a <net_arp_input+0x1c8>

00008984 <processing_data>:
	if (!pkt->frags) {
    8984:	6903      	ldr	r3, [r0, #16]
{
    8986:	b510      	push	{r4, lr}
    8988:	4604      	mov	r4, r0
	if (!pkt->frags) {
    898a:	b923      	cbnz	r3, 8996 <processing_data+0x12>
		net_pkt_unref(pkt);
    898c:	4620      	mov	r0, r4
}
    898e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		net_pkt_unref(pkt);
    8992:	f000 bb41 	b.w	9018 <net_pkt_unref>
	if (!is_loopback && !locally_routed) {
    8996:	b169      	cbz	r1, 89b4 <processing_data+0x30>
	net_pkt_cursor_init(pkt);
    8998:	4620      	mov	r0, r4
    899a:	f000 fb9d 	bl	90d8 <net_pkt_cursor_init>
	return pkt->frags->data;
    899e:	6923      	ldr	r3, [r4, #16]
	switch (NET_IPV6_HDR(pkt)->vtc & 0xf0) {
    89a0:	689b      	ldr	r3, [r3, #8]
    89a2:	781b      	ldrb	r3, [r3, #0]
    89a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    89a8:	2b40      	cmp	r3, #64	; 0x40
    89aa:	d1ef      	bne.n	898c <processing_data+0x8>
		return net_ipv4_input(pkt);
    89ac:	4620      	mov	r0, r4
    89ae:	f000 fef5 	bl	979c <net_ipv4_input>
    89b2:	e005      	b.n	89c0 <processing_data+0x3c>
		ret = net_if_recv_data(net_pkt_iface(pkt), pkt);
    89b4:	4601      	mov	r1, r0
    89b6:	6a00      	ldr	r0, [r0, #32]
    89b8:	f000 f909 	bl	8bce <net_if_recv_data>
		if (ret != NET_CONTINUE) {
    89bc:	2801      	cmp	r0, #1
    89be:	d0eb      	beq.n	8998 <processing_data+0x14>
	switch (process_data(pkt, is_loopback)) {
    89c0:	2800      	cmp	r0, #0
    89c2:	d1e3      	bne.n	898c <processing_data+0x8>
}
    89c4:	bd10      	pop	{r4, pc}

000089c6 <net_init>:

	return status;
}

static int net_init(const struct device *unused)
{
    89c6:	b508      	push	{r3, lr}
	net_hostname_init();

	NET_DBG("Priority %d", CONFIG_NET_INIT_PRIO);

	net_pkt_init();
    89c8:	f000 fd46 	bl	9458 <net_pkt_init>

	net_context_init();
    89cc:	f7fb fbbc 	bl	4148 <net_context_init>
	net_icmpv4_init();
    89d0:	f7fb fd94 	bl	44fc <net_icmpv4_init>
		net_conn_init();
    89d4:	f7fb fe92 	bl	46fc <net_conn_init>
	net_if_init();
    89d8:	f7fb fa44 	bl	3e64 <net_if_init>
	net_tc_rx_init();
    89dc:	f7fb fd26 	bl	442c <net_tc_rx_init>
	net_if_post_init();
    89e0:	f7fb fa96 	bl	3f10 <net_if_post_init>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
    89e4:	2000      	movs	r0, #0
    89e6:	bd08      	pop	{r3, pc}

000089e8 <process_rx_packet>:
	pkt_len = net_pkt_get_len(pkt);
    89e8:	6901      	ldr	r1, [r0, #16]
	while (buf) {
    89ea:	b909      	cbnz	r1, 89f0 <process_rx_packet+0x8>
	processing_data(pkt, is_loopback);
    89ec:	f7ff bfca 	b.w	8984 <processing_data>
		buf = buf->frags;
    89f0:	6809      	ldr	r1, [r1, #0]
    89f2:	e7fa      	b.n	89ea <process_rx_packet+0x2>

000089f4 <net_send_data>:
{
    89f4:	b570      	push	{r4, r5, r6, lr}
	if (!pkt || !pkt->frags) {
    89f6:	4604      	mov	r4, r0
    89f8:	2800      	cmp	r0, #0
    89fa:	d062      	beq.n	8ac2 <net_send_data+0xce>
    89fc:	6903      	ldr	r3, [r0, #16]
    89fe:	2b00      	cmp	r3, #0
    8a00:	d05f      	beq.n	8ac2 <net_send_data+0xce>
	if (!net_pkt_iface(pkt)) {
    8a02:	6a03      	ldr	r3, [r0, #32]
    8a04:	2b00      	cmp	r3, #0
    8a06:	d05f      	beq.n	8ac8 <net_send_data+0xd4>
	net_pkt_trim_buffer(pkt);
    8a08:	f000 fb4c 	bl	90a4 <net_pkt_trim_buffer>
	net_pkt_cursor_init(pkt);
    8a0c:	4620      	mov	r0, r4
    8a0e:	f000 fb63 	bl	90d8 <net_pkt_cursor_init>
	return pkt->family;
    8a12:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
	if (net_pkt_family(pkt) == AF_INET) {
    8a16:	f3c3 0342 	ubfx	r3, r3, #1, #3
    8a1a:	2b01      	cmp	r3, #1
    8a1c:	d147      	bne.n	8aae <net_send_data+0xba>
	return pkt->frags->data;
    8a1e:	6923      	ldr	r3, [r4, #16]
    8a20:	689d      	ldr	r5, [r3, #8]
		if (net_ipv4_addr_cmp(&NET_IPV4_HDR(pkt)->dst,
    8a22:	f7fb fb89 	bl	4138 <net_ipv4_unspecified_address>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
    8a26:	692a      	ldr	r2, [r5, #16]
    8a28:	6803      	ldr	r3, [r0, #0]
    8a2a:	429a      	cmp	r2, r3
    8a2c:	d102      	bne.n	8a34 <net_send_data+0x40>
			return -EADDRNOTAVAIL;
    8a2e:	f06f 0030 	mvn.w	r0, #48	; 0x30
}
    8a32:	bd70      	pop	{r4, r5, r6, pc}
    8a34:	6923      	ldr	r3, [r4, #16]
    8a36:	689d      	ldr	r5, [r3, #8]
		if (net_ipv4_is_addr_loopback(&NET_IPV4_HDR(pkt)->dst) ||
    8a38:	7c2b      	ldrb	r3, [r5, #16]
    8a3a:	2b7f      	cmp	r3, #127	; 0x7f
    8a3c:	d10f      	bne.n	8a5e <net_send_data+0x6a>
    8a3e:	6923      	ldr	r3, [r4, #16]
			net_ipaddr_copy(&addr, &NET_IPV4_HDR(pkt)->src);
    8a40:	689b      	ldr	r3, [r3, #8]
    8a42:	68da      	ldr	r2, [r3, #12]
    8a44:	6923      	ldr	r3, [r4, #16]
    8a46:	689b      	ldr	r3, [r3, #8]
			net_ipaddr_copy(&NET_IPV4_HDR(pkt)->src,
    8a48:	6919      	ldr	r1, [r3, #16]
    8a4a:	60d9      	str	r1, [r3, #12]
    8a4c:	6923      	ldr	r3, [r4, #16]
    8a4e:	689b      	ldr	r3, [r3, #8]
			net_ipaddr_copy(&NET_IPV4_HDR(pkt)->dst, &addr);
    8a50:	611a      	str	r2, [r3, #16]
		processing_data(pkt, true);
    8a52:	2101      	movs	r1, #1
    8a54:	4620      	mov	r0, r4
    8a56:	f7ff ff95 	bl	8984 <processing_data>
		return 0;
    8a5a:	2000      	movs	r0, #0
    8a5c:	e7e9      	b.n	8a32 <net_send_data+0x3e>
	return pkt->iface;
    8a5e:	6a26      	ldr	r6, [r4, #32]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
    8a60:	f7fb fb6e 	bl	4140 <net_ipv4_broadcast_address>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
    8a64:	692a      	ldr	r2, [r5, #16]
    8a66:	6803      	ldr	r3, [r0, #0]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
    8a68:	429a      	cmp	r2, r3
    8a6a:	d01b      	beq.n	8aa4 <net_send_data+0xb0>
	return net_if_ipv4_is_addr_bcast(iface, addr);
    8a6c:	f105 0110 	add.w	r1, r5, #16
    8a70:	4630      	mov	r0, r6
    8a72:	f7fb f875 	bl	3b60 <net_if_ipv4_is_addr_bcast>
		if (net_ipv4_is_addr_loopback(&NET_IPV4_HDR(pkt)->dst) ||
    8a76:	4601      	mov	r1, r0
    8a78:	b9a0      	cbnz	r0, 8aa4 <net_send_data+0xb0>
	return pkt->frags->data;
    8a7a:	6923      	ldr	r3, [r4, #16]
    8a7c:	689e      	ldr	r6, [r3, #8]
		     net_ipv4_is_my_addr(&NET_IPV4_HDR(pkt)->dst))) {
    8a7e:	f106 0510 	add.w	r5, r6, #16
	ret = net_if_ipv4_addr_lookup(addr, NULL) != NULL;
    8a82:	4628      	mov	r0, r5
    8a84:	f7fb f91c 	bl	3cc0 <net_if_ipv4_addr_lookup>
	if (!ret) {
    8a88:	2800      	cmp	r0, #0
    8a8a:	d1d8      	bne.n	8a3e <net_send_data+0x4a>
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
    8a8c:	f7fb fb58 	bl	4140 <net_ipv4_broadcast_address>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
    8a90:	6932      	ldr	r2, [r6, #16]
    8a92:	6803      	ldr	r3, [r0, #0]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
    8a94:	429a      	cmp	r2, r3
    8a96:	d0d2      	beq.n	8a3e <net_send_data+0x4a>
	return net_if_ipv4_is_addr_bcast(iface, addr);
    8a98:	4629      	mov	r1, r5
    8a9a:	2000      	movs	r0, #0
    8a9c:	f7fb f860 	bl	3b60 <net_if_ipv4_is_addr_bcast>
				     &NET_IPV4_HDR(pkt)->dst) == false &&
    8aa0:	2800      	cmp	r0, #0
    8aa2:	d1cc      	bne.n	8a3e <net_send_data+0x4a>
    8aa4:	6923      	ldr	r3, [r4, #16]
	return addr->s4_addr[0] == 127U;
    8aa6:	689b      	ldr	r3, [r3, #8]
		if (net_ipv4_is_addr_loopback(&NET_IPV4_HDR(pkt)->src)) {
    8aa8:	7b1b      	ldrb	r3, [r3, #12]
    8aaa:	2b7f      	cmp	r3, #127	; 0x7f
    8aac:	d0bf      	beq.n	8a2e <net_send_data+0x3a>
	if (net_if_send_data(net_pkt_iface(pkt), pkt) == NET_DROP) {
    8aae:	4621      	mov	r1, r4
    8ab0:	6a20      	ldr	r0, [r4, #32]
    8ab2:	f000 f895 	bl	8be0 <net_if_send_data>
		return -EIO;
    8ab6:	2802      	cmp	r0, #2
    8ab8:	bf14      	ite	ne
    8aba:	2000      	movne	r0, #0
    8abc:	f06f 0004 	mvneq.w	r0, #4
    8ac0:	e7b7      	b.n	8a32 <net_send_data+0x3e>
		return -ENODATA;
    8ac2:	f06f 004d 	mvn.w	r0, #77	; 0x4d
    8ac6:	e7b4      	b.n	8a32 <net_send_data+0x3e>
		return -EINVAL;
    8ac8:	f06f 0015 	mvn.w	r0, #21
    8acc:	e7b1      	b.n	8a32 <net_send_data+0x3e>

00008ace <net_ipv4_is_addr_mcast>:
	return (ntohl(UNALIGNED_GET(&addr->s_addr)) & 0xF0000000) == 0xE0000000;
    8ace:	6800      	ldr	r0, [r0, #0]
    8ad0:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
}
    8ad4:	f1a0 03e0 	sub.w	r3, r0, #224	; 0xe0
    8ad8:	4258      	negs	r0, r3
    8ada:	4158      	adcs	r0, r3
    8adc:	4770      	bx	lr

00008ade <net_if_l2>:
	if (!iface || !iface->if_dev) {
    8ade:	b110      	cbz	r0, 8ae6 <net_if_l2+0x8>
    8ae0:	6800      	ldr	r0, [r0, #0]
    8ae2:	b100      	cbz	r0, 8ae6 <net_if_l2+0x8>
	return iface->if_dev->l2;
    8ae4:	6840      	ldr	r0, [r0, #4]
}
    8ae6:	4770      	bx	lr

00008ae8 <net_context_send_cb>:
{
    8ae8:	b410      	push	{r4}
	if (!context) {
    8aea:	b128      	cbz	r0, 8af8 <net_context_send_cb+0x10>
	if (context->send_cb) {
    8aec:	6b44      	ldr	r4, [r0, #52]	; 0x34
    8aee:	b11c      	cbz	r4, 8af8 <net_context_send_cb+0x10>
		context->send_cb(context, status, context->user_data);
    8af0:	4623      	mov	r3, r4
    8af2:	6802      	ldr	r2, [r0, #0]
}
    8af4:	bc10      	pop	{r4}
		context->send_cb(context, status, context->user_data);
    8af6:	4718      	bx	r3
}
    8af8:	bc10      	pop	{r4}
    8afa:	4770      	bx	lr

00008afc <l2_flags_get>:
{
    8afc:	b510      	push	{r4, lr}
    8afe:	4603      	mov	r3, r0
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
    8b00:	f7ff ffed 	bl	8ade <net_if_l2>
    8b04:	b128      	cbz	r0, 8b12 <l2_flags_get+0x16>
    8b06:	68c2      	ldr	r2, [r0, #12]
    8b08:	b11a      	cbz	r2, 8b12 <l2_flags_get+0x16>
}
    8b0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		flags = net_if_l2(iface)->get_flags(iface);
    8b0e:	4618      	mov	r0, r3
    8b10:	4710      	bx	r2
}
    8b12:	2000      	movs	r0, #0
    8b14:	bd10      	pop	{r4, pc}

00008b16 <if_ipv4_get_addr>:
{
    8b16:	b538      	push	{r3, r4, r5, lr}
    8b18:	4615      	mov	r5, r2
	if (!iface) {
    8b1a:	4604      	mov	r4, r0
    8b1c:	b108      	cbz	r0, 8b22 <if_ipv4_get_addr+0xc>
	ipv4 = iface->config.ip.ipv4;
    8b1e:	6844      	ldr	r4, [r0, #4]
	if (!ipv4) {
    8b20:	b9cc      	cbnz	r4, 8b56 <if_ipv4_get_addr+0x40>
}
    8b22:	4620      	mov	r0, r4
    8b24:	bd38      	pop	{r3, r4, r5, pc}
		if (!ipv4->unicast[i].is_used ||
    8b26:	1c4a      	adds	r2, r1, #1
    8b28:	d003      	beq.n	8b32 <if_ipv4_get_addr+0x1c>
		    (addr_state != NET_ADDR_ANY_STATE &&
    8b2a:	f994 3015 	ldrsb.w	r3, [r4, #21]
    8b2e:	428b      	cmp	r3, r1
    8b30:	d10f      	bne.n	8b52 <if_ipv4_get_addr+0x3c>
		     ipv4->unicast[i].addr_state != addr_state) ||
    8b32:	8823      	ldrh	r3, [r4, #0]
    8b34:	2b01      	cmp	r3, #1
    8b36:	d10c      	bne.n	8b52 <if_ipv4_get_addr+0x3c>
		if (net_ipv4_is_ll_addr(&ipv4->unicast[i].address.in_addr)) {
    8b38:	3404      	adds	r4, #4
    8b3a:	4620      	mov	r0, r4
    8b3c:	f7fa fec8 	bl	38d0 <net_ipv4_is_ll_addr>
    8b40:	b118      	cbz	r0, 8b4a <if_ipv4_get_addr+0x34>
	return NULL;
    8b42:	2d00      	cmp	r5, #0
    8b44:	bf08      	it	eq
    8b46:	2400      	moveq	r4, #0
    8b48:	e7eb      	b.n	8b22 <if_ipv4_get_addr+0xc>
    8b4a:	2d00      	cmp	r5, #0
    8b4c:	bf18      	it	ne
    8b4e:	2400      	movne	r4, #0
    8b50:	e7e7      	b.n	8b22 <if_ipv4_get_addr+0xc>
    8b52:	2400      	movs	r4, #0
    8b54:	e7e5      	b.n	8b22 <if_ipv4_get_addr+0xc>
		if (!ipv4->unicast[i].is_used ||
    8b56:	7da3      	ldrb	r3, [r4, #22]
    8b58:	f3c3 0240 	ubfx	r2, r3, #1, #1
    8b5c:	079b      	lsls	r3, r3, #30
    8b5e:	d4e2      	bmi.n	8b26 <if_ipv4_get_addr+0x10>
	return NULL;
    8b60:	4614      	mov	r4, r2
    8b62:	e7de      	b.n	8b22 <if_ipv4_get_addr+0xc>

00008b64 <k_uptime_get_32>:
{
    8b64:	b508      	push	{r3, lr}
    8b66:	f001 fba3 	bl	a2b0 <z_impl_k_uptime_ticks>
}
    8b6a:	230a      	movs	r3, #10
    8b6c:	4358      	muls	r0, r3
    8b6e:	bd08      	pop	{r3, pc}

00008b70 <net_if_ipv4_addr_mask_cmp>:
	struct net_if_ipv4 *ipv4 = iface->config.ip.ipv4;
    8b70:	6843      	ldr	r3, [r0, #4]
{
    8b72:	b510      	push	{r4, lr}
	if (!ipv4) {
    8b74:	b18b      	cbz	r3, 8b9a <net_if_ipv4_addr_mask_cmp+0x2a>
		if (!ipv4->unicast[i].is_used ||
    8b76:	7d9c      	ldrb	r4, [r3, #22]
	subnet = UNALIGNED_GET(&addr->s_addr) & ipv4->netmask.s_addr;
    8b78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    8b7a:	6809      	ldr	r1, [r1, #0]
		if (!ipv4->unicast[i].is_used ||
    8b7c:	f3c4 0040 	ubfx	r0, r4, #1, #1
    8b80:	07a4      	lsls	r4, r4, #30
	subnet = UNALIGNED_GET(&addr->s_addr) & ipv4->netmask.s_addr;
    8b82:	ea01 0102 	and.w	r1, r1, r2
		if (!ipv4->unicast[i].is_used ||
    8b86:	d507      	bpl.n	8b98 <net_if_ipv4_addr_mask_cmp+0x28>
    8b88:	8818      	ldrh	r0, [r3, #0]
    8b8a:	2801      	cmp	r0, #1
    8b8c:	d105      	bne.n	8b9a <net_if_ipv4_addr_mask_cmp+0x2a>
		if ((ipv4->unicast[i].address.in_addr.s_addr &
    8b8e:	6858      	ldr	r0, [r3, #4]
    8b90:	4010      	ands	r0, r2
    8b92:	1a43      	subs	r3, r0, r1
    8b94:	4258      	negs	r0, r3
    8b96:	4158      	adcs	r0, r3
}
    8b98:	bd10      	pop	{r4, pc}
		return false;
    8b9a:	2000      	movs	r0, #0
    8b9c:	e7fc      	b.n	8b98 <net_if_ipv4_addr_mask_cmp+0x28>

00008b9e <ipv4_is_broadcast_address>:
{
    8b9e:	b538      	push	{r3, r4, r5, lr}
	struct net_if_ipv4 *ipv4 = iface->config.ip.ipv4;
    8ba0:	6844      	ldr	r4, [r0, #4]
{
    8ba2:	460d      	mov	r5, r1
	if (!ipv4) {
    8ba4:	b15c      	cbz	r4, 8bbe <ipv4_is_broadcast_address+0x20>
	if (!net_if_ipv4_addr_mask_cmp(iface, addr)) {
    8ba6:	f7ff ffe3 	bl	8b70 <net_if_ipv4_addr_mask_cmp>
    8baa:	b138      	cbz	r0, 8bbc <ipv4_is_broadcast_address+0x1e>
	if ((UNALIGNED_GET(&addr->s_addr) & ~ipv4->netmask.s_addr) ==
    8bac:	6b63      	ldr	r3, [r4, #52]	; 0x34
    8bae:	6828      	ldr	r0, [r5, #0]
    8bb0:	43da      	mvns	r2, r3
    8bb2:	ea20 0003 	bic.w	r0, r0, r3
    8bb6:	1a83      	subs	r3, r0, r2
    8bb8:	4258      	negs	r0, r3
    8bba:	4158      	adcs	r0, r3
}
    8bbc:	bd38      	pop	{r3, r4, r5, pc}
		return false;
    8bbe:	4620      	mov	r0, r4
    8bc0:	e7fc      	b.n	8bbc <ipv4_is_broadcast_address+0x1e>

00008bc2 <net_if_ipv4_get_ll>:
	return if_ipv4_get_addr(iface, addr_state, true);
    8bc2:	2201      	movs	r2, #1
    8bc4:	f7ff bfa7 	b.w	8b16 <if_ipv4_get_addr>

00008bc8 <net_if_ipv4_get_global_addr>:
	return if_ipv4_get_addr(iface, addr_state, false);
    8bc8:	2200      	movs	r2, #0
    8bca:	f7ff bfa4 	b.w	8b16 <if_ipv4_get_addr>

00008bce <net_if_recv_data>:
{
    8bce:	b510      	push	{r4, lr}
    8bd0:	4603      	mov	r3, r0
	return net_if_l2(iface)->recv(iface, pkt);
    8bd2:	f7ff ff84 	bl	8ade <net_if_l2>
}
    8bd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return net_if_l2(iface)->recv(iface, pkt);
    8bda:	6802      	ldr	r2, [r0, #0]
    8bdc:	4618      	mov	r0, r3
    8bde:	4710      	bx	r2

00008be0 <net_if_send_data>:
{
    8be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8be2:	460c      	mov	r4, r1
	return pkt->context;
    8be4:	69cf      	ldr	r7, [r1, #28]
	if (!net_if_flag_is_set(iface, NET_IF_UP) ||
    8be6:	2100      	movs	r1, #0
{
    8be8:	4605      	mov	r5, r0
	if (!net_if_flag_is_set(iface, NET_IF_UP) ||
    8bea:	f7fa fe7d 	bl	38e8 <net_if_flag_is_set>
    8bee:	b1e0      	cbz	r0, 8c2a <net_if_send_data+0x4a>
	    net_if_flag_is_set(iface, NET_IF_SUSPENDED)) {
    8bf0:	2104      	movs	r1, #4
    8bf2:	4628      	mov	r0, r5
    8bf4:	f7fa fe78 	bl	38e8 <net_if_flag_is_set>
	if (!net_if_flag_is_set(iface, NET_IF_UP) ||
    8bf8:	b9b8      	cbnz	r0, 8c2a <net_if_send_data+0x4a>
	if (IS_ENABLED(CONFIG_NET_OFFLOAD) && !net_if_l2(iface)) {
    8bfa:	4628      	mov	r0, r5
    8bfc:	f7ff ff6f 	bl	8ade <net_if_l2>
    8c00:	b320      	cbz	r0, 8c4c <net_if_send_data+0x6c>
	if (!net_if_flag_is_set(iface, NET_IF_POINTOPOINT) &&
    8c02:	2101      	movs	r1, #1
    8c04:	4628      	mov	r0, r5
    8c06:	f7fa fe6f 	bl	38e8 <net_if_flag_is_set>
    8c0a:	b940      	cbnz	r0, 8c1e <net_if_send_data+0x3e>
    8c0c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    8c0e:	b933      	cbnz	r3, 8c1e <net_if_send_data+0x3e>
	return &iface->if_dev->link_addr;
    8c10:	6a23      	ldr	r3, [r4, #32]
    8c12:	681b      	ldr	r3, [r3, #0]
		net_pkt_lladdr_src(pkt)->addr = net_pkt_lladdr_if(pkt)->addr;
    8c14:	691a      	ldr	r2, [r3, #16]
    8c16:	62a2      	str	r2, [r4, #40]	; 0x28
		net_pkt_lladdr_src(pkt)->len = net_pkt_lladdr_if(pkt)->len;
    8c18:	7d1b      	ldrb	r3, [r3, #20]
    8c1a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		net_if_queue_tx(iface, pkt);
    8c1e:	4628      	mov	r0, r5
    8c20:	4621      	mov	r1, r4
    8c22:	f7fa ff89 	bl	3b38 <net_if_queue_tx>
    8c26:	2000      	movs	r0, #0
}
    8c28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		status = -ENETDOWN;
    8c2a:	f06f 063d 	mvn.w	r6, #61	; 0x3d
		if (context) {
    8c2e:	b11f      	cbz	r7, 8c38 <net_if_send_data+0x58>
			net_context_send_cb(context, status);
    8c30:	4631      	mov	r1, r6
    8c32:	4638      	mov	r0, r7
    8c34:	f7ff ff58 	bl	8ae8 <net_context_send_cb>
		if (dst->addr) {
    8c38:	6b23      	ldr	r3, [r4, #48]	; 0x30
    8c3a:	b12b      	cbz	r3, 8c48 <net_if_send_data+0x68>
			net_if_call_link_cb(iface, dst, status);
    8c3c:	4632      	mov	r2, r6
    8c3e:	4628      	mov	r0, r5
    8c40:	f104 0130 	add.w	r1, r4, #48	; 0x30
    8c44:	f7fb f878 	bl	3d38 <net_if_call_link_cb>
    8c48:	2002      	movs	r0, #2
    8c4a:	e7ed      	b.n	8c28 <net_if_send_data+0x48>
	int status = -EIO;
    8c4c:	f06f 0604 	mvn.w	r6, #4
    8c50:	e7ed      	b.n	8c2e <net_if_send_data+0x4e>

00008c52 <net_if_need_calc_tx_checksum>:
	return need_calc_checksum(iface, ETHERNET_HW_TX_CHKSUM_OFFLOAD);
    8c52:	2101      	movs	r1, #1
    8c54:	f7fa bf0c 	b.w	3a70 <need_calc_checksum>

00008c58 <net_if_need_calc_rx_checksum>:
	return need_calc_checksum(iface, ETHERNET_HW_RX_CHKSUM_OFFLOAD);
    8c58:	2102      	movs	r1, #2
    8c5a:	f7fa bf09 	b.w	3a70 <need_calc_checksum>

00008c5e <calc_chksum>:
{
    8c5e:	b570      	push	{r4, r5, r6, lr}
	while (data < end) {
    8c60:	460c      	mov	r4, r1
	end = data + len - 1;
    8c62:	3a01      	subs	r2, #1
    8c64:	188d      	adds	r5, r1, r2
	while (data < end) {
    8c66:	42ac      	cmp	r4, r5
    8c68:	d315      	bcc.n	8c96 <calc_chksum+0x38>
    8c6a:	f1c1 0301 	rsb	r3, r1, #1
    8c6e:	442b      	add	r3, r5
    8c70:	f023 0301 	bic.w	r3, r3, #1
    8c74:	1e4c      	subs	r4, r1, #1
    8c76:	42a5      	cmp	r5, r4
    8c78:	bf38      	it	cc
    8c7a:	2300      	movcc	r3, #0
    8c7c:	440b      	add	r3, r1
	if (data == end) {
    8c7e:	42ab      	cmp	r3, r5
    8c80:	d108      	bne.n	8c94 <calc_chksum+0x36>
		tmp = data[0] << 8;
    8c82:	5c8b      	ldrb	r3, [r1, r2]
		sum += tmp;
    8c84:	eb00 2003 	add.w	r0, r0, r3, lsl #8
    8c88:	b280      	uxth	r0, r0
		if (sum < tmp) {
    8c8a:	ebb0 2f03 	cmp.w	r0, r3, lsl #8
			sum++;
    8c8e:	bf3c      	itt	cc
    8c90:	3001      	addcc	r0, #1
    8c92:	b280      	uxthcc	r0, r0
}
    8c94:	bd70      	pop	{r4, r5, r6, pc}
		tmp = (data[0] << 8) + data[1];
    8c96:	7826      	ldrb	r6, [r4, #0]
    8c98:	7863      	ldrb	r3, [r4, #1]
		data += 2;
    8c9a:	3402      	adds	r4, #2
		tmp = (data[0] << 8) + data[1];
    8c9c:	eb03 2306 	add.w	r3, r3, r6, lsl #8
    8ca0:	b29b      	uxth	r3, r3
		sum += tmp;
    8ca2:	4418      	add	r0, r3
    8ca4:	b280      	uxth	r0, r0
		if (sum < tmp) {
    8ca6:	4283      	cmp	r3, r0
			sum++;
    8ca8:	bf84      	itt	hi
    8caa:	3001      	addhi	r0, #1
    8cac:	b280      	uxthhi	r0, r0
		data += 2;
    8cae:	e7da      	b.n	8c66 <calc_chksum+0x8>

00008cb0 <net_byte_to_hex>:
{
    8cb0:	b530      	push	{r4, r5, lr}
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
    8cb2:	090d      	lsrs	r5, r1, #4
		if (i == 0 && !pad && !val) {
    8cb4:	b1bb      	cbz	r3, 8ce6 <net_byte_to_hex+0x36>
		if (val < 10) {
    8cb6:	2d09      	cmp	r5, #9
			*ptr++ = (char) (val - 10 + base);
    8cb8:	b26b      	sxtb	r3, r5
    8cba:	bf86      	itte	hi
    8cbc:	f1a2 050a 	subhi.w	r5, r2, #10
    8cc0:	195b      	addhi	r3, r3, r5
			*ptr++ = (char) (val + '0');
    8cc2:	3330      	addls	r3, #48	; 0x30
			*ptr++ = (char) (val - 10 + base);
    8cc4:	1c44      	adds	r4, r0, #1
			*ptr++ = (char) (val + '0');
    8cc6:	7003      	strb	r3, [r0, #0]
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
    8cc8:	f001 030f 	and.w	r3, r1, #15
			*ptr++ = (char) (val - 10 + base);
    8ccc:	4619      	mov	r1, r3
		if (val < 10) {
    8cce:	2b09      	cmp	r3, #9
	*ptr = '\0';
    8cd0:	f04f 0300 	mov.w	r3, #0
			*ptr++ = (char) (val - 10 + base);
    8cd4:	bf83      	ittte	hi
    8cd6:	3a0a      	subhi	r2, #10
    8cd8:	1889      	addhi	r1, r1, r2
    8cda:	b2c9      	uxtbhi	r1, r1
			*ptr++ = (char) (val + '0');
    8cdc:	3130      	addls	r1, #48	; 0x30
    8cde:	7021      	strb	r1, [r4, #0]
	*ptr = '\0';
    8ce0:	7063      	strb	r3, [r4, #1]
			*ptr++ = (char) (val - 10 + base);
    8ce2:	1c60      	adds	r0, r4, #1
}
    8ce4:	bd30      	pop	{r4, r5, pc}
		if (i == 0 && !pad && !val) {
    8ce6:	2d00      	cmp	r5, #0
    8ce8:	d1e5      	bne.n	8cb6 <net_byte_to_hex+0x6>
    8cea:	4604      	mov	r4, r0
    8cec:	e7ec      	b.n	8cc8 <net_byte_to_hex+0x18>

00008cee <net_calc_chksum>:
	return pkt->family;
    8cee:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
{
    8cf2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (IS_ENABLED(CONFIG_NET_IPV4) &&
    8cf6:	f3c3 0342 	ubfx	r3, r3, #1, #3
    8cfa:	2b01      	cmp	r3, #1
{
    8cfc:	4605      	mov	r5, r0
	if (IS_ENABLED(CONFIG_NET_IPV4) &&
    8cfe:	d179      	bne.n	8df4 <net_calc_chksum+0x106>
		if (proto != IPPROTO_ICMP) {
    8d00:	2901      	cmp	r1, #1
    8d02:	d050      	beq.n	8da6 <net_calc_chksum+0xb8>
	size_t bytes = 0;
    8d04:	2200      	movs	r2, #0
    8d06:	6903      	ldr	r3, [r0, #16]
	while (buf) {
    8d08:	2b00      	cmp	r3, #0
    8d0a:	d148      	bne.n	8d9e <net_calc_chksum+0xb0>
			len = 2 * sizeof(struct in_addr);
    8d0c:	f04f 0908 	mov.w	r9, #8
				net_pkt_ip_hdr_len(pkt) -
    8d10:	f895 4038 	ldrb.w	r4, [r5, #56]	; 0x38
				net_pkt_ipv4_opts_len(pkt) + proto;
    8d14:	f895 303e 	ldrb.w	r3, [r5, #62]	; 0x3e
			sum = net_pkt_get_len(pkt) -
    8d18:	441c      	add	r4, r3
    8d1a:	1b0c      	subs	r4, r1, r4
    8d1c:	4414      	add	r4, r2
    8d1e:	b2a4      	uxth	r4, r4
	net_pkt_cursor_init(pkt);
    8d20:	4628      	mov	r0, r5
	backup->pos = pkt->cursor.pos;
    8d22:	e9d5 8705 	ldrd	r8, r7, [r5, #20]
    8d26:	f000 f9d7 	bl	90d8 <net_pkt_cursor_init>
	return pkt->overwrite;
    8d2a:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
	net_pkt_skip(pkt, net_pkt_ip_hdr_len(pkt) - len);
    8d2e:	f895 1038 	ldrb.w	r1, [r5, #56]	; 0x38
    8d32:	f003 0601 	and.w	r6, r3, #1
	pkt->overwrite = overwrite;
    8d36:	f043 0301 	orr.w	r3, r3, #1
    8d3a:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
    8d3e:	eba1 0109 	sub.w	r1, r1, r9
    8d42:	4628      	mov	r0, r5
    8d44:	f000 fa2d 	bl	91a2 <net_pkt_skip>
	sum = calc_chksum(sum, pkt->cursor.pos, len);
    8d48:	69a9      	ldr	r1, [r5, #24]
    8d4a:	464a      	mov	r2, r9
    8d4c:	4620      	mov	r0, r4
    8d4e:	f7ff ff86 	bl	8c5e <calc_chksum>
	net_pkt_skip(pkt, len + net_pkt_ip_opts_len(pkt));
    8d52:	f895 103e 	ldrb.w	r1, [r5, #62]	; 0x3e
	sum = calc_chksum(sum, pkt->cursor.pos, len);
    8d56:	4604      	mov	r4, r0
	net_pkt_skip(pkt, len + net_pkt_ip_opts_len(pkt));
    8d58:	4449      	add	r1, r9
    8d5a:	4628      	mov	r0, r5
    8d5c:	f000 fa21 	bl	91a2 <net_pkt_skip>
	if (!cur->buf || !cur->pos) {
    8d60:	696b      	ldr	r3, [r5, #20]
    8d62:	b163      	cbz	r3, 8d7e <net_calc_chksum+0x90>
    8d64:	69aa      	ldr	r2, [r5, #24]
    8d66:	b152      	cbz	r2, 8d7e <net_calc_chksum+0x90>
	len = cur->buf->len - (cur->pos - cur->buf->data);
    8d68:	f8b3 900c 	ldrh.w	r9, [r3, #12]
    8d6c:	689b      	ldr	r3, [r3, #8]
    8d6e:	1ad2      	subs	r2, r2, r3
    8d70:	eba9 0902 	sub.w	r9, r9, r2
	while (cur->buf) {
    8d74:	f8d5 a014 	ldr.w	sl, [r5, #20]
    8d78:	f1ba 0f00 	cmp.w	sl, #0
    8d7c:	d116      	bne.n	8dac <net_calc_chksum+0xbe>
	sum = (sum == 0U) ? 0xffff : htons(sum);
    8d7e:	2c00      	cmp	r4, #0
    8d80:	d035      	beq.n	8dee <net_calc_chksum+0x100>
    8d82:	ba64      	rev16	r4, r4
    8d84:	b2a4      	uxth	r4, r4
	return ~sum;
    8d86:	43e0      	mvns	r0, r4
    8d88:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
	pkt->cursor.pos = backup->pos;
    8d8c:	e9c5 8705 	strd	r8, r7, [r5, #20]
	pkt->overwrite = overwrite;
    8d90:	f366 0300 	bfi	r3, r6, #0, #1
    8d94:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
    8d98:	b280      	uxth	r0, r0
}
    8d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bytes += buf->len;
    8d9e:	8998      	ldrh	r0, [r3, #12]
		buf = buf->frags;
    8da0:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
    8da2:	4402      	add	r2, r0
		buf = buf->frags;
    8da4:	e7b0      	b.n	8d08 <net_calc_chksum+0x1a>
	uint16_t sum = 0U;
    8da6:	2400      	movs	r4, #0
	size_t len = 0U;
    8da8:	46a1      	mov	r9, r4
    8daa:	e7b9      	b.n	8d20 <net_calc_chksum+0x32>
		sum = calc_chksum(sum, cur->pos, len);
    8dac:	4620      	mov	r0, r4
    8dae:	464a      	mov	r2, r9
    8db0:	69a9      	ldr	r1, [r5, #24]
    8db2:	f7ff ff54 	bl	8c5e <calc_chksum>
		cur->buf = cur->buf->frags;
    8db6:	f8da 3000 	ldr.w	r3, [sl]
		sum = calc_chksum(sum, cur->pos, len);
    8dba:	4604      	mov	r4, r0
		cur->buf = cur->buf->frags;
    8dbc:	616b      	str	r3, [r5, #20]
		if (!cur->buf || !cur->buf->len) {
    8dbe:	2b00      	cmp	r3, #0
    8dc0:	d0dd      	beq.n	8d7e <net_calc_chksum+0x90>
    8dc2:	899a      	ldrh	r2, [r3, #12]
    8dc4:	2a00      	cmp	r2, #0
    8dc6:	d0da      	beq.n	8d7e <net_calc_chksum+0x90>
		cur->pos = cur->buf->data;
    8dc8:	689b      	ldr	r3, [r3, #8]
		if (len % 2) {
    8dca:	f019 0f01 	tst.w	r9, #1
		cur->pos = cur->buf->data;
    8dce:	61ab      	str	r3, [r5, #24]
		if (len % 2) {
    8dd0:	d00b      	beq.n	8dea <net_calc_chksum+0xfc>
			sum += *cur->pos;
    8dd2:	7819      	ldrb	r1, [r3, #0]
			cur->pos++;
    8dd4:	3301      	adds	r3, #1
			sum += *cur->pos;
    8dd6:	440c      	add	r4, r1
    8dd8:	b2a4      	uxth	r4, r4
			if (sum < *cur->pos) {
    8dda:	42a1      	cmp	r1, r4
				sum++;
    8ddc:	bf84      	itt	hi
    8dde:	3401      	addhi	r4, #1
    8de0:	b2a4      	uxthhi	r4, r4
			cur->pos++;
    8de2:	61ab      	str	r3, [r5, #24]
			len = cur->buf->len - 1;
    8de4:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
    8de8:	e7c4      	b.n	8d74 <net_calc_chksum+0x86>
			len = cur->buf->len;
    8dea:	4691      	mov	r9, r2
    8dec:	e7c2      	b.n	8d74 <net_calc_chksum+0x86>
	sum = (sum == 0U) ? 0xffff : htons(sum);
    8dee:	f64f 74ff 	movw	r4, #65535	; 0xffff
    8df2:	e7c8      	b.n	8d86 <net_calc_chksum+0x98>
		return 0;
    8df4:	2000      	movs	r0, #0
    8df6:	e7d0      	b.n	8d9a <net_calc_chksum+0xac>

00008df8 <net_calc_chksum_ipv4>:
{
    8df8:	b508      	push	{r3, lr}
			  net_pkt_ipv4_opts_len(pkt));
    8dfa:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
			  net_pkt_ip_hdr_len(pkt) +
    8dfe:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
	sum = calc_chksum(0, pkt->buffer->data,
    8e02:	6903      	ldr	r3, [r0, #16]
    8e04:	440a      	add	r2, r1
    8e06:	2000      	movs	r0, #0
    8e08:	6899      	ldr	r1, [r3, #8]
    8e0a:	f7ff ff28 	bl	8c5e <calc_chksum>
	sum = (sum == 0U) ? 0xffff : htons(sum);
    8e0e:	b120      	cbz	r0, 8e1a <net_calc_chksum_ipv4+0x22>
    8e10:	ba40      	rev16	r0, r0
    8e12:	b280      	uxth	r0, r0
	return ~sum;
    8e14:	43c0      	mvns	r0, r0
}
    8e16:	b280      	uxth	r0, r0
    8e18:	bd08      	pop	{r3, pc}
	sum = (sum == 0U) ? 0xffff : htons(sum);
    8e1a:	f64f 70ff 	movw	r0, #65535	; 0xffff
    8e1e:	e7f9      	b.n	8e14 <net_calc_chksum_ipv4+0x1c>

00008e20 <pkt_cursor_jump>:
		pkt->cursor.pos = NULL;
	}
}

static void pkt_cursor_jump(struct net_pkt *pkt, bool write)
{
    8e20:	b538      	push	{r3, r4, r5, lr}
    8e22:	4604      	mov	r4, r0
    8e24:	460d      	mov	r5, r1
	struct net_pkt_cursor *cursor = &pkt->cursor;

	cursor->buf = cursor->buf->frags;
    8e26:	6943      	ldr	r3, [r0, #20]
	while (cursor->buf) {
		const size_t len =
			write ? net_buf_max_len(cursor->buf) : cursor->buf->len;

		if (!len) {
			cursor->buf = cursor->buf->frags;
    8e28:	681b      	ldr	r3, [r3, #0]
    8e2a:	6163      	str	r3, [r4, #20]
	while (cursor->buf) {
    8e2c:	6960      	ldr	r0, [r4, #20]
    8e2e:	b130      	cbz	r0, 8e3e <pkt_cursor_jump+0x1e>
			write ? net_buf_max_len(cursor->buf) : cursor->buf->len;
    8e30:	b14d      	cbz	r5, 8e46 <pkt_cursor_jump+0x26>
	return net_buf_simple_max_len(&buf->b);
    8e32:	3008      	adds	r0, #8
    8e34:	f7ff fb58 	bl	84e8 <net_buf_simple_max_len>
			cursor->buf = cursor->buf->frags;
    8e38:	6963      	ldr	r3, [r4, #20]
		if (!len) {
    8e3a:	2800      	cmp	r0, #0
    8e3c:	d0f4      	beq.n	8e28 <pkt_cursor_jump+0x8>
		} else {
			break;
		}
	}

	if (cursor->buf) {
    8e3e:	6963      	ldr	r3, [r4, #20]
    8e40:	b91b      	cbnz	r3, 8e4a <pkt_cursor_jump+0x2a>
    8e42:	61a3      	str	r3, [r4, #24]
		cursor->pos = cursor->buf->data;
	} else {
		cursor->pos = NULL;
	}
}
    8e44:	bd38      	pop	{r3, r4, r5, pc}
			write ? net_buf_max_len(cursor->buf) : cursor->buf->len;
    8e46:	8980      	ldrh	r0, [r0, #12]
    8e48:	e7f6      	b.n	8e38 <pkt_cursor_jump+0x18>
		cursor->pos = cursor->buf->data;
    8e4a:	689b      	ldr	r3, [r3, #8]
    8e4c:	e7f9      	b.n	8e42 <pkt_cursor_jump+0x22>

00008e4e <pkt_cursor_advance>:

static void pkt_cursor_advance(struct net_pkt *pkt, bool write)
{
    8e4e:	b538      	push	{r3, r4, r5, lr}
    8e50:	4604      	mov	r4, r0
	struct net_pkt_cursor *cursor = &pkt->cursor;
	size_t len;

	if (!cursor->buf) {
    8e52:	6940      	ldr	r0, [r0, #20]
{
    8e54:	460d      	mov	r5, r1
	if (!cursor->buf) {
    8e56:	b188      	cbz	r0, 8e7c <pkt_cursor_advance+0x2e>
		return;
	}

	len = write ? net_buf_max_len(cursor->buf) : cursor->buf->len;
    8e58:	b171      	cbz	r1, 8e78 <pkt_cursor_advance+0x2a>
    8e5a:	3008      	adds	r0, #8
    8e5c:	f7ff fb44 	bl	84e8 <net_buf_simple_max_len>
	if ((cursor->pos - cursor->buf->data) == len) {
    8e60:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
    8e64:	6892      	ldr	r2, [r2, #8]
    8e66:	1a9b      	subs	r3, r3, r2
    8e68:	4283      	cmp	r3, r0
    8e6a:	d107      	bne.n	8e7c <pkt_cursor_advance+0x2e>
		pkt_cursor_jump(pkt, write);
    8e6c:	4629      	mov	r1, r5
    8e6e:	4620      	mov	r0, r4
	}
}
    8e70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		pkt_cursor_jump(pkt, write);
    8e74:	f7ff bfd4 	b.w	8e20 <pkt_cursor_jump>
	len = write ? net_buf_max_len(cursor->buf) : cursor->buf->len;
    8e78:	8980      	ldrh	r0, [r0, #12]
    8e7a:	e7f1      	b.n	8e60 <pkt_cursor_advance+0x12>
}
    8e7c:	bd38      	pop	{r3, r4, r5, pc}

00008e7e <pkt_cursor_update>:

static void pkt_cursor_update(struct net_pkt *pkt,
			      size_t length, bool write)
{
    8e7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8e80:	4604      	mov	r4, r0
	return pkt->overwrite;
    8e82:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
    8e86:	4616      	mov	r6, r2
	struct net_pkt_cursor *cursor = &pkt->cursor;
	size_t len;

	if (net_pkt_is_being_overwritten(pkt)) {
    8e88:	07da      	lsls	r2, r3, #31
{
    8e8a:	460f      	mov	r7, r1
		write = false;
	}

	len = write ? net_buf_max_len(cursor->buf) : cursor->buf->len;
    8e8c:	6940      	ldr	r0, [r0, #20]
	if (net_pkt_is_being_overwritten(pkt)) {
    8e8e:	d415      	bmi.n	8ebc <pkt_cursor_update+0x3e>
	len = write ? net_buf_max_len(cursor->buf) : cursor->buf->len;
    8e90:	b1a6      	cbz	r6, 8ebc <pkt_cursor_update+0x3e>
    8e92:	3008      	adds	r0, #8
    8e94:	f7ff fb28 	bl	84e8 <net_buf_simple_max_len>
    8e98:	4605      	mov	r5, r0
	if (length + (cursor->pos - cursor->buf->data) == len &&
    8e9a:	e9d4 0305 	ldrd	r0, r3, [r4, #20]
    8e9e:	6882      	ldr	r2, [r0, #8]
    8ea0:	1a9b      	subs	r3, r3, r2
    8ea2:	443b      	add	r3, r7
    8ea4:	42ab      	cmp	r3, r5
    8ea6:	d111      	bne.n	8ecc <pkt_cursor_update+0x4e>
    8ea8:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
    8eac:	07db      	lsls	r3, r3, #31
    8eae:	d408      	bmi.n	8ec2 <pkt_cursor_update+0x44>
	    !(net_pkt_is_being_overwritten(pkt) &&
	      len < net_buf_max_len(cursor->buf))) {
		pkt_cursor_jump(pkt, write);
    8eb0:	4631      	mov	r1, r6
    8eb2:	4620      	mov	r0, r4
	} else {
		cursor->pos += length;
	}
}
    8eb4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		pkt_cursor_jump(pkt, write);
    8eb8:	f7ff bfb2 	b.w	8e20 <pkt_cursor_jump>
	len = write ? net_buf_max_len(cursor->buf) : cursor->buf->len;
    8ebc:	2600      	movs	r6, #0
    8ebe:	8985      	ldrh	r5, [r0, #12]
    8ec0:	e7eb      	b.n	8e9a <pkt_cursor_update+0x1c>
    8ec2:	3008      	adds	r0, #8
    8ec4:	f7ff fb10 	bl	84e8 <net_buf_simple_max_len>
	    !(net_pkt_is_being_overwritten(pkt) &&
    8ec8:	42a8      	cmp	r0, r5
    8eca:	d9f1      	bls.n	8eb0 <pkt_cursor_update+0x32>
		cursor->pos += length;
    8ecc:	69a1      	ldr	r1, [r4, #24]
    8ece:	4439      	add	r1, r7
    8ed0:	61a1      	str	r1, [r4, #24]
}
    8ed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00008ed4 <net_pkt_get_len.isra.0>:
static inline size_t net_pkt_get_len(struct net_pkt *pkt)
    8ed4:	4603      	mov	r3, r0
	size_t bytes = 0;
    8ed6:	2000      	movs	r0, #0
	while (buf) {
    8ed8:	b903      	cbnz	r3, 8edc <net_pkt_get_len.isra.0+0x8>
}
    8eda:	4770      	bx	lr
		bytes += buf->len;
    8edc:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
    8ede:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
    8ee0:	4410      	add	r0, r2
		buf = buf->frags;
    8ee2:	e7f9      	b.n	8ed8 <net_pkt_get_len.isra.0+0x4>

00008ee4 <net_pkt_cursor_operate>:

/* Internal function that does all operation (skip/read/write/memset) */
static int net_pkt_cursor_operate(struct net_pkt *pkt,
				  void *data, size_t length,
				  bool copy, bool write)
{
    8ee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8ee8:	4604      	mov	r4, r0
    8eea:	460f      	mov	r7, r1
    8eec:	4616      	mov	r6, r2
    8eee:	4699      	mov	r9, r3
    8ef0:	f89d 8020 	ldrb.w	r8, [sp, #32]
	/* We use such variable to avoid lengthy lines */
	struct net_pkt_cursor *c_op = &pkt->cursor;

	while (c_op->buf && length) {
    8ef4:	6963      	ldr	r3, [r4, #20]
    8ef6:	2b00      	cmp	r3, #0
    8ef8:	d05a      	beq.n	8fb0 <net_pkt_cursor_operate+0xcc>
    8efa:	b90e      	cbnz	r6, 8f00 <net_pkt_cursor_operate+0x1c>
	if (length) {
		NET_DBG("Still some length to go %zu", length);
		return -ENOBUFS;
	}

	return 0;
    8efc:	4630      	mov	r0, r6
    8efe:	e00d      	b.n	8f1c <net_pkt_cursor_operate+0x38>
	return pkt->overwrite;
    8f00:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
		pkt_cursor_advance(pkt, net_pkt_is_being_overwritten(pkt) ?
    8f04:	4620      	mov	r0, r4
    8f06:	f013 0f01 	tst.w	r3, #1
    8f0a:	bf0c      	ite	eq
    8f0c:	4641      	moveq	r1, r8
    8f0e:	2100      	movne	r1, #0
    8f10:	f7ff ff9d 	bl	8e4e <pkt_cursor_advance>
		if (c_op->buf == NULL) {
    8f14:	6960      	ldr	r0, [r4, #20]
    8f16:	b918      	cbnz	r0, 8f20 <net_pkt_cursor_operate+0x3c>
		return -ENOBUFS;
    8f18:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    8f1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (write && !net_pkt_is_being_overwritten(pkt)) {
    8f20:	f1b8 0f00 	cmp.w	r8, #0
    8f24:	d034      	beq.n	8f90 <net_pkt_cursor_operate+0xac>
    8f26:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
    8f2a:	07da      	lsls	r2, r3, #31
    8f2c:	d430      	bmi.n	8f90 <net_pkt_cursor_operate+0xac>
	return net_buf_simple_max_len(&buf->b);
    8f2e:	3008      	adds	r0, #8
    8f30:	f7ff fada 	bl	84e8 <net_buf_simple_max_len>
				(c_op->pos - c_op->buf->data);
    8f34:	e9d4 3505 	ldrd	r3, r5, [r4, #20]
    8f38:	689b      	ldr	r3, [r3, #8]
    8f3a:	1aed      	subs	r5, r5, r3
			d_len = net_buf_max_len(c_op->buf) -
    8f3c:	1b45      	subs	r5, r0, r5
		if (!d_len) {
    8f3e:	2d00      	cmp	r5, #0
    8f40:	d0ea      	beq.n	8f18 <net_pkt_cursor_operate+0x34>
		if (length < d_len) {
    8f42:	42b5      	cmp	r5, r6
    8f44:	bf28      	it	cs
    8f46:	4635      	movcs	r5, r6
		if (copy) {
    8f48:	f1b9 0f00 	cmp.w	r9, #0
    8f4c:	d028      	beq.n	8fa0 <net_pkt_cursor_operate+0xbc>
			memcpy(write ? c_op->pos : data,
    8f4e:	69a0      	ldr	r0, [r4, #24]
    8f50:	f1b8 0f00 	cmp.w	r8, #0
    8f54:	d122      	bne.n	8f9c <net_pkt_cursor_operate+0xb8>
    8f56:	4601      	mov	r1, r0
    8f58:	4638      	mov	r0, r7
    8f5a:	462a      	mov	r2, r5
    8f5c:	f7ff fa34 	bl	83c8 <memcpy>
		if (write && !net_pkt_is_being_overwritten(pkt)) {
    8f60:	f1b8 0f00 	cmp.w	r8, #0
    8f64:	d008      	beq.n	8f78 <net_pkt_cursor_operate+0x94>
    8f66:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
    8f6a:	07db      	lsls	r3, r3, #31
    8f6c:	d404      	bmi.n	8f78 <net_pkt_cursor_operate+0x94>
	return net_buf_simple_add(&buf->b, len);
    8f6e:	6960      	ldr	r0, [r4, #20]
    8f70:	4629      	mov	r1, r5
    8f72:	3008      	adds	r0, #8
    8f74:	f7fa f942 	bl	31fc <net_buf_simple_add>
		pkt_cursor_update(pkt, len, write);
    8f78:	4642      	mov	r2, r8
    8f7a:	4629      	mov	r1, r5
    8f7c:	4620      	mov	r0, r4
    8f7e:	f7ff ff7e 	bl	8e7e <pkt_cursor_update>
		if (copy && data) {
    8f82:	f1b9 0f00 	cmp.w	r9, #0
    8f86:	d001      	beq.n	8f8c <net_pkt_cursor_operate+0xa8>
    8f88:	b107      	cbz	r7, 8f8c <net_pkt_cursor_operate+0xa8>
			data = (uint8_t *) data + len;
    8f8a:	442f      	add	r7, r5
		length -= len;
    8f8c:	1b76      	subs	r6, r6, r5
    8f8e:	e7b1      	b.n	8ef4 <net_pkt_cursor_operate+0x10>
			d_len = c_op->buf->len - (c_op->pos - c_op->buf->data);
    8f90:	8985      	ldrh	r5, [r0, #12]
    8f92:	69a3      	ldr	r3, [r4, #24]
    8f94:	6880      	ldr	r0, [r0, #8]
    8f96:	1a1b      	subs	r3, r3, r0
    8f98:	1aed      	subs	r5, r5, r3
    8f9a:	e7d0      	b.n	8f3e <net_pkt_cursor_operate+0x5a>
    8f9c:	4639      	mov	r1, r7
    8f9e:	e7dc      	b.n	8f5a <net_pkt_cursor_operate+0x76>
		} else if (data) {
    8fa0:	2f00      	cmp	r7, #0
    8fa2:	d0dd      	beq.n	8f60 <net_pkt_cursor_operate+0x7c>
			memset(c_op->pos, *(int *)data, len);
    8fa4:	462a      	mov	r2, r5
    8fa6:	6839      	ldr	r1, [r7, #0]
    8fa8:	69a0      	ldr	r0, [r4, #24]
    8faa:	f7ff fa38 	bl	841e <memset>
    8fae:	e7d7      	b.n	8f60 <net_pkt_cursor_operate+0x7c>
	if (length) {
    8fb0:	2e00      	cmp	r6, #0
    8fb2:	d0a3      	beq.n	8efc <net_pkt_cursor_operate+0x18>
    8fb4:	e7b0      	b.n	8f18 <net_pkt_cursor_operate+0x34>

00008fb6 <net_pkt_get_reserve_data>:
{
    8fb6:	b570      	push	{r4, r5, r6, lr}
    8fb8:	4604      	mov	r4, r0
    8fba:	4616      	mov	r6, r2
    8fbc:	461d      	mov	r5, r3
	if (k_is_in_isr()) {
    8fbe:	f001 f90b 	bl	a1d8 <k_is_in_isr>
    8fc2:	b130      	cbz	r0, 8fd2 <net_pkt_get_reserve_data+0x1c>
	return net_buf_alloc_fixed(pool, timeout);
    8fc4:	2200      	movs	r2, #0
    8fc6:	2300      	movs	r3, #0
    8fc8:	4620      	mov	r0, r4
}
    8fca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8fce:	f7ff ba4d 	b.w	846c <net_buf_alloc_fixed>
    8fd2:	4632      	mov	r2, r6
    8fd4:	462b      	mov	r3, r5
    8fd6:	e7f7      	b.n	8fc8 <net_pkt_get_reserve_data+0x12>

00008fd8 <net_pkt_ref>:
{
    8fd8:	b510      	push	{r4, lr}
		ref = pkt ? atomic_get(&pkt->atomic_ref) : 0;
    8fda:	f100 0324 	add.w	r3, r0, #36	; 0x24
    8fde:	b1a8      	cbz	r0, 900c <net_pkt_ref+0x34>
    8fe0:	f3bf 8f5b 	dmb	ish
    8fe4:	681a      	ldr	r2, [r3, #0]
    8fe6:	f3bf 8f5b 	dmb	ish
		if (!ref) {
    8fea:	b17a      	cbz	r2, 900c <net_pkt_ref+0x34>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    8fec:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&pkt->atomic_ref, ref, ref + 1));
    8ff0:	1c51      	adds	r1, r2, #1
    8ff2:	e853 4f00 	ldrex	r4, [r3]
    8ff6:	4294      	cmp	r4, r2
    8ff8:	d104      	bne.n	9004 <net_pkt_ref+0x2c>
    8ffa:	e843 1c00 	strex	ip, r1, [r3]
    8ffe:	f1bc 0f00 	cmp.w	ip, #0
    9002:	d1f6      	bne.n	8ff2 <net_pkt_ref+0x1a>
    9004:	f3bf 8f5b 	dmb	ish
    9008:	d1e9      	bne.n	8fde <net_pkt_ref+0x6>
}
    900a:	bd10      	pop	{r4, pc}
			return NULL;
    900c:	2000      	movs	r0, #0
    900e:	e7fc      	b.n	900a <net_pkt_ref+0x32>

00009010 <net_pkt_frag_unref>:
	if (!frag) {
    9010:	b108      	cbz	r0, 9016 <net_pkt_frag_unref+0x6>
	net_buf_unref(frag);
    9012:	f7fa b847 	b.w	30a4 <net_buf_unref>
}
    9016:	4770      	bx	lr

00009018 <net_pkt_unref>:
{
    9018:	b507      	push	{r0, r1, r2, lr}
    901a:	9001      	str	r0, [sp, #4]
	if (!pkt) {
    901c:	b318      	cbz	r0, 9066 <net_pkt_unref+0x4e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    901e:	9b01      	ldr	r3, [sp, #4]
    9020:	f3bf 8f5b 	dmb	ish
    9024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9026:	f3bf 8f5b 	dmb	ish
		if (!ref) {
    902a:	b1e3      	cbz	r3, 9066 <net_pkt_unref+0x4e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    902c:	9a01      	ldr	r2, [sp, #4]
    902e:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&pkt->atomic_ref, ref, ref - 1));
    9032:	1e59      	subs	r1, r3, #1
    9034:	3224      	adds	r2, #36	; 0x24
    9036:	e852 0f00 	ldrex	r0, [r2]
    903a:	4298      	cmp	r0, r3
    903c:	d104      	bne.n	9048 <net_pkt_unref+0x30>
    903e:	e842 1c00 	strex	ip, r1, [r2]
    9042:	f1bc 0f00 	cmp.w	ip, #0
    9046:	d1f6      	bne.n	9036 <net_pkt_unref+0x1e>
    9048:	f3bf 8f5b 	dmb	ish
    904c:	d1e7      	bne.n	901e <net_pkt_unref+0x6>
	if (ref > 1) {
    904e:	2b01      	cmp	r3, #1
    9050:	dc09      	bgt.n	9066 <net_pkt_unref+0x4e>
	if (pkt->frags) {
    9052:	9b01      	ldr	r3, [sp, #4]
    9054:	6918      	ldr	r0, [r3, #16]
    9056:	b108      	cbz	r0, 905c <net_pkt_unref+0x44>
		net_pkt_frag_unref(pkt->frags);
    9058:	f7ff ffda 	bl	9010 <net_pkt_frag_unref>
	k_mem_slab_free(pkt->slab, (void **)&pkt);
    905c:	9b01      	ldr	r3, [sp, #4]
    905e:	a901      	add	r1, sp, #4
    9060:	68d8      	ldr	r0, [r3, #12]
    9062:	f7fc f897 	bl	5194 <k_mem_slab_free>
}
    9066:	b003      	add	sp, #12
    9068:	f85d fb04 	ldr.w	pc, [sp], #4

0000906c <net_pkt_frag_insert>:
{
    906c:	b538      	push	{r3, r4, r5, lr}
    906e:	4604      	mov	r4, r0
	net_buf_frag_last(frag)->frags = pkt->frags;
    9070:	4608      	mov	r0, r1
{
    9072:	460d      	mov	r5, r1
	net_buf_frag_last(frag)->frags = pkt->frags;
    9074:	f7fa f85a 	bl	312c <net_buf_frag_last>
    9078:	6923      	ldr	r3, [r4, #16]
    907a:	6003      	str	r3, [r0, #0]
	pkt->frags = frag;
    907c:	6125      	str	r5, [r4, #16]
}
    907e:	bd38      	pop	{r3, r4, r5, pc}

00009080 <net_pkt_available_buffer>:
{
    9080:	b570      	push	{r4, r5, r6, lr}
	if (!pkt) {
    9082:	4604      	mov	r4, r0
    9084:	b130      	cbz	r0, 9094 <net_pkt_available_buffer+0x14>
	size_t size = 0;
    9086:	2600      	movs	r6, #0
    9088:	6905      	ldr	r5, [r0, #16]
	while (buf) {
    908a:	b925      	cbnz	r5, 9096 <net_pkt_available_buffer+0x16>
	return pkt_get_max_len(pkt) - net_pkt_get_len(pkt);
    908c:	6920      	ldr	r0, [r4, #16]
    908e:	f7ff ff21 	bl	8ed4 <net_pkt_get_len.isra.0>
    9092:	1a30      	subs	r0, r6, r0
}
    9094:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_simple_max_len(&buf->b);
    9096:	f105 0008 	add.w	r0, r5, #8
    909a:	f7ff fa25 	bl	84e8 <net_buf_simple_max_len>
		buf = buf->frags;
    909e:	682d      	ldr	r5, [r5, #0]
		size += net_buf_max_len(buf);
    90a0:	4406      	add	r6, r0
		buf = buf->frags;
    90a2:	e7f2      	b.n	908a <net_pkt_available_buffer+0xa>

000090a4 <net_pkt_trim_buffer>:
{
    90a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    90a6:	4604      	mov	r4, r0
	buf = pkt->buffer;
    90a8:	6900      	ldr	r0, [r0, #16]
			buf->frags = NULL;
    90aa:	2700      	movs	r7, #0
	prev = buf;
    90ac:	4605      	mov	r5, r0
	while (buf) {
    90ae:	b900      	cbnz	r0, 90b2 <net_pkt_trim_buffer+0xe>
}
    90b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!buf->len) {
    90b2:	8983      	ldrh	r3, [r0, #12]
		struct net_buf *next = buf->frags;
    90b4:	6806      	ldr	r6, [r0, #0]
		if (!buf->len) {
    90b6:	b93b      	cbnz	r3, 90c8 <net_pkt_trim_buffer+0x24>
			if (buf == pkt->buffer) {
    90b8:	6923      	ldr	r3, [r4, #16]
    90ba:	4283      	cmp	r3, r0
    90bc:	d107      	bne.n	90ce <net_pkt_trim_buffer+0x2a>
				pkt->buffer = next;
    90be:	6126      	str	r6, [r4, #16]
			buf->frags = NULL;
    90c0:	6007      	str	r7, [r0, #0]
			net_buf_unref(buf);
    90c2:	f7f9 ffef 	bl	30a4 <net_buf_unref>
    90c6:	4628      	mov	r0, r5
    90c8:	4605      	mov	r5, r0
    90ca:	4630      	mov	r0, r6
    90cc:	e7ef      	b.n	90ae <net_pkt_trim_buffer+0xa>
			} else if (buf == prev->frags) {
    90ce:	682b      	ldr	r3, [r5, #0]
    90d0:	4283      	cmp	r3, r0
				prev->frags = next;
    90d2:	bf08      	it	eq
    90d4:	602e      	streq	r6, [r5, #0]
    90d6:	e7f3      	b.n	90c0 <net_pkt_trim_buffer+0x1c>

000090d8 <net_pkt_cursor_init>:
	pkt->cursor.buf = pkt->buffer;
    90d8:	6903      	ldr	r3, [r0, #16]
    90da:	6143      	str	r3, [r0, #20]
	if (pkt->cursor.buf) {
    90dc:	b103      	cbz	r3, 90e0 <net_pkt_cursor_init+0x8>
		pkt->cursor.pos = pkt->cursor.buf->data;
    90de:	689b      	ldr	r3, [r3, #8]
    90e0:	6183      	str	r3, [r0, #24]
}
    90e2:	4770      	bx	lr

000090e4 <pkt_alloc_on_iface>:
{
    90e4:	b510      	push	{r4, lr}
    90e6:	460c      	mov	r4, r1
	pkt = pkt_alloc(slab, timeout);
    90e8:	f7fb f856 	bl	4198 <pkt_alloc>
	if (pkt) {
    90ec:	b140      	cbz	r0, 9100 <pkt_alloc_on_iface+0x1c>
	pkt->iface = iface;
    90ee:	6204      	str	r4, [r0, #32]
	if (iface) {
    90f0:	b134      	cbz	r4, 9100 <pkt_alloc_on_iface+0x1c>
    90f2:	6823      	ldr	r3, [r4, #0]
		pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
    90f4:	7d5a      	ldrb	r2, [r3, #21]
    90f6:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
		pkt->lladdr_dst.type = net_if_get_link_addr(iface)->type;
    90fa:	7d5b      	ldrb	r3, [r3, #21]
    90fc:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
}
    9100:	bd10      	pop	{r4, pc}

00009102 <net_pkt_append_buffer>:
	if (!pkt->buffer) {
    9102:	6902      	ldr	r2, [r0, #16]
{
    9104:	b510      	push	{r4, lr}
    9106:	460c      	mov	r4, r1
	if (!pkt->buffer) {
    9108:	b922      	cbnz	r2, 9114 <net_pkt_append_buffer+0x12>
}
    910a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		pkt->buffer = buffer;
    910e:	6101      	str	r1, [r0, #16]
		net_pkt_cursor_init(pkt);
    9110:	f7ff bfe2 	b.w	90d8 <net_pkt_cursor_init>
		net_buf_frag_insert(net_buf_frag_last(pkt->buffer), buffer);
    9114:	4610      	mov	r0, r2
    9116:	f7fa f809 	bl	312c <net_buf_frag_last>
    911a:	4621      	mov	r1, r4
}
    911c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		net_buf_frag_insert(net_buf_frag_last(pkt->buffer), buffer);
    9120:	f7fa b81e 	b.w	3160 <net_buf_frag_insert>

00009124 <pkt_alloc_with_buffer>:
{
    9124:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9128:	4606      	mov	r6, r0
    912a:	e9dd 540e 	ldrd	r5, r4, [sp, #56]	; 0x38
    912e:	468b      	mov	fp, r1
	uint64_t end = z_timeout_end_calc(timeout);
    9130:	4628      	mov	r0, r5
    9132:	4621      	mov	r1, r4
{
    9134:	4690      	mov	r8, r2
    9136:	469a      	mov	sl, r3
	uint64_t end = z_timeout_end_calc(timeout);
    9138:	f001 f8bc 	bl	a2b4 <z_timeout_end_calc>
	pkt = pkt_alloc_on_iface(slab, iface, timeout);
    913c:	462a      	mov	r2, r5
	uint64_t end = z_timeout_end_calc(timeout);
    913e:	4607      	mov	r7, r0
    9140:	4689      	mov	r9, r1
	pkt = pkt_alloc_on_iface(slab, iface, timeout);
    9142:	4630      	mov	r0, r6
    9144:	4623      	mov	r3, r4
    9146:	4659      	mov	r1, fp
    9148:	f7ff ffcc 	bl	90e4 <pkt_alloc_on_iface>
	if (!pkt) {
    914c:	4606      	mov	r6, r0
    914e:	b320      	cbz	r0, 919a <pkt_alloc_with_buffer+0x76>
	pkt->family = family;
    9150:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
    9154:	f36a 0343 	bfi	r3, sl, #1, #3
    9158:	f880 303b 	strb.w	r3, [r0, #59]	; 0x3b
	if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    915c:	ea55 0304 	orrs.w	r3, r5, r4
    9160:	d00e      	beq.n	9180 <pkt_alloc_with_buffer+0x5c>
    9162:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    9166:	bf08      	it	eq
    9168:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    916c:	d008      	beq.n	9180 <pkt_alloc_with_buffer+0x5c>
		int64_t remaining = end - z_tick_get();
    916e:	f7fe fa5b 	bl	7628 <z_tick_get>
    9172:	1a3d      	subs	r5, r7, r0
    9174:	eb69 0401 	sbc.w	r4, r9, r1
    9178:	2c00      	cmp	r4, #0
    917a:	bfbc      	itt	lt
    917c:	2500      	movlt	r5, #0
    917e:	462c      	movlt	r4, r5
	ret = net_pkt_alloc_buffer(pkt, size, proto, timeout);
    9180:	4641      	mov	r1, r8
    9182:	4630      	mov	r0, r6
    9184:	e9cd 5400 	strd	r5, r4, [sp]
    9188:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    918c:	f7fb f83a 	bl	4204 <net_pkt_alloc_buffer>
	if (ret) {
    9190:	b118      	cbz	r0, 919a <pkt_alloc_with_buffer+0x76>
		net_pkt_unref(pkt);
    9192:	4630      	mov	r0, r6
    9194:	f7ff ff40 	bl	9018 <net_pkt_unref>
		return NULL;
    9198:	2600      	movs	r6, #0
}
    919a:	4630      	mov	r0, r6
    919c:	b003      	add	sp, #12
    919e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000091a2 <net_pkt_skip>:

int net_pkt_skip(struct net_pkt *pkt, size_t skip)
{
	NET_DBG("pkt %p skip %zu", pkt, skip);

	return net_pkt_cursor_operate(pkt, NULL, skip, false, true);
    91a2:	2301      	movs	r3, #1
{
    91a4:	b507      	push	{r0, r1, r2, lr}
	return net_pkt_cursor_operate(pkt, NULL, skip, false, true);
    91a6:	9300      	str	r3, [sp, #0]
    91a8:	2300      	movs	r3, #0
{
    91aa:	460a      	mov	r2, r1
	return net_pkt_cursor_operate(pkt, NULL, skip, false, true);
    91ac:	4619      	mov	r1, r3
    91ae:	f7ff fe99 	bl	8ee4 <net_pkt_cursor_operate>
}
    91b2:	b003      	add	sp, #12
    91b4:	f85d fb04 	ldr.w	pc, [sp], #4

000091b8 <net_pkt_memset>:

int net_pkt_memset(struct net_pkt *pkt, int byte, size_t amount)
{
    91b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	NET_DBG("pkt %p byte %d amount %zu", pkt, byte, amount);

	return net_pkt_cursor_operate(pkt, &byte, amount, false, true);
    91ba:	2301      	movs	r3, #1
{
    91bc:	9103      	str	r1, [sp, #12]
	return net_pkt_cursor_operate(pkt, &byte, amount, false, true);
    91be:	9300      	str	r3, [sp, #0]
    91c0:	a903      	add	r1, sp, #12
    91c2:	2300      	movs	r3, #0
    91c4:	f7ff fe8e 	bl	8ee4 <net_pkt_cursor_operate>
}
    91c8:	b005      	add	sp, #20
    91ca:	f85d fb04 	ldr.w	pc, [sp], #4

000091ce <net_pkt_read>:

int net_pkt_read(struct net_pkt *pkt, void *data, size_t length)
{
	NET_DBG("pkt %p data %p length %zu", pkt, data, length);

	return net_pkt_cursor_operate(pkt, data, length, true, false);
    91ce:	2300      	movs	r3, #0
{
    91d0:	b507      	push	{r0, r1, r2, lr}
	return net_pkt_cursor_operate(pkt, data, length, true, false);
    91d2:	9300      	str	r3, [sp, #0]
    91d4:	2301      	movs	r3, #1
    91d6:	f7ff fe85 	bl	8ee4 <net_pkt_cursor_operate>
}
    91da:	b003      	add	sp, #12
    91dc:	f85d fb04 	ldr.w	pc, [sp], #4

000091e0 <net_pkt_copy>:
}

int net_pkt_copy(struct net_pkt *pkt_dst,
		 struct net_pkt *pkt_src,
		 size_t length)
{
    91e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    91e2:	4606      	mov	r6, r0
    91e4:	460f      	mov	r7, r1
    91e6:	4614      	mov	r4, r2
	struct net_pkt_cursor *c_dst = &pkt_dst->cursor;
	struct net_pkt_cursor *c_src = &pkt_src->cursor;

	while (c_dst->buf && c_src->buf && length) {
    91e8:	6973      	ldr	r3, [r6, #20]
    91ea:	2b00      	cmp	r3, #0
    91ec:	d046      	beq.n	927c <net_pkt_copy+0x9c>
    91ee:	697b      	ldr	r3, [r7, #20]
    91f0:	2b00      	cmp	r3, #0
    91f2:	d043      	beq.n	927c <net_pkt_copy+0x9c>
    91f4:	b90c      	cbnz	r4, 91fa <net_pkt_copy+0x1a>
	if (length) {
		NET_DBG("Still some length to go %zu", length);
		return -ENOBUFS;
	}

	return 0;
    91f6:	4620      	mov	r0, r4
    91f8:	e025      	b.n	9246 <net_pkt_copy+0x66>
		pkt_cursor_advance(pkt_dst, true);
    91fa:	2101      	movs	r1, #1
    91fc:	4630      	mov	r0, r6
    91fe:	f7ff fe26 	bl	8e4e <pkt_cursor_advance>
		pkt_cursor_advance(pkt_src, false);
    9202:	4638      	mov	r0, r7
    9204:	2100      	movs	r1, #0
    9206:	f7ff fe22 	bl	8e4e <pkt_cursor_advance>
		if (!c_dst->buf || !c_src->buf) {
    920a:	6970      	ldr	r0, [r6, #20]
    920c:	b1c8      	cbz	r0, 9242 <net_pkt_copy+0x62>
    920e:	697a      	ldr	r2, [r7, #20]
    9210:	b1ba      	cbz	r2, 9242 <net_pkt_copy+0x62>
		s_len = c_src->buf->len - (c_src->pos - c_src->buf->data);
    9212:	8995      	ldrh	r5, [r2, #12]
    9214:	69bb      	ldr	r3, [r7, #24]
    9216:	6892      	ldr	r2, [r2, #8]
    9218:	3008      	adds	r0, #8
    921a:	1a9b      	subs	r3, r3, r2
    921c:	1aed      	subs	r5, r5, r3
    921e:	f7ff f963 	bl	84e8 <net_buf_simple_max_len>
    9222:	4603      	mov	r3, r0
		d_len = net_buf_max_len(c_dst->buf) - (c_dst->pos - c_dst->buf->data);
    9224:	e9d6 2005 	ldrd	r2, r0, [r6, #20]
    9228:	6892      	ldr	r2, [r2, #8]
		if (length < s_len && length < d_len) {
    922a:	42a5      	cmp	r5, r4
		d_len = net_buf_max_len(c_dst->buf) - (c_dst->pos - c_dst->buf->data);
    922c:	eba0 0202 	sub.w	r2, r0, r2
    9230:	eba3 0302 	sub.w	r3, r3, r2
		if (length < s_len && length < d_len) {
    9234:	d901      	bls.n	923a <net_pkt_copy+0x5a>
    9236:	42a3      	cmp	r3, r4
    9238:	d806      	bhi.n	9248 <net_pkt_copy+0x68>
			if (d_len < s_len) {
    923a:	429d      	cmp	r5, r3
    923c:	bf28      	it	cs
    923e:	461d      	movcs	r5, r3
		if (!len) {
    9240:	b91d      	cbnz	r5, 924a <net_pkt_copy+0x6a>
		return -ENOBUFS;
    9242:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    9246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9248:	4625      	mov	r5, r4
		memcpy(c_dst->pos, c_src->pos, len);
    924a:	462a      	mov	r2, r5
    924c:	69b9      	ldr	r1, [r7, #24]
    924e:	f7ff f8bb 	bl	83c8 <memcpy>
	return pkt->overwrite;
    9252:	f896 3039 	ldrb.w	r3, [r6, #57]	; 0x39
		if (!net_pkt_is_being_overwritten(pkt_dst)) {
    9256:	07db      	lsls	r3, r3, #31
    9258:	d404      	bmi.n	9264 <net_pkt_copy+0x84>
	return net_buf_simple_add(&buf->b, len);
    925a:	6970      	ldr	r0, [r6, #20]
    925c:	4629      	mov	r1, r5
    925e:	3008      	adds	r0, #8
    9260:	f7f9 ffcc 	bl	31fc <net_buf_simple_add>
		pkt_cursor_update(pkt_dst, len, true);
    9264:	2201      	movs	r2, #1
    9266:	4629      	mov	r1, r5
    9268:	4630      	mov	r0, r6
    926a:	f7ff fe08 	bl	8e7e <pkt_cursor_update>
		pkt_cursor_update(pkt_src, len, false);
    926e:	2200      	movs	r2, #0
    9270:	4629      	mov	r1, r5
    9272:	4638      	mov	r0, r7
    9274:	f7ff fe03 	bl	8e7e <pkt_cursor_update>
		length -= len;
    9278:	1b64      	subs	r4, r4, r5
    927a:	e7b5      	b.n	91e8 <net_pkt_copy+0x8>
	if (length) {
    927c:	2c00      	cmp	r4, #0
    927e:	d0ba      	beq.n	91f6 <net_pkt_copy+0x16>
    9280:	e7df      	b.n	9242 <net_pkt_copy+0x62>

00009282 <net_pkt_update_length>:

int net_pkt_update_length(struct net_pkt *pkt, size_t length)
{
	struct net_buf *buf;

	for (buf = pkt->buffer; buf; buf = buf->frags) {
    9282:	6903      	ldr	r3, [r0, #16]
    9284:	b92b      	cbnz	r3, 9292 <net_pkt_update_length+0x10>
			buf->len = length;
			length = 0;
		}
	}

	return !length ? 0 : -EINVAL;
    9286:	2900      	cmp	r1, #0
}
    9288:	bf14      	ite	ne
    928a:	f06f 0015 	mvnne.w	r0, #21
    928e:	2000      	moveq	r0, #0
    9290:	4770      	bx	lr
		if (buf->len < length) {
    9292:	899a      	ldrh	r2, [r3, #12]
    9294:	428a      	cmp	r2, r1
			buf->len = length;
    9296:	bf2a      	itet	cs
    9298:	8199      	strhcs	r1, [r3, #12]
			length -= buf->len;
    929a:	1a89      	subcc	r1, r1, r2
			length = 0;
    929c:	2100      	movcs	r1, #0
	for (buf = pkt->buffer; buf; buf = buf->frags) {
    929e:	681b      	ldr	r3, [r3, #0]
    92a0:	e7f0      	b.n	9284 <net_pkt_update_length+0x2>

000092a2 <net_pkt_get_current_offset>:
uint16_t net_pkt_get_current_offset(struct net_pkt *pkt)
{
	struct net_buf *buf = pkt->buffer;
	uint16_t offset;

	if (!pkt->cursor.buf || !pkt->cursor.pos) {
    92a2:	6942      	ldr	r2, [r0, #20]
{
    92a4:	4603      	mov	r3, r0
    92a6:	b510      	push	{r4, lr}
	if (!pkt->cursor.buf || !pkt->cursor.pos) {
    92a8:	b17a      	cbz	r2, 92ca <net_pkt_get_current_offset+0x28>
    92aa:	6980      	ldr	r0, [r0, #24]
    92ac:	b138      	cbz	r0, 92be <net_pkt_get_current_offset+0x1c>
	struct net_buf *buf = pkt->buffer;
    92ae:	6919      	ldr	r1, [r3, #16]
		return 0;
	}

	offset = 0U;
    92b0:	2300      	movs	r3, #0

	while (buf != pkt->cursor.buf) {
    92b2:	428a      	cmp	r2, r1
    92b4:	d104      	bne.n	92c0 <net_pkt_get_current_offset+0x1e>
		offset += buf->len;
		buf = buf->frags;
	}

	offset += pkt->cursor.pos - buf->data;
    92b6:	6892      	ldr	r2, [r2, #8]
    92b8:	1a80      	subs	r0, r0, r2
    92ba:	4418      	add	r0, r3
    92bc:	b280      	uxth	r0, r0

	return offset;
}
    92be:	bd10      	pop	{r4, pc}
		offset += buf->len;
    92c0:	898c      	ldrh	r4, [r1, #12]
		buf = buf->frags;
    92c2:	6809      	ldr	r1, [r1, #0]
		offset += buf->len;
    92c4:	4423      	add	r3, r4
    92c6:	b29b      	uxth	r3, r3
		buf = buf->frags;
    92c8:	e7f3      	b.n	92b2 <net_pkt_get_current_offset+0x10>
		return 0;
    92ca:	4610      	mov	r0, r2
    92cc:	e7f7      	b.n	92be <net_pkt_get_current_offset+0x1c>

000092ce <net_pkt_clone>:
{
    92ce:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    92d2:	461d      	mov	r5, r3
    92d4:	4617      	mov	r7, r2
    92d6:	4604      	mov	r4, r0
	size_t cursor_offset = net_pkt_get_current_offset(pkt);
    92d8:	f7ff ffe3 	bl	92a2 <net_pkt_get_current_offset>
    92dc:	4606      	mov	r6, r0
	clone_pkt = net_pkt_alloc_with_buffer(net_pkt_iface(pkt),
    92de:	6920      	ldr	r0, [r4, #16]
    92e0:	f7ff fdf8 	bl	8ed4 <net_pkt_get_len.isra.0>
    92e4:	2300      	movs	r3, #0
    92e6:	4601      	mov	r1, r0
    92e8:	e9cd 7500 	strd	r7, r5, [sp]
    92ec:	461a      	mov	r2, r3
    92ee:	6a20      	ldr	r0, [r4, #32]
    92f0:	f7fb f848 	bl	4384 <net_pkt_alloc_with_buffer>
	if (!clone_pkt) {
    92f4:	4605      	mov	r5, r0
    92f6:	b198      	cbz	r0, 9320 <net_pkt_clone+0x52>
	backup->pos = pkt->cursor.pos;
    92f8:	e9d4 8705 	ldrd	r8, r7, [r4, #20]
	net_pkt_cursor_init(pkt);
    92fc:	4620      	mov	r0, r4
    92fe:	f7ff feeb 	bl	90d8 <net_pkt_cursor_init>
	if (net_pkt_copy(clone_pkt, pkt, net_pkt_get_len(pkt))) {
    9302:	6920      	ldr	r0, [r4, #16]
    9304:	f7ff fde6 	bl	8ed4 <net_pkt_get_len.isra.0>
    9308:	4621      	mov	r1, r4
    930a:	4602      	mov	r2, r0
    930c:	4628      	mov	r0, r5
    930e:	f7ff ff67 	bl	91e0 <net_pkt_copy>
    9312:	b148      	cbz	r0, 9328 <net_pkt_clone+0x5a>
		net_pkt_unref(clone_pkt);
    9314:	4628      	mov	r0, r5
		return NULL;
    9316:	2500      	movs	r5, #0
		net_pkt_unref(clone_pkt);
    9318:	f7ff fe7e 	bl	9018 <net_pkt_unref>
	pkt->cursor.pos = backup->pos;
    931c:	e9c4 8705 	strd	r8, r7, [r4, #20]
}
    9320:	4628      	mov	r0, r5
    9322:	b002      	add	sp, #8
    9324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (clone_pkt->buffer) {
    9328:	692b      	ldr	r3, [r5, #16]
    932a:	b16b      	cbz	r3, 9348 <net_pkt_clone+0x7a>
		memcpy(&clone_pkt->lladdr_src, &pkt->lladdr_src,
    932c:	2208      	movs	r2, #8
    932e:	f104 0128 	add.w	r1, r4, #40	; 0x28
    9332:	f105 0028 	add.w	r0, r5, #40	; 0x28
    9336:	f7ff f847 	bl	83c8 <memcpy>
		memcpy(&clone_pkt->lladdr_dst, &pkt->lladdr_dst,
    933a:	2208      	movs	r2, #8
    933c:	f104 0130 	add.w	r1, r4, #48	; 0x30
    9340:	f105 0030 	add.w	r0, r5, #48	; 0x30
    9344:	f7ff f840 	bl	83c8 <memcpy>
	return pkt->family;
    9348:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
	pkt->family = family;
    934c:	f895 203b 	ldrb.w	r2, [r5, #59]	; 0x3b
	return pkt->family;
    9350:	f3c3 0342 	ubfx	r3, r3, #1, #3
	pkt->family = family;
    9354:	f363 0243 	bfi	r2, r3, #1, #3
    9358:	f885 203b 	strb.w	r2, [r5, #59]	; 0x3b
	return pkt->context;
    935c:	69e3      	ldr	r3, [r4, #28]
	net_pkt_cursor_init(clone_pkt);
    935e:	4628      	mov	r0, r5
	pkt->context = ctx;
    9360:	61eb      	str	r3, [r5, #28]
	return pkt->ip_hdr_len;
    9362:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
	pkt->ip_hdr_len = len;
    9366:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
	return pkt->priority;
    936a:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
	pkt->priority = priority;
    936e:	f885 303f 	strb.w	r3, [r5, #63]	; 0x3f
	return pkt->family;
    9372:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
	if (IS_ENABLED(CONFIG_NET_IPV4) && net_pkt_family(pkt) == AF_INET) {
    9376:	f3c3 0342 	ubfx	r3, r3, #1, #3
    937a:	2b01      	cmp	r3, #1
	return pkt->ipv4_ttl;
    937c:	bf01      	itttt	eq
    937e:	f894 303d 	ldrbeq.w	r3, [r4, #61]	; 0x3d
	pkt->ipv4_ttl = ttl;
    9382:	f885 303d 	strbeq.w	r3, [r5, #61]	; 0x3d
	return pkt->ipv4_opts_len;
    9386:	f894 303e 	ldrbeq.w	r3, [r4, #62]	; 0x3e
	pkt->ipv4_opts_len = opts_len;
    938a:	f885 303e 	strbeq.w	r3, [r5, #62]	; 0x3e
	net_pkt_cursor_init(clone_pkt);
    938e:	f7ff fea3 	bl	90d8 <net_pkt_cursor_init>
	if (cursor_offset) {
    9392:	b146      	cbz	r6, 93a6 <net_pkt_clone+0xd8>
	pkt->overwrite = overwrite;
    9394:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
		net_pkt_skip(clone_pkt, cursor_offset);
    9398:	4631      	mov	r1, r6
    939a:	f043 0301 	orr.w	r3, r3, #1
    939e:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
    93a2:	f7ff fefe 	bl	91a2 <net_pkt_skip>
	pkt->cursor.pos = backup->pos;
    93a6:	e9c4 8705 	strd	r8, r7, [r4, #20]
	return clone_pkt;
    93aa:	e7b9      	b.n	9320 <net_pkt_clone+0x52>

000093ac <net_pkt_get_contiguous_len>:
	return pkt->overwrite;
    93ac:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39

	return len >= size;
}

size_t net_pkt_get_contiguous_len(struct net_pkt *pkt)
{
    93b0:	b510      	push	{r4, lr}
	pkt_cursor_advance(pkt, !net_pkt_is_being_overwritten(pkt));
    93b2:	43c9      	mvns	r1, r1
{
    93b4:	4604      	mov	r4, r0
	pkt_cursor_advance(pkt, !net_pkt_is_being_overwritten(pkt));
    93b6:	f001 0101 	and.w	r1, r1, #1
    93ba:	f7ff fd48 	bl	8e4e <pkt_cursor_advance>

	if (pkt->cursor.buf && pkt->cursor.pos) {
    93be:	6963      	ldr	r3, [r4, #20]
    93c0:	b15b      	cbz	r3, 93da <net_pkt_get_contiguous_len+0x2e>
    93c2:	69a0      	ldr	r0, [r4, #24]
    93c4:	b140      	cbz	r0, 93d8 <net_pkt_get_contiguous_len+0x2c>
    93c6:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
		size_t len;

		len = net_pkt_is_being_overwritten(pkt) ?
			pkt->cursor.buf->len : pkt->cursor.buf->size;
    93ca:	07d2      	lsls	r2, r2, #31
    93cc:	bf4c      	ite	mi
    93ce:	899a      	ldrhmi	r2, [r3, #12]
    93d0:	89da      	ldrhpl	r2, [r3, #14]
		len -= pkt->cursor.pos - pkt->cursor.buf->data;
    93d2:	689b      	ldr	r3, [r3, #8]
    93d4:	1ac0      	subs	r0, r0, r3
    93d6:	1a10      	subs	r0, r2, r0
		return len;
	}

	return 0;
}
    93d8:	bd10      	pop	{r4, pc}
	return 0;
    93da:	4618      	mov	r0, r3
    93dc:	e7fc      	b.n	93d8 <net_pkt_get_contiguous_len+0x2c>

000093de <net_pkt_write>:
	if (data == pkt->cursor.pos && net_pkt_is_contiguous(pkt, length)) {
    93de:	6983      	ldr	r3, [r0, #24]
{
    93e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (data == pkt->cursor.pos && net_pkt_is_contiguous(pkt, length)) {
    93e2:	4299      	cmp	r1, r3
{
    93e4:	4604      	mov	r4, r0
    93e6:	460e      	mov	r6, r1
    93e8:	4615      	mov	r5, r2
	if (data == pkt->cursor.pos && net_pkt_is_contiguous(pkt, length)) {
    93ea:	d10a      	bne.n	9402 <net_pkt_write+0x24>
	size_t len = net_pkt_get_contiguous_len(pkt);
    93ec:	f7ff ffde 	bl	93ac <net_pkt_get_contiguous_len>
	if (data == pkt->cursor.pos && net_pkt_is_contiguous(pkt, length)) {
    93f0:	42a8      	cmp	r0, r5
    93f2:	d306      	bcc.n	9402 <net_pkt_write+0x24>
		return net_pkt_skip(pkt, length);
    93f4:	4629      	mov	r1, r5
    93f6:	4620      	mov	r0, r4
}
    93f8:	b002      	add	sp, #8
    93fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return net_pkt_skip(pkt, length);
    93fe:	f7ff bed0 	b.w	91a2 <net_pkt_skip>
	return net_pkt_cursor_operate(pkt, (void *)data, length, true, true);
    9402:	2301      	movs	r3, #1
    9404:	462a      	mov	r2, r5
    9406:	4631      	mov	r1, r6
    9408:	4620      	mov	r0, r4
    940a:	9300      	str	r3, [sp, #0]
    940c:	f7ff fd6a 	bl	8ee4 <net_pkt_cursor_operate>
}
    9410:	b002      	add	sp, #8
    9412:	bd70      	pop	{r4, r5, r6, pc}

00009414 <net_pkt_get_data>:

void *net_pkt_get_data(struct net_pkt *pkt,
		       struct net_pkt_data_access *access)
{
    9414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			return NULL;
		}

		return pkt->cursor.pos;
	} else {
		if (net_pkt_is_contiguous(pkt, access->size)) {
    9416:	684e      	ldr	r6, [r1, #4]
{
    9418:	4604      	mov	r4, r0
    941a:	460d      	mov	r5, r1
	size_t len = net_pkt_get_contiguous_len(pkt);
    941c:	f7ff ffc6 	bl	93ac <net_pkt_get_contiguous_len>
		if (net_pkt_is_contiguous(pkt, access->size)) {
    9420:	4286      	cmp	r6, r0
    9422:	d803      	bhi.n	942c <net_pkt_get_data+0x18>
			access->data = pkt->cursor.pos;
    9424:	69a3      	ldr	r3, [r4, #24]
    9426:	602b      	str	r3, [r5, #0]
			}

			net_pkt_cursor_restore(pkt, &backup);
		}

		return access->data;
    9428:	6829      	ldr	r1, [r5, #0]
    942a:	e010      	b.n	944e <net_pkt_get_data+0x3a>
    942c:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
		} else if (net_pkt_is_being_overwritten(pkt)) {
    9430:	07db      	lsls	r3, r3, #31
    9432:	d5f9      	bpl.n	9428 <net_pkt_get_data+0x14>
			if (!access->data) {
    9434:	6829      	ldr	r1, [r5, #0]
    9436:	b151      	cbz	r1, 944e <net_pkt_get_data+0x3a>
	backup->pos = pkt->cursor.pos;
    9438:	e9d4 7605 	ldrd	r7, r6, [r4, #20]
			if (net_pkt_read(pkt, access->data, access->size)) {
    943c:	4620      	mov	r0, r4
    943e:	686a      	ldr	r2, [r5, #4]
    9440:	f7ff fec5 	bl	91ce <net_pkt_read>
	pkt->cursor.pos = backup->pos;
    9444:	e9c4 7605 	strd	r7, r6, [r4, #20]
    9448:	2800      	cmp	r0, #0
    944a:	d0ed      	beq.n	9428 <net_pkt_get_data+0x14>
				return NULL;
    944c:	2100      	movs	r1, #0
	}

	return NULL;
}
    944e:	4608      	mov	r0, r1
    9450:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00009452 <net_pkt_set_data>:
{
	if (IS_ENABLED(CONFIG_NET_HEADERS_ALWAYS_CONTIGUOUS)) {
		return net_pkt_skip(pkt, access->size);
	}

	return net_pkt_write(pkt, access->data, access->size);
    9452:	c906      	ldmia	r1, {r1, r2}
    9454:	f7ff bfc3 	b.w	93de <net_pkt_write>

00009458 <net_pkt_init>:
		(size_t)(k_mem_slab_num_free_get(&tx_pkts) *
			 sizeof(struct net_pkt)),
		get_frees(&rx_bufs), get_size(&rx_bufs),
		get_frees(&tx_bufs), get_size(&tx_bufs));
#endif
}
    9458:	4770      	bx	lr

0000945a <k_work_submit_to_queue>:
{
    945a:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    945c:	f3bf 8f5b 	dmb	ish
    9460:	f101 0308 	add.w	r3, r1, #8
    9464:	e853 2f00 	ldrex	r2, [r3]
    9468:	f042 0c01 	orr.w	ip, r2, #1
    946c:	e843 ce00 	strex	lr, ip, [r3]
    9470:	f1be 0f00 	cmp.w	lr, #0
    9474:	d1f6      	bne.n	9464 <k_work_submit_to_queue+0xa>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    9476:	07d3      	lsls	r3, r2, #31
    9478:	f3bf 8f5b 	dmb	ish
    947c:	d403      	bmi.n	9486 <k_work_submit_to_queue+0x2c>
}
    947e:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
    9482:	f000 be58 	b.w	a136 <k_queue_append>
}
    9486:	f85d fb04 	ldr.w	pc, [sp], #4

0000948a <net_rx_priority2tc>:
    948a:	f7fa bfa9 	b.w	43e0 <net_tx_priority2tc>

0000948e <icmpv4_create>:
{
    948e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmpv4_access,
    9490:	2304      	movs	r3, #4
    9492:	2500      	movs	r5, #0
{
    9494:	460f      	mov	r7, r1
	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmpv4_access);
    9496:	4669      	mov	r1, sp
{
    9498:	4604      	mov	r4, r0
    949a:	4616      	mov	r6, r2
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmpv4_access,
    949c:	e9cd 5300 	strd	r5, r3, [sp]
	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmpv4_access);
    94a0:	f7ff ffb8 	bl	9414 <net_pkt_get_data>
	if (!icmp_hdr) {
    94a4:	b148      	cbz	r0, 94ba <icmpv4_create+0x2c>
	icmp_hdr->type   = icmp_type;
    94a6:	7007      	strb	r7, [r0, #0]
	icmp_hdr->code   = icmp_code;
    94a8:	7046      	strb	r6, [r0, #1]
	icmp_hdr->chksum = 0U;
    94aa:	7085      	strb	r5, [r0, #2]
    94ac:	70c5      	strb	r5, [r0, #3]
	return net_pkt_set_data(pkt, &icmpv4_access);
    94ae:	4669      	mov	r1, sp
    94b0:	4620      	mov	r0, r4
    94b2:	f7ff ffce 	bl	9452 <net_pkt_set_data>
}
    94b6:	b003      	add	sp, #12
    94b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOBUFS;
    94ba:	f06f 0036 	mvn.w	r0, #54	; 0x36
    94be:	e7fa      	b.n	94b6 <icmpv4_create+0x28>

000094c0 <icmpv4_handle_echo_request>:
	return UNALIGNED_GET(&addr->s_addr) == 0;
    94c0:	68cb      	ldr	r3, [r1, #12]
{
    94c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    94c4:	4605      	mov	r5, r0
    94c6:	460f      	mov	r7, r1
	if (net_ipv4_is_addr_unspecified(&ip_hdr->src)) {
    94c8:	b173      	cbz	r3, 94e8 <icmpv4_handle_echo_request+0x28>
	size_t bytes = 0;
    94ca:	2200      	movs	r2, #0
    94cc:	6903      	ldr	r3, [r0, #16]
	while (buf) {
    94ce:	b96b      	cbnz	r3, 94ec <icmpv4_handle_echo_request+0x2c>
	return pkt->ipv4_opts_len;
    94d0:	f895 103e 	ldrb.w	r1, [r5, #62]	; 0x3e
		      net_pkt_ip_hdr_len(pkt) -
    94d4:	f895 4038 	ldrb.w	r4, [r5, #56]	; 0x38
		      net_pkt_ipv4_opts_len(pkt) - NET_ICMPH_LEN;
    94d8:	440c      	add	r4, r1
    94da:	f5c4 447f 	rsb	r4, r4, #65280	; 0xff00
    94de:	34fc      	adds	r4, #252	; 0xfc
    94e0:	4414      	add	r4, r2
	payload_len = net_pkt_get_len(pkt) -
    94e2:	b224      	sxth	r4, r4
	if (payload_len < NET_ICMPV4_UNUSED_LEN) {
    94e4:	2c03      	cmp	r4, #3
    94e6:	dc05      	bgt.n	94f4 <icmpv4_handle_echo_request+0x34>
	return NET_DROP;
    94e8:	2002      	movs	r0, #2
    94ea:	e03e      	b.n	956a <icmpv4_handle_echo_request+0xaa>
		bytes += buf->len;
    94ec:	8999      	ldrh	r1, [r3, #12]
		buf = buf->frags;
    94ee:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
    94f0:	440a      	add	r2, r1
		buf = buf->frags;
    94f2:	e7ec      	b.n	94ce <icmpv4_handle_echo_request+0xe>
	reply = net_pkt_alloc_with_buffer(net_pkt_iface(pkt),
    94f4:	2264      	movs	r2, #100	; 0x64
    94f6:	2300      	movs	r3, #0
    94f8:	e9cd 2300 	strd	r2, r3, [sp]
    94fc:	2301      	movs	r3, #1
    94fe:	6a28      	ldr	r0, [r5, #32]
    9500:	461a      	mov	r2, r3
    9502:	4421      	add	r1, r4
    9504:	f7fa ff3e 	bl	4384 <net_pkt_alloc_with_buffer>
	if (!reply) {
    9508:	4606      	mov	r6, r0
    950a:	2800      	cmp	r0, #0
    950c:	d0ec      	beq.n	94e8 <icmpv4_handle_echo_request+0x28>
	if (net_ipv4_is_addr_mcast(&ip_hdr->dst)) {
    950e:	693b      	ldr	r3, [r7, #16]
    9510:	f107 0110 	add.w	r1, r7, #16
	return (ntohl(UNALIGNED_GET(&addr->s_addr)) & 0xF0000000) == 0xE0000000;
    9514:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    9518:	2be0      	cmp	r3, #224	; 0xe0
    951a:	d103      	bne.n	9524 <icmpv4_handle_echo_request+0x64>
		src = net_if_ipv4_select_src_addr(net_pkt_iface(pkt),
    951c:	6a28      	ldr	r0, [r5, #32]
    951e:	f7fa fb51 	bl	3bc4 <net_if_ipv4_select_src_addr>
    9522:	4601      	mov	r1, r0
	if (net_ipv4_create(reply, src, &ip_hdr->src)) {
    9524:	f107 020c 	add.w	r2, r7, #12
    9528:	4630      	mov	r0, r6
    952a:	f000 f8ca 	bl	96c2 <net_ipv4_create>
    952e:	4602      	mov	r2, r0
    9530:	b9e8      	cbnz	r0, 956e <icmpv4_handle_echo_request+0xae>
	if (icmpv4_create(reply, NET_ICMPV4_ECHO_REPLY, 0) ||
    9532:	4601      	mov	r1, r0
    9534:	4630      	mov	r0, r6
    9536:	f7ff ffaa 	bl	948e <icmpv4_create>
    953a:	b9c0      	cbnz	r0, 956e <icmpv4_handle_echo_request+0xae>
	    net_pkt_copy(reply, pkt, payload_len)) {
    953c:	4622      	mov	r2, r4
    953e:	4629      	mov	r1, r5
    9540:	4630      	mov	r0, r6
    9542:	f7ff fe4d 	bl	91e0 <net_pkt_copy>
	if (icmpv4_create(reply, NET_ICMPV4_ECHO_REPLY, 0) ||
    9546:	4604      	mov	r4, r0
    9548:	b988      	cbnz	r0, 956e <icmpv4_handle_echo_request+0xae>
	net_pkt_cursor_init(reply);
    954a:	4630      	mov	r0, r6
    954c:	f7ff fdc4 	bl	90d8 <net_pkt_cursor_init>
	net_ipv4_finalize(reply, IPPROTO_ICMP);
    9550:	2101      	movs	r1, #1
    9552:	4630      	mov	r0, r6
    9554:	f000 f8e8 	bl	9728 <net_ipv4_finalize>
	if (net_send_data(reply) < 0) {
    9558:	4630      	mov	r0, r6
    955a:	f7ff fa4b 	bl	89f4 <net_send_data>
    955e:	2800      	cmp	r0, #0
    9560:	db05      	blt.n	956e <icmpv4_handle_echo_request+0xae>
	net_pkt_unref(pkt);
    9562:	4628      	mov	r0, r5
    9564:	f7ff fd58 	bl	9018 <net_pkt_unref>
	return NET_OK;
    9568:	4620      	mov	r0, r4
}
    956a:	b003      	add	sp, #12
    956c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_pkt_unref(reply);
    956e:	4630      	mov	r0, r6
    9570:	f7ff fd52 	bl	9018 <net_pkt_unref>
    9574:	e7b8      	b.n	94e8 <icmpv4_handle_echo_request+0x28>

00009576 <net_icmpv4_finalize>:
{
    9576:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmpv4_access,
    9578:	2304      	movs	r3, #4
    957a:	2200      	movs	r2, #0
	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmpv4_access);
    957c:	4669      	mov	r1, sp
{
    957e:	4604      	mov	r4, r0
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmpv4_access,
    9580:	e9cd 2300 	strd	r2, r3, [sp]
	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmpv4_access);
    9584:	f7ff ff46 	bl	9414 <net_pkt_get_data>
	if (!icmp_hdr) {
    9588:	4605      	mov	r5, r0
    958a:	b150      	cbz	r0, 95a2 <net_icmpv4_finalize+0x2c>
    958c:	2101      	movs	r1, #1
    958e:	4620      	mov	r0, r4
    9590:	f7ff fbad 	bl	8cee <net_calc_chksum>
	return net_pkt_set_data(pkt, &icmpv4_access);
    9594:	4669      	mov	r1, sp
	icmp_hdr->chksum = net_calc_chksum_icmpv4(pkt);
    9596:	8068      	strh	r0, [r5, #2]
	return net_pkt_set_data(pkt, &icmpv4_access);
    9598:	4620      	mov	r0, r4
    959a:	f7ff ff5a 	bl	9452 <net_pkt_set_data>
}
    959e:	b003      	add	sp, #12
    95a0:	bd30      	pop	{r4, r5, pc}
		return -ENOBUFS;
    95a2:	f06f 0036 	mvn.w	r0, #54	; 0x36
    95a6:	e7fa      	b.n	959e <net_icmpv4_finalize+0x28>

000095a8 <net_icmpv4_send_error>:
{
    95a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access, struct net_ipv4_hdr);
    95ac:	2314      	movs	r3, #20
{
    95ae:	4606      	mov	r6, r0
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access, struct net_ipv4_hdr);
    95b0:	2400      	movs	r4, #0
{
    95b2:	b087      	sub	sp, #28
    95b4:	4688      	mov	r8, r1
    95b6:	4691      	mov	r9, r2
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access, struct net_ipv4_hdr);
    95b8:	e9cd 4302 	strd	r4, r3, [sp, #8]
	net_pkt_cursor_init(orig);
    95bc:	f7ff fd8c 	bl	90d8 <net_pkt_cursor_init>
	ip_hdr = (struct net_ipv4_hdr *)net_pkt_get_data(orig, &ipv4_access);
    95c0:	4630      	mov	r0, r6
    95c2:	a902      	add	r1, sp, #8
    95c4:	f7ff ff26 	bl	9414 <net_pkt_get_data>
	if (!ip_hdr) {
    95c8:	4605      	mov	r5, r0
    95ca:	b380      	cbz	r0, 962e <net_icmpv4_send_error+0x86>
	if (ip_hdr->proto == IPPROTO_ICMP) {
    95cc:	7a43      	ldrb	r3, [r0, #9]
    95ce:	2b01      	cmp	r3, #1
    95d0:	d110      	bne.n	95f4 <net_icmpv4_send_error+0x4c>
		NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmpv4_access,
    95d2:	2304      	movs	r3, #4
		icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(
    95d4:	4630      	mov	r0, r6
    95d6:	a904      	add	r1, sp, #16
		NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmpv4_access,
    95d8:	9404      	str	r4, [sp, #16]
    95da:	9305      	str	r3, [sp, #20]
		icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(
    95dc:	f7ff ff1a 	bl	9414 <net_pkt_get_data>
		if (!icmp_hdr || icmp_hdr->code < 8) {
    95e0:	b110      	cbz	r0, 95e8 <net_icmpv4_send_error+0x40>
    95e2:	7843      	ldrb	r3, [r0, #1]
    95e4:	2b07      	cmp	r3, #7
    95e6:	d805      	bhi.n	95f4 <net_icmpv4_send_error+0x4c>
			err = -EINVAL;
    95e8:	f06f 0515 	mvn.w	r5, #21
}
    95ec:	4628      	mov	r0, r5
    95ee:	b007      	add	sp, #28
    95f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (ip_hdr->proto == IPPROTO_UDP) {
    95f4:	7a6b      	ldrb	r3, [r5, #9]
    95f6:	2b11      	cmp	r3, #17
    95f8:	d01c      	beq.n	9634 <net_icmpv4_send_error+0x8c>
		copy_len = 0;
    95fa:	2b06      	cmp	r3, #6
    95fc:	bf0c      	ite	eq
    95fe:	2728      	moveq	r7, #40	; 0x28
    9600:	2700      	movne	r7, #0
	pkt = net_pkt_alloc_with_buffer(net_pkt_iface(orig),
    9602:	2264      	movs	r2, #100	; 0x64
    9604:	2300      	movs	r3, #0
    9606:	e9cd 2300 	strd	r2, r3, [sp]
    960a:	2301      	movs	r3, #1
    960c:	6a30      	ldr	r0, [r6, #32]
    960e:	461a      	mov	r2, r3
    9610:	1d39      	adds	r1, r7, #4
    9612:	f7fa feb7 	bl	4384 <net_pkt_alloc_with_buffer>
	if (!pkt) {
    9616:	4604      	mov	r4, r0
    9618:	b3b8      	cbz	r0, 968a <net_icmpv4_send_error+0xe2>
	if (net_ipv4_create(pkt, &ip_hdr->dst, &ip_hdr->src) ||
    961a:	f105 020c 	add.w	r2, r5, #12
    961e:	f105 0110 	add.w	r1, r5, #16
    9622:	f000 f84e 	bl	96c2 <net_ipv4_create>
    9626:	b138      	cbz	r0, 9638 <net_icmpv4_send_error+0x90>
	net_pkt_unref(pkt);
    9628:	4620      	mov	r0, r4
    962a:	f7ff fcf5 	bl	9018 <net_pkt_unref>
	int err = -EIO;
    962e:	f06f 0504 	mvn.w	r5, #4
    9632:	e7db      	b.n	95ec <net_icmpv4_send_error+0x44>
		copy_len = sizeof(struct net_ipv4_hdr) +
    9634:	271c      	movs	r7, #28
    9636:	e7e4      	b.n	9602 <net_icmpv4_send_error+0x5a>
	    icmpv4_create(pkt, type, code) ||
    9638:	4641      	mov	r1, r8
    963a:	464a      	mov	r2, r9
    963c:	4620      	mov	r0, r4
    963e:	f7ff ff26 	bl	948e <icmpv4_create>
	if (net_ipv4_create(pkt, &ip_hdr->dst, &ip_hdr->src) ||
    9642:	4601      	mov	r1, r0
    9644:	2800      	cmp	r0, #0
    9646:	d1ef      	bne.n	9628 <net_icmpv4_send_error+0x80>
	    net_pkt_memset(pkt, 0, NET_ICMPV4_UNUSED_LEN) ||
    9648:	2204      	movs	r2, #4
    964a:	4620      	mov	r0, r4
    964c:	f7ff fdb4 	bl	91b8 <net_pkt_memset>
	    icmpv4_create(pkt, type, code) ||
    9650:	2800      	cmp	r0, #0
    9652:	d1e9      	bne.n	9628 <net_icmpv4_send_error+0x80>
	    net_pkt_copy(pkt, orig, copy_len)) {
    9654:	463a      	mov	r2, r7
    9656:	4631      	mov	r1, r6
    9658:	4620      	mov	r0, r4
    965a:	f7ff fdc1 	bl	91e0 <net_pkt_copy>
	    net_pkt_memset(pkt, 0, NET_ICMPV4_UNUSED_LEN) ||
    965e:	4605      	mov	r5, r0
    9660:	2800      	cmp	r0, #0
    9662:	d1e1      	bne.n	9628 <net_icmpv4_send_error+0x80>
	net_pkt_cursor_init(pkt);
    9664:	4620      	mov	r0, r4
    9666:	f7ff fd37 	bl	90d8 <net_pkt_cursor_init>
	net_ipv4_finalize(pkt, IPPROTO_ICMP);
    966a:	2101      	movs	r1, #1
    966c:	4620      	mov	r0, r4
    966e:	f000 f85b 	bl	9728 <net_ipv4_finalize>
	net_pkt_lladdr_dst(pkt)->addr = net_pkt_lladdr_src(orig)->addr;
    9672:	6ab3      	ldr	r3, [r6, #40]	; 0x28
	if (net_send_data(pkt) >= 0) {
    9674:	4620      	mov	r0, r4
	net_pkt_lladdr_dst(pkt)->addr = net_pkt_lladdr_src(orig)->addr;
    9676:	6323      	str	r3, [r4, #48]	; 0x30
	net_pkt_lladdr_dst(pkt)->len = net_pkt_lladdr_src(orig)->len;
    9678:	f896 302c 	ldrb.w	r3, [r6, #44]	; 0x2c
    967c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	if (net_send_data(pkt) >= 0) {
    9680:	f7ff f9b8 	bl	89f4 <net_send_data>
    9684:	2800      	cmp	r0, #0
    9686:	dab1      	bge.n	95ec <net_icmpv4_send_error+0x44>
    9688:	e7ce      	b.n	9628 <net_icmpv4_send_error+0x80>
		err =  -ENOMEM;
    968a:	f06f 050b 	mvn.w	r5, #11
    968e:	e7ad      	b.n	95ec <net_icmpv4_send_error+0x44>

00009690 <net_ipv4_is_addr_mcast>:
    9690:	6800      	ldr	r0, [r0, #0]
    9692:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
}
    9696:	f1a0 03e0 	sub.w	r3, r0, #224	; 0xe0
    969a:	4258      	negs	r0, r3
    969c:	4158      	adcs	r0, r3
    969e:	4770      	bx	lr

000096a0 <net_ipv4_is_addr_bcast>:
{
    96a0:	b538      	push	{r3, r4, r5, lr}
    96a2:	460c      	mov	r4, r1
    96a4:	4605      	mov	r5, r0
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
    96a6:	f7fa fd4b 	bl	4140 <net_ipv4_broadcast_address>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
    96aa:	6822      	ldr	r2, [r4, #0]
    96ac:	6803      	ldr	r3, [r0, #0]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
    96ae:	429a      	cmp	r2, r3
    96b0:	d005      	beq.n	96be <net_ipv4_is_addr_bcast+0x1e>
	return net_if_ipv4_is_addr_bcast(iface, addr);
    96b2:	4621      	mov	r1, r4
    96b4:	4628      	mov	r0, r5
}
    96b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return net_if_ipv4_is_addr_bcast(iface, addr);
    96ba:	f7fa ba51 	b.w	3b60 <net_if_ipv4_is_addr_bcast>
}
    96be:	2001      	movs	r0, #1
    96c0:	bd38      	pop	{r3, r4, r5, pc}

000096c2 <net_ipv4_create>:
#define NET_BUF_TIMEOUT K_MSEC(50)

int net_ipv4_create(struct net_pkt *pkt,
		    const struct in_addr *src,
		    const struct in_addr *dst)
{
    96c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access, struct net_ipv4_hdr);
    96c4:	2314      	movs	r3, #20
    96c6:	2400      	movs	r4, #0
{
    96c8:	460e      	mov	r6, r1
	struct net_ipv4_hdr *ipv4_hdr;

	ipv4_hdr = (struct net_ipv4_hdr *)net_pkt_get_data(pkt, &ipv4_access);
    96ca:	4669      	mov	r1, sp
{
    96cc:	4605      	mov	r5, r0
    96ce:	4617      	mov	r7, r2
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access, struct net_ipv4_hdr);
    96d0:	e9cd 4300 	strd	r4, r3, [sp]
	ipv4_hdr = (struct net_ipv4_hdr *)net_pkt_get_data(pkt, &ipv4_access);
    96d4:	f7ff fe9e 	bl	9414 <net_pkt_get_data>
	if (!ipv4_hdr) {
    96d8:	b318      	cbz	r0, 9722 <net_ipv4_create+0x60>
		return -ENOBUFS;
	}

	ipv4_hdr->vhl       = 0x45;
    96da:	2345      	movs	r3, #69	; 0x45
	ipv4_hdr->tos       = 0x00;
    96dc:	7044      	strb	r4, [r0, #1]
	ipv4_hdr->vhl       = 0x45;
    96de:	7003      	strb	r3, [r0, #0]
	ipv4_hdr->len       = 0U;
	ipv4_hdr->id[0]     = 0U;
    96e0:	7104      	strb	r4, [r0, #4]
	ipv4_hdr->id[1]     = 0U;
    96e2:	7144      	strb	r4, [r0, #5]
	ipv4_hdr->offset[0] = 0U;
    96e4:	7184      	strb	r4, [r0, #6]
	ipv4_hdr->offset[1] = 0U;
    96e6:	71c4      	strb	r4, [r0, #7]
	return pkt->ipv4_ttl;
    96e8:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
	ipv4_hdr->len       = 0U;
    96ec:	7084      	strb	r4, [r0, #2]
    96ee:	70c4      	strb	r4, [r0, #3]

	ipv4_hdr->ttl       = net_pkt_ipv4_ttl(pkt);
    96f0:	7203      	strb	r3, [r0, #8]
	if (ipv4_hdr->ttl == 0U) {
    96f2:	b92b      	cbnz	r3, 9700 <net_ipv4_create+0x3e>
	return pkt->iface;
    96f4:	6a2a      	ldr	r2, [r5, #32]
    96f6:	6852      	ldr	r2, [r2, #4]
 * @return Time-to-live
 */
static inline uint8_t net_if_ipv4_get_ttl(struct net_if *iface)
{
#if defined(CONFIG_NET_NATIVE_IPV4)
	if (!iface->config.ip.ipv4) {
    96f8:	b10a      	cbz	r2, 96fe <net_ipv4_create+0x3c>
		return 0;
	}

	return iface->config.ip.ipv4->ttl;
    96fa:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
		ipv4_hdr->ttl = net_if_ipv4_get_ttl(net_pkt_iface(pkt));
    96fe:	7203      	strb	r3, [r0, #8]
	}

	ipv4_hdr->proto     = 0U;
    9700:	2300      	movs	r3, #0
    9702:	7243      	strb	r3, [r0, #9]
	ipv4_hdr->chksum    = 0U;
    9704:	7283      	strb	r3, [r0, #10]
    9706:	72c3      	strb	r3, [r0, #11]

	net_ipaddr_copy(&ipv4_hdr->dst, dst);
    9708:	683b      	ldr	r3, [r7, #0]
    970a:	6103      	str	r3, [r0, #16]
	net_ipaddr_copy(&ipv4_hdr->src, src);
    970c:	6833      	ldr	r3, [r6, #0]
    970e:	60c3      	str	r3, [r0, #12]
	pkt->ip_hdr_len = len;
    9710:	2314      	movs	r3, #20

	net_pkt_set_ip_hdr_len(pkt, sizeof(struct net_ipv4_hdr));

	return net_pkt_set_data(pkt, &ipv4_access);
    9712:	4669      	mov	r1, sp
    9714:	4628      	mov	r0, r5
    9716:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
    971a:	f7ff fe9a 	bl	9452 <net_pkt_set_data>
}
    971e:	b003      	add	sp, #12
    9720:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOBUFS;
    9722:	f06f 0036 	mvn.w	r0, #54	; 0x36
    9726:	e7fa      	b.n	971e <net_ipv4_create+0x5c>

00009728 <net_ipv4_finalize>:

int net_ipv4_finalize(struct net_pkt *pkt, uint8_t next_header_proto)
{
    9728:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access, struct net_ipv4_hdr);
    972a:	2314      	movs	r3, #20
    972c:	2500      	movs	r5, #0
    972e:	e9cd 5300 	strd	r5, r3, [sp]
	pkt->overwrite = overwrite;
    9732:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
    9736:	460f      	mov	r7, r1
    9738:	f043 0301 	orr.w	r3, r3, #1
	struct net_ipv4_hdr *ipv4_hdr;

	net_pkt_set_overwrite(pkt, true);

	ipv4_hdr = (struct net_ipv4_hdr *)net_pkt_get_data(pkt, &ipv4_access);
    973c:	4669      	mov	r1, sp
    973e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
{
    9742:	4604      	mov	r4, r0
	ipv4_hdr = (struct net_ipv4_hdr *)net_pkt_get_data(pkt, &ipv4_access);
    9744:	f7ff fe66 	bl	9414 <net_pkt_get_data>
	if (!ipv4_hdr) {
    9748:	4606      	mov	r6, r0
    974a:	b310      	cbz	r0, 9792 <net_ipv4_finalize+0x6a>
	size_t bytes = 0;
    974c:	462b      	mov	r3, r5
    974e:	6922      	ldr	r2, [r4, #16]
	while (buf) {
    9750:	b9aa      	cbnz	r2, 977e <net_ipv4_finalize+0x56>
					((net_pkt_ip_hdr_len(pkt) +
					  net_pkt_ipv4_opts_len(pkt)) / 4U));
		}
	}

	ipv4_hdr->len   = htons(net_pkt_get_len(pkt));
    9752:	ba5b      	rev16	r3, r3
	ipv4_hdr->proto = next_header_proto;
    9754:	7277      	strb	r7, [r6, #9]

	if (net_if_need_calc_tx_checksum(net_pkt_iface(pkt))) {
    9756:	6a20      	ldr	r0, [r4, #32]
	ipv4_hdr->len   = htons(net_pkt_get_len(pkt));
    9758:	8073      	strh	r3, [r6, #2]
	if (net_if_need_calc_tx_checksum(net_pkt_iface(pkt))) {
    975a:	f7ff fa7a 	bl	8c52 <net_if_need_calc_tx_checksum>
    975e:	b118      	cbz	r0, 9768 <net_ipv4_finalize+0x40>
		ipv4_hdr->chksum = net_calc_chksum_ipv4(pkt);
    9760:	4620      	mov	r0, r4
    9762:	f7ff fb49 	bl	8df8 <net_calc_chksum_ipv4>
    9766:	8170      	strh	r0, [r6, #10]
	}

	net_pkt_set_data(pkt, &ipv4_access);
    9768:	4669      	mov	r1, sp
    976a:	4620      	mov	r0, r4
    976c:	f7ff fe71 	bl	9452 <net_pkt_set_data>

	if (IS_ENABLED(CONFIG_NET_UDP) &&
    9770:	2f11      	cmp	r7, #17
    9772:	d108      	bne.n	9786 <net_ipv4_finalize+0x5e>
	    next_header_proto == IPPROTO_UDP) {
		return net_udp_finalize(pkt);
    9774:	4620      	mov	r0, r4
    9776:	f000 f8aa 	bl	98ce <net_udp_finalize>
	} else if (next_header_proto == IPPROTO_ICMP) {
		return net_icmpv4_finalize(pkt);
	}

	return 0;
}
    977a:	b003      	add	sp, #12
    977c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		bytes += buf->len;
    977e:	8991      	ldrh	r1, [r2, #12]
		buf = buf->frags;
    9780:	6812      	ldr	r2, [r2, #0]
		bytes += buf->len;
    9782:	440b      	add	r3, r1
		buf = buf->frags;
    9784:	e7e4      	b.n	9750 <net_ipv4_finalize+0x28>
	} else if (next_header_proto == IPPROTO_ICMP) {
    9786:	2f01      	cmp	r7, #1
    9788:	d106      	bne.n	9798 <net_ipv4_finalize+0x70>
		return net_icmpv4_finalize(pkt);
    978a:	4620      	mov	r0, r4
    978c:	f7ff fef3 	bl	9576 <net_icmpv4_finalize>
    9790:	e7f3      	b.n	977a <net_ipv4_finalize+0x52>
		return -ENOBUFS;
    9792:	f06f 0036 	mvn.w	r0, #54	; 0x36
    9796:	e7f0      	b.n	977a <net_ipv4_finalize+0x52>
	return 0;
    9798:	2000      	movs	r0, #0
    979a:	e7ee      	b.n	977a <net_ipv4_finalize+0x52>

0000979c <net_ipv4_input>:
	return 0;
}
#endif

enum net_verdict net_ipv4_input(struct net_pkt *pkt)
{
    979c:	b5f0      	push	{r4, r5, r6, r7, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access, struct net_ipv4_hdr);
    979e:	2314      	movs	r3, #20
    97a0:	2700      	movs	r7, #0
{
    97a2:	b089      	sub	sp, #36	; 0x24
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access, struct net_ipv4_hdr);
    97a4:	e9cd 7302 	strd	r7, r3, [sp, #8]
	NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
    97a8:	ab04      	add	r3, sp, #16
    97aa:	9306      	str	r3, [sp, #24]
    97ac:	2308      	movs	r3, #8
{
    97ae:	4604      	mov	r4, r0
	NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
    97b0:	9307      	str	r3, [sp, #28]
	NET_PKT_DATA_ACCESS_DEFINE(tcp_access, struct net_tcp_hdr);
	int real_len = net_pkt_get_len(pkt);
    97b2:	6903      	ldr	r3, [r0, #16]
	while (buf) {
    97b4:	b943      	cbnz	r3, 97c8 <net_ipv4_input+0x2c>
	uint8_t opts_len;
	int pkt_len;

	net_stats_update_ipv4_recv(net_pkt_iface(pkt));

	hdr = (struct net_ipv4_hdr *)net_pkt_get_data(pkt, &ipv4_access);
    97b6:	4620      	mov	r0, r4
    97b8:	a902      	add	r1, sp, #8
    97ba:	f7ff fe2b 	bl	9414 <net_pkt_get_data>
	if (!hdr) {
    97be:	4605      	mov	r5, r0
    97c0:	b930      	cbnz	r0, 97d0 <net_ipv4_input+0x34>

	NET_DBG("IPv4 packet received from %s to %s",
		log_strdup(net_sprint_ipv4_addr(&hdr->src)),
		log_strdup(net_sprint_ipv4_addr(&hdr->dst)));

	switch (hdr->proto) {
    97c2:	2002      	movs	r0, #2
		return verdict;
	}
drop:
	net_stats_update_ipv4_drop(net_pkt_iface(pkt));
	return NET_DROP;
}
    97c4:	b009      	add	sp, #36	; 0x24
    97c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		bytes += buf->len;
    97c8:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
    97ca:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
    97cc:	4417      	add	r7, r2
		buf = buf->frags;
    97ce:	e7f1      	b.n	97b4 <net_ipv4_input+0x18>
	hdr_len = (hdr->vhl & NET_IPV4_IHL_MASK) * 4U;
    97d0:	7806      	ldrb	r6, [r0, #0]
    97d2:	f006 060f 	and.w	r6, r6, #15
    97d6:	00b6      	lsls	r6, r6, #2
	if (hdr_len < sizeof(struct net_ipv4_hdr)) {
    97d8:	2e13      	cmp	r6, #19
    97da:	d9f2      	bls.n	97c2 <net_ipv4_input+0x26>
	pkt->ip_hdr_len = len;
    97dc:	2314      	movs	r3, #20
    97de:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	opts_len = hdr_len - sizeof(struct net_ipv4_hdr);
    97e2:	8841      	ldrh	r1, [r0, #2]
    97e4:	3e14      	subs	r6, #20
    97e6:	ba49      	rev16	r1, r1
    97e8:	b289      	uxth	r1, r1
    97ea:	b2f6      	uxtb	r6, r6
	if (real_len < pkt_len) {
    97ec:	42b9      	cmp	r1, r7
	pkt->ipv4_opts_len = opts_len;
    97ee:	f884 603e 	strb.w	r6, [r4, #62]	; 0x3e
    97f2:	dce6      	bgt.n	97c2 <net_ipv4_input+0x26>
	} else if (real_len > pkt_len) {
    97f4:	da02      	bge.n	97fc <net_ipv4_input+0x60>
		net_pkt_update_length(pkt, pkt_len);
    97f6:	4620      	mov	r0, r4
    97f8:	f7ff fd43 	bl	9282 <net_pkt_update_length>
	if (net_ipv4_is_addr_mcast(&hdr->src)) {
    97fc:	f105 010c 	add.w	r1, r5, #12
    9800:	4608      	mov	r0, r1
    9802:	f7ff ff45 	bl	9690 <net_ipv4_is_addr_mcast>
    9806:	2800      	cmp	r0, #0
    9808:	d1db      	bne.n	97c2 <net_ipv4_input+0x26>
	if (net_ipv4_is_addr_bcast(net_pkt_iface(pkt), &hdr->src)) {
    980a:	6a20      	ldr	r0, [r4, #32]
    980c:	f7ff ff48 	bl	96a0 <net_ipv4_is_addr_bcast>
    9810:	2800      	cmp	r0, #0
    9812:	d1d6      	bne.n	97c2 <net_ipv4_input+0x26>
	return UNALIGNED_GET(&addr->s_addr) == 0;
    9814:	68eb      	ldr	r3, [r5, #12]
	if (net_ipv4_is_addr_unspecified(&hdr->src)) {
    9816:	2b00      	cmp	r3, #0
    9818:	d0d3      	beq.n	97c2 <net_ipv4_input+0x26>
	if (net_if_need_calc_rx_checksum(net_pkt_iface(pkt)) &&
    981a:	6a20      	ldr	r0, [r4, #32]
    981c:	f7ff fa1c 	bl	8c58 <net_if_need_calc_rx_checksum>
    9820:	2800      	cmp	r0, #0
    9822:	d149      	bne.n	98b8 <net_ipv4_input+0x11c>
	if ((!net_ipv4_is_my_addr(&hdr->dst) &&
    9824:	f105 0710 	add.w	r7, r5, #16
	ret = net_if_ipv4_addr_lookup(addr, NULL) != NULL;
    9828:	2100      	movs	r1, #0
    982a:	4638      	mov	r0, r7
    982c:	f7fa fa48 	bl	3cc0 <net_if_ipv4_addr_lookup>
	if (!ret) {
    9830:	b980      	cbnz	r0, 9854 <net_ipv4_input+0xb8>
		ret = net_ipv4_is_addr_bcast(NULL, addr);
    9832:	4639      	mov	r1, r7
    9834:	f7ff ff34 	bl	96a0 <net_ipv4_is_addr_bcast>
    9838:	b960      	cbnz	r0, 9854 <net_ipv4_input+0xb8>
	     !net_ipv4_is_addr_mcast(&hdr->dst) &&
    983a:	4638      	mov	r0, r7
    983c:	f7ff ff28 	bl	9690 <net_ipv4_is_addr_mcast>
	if ((!net_ipv4_is_my_addr(&hdr->dst) &&
    9840:	b940      	cbnz	r0, 9854 <net_ipv4_input+0xb8>
	     !net_ipv4_is_addr_mcast(&hdr->dst) &&
    9842:	7a6b      	ldrb	r3, [r5, #9]
    9844:	2b11      	cmp	r3, #17
    9846:	d1bc      	bne.n	97c2 <net_ipv4_input+0x26>
	       (net_ipv4_addr_cmp(&hdr->dst, net_ipv4_broadcast_address()) ||
    9848:	f7fa fc7a 	bl	4140 <net_ipv4_broadcast_address>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
    984c:	692b      	ldr	r3, [r5, #16]
    984e:	6802      	ldr	r2, [r0, #0]
	     !(hdr->proto == IPPROTO_UDP &&
    9850:	429a      	cmp	r2, r3
    9852:	d1b6      	bne.n	97c2 <net_ipv4_input+0x26>
				   net_ipv4_unspecified_address()))))) ||
    9854:	7a6b      	ldrb	r3, [r5, #9]
    9856:	2b06      	cmp	r3, #6
    9858:	d105      	bne.n	9866 <net_ipv4_input+0xca>
	     net_ipv4_is_addr_bcast(net_pkt_iface(pkt), &hdr->dst))) {
    985a:	4639      	mov	r1, r7
    985c:	6a20      	ldr	r0, [r4, #32]
    985e:	f7ff ff1f 	bl	96a0 <net_ipv4_is_addr_bcast>
	    (hdr->proto == IPPROTO_TCP &&
    9862:	2800      	cmp	r0, #0
    9864:	d1ad      	bne.n	97c2 <net_ipv4_input+0x26>
	return net_pkt_skip(pkt, access->size);
    9866:	4620      	mov	r0, r4
    9868:	9903      	ldr	r1, [sp, #12]
    986a:	f7ff fc9a 	bl	91a2 <net_pkt_skip>
	if (opts_len) {
    986e:	b12e      	cbz	r6, 987c <net_ipv4_input+0xe0>
		if (net_pkt_skip(pkt, opts_len)) {
    9870:	4631      	mov	r1, r6
    9872:	4620      	mov	r0, r4
    9874:	f7ff fc95 	bl	91a2 <net_pkt_skip>
    9878:	2800      	cmp	r0, #0
    987a:	d1a2      	bne.n	97c2 <net_ipv4_input+0x26>
	pkt->family = family;
    987c:	2201      	movs	r2, #1
	pkt->ipv4_ttl = ttl;
    987e:	7a2b      	ldrb	r3, [r5, #8]
    9880:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	pkt->family = family;
    9884:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
    9888:	f362 0343 	bfi	r3, r2, #1, #3
    988c:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
	switch (hdr->proto) {
    9890:	7a6b      	ldrb	r3, [r5, #9]
    9892:	4293      	cmp	r3, r2
    9894:	d016      	beq.n	98c4 <net_ipv4_input+0x128>
    9896:	2b11      	cmp	r3, #17
    9898:	d193      	bne.n	97c2 <net_ipv4_input+0x26>
		proto_hdr.udp = net_udp_input(pkt, &udp_access);
    989a:	4620      	mov	r0, r4
    989c:	a906      	add	r1, sp, #24
    989e:	f000 f849 	bl	9934 <net_udp_input>
    98a2:	9000      	str	r0, [sp, #0]
		if (proto_hdr.udp) {
    98a4:	2800      	cmp	r0, #0
    98a6:	d08c      	beq.n	97c2 <net_ipv4_input+0x26>
	verdict = net_conn_input(pkt, &ip, hdr->proto, &proto_hdr);
    98a8:	466b      	mov	r3, sp
    98aa:	4620      	mov	r0, r4
    98ac:	7a6a      	ldrb	r2, [r5, #9]
    98ae:	a901      	add	r1, sp, #4
	ip.ipv4 = hdr;
    98b0:	9501      	str	r5, [sp, #4]
	verdict = net_conn_input(pkt, &ip, hdr->proto, &proto_hdr);
    98b2:	f7fa fe29 	bl	4508 <net_conn_input>
	if (verdict != NET_DROP) {
    98b6:	e785      	b.n	97c4 <net_ipv4_input+0x28>
	    net_calc_chksum_ipv4(pkt) != 0U) {
    98b8:	4620      	mov	r0, r4
    98ba:	f7ff fa9d 	bl	8df8 <net_calc_chksum_ipv4>
	if (net_if_need_calc_rx_checksum(net_pkt_iface(pkt)) &&
    98be:	2800      	cmp	r0, #0
    98c0:	d0b0      	beq.n	9824 <net_ipv4_input+0x88>
    98c2:	e77e      	b.n	97c2 <net_ipv4_input+0x26>
		verdict = net_icmpv4_input(pkt, hdr);
    98c4:	4629      	mov	r1, r5
    98c6:	4620      	mov	r0, r4
    98c8:	f7fa fdd8 	bl	447c <net_icmpv4_input>
		if (verdict == NET_DROP) {
    98cc:	e77a      	b.n	97c4 <net_ipv4_input+0x28>

000098ce <net_udp_finalize>:
	return net_pkt_set_data(pkt, &udp_access);
}

int net_udp_finalize(struct net_pkt *pkt)
{
	NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
    98ce:	2308      	movs	r3, #8
{
    98d0:	b530      	push	{r4, r5, lr}
    98d2:	b085      	sub	sp, #20
	struct net_udp_hdr *udp_hdr;
	uint16_t length = 0;

	udp_hdr = (struct net_udp_hdr *)net_pkt_get_data(pkt, &udp_access);
    98d4:	eb0d 0103 	add.w	r1, sp, r3
{
    98d8:	4604      	mov	r4, r0
	NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
    98da:	f8cd d008 	str.w	sp, [sp, #8]
    98de:	9303      	str	r3, [sp, #12]
	udp_hdr = (struct net_udp_hdr *)net_pkt_get_data(pkt, &udp_access);
    98e0:	f7ff fd98 	bl	9414 <net_pkt_get_data>
	if (!udp_hdr) {
    98e4:	4605      	mov	r5, r0
    98e6:	b310      	cbz	r0, 992e <net_udp_finalize+0x60>
	size_t bytes = 0;
    98e8:	2300      	movs	r3, #0
    98ea:	6922      	ldr	r2, [r4, #16]
	while (buf) {
    98ec:	b9da      	cbnz	r2, 9926 <net_udp_finalize+0x58>
		return -ENOBUFS;
	}

	length = net_pkt_get_len(pkt) - net_pkt_ip_hdr_len(pkt) -
    98ee:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
	return pkt->ipv4_opts_len;
    98f2:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
		 net_pkt_ip_opts_len(pkt);

	udp_hdr->len = htons(length);

	if (net_if_need_calc_tx_checksum(net_pkt_iface(pkt))) {
    98f6:	6a20      	ldr	r0, [r4, #32]
	length = net_pkt_get_len(pkt) - net_pkt_ip_hdr_len(pkt) -
    98f8:	440a      	add	r2, r1
    98fa:	1a9b      	subs	r3, r3, r2
	udp_hdr->len = htons(length);
    98fc:	ba5b      	rev16	r3, r3
    98fe:	80ab      	strh	r3, [r5, #4]
	if (net_if_need_calc_tx_checksum(net_pkt_iface(pkt))) {
    9900:	f7ff f9a7 	bl	8c52 <net_if_need_calc_tx_checksum>
    9904:	b148      	cbz	r0, 991a <net_udp_finalize+0x4c>
}

static inline uint16_t net_calc_chksum_udp(struct net_pkt *pkt)
{
	uint16_t chksum = net_calc_chksum(pkt, IPPROTO_UDP);
    9906:	2111      	movs	r1, #17
    9908:	4620      	mov	r0, r4
    990a:	f7ff f9f0 	bl	8cee <net_calc_chksum>

	return chksum == 0U ? 0xffff : chksum;
    990e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    9912:	2800      	cmp	r0, #0
    9914:	bf18      	it	ne
    9916:	4603      	movne	r3, r0
		udp_hdr->chksum = net_calc_chksum_udp(pkt);
    9918:	80eb      	strh	r3, [r5, #6]
	}

	return net_pkt_set_data(pkt, &udp_access);
    991a:	4620      	mov	r0, r4
    991c:	a902      	add	r1, sp, #8
    991e:	f7ff fd98 	bl	9452 <net_pkt_set_data>
}
    9922:	b005      	add	sp, #20
    9924:	bd30      	pop	{r4, r5, pc}
		bytes += buf->len;
    9926:	8991      	ldrh	r1, [r2, #12]
		buf = buf->frags;
    9928:	6812      	ldr	r2, [r2, #0]
		bytes += buf->len;
    992a:	440b      	add	r3, r1
		buf = buf->frags;
    992c:	e7de      	b.n	98ec <net_udp_finalize+0x1e>
		return -ENOBUFS;
    992e:	f06f 0036 	mvn.w	r0, #54	; 0x36
    9932:	e7f6      	b.n	9922 <net_udp_finalize+0x54>

00009934 <net_udp_input>:
	return net_conn_unregister(handle);
}

struct net_udp_hdr *net_udp_input(struct net_pkt *pkt,
				  struct net_pkt_data_access *udp_access)
{
    9934:	b570      	push	{r4, r5, r6, lr}
    9936:	4604      	mov	r4, r0
    9938:	460e      	mov	r6, r1
	struct net_udp_hdr *udp_hdr;

	udp_hdr = (struct net_udp_hdr *)net_pkt_get_data(pkt, udp_access);
    993a:	f7ff fd6b 	bl	9414 <net_pkt_get_data>
	if (!udp_hdr || net_pkt_set_data(pkt, udp_access)) {
    993e:	4605      	mov	r5, r0
    9940:	b910      	cbnz	r0, 9948 <net_udp_input+0x14>
	}
out:
	return udp_hdr;
drop:
	net_stats_update_udp_chkerr(net_pkt_iface(pkt));
	return NULL;
    9942:	2500      	movs	r5, #0
}
    9944:	4628      	mov	r0, r5
    9946:	bd70      	pop	{r4, r5, r6, pc}
	if (!udp_hdr || net_pkt_set_data(pkt, udp_access)) {
    9948:	4631      	mov	r1, r6
    994a:	4620      	mov	r0, r4
    994c:	f7ff fd81 	bl	9452 <net_pkt_set_data>
    9950:	4603      	mov	r3, r0
    9952:	2800      	cmp	r0, #0
    9954:	d1f5      	bne.n	9942 <net_udp_input+0xe>
	if (ntohs(udp_hdr->len) != (net_pkt_get_len(pkt) -
    9956:	88aa      	ldrh	r2, [r5, #4]
    9958:	6921      	ldr	r1, [r4, #16]
    995a:	ba52      	rev16	r2, r2
    995c:	b292      	uxth	r2, r2
	while (buf) {
    995e:	b9b1      	cbnz	r1, 998e <net_udp_input+0x5a>
				    net_pkt_ip_hdr_len(pkt) -
    9960:	f894 0038 	ldrb.w	r0, [r4, #56]	; 0x38
				    net_pkt_ip_opts_len(pkt))) {
    9964:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
				    net_pkt_ip_hdr_len(pkt) -
    9968:	4408      	add	r0, r1
    996a:	1a1b      	subs	r3, r3, r0
	if (ntohs(udp_hdr->len) != (net_pkt_get_len(pkt) -
    996c:	429a      	cmp	r2, r3
    996e:	d1e8      	bne.n	9942 <net_udp_input+0xe>
	    net_if_need_calc_rx_checksum(net_pkt_iface(pkt))) {
    9970:	6a20      	ldr	r0, [r4, #32]
    9972:	f7ff f971 	bl	8c58 <net_if_need_calc_rx_checksum>
	if (IS_ENABLED(CONFIG_NET_UDP_CHECKSUM) &&
    9976:	2800      	cmp	r0, #0
    9978:	d0e4      	beq.n	9944 <net_udp_input+0x10>
		if (!udp_hdr->chksum) {
    997a:	88eb      	ldrh	r3, [r5, #6]
    997c:	2b00      	cmp	r3, #0
    997e:	d0e0      	beq.n	9942 <net_udp_input+0xe>
}

static inline uint16_t net_calc_verify_chksum_udp(struct net_pkt *pkt)
{
	return net_calc_chksum(pkt, IPPROTO_UDP);
    9980:	2111      	movs	r1, #17
    9982:	4620      	mov	r0, r4
    9984:	f7ff f9b3 	bl	8cee <net_calc_chksum>
		if (net_calc_verify_chksum_udp(pkt) != 0U) {
    9988:	2800      	cmp	r0, #0
    998a:	d0db      	beq.n	9944 <net_udp_input+0x10>
    998c:	e7d9      	b.n	9942 <net_udp_input+0xe>
		bytes += buf->len;
    998e:	8988      	ldrh	r0, [r1, #12]
		buf = buf->frags;
    9990:	6809      	ldr	r1, [r1, #0]
		bytes += buf->len;
    9992:	4403      	add	r3, r0
		buf = buf->frags;
    9994:	e7e3      	b.n	995e <net_udp_input+0x2a>

00009996 <k_thread_abort>:
	z_impl_k_thread_abort(thread);
    9996:	f7f9 b913 	b.w	2bc0 <z_impl_k_thread_abort>

0000999a <ztest_relative_filename>:
}
    999a:	4770      	bx	lr

0000999c <main>:

	return test_status;
}
#else
void main(void)
{
    999c:	b508      	push	{r3, lr}
	k_mem_domain_add_partition(&k_mem_domain_default,
				   &z_malloc_partition);
#endif
#endif /* CONFIG_USERSPACE */

	z_init_mock();
    999e:	f000 f806 	bl	99ae <z_init_mock>
	test_main();
    99a2:	f7f6 fe3b 	bl	61c <test_main>
		} else {
			PRINT("Failed after %u attempts\n", state.boots);
			state.boots = 0;
		}
	}
}
    99a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	end_report();
    99aa:	f7fa bfad 	b.w	4908 <end_report>

000099ae <z_init_mock>:
}
    99ae:	4770      	bx	lr

000099b0 <gpio_cmsdk_ahb_port_get_raw>:
	*value = cfg->port->data;
    99b0:	6843      	ldr	r3, [r0, #4]
}
    99b2:	2000      	movs	r0, #0
	*value = cfg->port->data;
    99b4:	685b      	ldr	r3, [r3, #4]
    99b6:	681b      	ldr	r3, [r3, #0]
    99b8:	600b      	str	r3, [r1, #0]
}
    99ba:	4770      	bx	lr

000099bc <gpio_cmsdk_ahb_port_set_masked_raw>:
	cfg->port->dataout = (cfg->port->dataout & ~mask) | (mask & value);
    99bc:	6843      	ldr	r3, [r0, #4]
    99be:	685b      	ldr	r3, [r3, #4]
    99c0:	6858      	ldr	r0, [r3, #4]
    99c2:	4042      	eors	r2, r0
    99c4:	400a      	ands	r2, r1
    99c6:	4042      	eors	r2, r0
    99c8:	605a      	str	r2, [r3, #4]
}
    99ca:	2000      	movs	r0, #0
    99cc:	4770      	bx	lr

000099ce <gpio_cmsdk_ahb_port_set_bits_raw>:
	cfg->port->dataout |= mask;
    99ce:	6843      	ldr	r3, [r0, #4]
}
    99d0:	2000      	movs	r0, #0
	cfg->port->dataout |= mask;
    99d2:	685a      	ldr	r2, [r3, #4]
    99d4:	6853      	ldr	r3, [r2, #4]
    99d6:	430b      	orrs	r3, r1
    99d8:	6053      	str	r3, [r2, #4]
}
    99da:	4770      	bx	lr

000099dc <gpio_cmsdk_ahb_port_clear_bits_raw>:
	cfg->port->dataout &= ~mask;
    99dc:	6843      	ldr	r3, [r0, #4]
}
    99de:	2000      	movs	r0, #0
	cfg->port->dataout &= ~mask;
    99e0:	685a      	ldr	r2, [r3, #4]
    99e2:	6853      	ldr	r3, [r2, #4]
    99e4:	ea23 0301 	bic.w	r3, r3, r1
    99e8:	6053      	str	r3, [r2, #4]
}
    99ea:	4770      	bx	lr

000099ec <gpio_cmsdk_ahb_port_toggle_bits>:
	cfg->port->dataout ^= mask;
    99ec:	6843      	ldr	r3, [r0, #4]
}
    99ee:	2000      	movs	r0, #0
	cfg->port->dataout ^= mask;
    99f0:	685a      	ldr	r2, [r3, #4]
    99f2:	6853      	ldr	r3, [r2, #4]
    99f4:	404b      	eors	r3, r1
    99f6:	6053      	str	r3, [r2, #4]
}
    99f8:	4770      	bx	lr

000099fa <gpio_cmsdk_ahb_config>:
	return cmsdk_ahb_gpio_config(dev, BIT(pin), flags);
    99fa:	2301      	movs	r3, #1
	if (((flags & GPIO_INPUT) == 0) && ((flags & GPIO_OUTPUT) == 0)) {
    99fc:	f412 7f40 	tst.w	r2, #768	; 0x300
{
    9a00:	b510      	push	{r4, lr}
	return cmsdk_ahb_gpio_config(dev, BIT(pin), flags);
    9a02:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_cmsdk_ahb_cfg * const cfg = dev->config;
    9a06:	6844      	ldr	r4, [r0, #4]
	if (((flags & GPIO_INPUT) == 0) && ((flags & GPIO_OUTPUT) == 0)) {
    9a08:	d016      	beq.n	9a38 <gpio_cmsdk_ahb_config+0x3e>
	if ((flags & GPIO_SINGLE_ENDED) != 0) {
    9a0a:	f012 0f32 	tst.w	r2, #50	; 0x32
    9a0e:	d113      	bne.n	9a38 <gpio_cmsdk_ahb_config+0x3e>
	if ((flags & GPIO_OUTPUT) != 0) {
    9a10:	0593      	lsls	r3, r2, #22
    9a12:	d50e      	bpl.n	9a32 <gpio_cmsdk_ahb_config+0x38>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    9a14:	0513      	lsls	r3, r2, #20
    9a16:	d507      	bpl.n	9a28 <gpio_cmsdk_ahb_config+0x2e>
			gpio_cmsdk_ahb_port_set_bits_raw(dev, mask);
    9a18:	f7ff ffd9 	bl	99ce <gpio_cmsdk_ahb_port_set_bits_raw>
		cfg->port->outenableset = mask;
    9a1c:	6863      	ldr	r3, [r4, #4]
    9a1e:	6119      	str	r1, [r3, #16]
	return 0;
    9a20:	2000      	movs	r0, #0
	cfg->port->altfuncclr = mask;
    9a22:	6863      	ldr	r3, [r4, #4]
    9a24:	61d9      	str	r1, [r3, #28]
}
    9a26:	bd10      	pop	{r4, pc}
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    9a28:	0553      	lsls	r3, r2, #21
    9a2a:	d5f7      	bpl.n	9a1c <gpio_cmsdk_ahb_config+0x22>
			gpio_cmsdk_ahb_port_clear_bits_raw(dev, mask);
    9a2c:	f7ff ffd6 	bl	99dc <gpio_cmsdk_ahb_port_clear_bits_raw>
    9a30:	e7f4      	b.n	9a1c <gpio_cmsdk_ahb_config+0x22>
		cfg->port->outenableclr = mask;
    9a32:	6863      	ldr	r3, [r4, #4]
    9a34:	6159      	str	r1, [r3, #20]
    9a36:	e7f3      	b.n	9a20 <gpio_cmsdk_ahb_config+0x26>
		return -ENOTSUP;
    9a38:	f06f 0022 	mvn.w	r0, #34	; 0x22
	return cmsdk_ahb_gpio_config(dev, BIT(pin), flags);
    9a3c:	e7f3      	b.n	9a26 <gpio_cmsdk_ahb_config+0x2c>

00009a3e <gpio_cmsdk_ahb_pin_interrupt_configure>:
	if (trig == GPIO_INT_TRIG_BOTH) {
    9a3e:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
{
    9a42:	b510      	push	{r4, lr}
	const struct gpio_cmsdk_ahb_cfg * const cfg = dev->config;
    9a44:	6840      	ldr	r0, [r0, #4]
	if (trig == GPIO_INT_TRIG_BOTH) {
    9a46:	d019      	beq.n	9a7c <gpio_cmsdk_ahb_pin_interrupt_configure+0x3e>
	if (mode == GPIO_INT_MODE_LEVEL) {
    9a48:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
    9a4c:	d016      	beq.n	9a7c <gpio_cmsdk_ahb_pin_interrupt_configure+0x3e>
		cfg->port->intenclr = BIT(pin);
    9a4e:	6844      	ldr	r4, [r0, #4]
    9a50:	2001      	movs	r0, #1
	if (mode == GPIO_INT_MODE_DISABLED) {
    9a52:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
		cfg->port->intenclr = BIT(pin);
    9a56:	fa00 f101 	lsl.w	r1, r0, r1
	if (mode == GPIO_INT_MODE_DISABLED) {
    9a5a:	d102      	bne.n	9a62 <gpio_cmsdk_ahb_pin_interrupt_configure+0x24>
		cfg->port->intenclr = BIT(pin);
    9a5c:	6261      	str	r1, [r4, #36]	; 0x24
	return 0;
    9a5e:	2000      	movs	r0, #0
}
    9a60:	bd10      	pop	{r4, pc}
		if (mode == GPIO_INT_MODE_EDGE) {
    9a62:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
			cfg->port->inttypeset = BIT(pin);
    9a66:	bf0c      	ite	eq
    9a68:	62a1      	streq	r1, [r4, #40]	; 0x28
			cfg->port->inttypeclr = BIT(pin);
    9a6a:	62e1      	strne	r1, [r4, #44]	; 0x2c
		if (trig == GPIO_INT_TRIG_HIGH) {
    9a6c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
			cfg->port->intpolset = BIT(pin);
    9a70:	bf0c      	ite	eq
    9a72:	6321      	streq	r1, [r4, #48]	; 0x30
			cfg->port->intpolclr = BIT(pin);
    9a74:	6361      	strne	r1, [r4, #52]	; 0x34
		cfg->port->intclear = BIT(pin);
    9a76:	63a1      	str	r1, [r4, #56]	; 0x38
		cfg->port->intenset = BIT(pin);
    9a78:	6221      	str	r1, [r4, #32]
    9a7a:	e7f0      	b.n	9a5e <gpio_cmsdk_ahb_pin_interrupt_configure+0x20>
		return -ENOTSUP;
    9a7c:	f06f 0022 	mvn.w	r0, #34	; 0x22
    9a80:	e7ee      	b.n	9a60 <gpio_cmsdk_ahb_pin_interrupt_configure+0x22>

00009a82 <gpio_cmsdk_ahb_init>:
 *
 * @param dev Device struct
 * @return 0 if successful, failed otherwise.
 */
static int gpio_cmsdk_ahb_init(const struct device *dev)
{
    9a82:	b508      	push	{r3, lr}
	clock_control_off(clk, (clock_control_subsys_t *) &cfg->gpio_cc_ss);
	clock_control_off(clk, (clock_control_subsys_t *) &cfg->gpio_cc_dss);
#endif /* CONFIG_SOC_SERIES_BEETLE */
#endif /* CONFIG_CLOCK_CONTROL */

	cfg->gpio_config_func(dev);
    9a84:	6843      	ldr	r3, [r0, #4]
    9a86:	689b      	ldr	r3, [r3, #8]
    9a88:	4798      	blx	r3

	return 0;
}
    9a8a:	2000      	movs	r0, #0
    9a8c:	bd08      	pop	{r3, pc}

00009a8e <gpio_cmsdk_port_0_config_func>:
			    DEVICE_DT_INST_GET(n), 0);				\
										\
		irq_enable(DT_INST_IRQN(n));					\
	}

DT_INST_FOREACH_STATUS_OKAY(CMSDK_AHB_GPIO_DEVICE)
    9a8e:	b508      	push	{r3, lr}
    9a90:	2006      	movs	r0, #6
    9a92:	2200      	movs	r2, #0
    9a94:	2103      	movs	r1, #3
    9a96:	f7f8 fd45 	bl	2524 <z_arm_irq_priority_set>
    9a9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    9a9e:	2006      	movs	r0, #6
    9aa0:	f7f8 bd30 	b.w	2504 <arch_irq_enable>

00009aa4 <gpio_cmsdk_port_1_config_func>:
    9aa4:	b508      	push	{r3, lr}
    9aa6:	2007      	movs	r0, #7
    9aa8:	2200      	movs	r2, #0
    9aaa:	2103      	movs	r1, #3
    9aac:	f7f8 fd3a 	bl	2524 <z_arm_irq_priority_set>
    9ab0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    9ab4:	2007      	movs	r0, #7
    9ab6:	f7f8 bd25 	b.w	2504 <arch_irq_enable>

00009aba <gpio_cmsdk_port_2_config_func>:
    9aba:	b508      	push	{r3, lr}
    9abc:	2010      	movs	r0, #16
    9abe:	2200      	movs	r2, #0
    9ac0:	2103      	movs	r1, #3
    9ac2:	f7f8 fd2f 	bl	2524 <z_arm_irq_priority_set>
    9ac6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    9aca:	2010      	movs	r0, #16
    9acc:	f7f8 bd1a 	b.w	2504 <arch_irq_enable>

00009ad0 <gpio_cmsdk_port_3_config_func>:
    9ad0:	b508      	push	{r3, lr}
    9ad2:	2011      	movs	r0, #17
    9ad4:	2200      	movs	r2, #0
    9ad6:	2103      	movs	r1, #3
    9ad8:	f7f8 fd24 	bl	2524 <z_arm_irq_priority_set>
    9adc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    9ae0:	2011      	movs	r0, #17
    9ae2:	f7f8 bd0f 	b.w	2504 <arch_irq_enable>

00009ae6 <gpio_mmio32_config>:

static int gpio_mmio32_config(const struct device *dev,
			      gpio_pin_t pin, gpio_flags_t flags)
{
	struct gpio_mmio32_context *context = dev->data;
	const struct gpio_mmio32_config *config = context->config;
    9ae6:	6903      	ldr	r3, [r0, #16]
{
    9ae8:	b530      	push	{r4, r5, lr}
	const struct gpio_mmio32_config *config = context->config;
    9aea:	685c      	ldr	r4, [r3, #4]

	if ((config->mask & (1 << pin)) == 0) {
    9aec:	2301      	movs	r3, #1
    9aee:	fa03 f101 	lsl.w	r1, r3, r1
    9af2:	68a3      	ldr	r3, [r4, #8]
    9af4:	4219      	tst	r1, r3
    9af6:	d023      	beq.n	9b40 <gpio_mmio32_config+0x5a>
		return -EINVAL; /* Pin not in our validity mask */
	}

	if (flags & ~(GPIO_INPUT | GPIO_OUTPUT |
    9af8:	f422 6370 	bic.w	r3, r2, #3840	; 0xf00
    9afc:	f023 0301 	bic.w	r3, r3, #1
    9b00:	bb0b      	cbnz	r3, 9b46 <gpio_mmio32_config+0x60>
		      GPIO_ACTIVE_LOW)) {
		/* We ignore direction and fake polarity, rest is unsupported */
		return -ENOTSUP;
	}

	if ((flags & GPIO_OUTPUT) != 0) {
    9b02:	f412 7000 	ands.w	r0, r2, #512	; 0x200
    9b06:	d012      	beq.n	9b2e <gpio_mmio32_config+0x48>
		unsigned int key;
		volatile uint32_t *reg = config->reg;
    9b08:	6860      	ldr	r0, [r4, #4]
	__asm__ volatile(
    9b0a:	f04f 0320 	mov.w	r3, #32
    9b0e:	f3ef 8511 	mrs	r5, BASEPRI
    9b12:	f383 8811 	msr	BASEPRI, r3
    9b16:	f3bf 8f6f 	isb	sy

		key = irq_lock();
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    9b1a:	0513      	lsls	r3, r2, #20
    9b1c:	d508      	bpl.n	9b30 <gpio_mmio32_config+0x4a>
			*reg = (*reg | (1 << pin));
    9b1e:	6803      	ldr	r3, [r0, #0]
    9b20:	4319      	orrs	r1, r3
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
			*reg = (*reg & (config->mask & ~(1 << pin)));
    9b22:	6001      	str	r1, [r0, #0]
	__asm__ volatile(
    9b24:	f385 8811 	msr	BASEPRI, r5
    9b28:	f3bf 8f6f 	isb	sy
		}
		irq_unlock(key);
	}

	return 0;
    9b2c:	2000      	movs	r0, #0
}
    9b2e:	bd30      	pop	{r4, r5, pc}
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    9b30:	0553      	lsls	r3, r2, #21
    9b32:	d5f7      	bpl.n	9b24 <gpio_mmio32_config+0x3e>
			*reg = (*reg & (config->mask & ~(1 << pin)));
    9b34:	68a3      	ldr	r3, [r4, #8]
    9b36:	6802      	ldr	r2, [r0, #0]
    9b38:	ea23 0101 	bic.w	r1, r3, r1
    9b3c:	4011      	ands	r1, r2
    9b3e:	e7f0      	b.n	9b22 <gpio_mmio32_config+0x3c>
		return -EINVAL; /* Pin not in our validity mask */
    9b40:	f06f 0015 	mvn.w	r0, #21
    9b44:	e7f3      	b.n	9b2e <gpio_mmio32_config+0x48>
		return -ENOTSUP;
    9b46:	f06f 0022 	mvn.w	r0, #34	; 0x22
    9b4a:	e7f0      	b.n	9b2e <gpio_mmio32_config+0x48>

00009b4c <gpio_mmio32_port_get_raw>:

static int gpio_mmio32_port_get_raw(const struct device *dev, uint32_t *value)
{
	struct gpio_mmio32_context *context = dev->data;
	const struct gpio_mmio32_config *config = context->config;
    9b4c:	6903      	ldr	r3, [r0, #16]
    9b4e:	685a      	ldr	r2, [r3, #4]

	*value = *config->reg & config->mask;
    9b50:	6853      	ldr	r3, [r2, #4]
    9b52:	6818      	ldr	r0, [r3, #0]
    9b54:	6893      	ldr	r3, [r2, #8]
    9b56:	4003      	ands	r3, r0
    9b58:	600b      	str	r3, [r1, #0]

	return 0;
}
    9b5a:	2000      	movs	r0, #0
    9b5c:	4770      	bx	lr

00009b5e <gpio_mmio32_port_set_masked_raw>:
static int gpio_mmio32_port_set_masked_raw(const struct device *dev,
					   uint32_t mask,
					   uint32_t value)
{
	struct gpio_mmio32_context *context = dev->data;
	const struct gpio_mmio32_config *config = context->config;
    9b5e:	6903      	ldr	r3, [r0, #16]
{
    9b60:	b510      	push	{r4, lr}
	const struct gpio_mmio32_config *config = context->config;
    9b62:	6858      	ldr	r0, [r3, #4]
	volatile uint32_t *reg = config->reg;
	unsigned int key;

	mask &= config->mask;
    9b64:	e9d0 3001 	ldrd	r3, r0, [r0, #4]
    9b68:	4001      	ands	r1, r0
	__asm__ volatile(
    9b6a:	f04f 0020 	mov.w	r0, #32
    9b6e:	f3ef 8411 	mrs	r4, BASEPRI
    9b72:	f380 8811 	msr	BASEPRI, r0
    9b76:	f3bf 8f6f 	isb	sy
	value &= mask;

	/* Update pin state atomically */
	key = irq_lock();
	*reg = (*reg & ~mask) | value;
    9b7a:	6818      	ldr	r0, [r3, #0]
    9b7c:	4042      	eors	r2, r0
    9b7e:	400a      	ands	r2, r1
    9b80:	4042      	eors	r2, r0
    9b82:	601a      	str	r2, [r3, #0]
	__asm__ volatile(
    9b84:	f384 8811 	msr	BASEPRI, r4
    9b88:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	return 0;
}
    9b8c:	2000      	movs	r0, #0
    9b8e:	bd10      	pop	{r4, pc}

00009b90 <gpio_mmio32_port_set_bits_raw>:

static int gpio_mmio32_port_set_bits_raw(const struct device *dev,
					 uint32_t mask)
{
	struct gpio_mmio32_context *context = dev->data;
	const struct gpio_mmio32_config *config = context->config;
    9b90:	6903      	ldr	r3, [r0, #16]
    9b92:	685b      	ldr	r3, [r3, #4]
	volatile uint32_t *reg = config->reg;
	unsigned int key;

	mask &= config->mask;
    9b94:	e9d3 2301 	ldrd	r2, r3, [r3, #4]
    9b98:	400b      	ands	r3, r1
	__asm__ volatile(
    9b9a:	f04f 0120 	mov.w	r1, #32
    9b9e:	f3ef 8011 	mrs	r0, BASEPRI
    9ba2:	f381 8811 	msr	BASEPRI, r1
    9ba6:	f3bf 8f6f 	isb	sy

	/* Update pin state atomically */
	key = irq_lock();
	*reg = (*reg | mask);
    9baa:	6811      	ldr	r1, [r2, #0]
    9bac:	4319      	orrs	r1, r3
    9bae:	6011      	str	r1, [r2, #0]
	__asm__ volatile(
    9bb0:	f380 8811 	msr	BASEPRI, r0
    9bb4:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	return 0;
}
    9bb8:	2000      	movs	r0, #0
    9bba:	4770      	bx	lr

00009bbc <gpio_mmio32_port_clear_bits_raw>:

static int gpio_mmio32_port_clear_bits_raw(const struct device *dev,
					   uint32_t mask)
{
	struct gpio_mmio32_context *context = dev->data;
	const struct gpio_mmio32_config *config = context->config;
    9bbc:	6903      	ldr	r3, [r0, #16]
    9bbe:	685b      	ldr	r3, [r3, #4]
	volatile uint32_t *reg = config->reg;
	unsigned int key;

	mask &= config->mask;
    9bc0:	e9d3 2301 	ldrd	r2, r3, [r3, #4]
    9bc4:	400b      	ands	r3, r1
	__asm__ volatile(
    9bc6:	f04f 0120 	mov.w	r1, #32
    9bca:	f3ef 8011 	mrs	r0, BASEPRI
    9bce:	f381 8811 	msr	BASEPRI, r1
    9bd2:	f3bf 8f6f 	isb	sy

	/* Update pin state atomically */
	key = irq_lock();
	*reg = (*reg & ~mask);
    9bd6:	6811      	ldr	r1, [r2, #0]
    9bd8:	ea21 0103 	bic.w	r1, r1, r3
    9bdc:	6011      	str	r1, [r2, #0]
	__asm__ volatile(
    9bde:	f380 8811 	msr	BASEPRI, r0
    9be2:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	return 0;
}
    9be6:	2000      	movs	r0, #0
    9be8:	4770      	bx	lr

00009bea <gpio_mmio32_port_toggle_bits>:

static int gpio_mmio32_port_toggle_bits(const struct device *dev,
					uint32_t mask)
{
	struct gpio_mmio32_context *context = dev->data;
	const struct gpio_mmio32_config *config = context->config;
    9bea:	6903      	ldr	r3, [r0, #16]
    9bec:	685b      	ldr	r3, [r3, #4]
	volatile uint32_t *reg = config->reg;
	unsigned int key;

	mask &= config->mask;
    9bee:	e9d3 2301 	ldrd	r2, r3, [r3, #4]
    9bf2:	400b      	ands	r3, r1
	__asm__ volatile(
    9bf4:	f04f 0120 	mov.w	r1, #32
    9bf8:	f3ef 8011 	mrs	r0, BASEPRI
    9bfc:	f381 8811 	msr	BASEPRI, r1
    9c00:	f3bf 8f6f 	isb	sy

	/* Update pin state atomically */
	key = irq_lock();
	*reg = (*reg ^ mask);
    9c04:	6811      	ldr	r1, [r2, #0]
    9c06:	4059      	eors	r1, r3
    9c08:	6011      	str	r1, [r2, #0]
	__asm__ volatile(
    9c0a:	f380 8811 	msr	BASEPRI, r0
    9c0e:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	return 0;
}
    9c12:	2000      	movs	r0, #0
    9c14:	4770      	bx	lr

00009c16 <gpio_mmio32_pin_interrupt_configure>:
					       gpio_pin_t pin,
					       enum gpio_int_mode mode,
					       enum gpio_int_trig trig)
{
	if (mode != GPIO_INT_MODE_DISABLED) {
		return -ENOTSUP;
    9c16:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
	}

	return 0;
}
    9c1a:	bf14      	ite	ne
    9c1c:	f06f 0022 	mvnne.w	r0, #34	; 0x22
    9c20:	2000      	moveq	r0, #0
    9c22:	4770      	bx	lr

00009c24 <gpio_mmio32_init>:
int gpio_mmio32_init(const struct device *dev)
{
	struct gpio_mmio32_context *context = dev->data;
	const struct gpio_mmio32_config *config = dev->config;

	context->config = config;
    9c24:	6903      	ldr	r3, [r0, #16]
    9c26:	6842      	ldr	r2, [r0, #4]

	return 0;
}
    9c28:	2000      	movs	r0, #0
	context->config = config;
    9c2a:	605a      	str	r2, [r3, #4]
}
    9c2c:	4770      	bx	lr

00009c2e <i2c_set_scl>:
	return 0;
}

static void i2c_set_scl(struct i2c_bitbang *context, int state)
{
	context->io->set_scl(context->io_context, state);
    9c2e:	6803      	ldr	r3, [r0, #0]
    9c30:	6840      	ldr	r0, [r0, #4]
    9c32:	681b      	ldr	r3, [r3, #0]
    9c34:	4718      	bx	r3

00009c36 <i2c_set_sda>:
}

static void i2c_set_sda(struct i2c_bitbang *context, int state)
{
	context->io->set_sda(context->io_context, state);
    9c36:	6803      	ldr	r3, [r0, #0]
    9c38:	6840      	ldr	r0, [r0, #4]
    9c3a:	685b      	ldr	r3, [r3, #4]
    9c3c:	4718      	bx	r3

00009c3e <i2c_get_sda>:
}

static int i2c_get_sda(struct i2c_bitbang *context)
{
	return context->io->get_sda(context->io_context);
    9c3e:	6803      	ldr	r3, [r0, #0]
    9c40:	6840      	ldr	r0, [r0, #4]
    9c42:	689b      	ldr	r3, [r3, #8]
    9c44:	4718      	bx	r3

00009c46 <i2c_delay>:
}

static void i2c_delay(unsigned int cycles_to_wait)
{
    9c46:	b538      	push	{r3, r4, r5, lr}
    9c48:	4604      	mov	r4, r0
#ifndef _ASMLANGUAGE
extern uint32_t z_timer_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
    9c4a:	f7f8 fbb7 	bl	23bc <z_timer_cycle_get_32>
    9c4e:	4605      	mov	r5, r0
    9c50:	f7f8 fbb4 	bl	23bc <z_timer_cycle_get_32>
	uint32_t start = k_cycle_get_32();

	/* Wait until the given number of cycles have passed */
	while (k_cycle_get_32() - start < cycles_to_wait) {
    9c54:	1b43      	subs	r3, r0, r5
    9c56:	42a3      	cmp	r3, r4
    9c58:	d3fa      	bcc.n	9c50 <i2c_delay+0xa>
	}
}
    9c5a:	bd38      	pop	{r3, r4, r5, pc}

00009c5c <i2c_start>:

static void i2c_start(struct i2c_bitbang *context)
{
    9c5c:	b510      	push	{r4, lr}
    9c5e:	4604      	mov	r4, r0
	if (!i2c_get_sda(context)) {
    9c60:	f7ff ffed 	bl	9c3e <i2c_get_sda>
    9c64:	4601      	mov	r1, r0
    9c66:	b960      	cbnz	r0, 9c82 <i2c_start+0x26>
		/*
		 * SDA is already low, so we need to do something to make it
		 * high. Try pulsing clock low to get slave to release SDA.
		 */
		i2c_set_scl(context, 0);
    9c68:	4620      	mov	r0, r4
    9c6a:	f7ff ffe0 	bl	9c2e <i2c_set_scl>
		i2c_delay(context->delays[T_LOW]);
    9c6e:	68a0      	ldr	r0, [r4, #8]
    9c70:	f7ff ffe9 	bl	9c46 <i2c_delay>
		i2c_set_scl(context, 1);
    9c74:	4620      	mov	r0, r4
    9c76:	2101      	movs	r1, #1
    9c78:	f7ff ffd9 	bl	9c2e <i2c_set_scl>
		i2c_delay(context->delays[T_SU_STA]);
    9c7c:	68a0      	ldr	r0, [r4, #8]
    9c7e:	f7ff ffe2 	bl	9c46 <i2c_delay>
	}
	i2c_set_sda(context, 0);
    9c82:	2100      	movs	r1, #0
    9c84:	4620      	mov	r0, r4
    9c86:	f7ff ffd6 	bl	9c36 <i2c_set_sda>
	i2c_delay(context->delays[T_HD_STA]);
    9c8a:	68e0      	ldr	r0, [r4, #12]
    9c8c:	f7ff ffdb 	bl	9c46 <i2c_delay>

	i2c_set_scl(context, 0);
    9c90:	4620      	mov	r0, r4
    9c92:	2100      	movs	r1, #0
    9c94:	f7ff ffcb 	bl	9c2e <i2c_set_scl>
	i2c_delay(context->delays[T_LOW]);
    9c98:	68a0      	ldr	r0, [r4, #8]
}
    9c9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	i2c_delay(context->delays[T_LOW]);
    9c9e:	f7ff bfd2 	b.w	9c46 <i2c_delay>

00009ca2 <i2c_repeated_start>:

static void i2c_repeated_start(struct i2c_bitbang *context)
{
    9ca2:	b510      	push	{r4, lr}
    9ca4:	4604      	mov	r4, r0
	i2c_set_sda(context, 1);
    9ca6:	2101      	movs	r1, #1
    9ca8:	f7ff ffc5 	bl	9c36 <i2c_set_sda>
	i2c_set_scl(context, 1);
    9cac:	2101      	movs	r1, #1
    9cae:	4620      	mov	r0, r4
    9cb0:	f7ff ffbd 	bl	9c2e <i2c_set_scl>
	i2c_delay(context->delays[T_HIGH]);
    9cb4:	68e0      	ldr	r0, [r4, #12]
    9cb6:	f7ff ffc6 	bl	9c46 <i2c_delay>

	i2c_delay(context->delays[T_SU_STA]);
    9cba:	68a0      	ldr	r0, [r4, #8]
    9cbc:	f7ff ffc3 	bl	9c46 <i2c_delay>
	i2c_start(context);
    9cc0:	4620      	mov	r0, r4
}
    9cc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	i2c_start(context);
    9cc6:	f7ff bfc9 	b.w	9c5c <i2c_start>

00009cca <i2c_read_bit>:
	i2c_set_scl(context, 0);
	i2c_delay(context->delays[T_LOW]);
}

static bool i2c_read_bit(struct i2c_bitbang *context)
{
    9cca:	b538      	push	{r3, r4, r5, lr}
    9ccc:	4604      	mov	r4, r0
	bool bit;

	/* SDA hold time is zero, so no need for a delay here */
	i2c_set_sda(context, 1); /* Stop driving low, so slave has control */
    9cce:	2101      	movs	r1, #1
    9cd0:	f7ff ffb1 	bl	9c36 <i2c_set_sda>

	i2c_set_scl(context, 1);
    9cd4:	2101      	movs	r1, #1
    9cd6:	4620      	mov	r0, r4
    9cd8:	f7ff ffa9 	bl	9c2e <i2c_set_scl>
	i2c_delay(context->delays[T_HIGH]);
    9cdc:	68e0      	ldr	r0, [r4, #12]
    9cde:	f7ff ffb2 	bl	9c46 <i2c_delay>

	bit = i2c_get_sda(context);
    9ce2:	4620      	mov	r0, r4
    9ce4:	f7ff ffab 	bl	9c3e <i2c_get_sda>
    9ce8:	4605      	mov	r5, r0

	i2c_set_scl(context, 0);
    9cea:	2100      	movs	r1, #0
    9cec:	4620      	mov	r0, r4
    9cee:	f7ff ff9e 	bl	9c2e <i2c_set_scl>
	i2c_delay(context->delays[T_LOW]);
    9cf2:	68a0      	ldr	r0, [r4, #8]
    9cf4:	f7ff ffa7 	bl	9c46 <i2c_delay>
	return bit;
}
    9cf8:	1e28      	subs	r0, r5, #0
    9cfa:	bf18      	it	ne
    9cfc:	2001      	movne	r0, #1
    9cfe:	bd38      	pop	{r3, r4, r5, pc}

00009d00 <i2c_write_bit>:
{
    9d00:	b510      	push	{r4, lr}
    9d02:	4604      	mov	r4, r0
	i2c_set_sda(context, bit);
    9d04:	f7ff ff97 	bl	9c36 <i2c_set_sda>
	i2c_set_scl(context, 1);
    9d08:	2101      	movs	r1, #1
    9d0a:	4620      	mov	r0, r4
    9d0c:	f7ff ff8f 	bl	9c2e <i2c_set_scl>
	i2c_delay(context->delays[T_HIGH]);
    9d10:	68e0      	ldr	r0, [r4, #12]
    9d12:	f7ff ff98 	bl	9c46 <i2c_delay>
	i2c_set_scl(context, 0);
    9d16:	4620      	mov	r0, r4
    9d18:	2100      	movs	r1, #0
    9d1a:	f7ff ff88 	bl	9c2e <i2c_set_scl>
	i2c_delay(context->delays[T_LOW]);
    9d1e:	68a0      	ldr	r0, [r4, #8]
}
    9d20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	i2c_delay(context->delays[T_LOW]);
    9d24:	f7ff bf8f 	b.w	9c46 <i2c_delay>

00009d28 <i2c_stop>:
{
    9d28:	b510      	push	{r4, lr}
    9d2a:	4604      	mov	r4, r0
	i2c_set_sda(context, 0);
    9d2c:	2100      	movs	r1, #0
    9d2e:	f7ff ff82 	bl	9c36 <i2c_set_sda>
	i2c_delay(context->delays[T_LOW]);
    9d32:	68a0      	ldr	r0, [r4, #8]
    9d34:	f7ff ff87 	bl	9c46 <i2c_delay>
	i2c_set_scl(context, 1);
    9d38:	2101      	movs	r1, #1
    9d3a:	4620      	mov	r0, r4
    9d3c:	f7ff ff77 	bl	9c2e <i2c_set_scl>
	i2c_delay(context->delays[T_HIGH]);
    9d40:	68e0      	ldr	r0, [r4, #12]
    9d42:	f7ff ff80 	bl	9c46 <i2c_delay>
	i2c_delay(context->delays[T_SU_STP]);
    9d46:	68e0      	ldr	r0, [r4, #12]
    9d48:	f7ff ff7d 	bl	9c46 <i2c_delay>
	i2c_set_sda(context, 1);
    9d4c:	4620      	mov	r0, r4
    9d4e:	2101      	movs	r1, #1
    9d50:	f7ff ff71 	bl	9c36 <i2c_set_sda>
	i2c_delay(context->delays[T_BUF]); /* In case we start again too soon */
    9d54:	68a0      	ldr	r0, [r4, #8]
}
    9d56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	i2c_delay(context->delays[T_BUF]); /* In case we start again too soon */
    9d5a:	f7ff bf74 	b.w	9c46 <i2c_delay>

00009d5e <i2c_bitbang_configure>:
{
    9d5e:	4603      	mov	r3, r0
	if (I2C_ADDR_10_BITS & dev_config) {
    9d60:	f011 0001 	ands.w	r0, r1, #1
    9d64:	d105      	bne.n	9d72 <i2c_bitbang_configure+0x14>
	switch (I2C_SPEED_GET(dev_config)) {
    9d66:	f3c1 0142 	ubfx	r1, r1, #1, #3
    9d6a:	2901      	cmp	r1, #1
    9d6c:	d004      	beq.n	9d78 <i2c_bitbang_configure+0x1a>
    9d6e:	2902      	cmp	r1, #2
    9d70:	d007      	beq.n	9d82 <i2c_bitbang_configure+0x24>
		return -ENOTSUP;
    9d72:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
    9d76:	4770      	bx	lr
		context->delays[T_LOW]  = NS_TO_SYS_CLOCK_HW_CYCLES(4700);
    9d78:	2276      	movs	r2, #118	; 0x76
    9d7a:	609a      	str	r2, [r3, #8]
		context->delays[T_HIGH] = NS_TO_SYS_CLOCK_HW_CYCLES(4000);
    9d7c:	2265      	movs	r2, #101	; 0x65
		context->delays[T_HIGH] = NS_TO_SYS_CLOCK_HW_CYCLES(600);
    9d7e:	60da      	str	r2, [r3, #12]
		break;
    9d80:	4770      	bx	lr
		context->delays[T_LOW]  = NS_TO_SYS_CLOCK_HW_CYCLES(1300);
    9d82:	2221      	movs	r2, #33	; 0x21
    9d84:	609a      	str	r2, [r3, #8]
		context->delays[T_HIGH] = NS_TO_SYS_CLOCK_HW_CYCLES(600);
    9d86:	2210      	movs	r2, #16
    9d88:	e7f9      	b.n	9d7e <i2c_bitbang_configure+0x20>

00009d8a <i2c_bitbang_transfer>:
}

int i2c_bitbang_transfer(struct i2c_bitbang *context,
			   struct i2c_msg *msgs, uint8_t num_msgs,
			   uint16_t slave_address)
{
    9d8a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9d8e:	4606      	mov	r6, r0
    9d90:	460f      	mov	r7, r1
    9d92:	469a      	mov	sl, r3
	uint8_t *buf, *buf_end;
	unsigned int flags;
	int result = -EIO;

	if (!num_msgs) {
    9d94:	4614      	mov	r4, r2
    9d96:	b3b2      	cbz	r2, 9e06 <i2c_bitbang_transfer+0x7c>

	/* We want an initial Start condition */
	flags = I2C_MSG_RESTART;

	/* Make sure we're in a good state so slave recognises the Start */
	i2c_set_scl(context, 1);
    9d98:	2101      	movs	r1, #1
    9d9a:	f7ff ff48 	bl	9c2e <i2c_set_scl>
	flags |= I2C_MSG_STOP;
    9d9e:	f04f 0806 	mov.w	r8, #6
		/* Get flags for new message */
		flags |= msgs->flags;

		/* Send address after any Start condition */
		if (flags & I2C_MSG_RESTART) {
			unsigned int byte0 = slave_address << 1;
    9da2:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
    9da6:	370c      	adds	r7, #12
		if (flags & I2C_MSG_STOP) {
    9da8:	f018 0f02 	tst.w	r8, #2
    9dac:	d002      	beq.n	9db4 <i2c_bitbang_transfer+0x2a>
			i2c_stop(context);
    9dae:	4630      	mov	r0, r6
    9db0:	f7ff ffba 	bl	9d28 <i2c_stop>
		if (flags & I2C_MSG_RESTART) {
    9db4:	f018 0804 	ands.w	r8, r8, #4
    9db8:	d029      	beq.n	9e0e <i2c_bitbang_transfer+0x84>
			i2c_start(context);
    9dba:	4630      	mov	r0, r6
    9dbc:	f7ff ff4e 	bl	9c5c <i2c_start>
		flags |= msgs->flags;
    9dc0:	f817 9c04 	ldrb.w	r9, [r7, #-4]
    9dc4:	ea49 0808 	orr.w	r8, r9, r8
		if (flags & I2C_MSG_RESTART) {
    9dc8:	f018 0f04 	tst.w	r8, #4
    9dcc:	f009 0901 	and.w	r9, r9, #1
    9dd0:	d027      	beq.n	9e22 <i2c_bitbang_transfer+0x98>

			byte0 |= (flags & I2C_MSG_RW_MASK) == I2C_MSG_READ;
			if (!i2c_write_byte(context, byte0)) {
    9dd2:	2508      	movs	r5, #8
	uint8_t mask = 1 << 7;
    9dd4:	f04f 0b80 	mov.w	fp, #128	; 0x80
			byte0 |= (flags & I2C_MSG_RW_MASK) == I2C_MSG_READ;
    9dd8:	ea4a 0309 	orr.w	r3, sl, r9
			if (!i2c_write_byte(context, byte0)) {
    9ddc:	b2db      	uxtb	r3, r3
		i2c_write_bit(context, byte & mask);
    9dde:	ea03 010b 	and.w	r1, r3, fp
    9de2:	4630      	mov	r0, r6
    9de4:	9300      	str	r3, [sp, #0]
    9de6:	f7ff ff8b 	bl	9d00 <i2c_write_bit>
	} while (mask >>= 1);
    9dea:	3d01      	subs	r5, #1
    9dec:	9b00      	ldr	r3, [sp, #0]
    9dee:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
    9df2:	d1f4      	bne.n	9dde <i2c_bitbang_transfer+0x54>
	return !i2c_read_bit(context);
    9df4:	4630      	mov	r0, r6
    9df6:	f7ff ff68 	bl	9cca <i2c_read_bit>
			if (!i2c_write_byte(context, byte0)) {
    9dfa:	b180      	cbz	r0, 9e1e <i2c_bitbang_transfer+0x94>
	int result = -EIO;
    9dfc:	f06f 0404 	mvn.w	r4, #4
	} while (num_msgs);

	/* Complete without error */
	result = 0;
finish:
	i2c_stop(context);
    9e00:	4630      	mov	r0, r6
    9e02:	f7ff ff91 	bl	9d28 <i2c_stop>

	return result;
}
    9e06:	4620      	mov	r0, r4
    9e08:	b003      	add	sp, #12
    9e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (msgs->flags & I2C_MSG_RESTART) {
    9e0e:	f817 3c04 	ldrb.w	r3, [r7, #-4]
    9e12:	0759      	lsls	r1, r3, #29
    9e14:	d5d4      	bpl.n	9dc0 <i2c_bitbang_transfer+0x36>
			i2c_repeated_start(context);
    9e16:	4630      	mov	r0, r6
    9e18:	f7ff ff43 	bl	9ca2 <i2c_repeated_start>
    9e1c:	e7d0      	b.n	9dc0 <i2c_bitbang_transfer+0x36>
			flags &= ~I2C_MSG_RESTART;
    9e1e:	f028 0804 	bic.w	r8, r8, #4
		buf_end = buf + msgs->len;
    9e22:	e957 5303 	ldrd	r5, r3, [r7, #-12]
    9e26:	eb05 0b03 	add.w	fp, r5, r3
		if ((flags & I2C_MSG_RW_MASK) == I2C_MSG_READ) {
    9e2a:	f1b9 0f00 	cmp.w	r9, #0
    9e2e:	d034      	beq.n	9e9a <i2c_bitbang_transfer+0x110>
			while (buf < buf_end) {
    9e30:	45ab      	cmp	fp, r5
    9e32:	d806      	bhi.n	9e42 <i2c_bitbang_transfer+0xb8>
		num_msgs--;
    9e34:	3c01      	subs	r4, #1
	} while (num_msgs);
    9e36:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    9e3a:	f107 070c 	add.w	r7, r7, #12
    9e3e:	d1b3      	bne.n	9da8 <i2c_bitbang_transfer+0x1e>
    9e40:	e7de      	b.n	9e00 <i2c_bitbang_transfer+0x76>
	unsigned int byte = 1U;
    9e42:	4648      	mov	r0, r9
		byte <<= 1;
    9e44:	0043      	lsls	r3, r0, #1
		byte |= i2c_read_bit(context);
    9e46:	4630      	mov	r0, r6
		byte <<= 1;
    9e48:	9300      	str	r3, [sp, #0]
		byte |= i2c_read_bit(context);
    9e4a:	f7ff ff3e 	bl	9cca <i2c_read_bit>
    9e4e:	9b00      	ldr	r3, [sp, #0]
    9e50:	4318      	orrs	r0, r3
	} while (!(byte & (1 << 8)));
    9e52:	05c2      	lsls	r2, r0, #23
    9e54:	d5f6      	bpl.n	9e44 <i2c_bitbang_transfer+0xba>
	return byte;
    9e56:	f805 0b01 	strb.w	r0, [r5], #1
				i2c_write_bit(context, buf == buf_end);
    9e5a:	ebab 0305 	sub.w	r3, fp, r5
    9e5e:	4259      	negs	r1, r3
    9e60:	4630      	mov	r0, r6
    9e62:	4159      	adcs	r1, r3
    9e64:	f7ff ff4c 	bl	9d00 <i2c_write_bit>
    9e68:	e7e2      	b.n	9e30 <i2c_bitbang_transfer+0xa6>
				if (!i2c_write_byte(context, *buf++)) {
    9e6a:	f04f 0908 	mov.w	r9, #8
	uint8_t mask = 1 << 7;
    9e6e:	2380      	movs	r3, #128	; 0x80
				if (!i2c_write_byte(context, *buf++)) {
    9e70:	f815 2b01 	ldrb.w	r2, [r5], #1
		i2c_write_bit(context, byte & mask);
    9e74:	ea02 0103 	and.w	r1, r2, r3
    9e78:	4630      	mov	r0, r6
    9e7a:	e9cd 2300 	strd	r2, r3, [sp]
    9e7e:	f7ff ff3f 	bl	9d00 <i2c_write_bit>
	} while (mask >>= 1);
    9e82:	9b01      	ldr	r3, [sp, #4]
    9e84:	f1b9 0901 	subs.w	r9, r9, #1
    9e88:	9a00      	ldr	r2, [sp, #0]
    9e8a:	ea4f 0353 	mov.w	r3, r3, lsr #1
    9e8e:	d1f1      	bne.n	9e74 <i2c_bitbang_transfer+0xea>
	return !i2c_read_bit(context);
    9e90:	4630      	mov	r0, r6
    9e92:	f7ff ff1a 	bl	9cca <i2c_read_bit>
				if (!i2c_write_byte(context, *buf++)) {
    9e96:	2800      	cmp	r0, #0
    9e98:	d1b0      	bne.n	9dfc <i2c_bitbang_transfer+0x72>
			while (buf < buf_end) {
    9e9a:	455d      	cmp	r5, fp
    9e9c:	d3e5      	bcc.n	9e6a <i2c_bitbang_transfer+0xe0>
    9e9e:	e7c9      	b.n	9e34 <i2c_bitbang_transfer+0xaa>

00009ea0 <i2c_bitbang_init>:
		context->delays[T_HIGH] = NS_TO_SYS_CLOCK_HW_CYCLES(4000);
    9ea0:	2365      	movs	r3, #101	; 0x65

void i2c_bitbang_init(struct i2c_bitbang *context,
			const struct i2c_bitbang_io *io, void *io_context)
{
	context->io = io;
	context->io_context = io_context;
    9ea2:	e9c0 1200 	strd	r1, r2, [r0]
		context->delays[T_HIGH] = NS_TO_SYS_CLOCK_HW_CYCLES(4000);
    9ea6:	2276      	movs	r2, #118	; 0x76
    9ea8:	e9c0 2302 	strd	r2, r3, [r0, #8]
	i2c_bitbang_configure(context, I2C_SPEED_STANDARD << I2C_SPEED_SHIFT);
}
    9eac:	4770      	bx	lr

00009eae <i2c_sbcon_set_scl>:
	if (state) {
    9eae:	2301      	movs	r3, #1
    9eb0:	b109      	cbz	r1, 9eb6 <i2c_sbcon_set_scl+0x8>
		sbcon->SB_CONTROLS = SCL;
    9eb2:	6003      	str	r3, [r0, #0]
    9eb4:	4770      	bx	lr
		sbcon->SB_CONTROLC = SCL;
    9eb6:	6043      	str	r3, [r0, #4]
}
    9eb8:	4770      	bx	lr

00009eba <i2c_sbcon_set_sda>:
	if (state) {
    9eba:	2302      	movs	r3, #2
    9ebc:	b109      	cbz	r1, 9ec2 <i2c_sbcon_set_sda+0x8>
		sbcon->SB_CONTROLS = SDA;
    9ebe:	6003      	str	r3, [r0, #0]
    9ec0:	4770      	bx	lr
		sbcon->SB_CONTROLC = SDA;
    9ec2:	6043      	str	r3, [r0, #4]
}
    9ec4:	4770      	bx	lr

00009ec6 <i2c_sbcon_get_sda>:
	return sbcon->SB_CONTROL & SDA;
    9ec6:	6800      	ldr	r0, [r0, #0]
}
    9ec8:	f000 0002 	and.w	r0, r0, #2
    9ecc:	4770      	bx	lr

00009ece <i2c_sbcon_transfer>:
	return i2c_bitbang_transfer(&context->bitbang, msgs, num_msgs,
    9ece:	6900      	ldr	r0, [r0, #16]
    9ed0:	f7ff bf5b 	b.w	9d8a <i2c_bitbang_transfer>

00009ed4 <i2c_sbcon_configure>:
	return i2c_bitbang_configure(&context->bitbang, dev_config);
    9ed4:	6900      	ldr	r0, [r0, #16]
    9ed6:	f7ff bf42 	b.w	9d5e <i2c_bitbang_configure>

00009eda <uart_cmsdk_apb_init>:
	/*
	 * If baudrate and/or sys_clk_freq are 0 the configuration remains
	 * unchanged. It can be useful in case that Zephyr it is run via
	 * a bootloader that brings up the serial and sets the baudrate.
	 */
	if ((dev_data->baud_rate != 0U) && (dev_cfg->sys_clk_freq != 0U)) {
    9eda:	6903      	ldr	r3, [r0, #16]
 * @param dev UART device struct
 *
 * @return 0
 */
static int uart_cmsdk_apb_init(const struct device *dev)
{
    9edc:	b510      	push	{r4, lr}
	volatile struct uart_cmsdk_apb *uart = UART_STRUCT(dev);
    9ede:	6842      	ldr	r2, [r0, #4]
	if ((dev_data->baud_rate != 0U) && (dev_cfg->sys_clk_freq != 0U)) {
    9ee0:	681c      	ldr	r4, [r3, #0]
	volatile struct uart_cmsdk_apb *uart = UART_STRUCT(dev);
    9ee2:	6811      	ldr	r1, [r2, #0]
	if ((dev_data->baud_rate != 0U) && (dev_cfg->sys_clk_freq != 0U)) {
    9ee4:	b124      	cbz	r4, 9ef0 <uart_cmsdk_apb_init+0x16>
    9ee6:	6853      	ldr	r3, [r2, #4]
    9ee8:	b113      	cbz	r3, 9ef0 <uart_cmsdk_apb_init+0x16>
		uart->bauddiv = (dev_cfg->sys_clk_freq / dev_data->baud_rate);
    9eea:	fbb3 f3f4 	udiv	r3, r3, r4
    9eee:	610b      	str	r3, [r1, #16]

	/* Set baud rate */
	baudrate_set(dev);

	/* Enable receiver and transmitter */
	uart->ctrl = UART_RX_EN | UART_TX_EN;
    9ef0:	2303      	movs	r3, #3
    9ef2:	608b      	str	r3, [r1, #8]

#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	dev_cfg->irq_config_func(dev);
    9ef4:	6893      	ldr	r3, [r2, #8]
    9ef6:	4798      	blx	r3
#endif

	return 0;
}
    9ef8:	2000      	movs	r0, #0
    9efa:	bd10      	pop	{r4, pc}

00009efc <uart_cmsdk_apb_poll_in>:
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */

static int uart_cmsdk_apb_poll_in(const struct device *dev, unsigned char *c)
{
	volatile struct uart_cmsdk_apb *uart = UART_STRUCT(dev);
    9efc:	6843      	ldr	r3, [r0, #4]
    9efe:	681b      	ldr	r3, [r3, #0]

	/* If the receiver is not ready returns -1 */
	if (!(uart->state & UART_RX_BF)) {
    9f00:	685a      	ldr	r2, [r3, #4]
    9f02:	0792      	lsls	r2, r2, #30
		return -1;
	}

	/* got a character */
	*c = (unsigned char)uart->data;
    9f04:	bf43      	ittte	mi
    9f06:	681b      	ldrmi	r3, [r3, #0]

	return 0;
    9f08:	2000      	movmi	r0, #0
	*c = (unsigned char)uart->data;
    9f0a:	700b      	strbmi	r3, [r1, #0]
		return -1;
    9f0c:	f04f 30ff 	movpl.w	r0, #4294967295	; 0xffffffff
}
    9f10:	4770      	bx	lr

00009f12 <uart_cmsdk_apb_poll_out>:
 * @param c Character to send
 */
static void uart_cmsdk_apb_poll_out(const struct device *dev,
					     unsigned char c)
{
	volatile struct uart_cmsdk_apb *uart = UART_STRUCT(dev);
    9f12:	6843      	ldr	r3, [r0, #4]
    9f14:	681b      	ldr	r3, [r3, #0]

	/* Wait for transmitter to be ready */
	while (uart->state & UART_TX_BF) {
    9f16:	685a      	ldr	r2, [r3, #4]
    9f18:	07d2      	lsls	r2, r2, #31
    9f1a:	d4fc      	bmi.n	9f16 <uart_cmsdk_apb_poll_out+0x4>
		; /* Wait */
	}

	/* Send a character */
	uart->data = (uint32_t)c;
    9f1c:	6019      	str	r1, [r3, #0]
}
    9f1e:	4770      	bx	lr

00009f20 <uart_cmsdk_apb_fifo_fill>:
 *
 * @return the number of characters that have been read
 */
static int uart_cmsdk_apb_fifo_fill(const struct device *dev,
				    const uint8_t *tx_data, int len)
{
    9f20:	4603      	mov	r3, r0
	volatile struct uart_cmsdk_apb *uart = UART_STRUCT(dev);

	/* No hardware FIFO present */
	if (len && !(uart->state & UART_TX_BF)) {
    9f22:	4610      	mov	r0, r2
    9f24:	b14a      	cbz	r2, 9f3a <uart_cmsdk_apb_fifo_fill+0x1a>
	volatile struct uart_cmsdk_apb *uart = UART_STRUCT(dev);
    9f26:	685b      	ldr	r3, [r3, #4]
    9f28:	681b      	ldr	r3, [r3, #0]
	if (len && !(uart->state & UART_TX_BF)) {
    9f2a:	685a      	ldr	r2, [r3, #4]
    9f2c:	07d2      	lsls	r2, r2, #31
    9f2e:	d403      	bmi.n	9f38 <uart_cmsdk_apb_fifo_fill+0x18>
		uart->data = *tx_data;
    9f30:	780a      	ldrb	r2, [r1, #0]
		return 1;
    9f32:	2001      	movs	r0, #1
		uart->data = *tx_data;
    9f34:	601a      	str	r2, [r3, #0]
		return 1;
    9f36:	4770      	bx	lr
	}

	return 0;
    9f38:	2000      	movs	r0, #0
}
    9f3a:	4770      	bx	lr

00009f3c <uart_cmsdk_apb_fifo_read>:
 *
 * @return the number of characters that have been read
 */
static int uart_cmsdk_apb_fifo_read(const struct device *dev,
				    uint8_t *rx_data, const int size)
{
    9f3c:	4603      	mov	r3, r0
	volatile struct uart_cmsdk_apb *uart = UART_STRUCT(dev);

	/* No hardware FIFO present */
	if (size && uart->state & UART_RX_BF) {
    9f3e:	4610      	mov	r0, r2
    9f40:	b142      	cbz	r2, 9f54 <uart_cmsdk_apb_fifo_read+0x18>
	volatile struct uart_cmsdk_apb *uart = UART_STRUCT(dev);
    9f42:	685b      	ldr	r3, [r3, #4]
    9f44:	681b      	ldr	r3, [r3, #0]
	if (size && uart->state & UART_RX_BF) {
    9f46:	6858      	ldr	r0, [r3, #4]
    9f48:	f010 0002 	ands.w	r0, r0, #2
		*rx_data = (unsigned char)uart->data;
		return 1;
    9f4c:	bf1e      	ittt	ne
    9f4e:	2001      	movne	r0, #1
		*rx_data = (unsigned char)uart->data;
    9f50:	681b      	ldrne	r3, [r3, #0]
    9f52:	700b      	strbne	r3, [r1, #0]
	}

	return 0;
}
    9f54:	4770      	bx	lr

00009f56 <uart_cmsdk_apb_irq_tx_disable>:
 *
 * @return N/A
 */
static void uart_cmsdk_apb_irq_tx_disable(const struct device *dev)
{
	UART_STRUCT(dev)->ctrl &= ~UART_TX_IN_EN;
    9f56:	6843      	ldr	r3, [r0, #4]
    9f58:	681a      	ldr	r2, [r3, #0]
    9f5a:	6893      	ldr	r3, [r2, #8]
    9f5c:	f023 0304 	bic.w	r3, r3, #4
    9f60:	6093      	str	r3, [r2, #8]
}
    9f62:	4770      	bx	lr

00009f64 <uart_cmsdk_apb_irq_tx_ready>:
 *
 * @return 1 if an interrupt is ready, 0 otherwise
 */
static int uart_cmsdk_apb_irq_tx_ready(const struct device *dev)
{
	return !(UART_STRUCT(dev)->state & UART_TX_BF);
    9f64:	6843      	ldr	r3, [r0, #4]
    9f66:	681b      	ldr	r3, [r3, #0]
    9f68:	6858      	ldr	r0, [r3, #4]
    9f6a:	43c0      	mvns	r0, r0
}
    9f6c:	f000 0001 	and.w	r0, r0, #1
    9f70:	4770      	bx	lr

00009f72 <uart_cmsdk_apb_irq_rx_enable>:
 *
 * @return N/A
 */
static void uart_cmsdk_apb_irq_rx_enable(const struct device *dev)
{
	UART_STRUCT(dev)->ctrl |= UART_RX_IN_EN;
    9f72:	6843      	ldr	r3, [r0, #4]
    9f74:	681a      	ldr	r2, [r3, #0]
    9f76:	6893      	ldr	r3, [r2, #8]
    9f78:	f043 0308 	orr.w	r3, r3, #8
    9f7c:	6093      	str	r3, [r2, #8]
}
    9f7e:	4770      	bx	lr

00009f80 <uart_cmsdk_apb_irq_rx_disable>:
 *
 * @return N/A
 */
static void uart_cmsdk_apb_irq_rx_disable(const struct device *dev)
{
	UART_STRUCT(dev)->ctrl &= ~UART_RX_IN_EN;
    9f80:	6843      	ldr	r3, [r0, #4]
    9f82:	681a      	ldr	r2, [r3, #0]
    9f84:	6893      	ldr	r3, [r2, #8]
    9f86:	f023 0308 	bic.w	r3, r3, #8
    9f8a:	6093      	str	r3, [r2, #8]
}
    9f8c:	4770      	bx	lr

00009f8e <uart_cmsdk_apb_irq_tx_complete>:
 *
 * @return 1 if an interrupt is ready, 0 otherwise
 */
static int uart_cmsdk_apb_irq_tx_complete(const struct device *dev)
{
	return uart_cmsdk_apb_irq_tx_ready(dev);
    9f8e:	f7ff bfe9 	b.w	9f64 <uart_cmsdk_apb_irq_tx_ready>

00009f92 <uart_cmsdk_apb_irq_rx_ready>:
 *
 * @return 1 if an interrupt is ready, 0 otherwise
 */
static int uart_cmsdk_apb_irq_rx_ready(const struct device *dev)
{
	return UART_STRUCT(dev)->state & UART_RX_BF;
    9f92:	6843      	ldr	r3, [r0, #4]
    9f94:	681b      	ldr	r3, [r3, #0]
    9f96:	6858      	ldr	r0, [r3, #4]
}
    9f98:	f000 0002 	and.w	r0, r0, #2
    9f9c:	4770      	bx	lr

00009f9e <uart_cmsdk_apb_irq_err_enable>:
 * @return N/A
 */
static void uart_cmsdk_apb_irq_err_enable(const struct device *dev)
{
	ARG_UNUSED(dev);
}
    9f9e:	4770      	bx	lr

00009fa0 <uart_cmsdk_apb_irq_is_pending>:
 * @return 1 if Tx or Rx interrupt is pending, 0 otherwise
 */
static int uart_cmsdk_apb_irq_is_pending(const struct device *dev)
{
	/* Return true if rx buffer full or tx buffer empty */
	return (UART_STRUCT(dev)->state & (UART_RX_BF | UART_TX_BF))
    9fa0:	6843      	ldr	r3, [r0, #4]
    9fa2:	681b      	ldr	r3, [r3, #0]
    9fa4:	6858      	ldr	r0, [r3, #4]
    9fa6:	f000 0003 	and.w	r0, r0, #3
					!= UART_TX_BF;
}
    9faa:	3801      	subs	r0, #1
    9fac:	bf18      	it	ne
    9fae:	2001      	movne	r0, #1
    9fb0:	4770      	bx	lr

00009fb2 <uart_cmsdk_apb_irq_update>:
 * @return always 1
 */
static int uart_cmsdk_apb_irq_update(const struct device *dev)
{
	return 1;
}
    9fb2:	2001      	movs	r0, #1
    9fb4:	4770      	bx	lr

00009fb6 <uart_cmsdk_apb_irq_callback_set>:
 */
static void uart_cmsdk_apb_irq_callback_set(const struct device *dev,
					    uart_irq_callback_user_data_t cb,
					    void *cb_data)
{
	DEV_DATA(dev)->irq_cb = cb;
    9fb6:	6903      	ldr	r3, [r0, #16]
	DEV_DATA(dev)->irq_cb_data = cb_data;
    9fb8:	e9c3 1201 	strd	r1, r2, [r3, #4]
}
    9fbc:	4770      	bx	lr

00009fbe <uart_cmsdk_apb_isr>:
{
	volatile struct uart_cmsdk_apb *uart = UART_STRUCT(dev);
	struct uart_cmsdk_apb_dev_data *data = DEV_DATA(dev);

	/* Clear pending interrupts */
	uart->intclear = UART_RX_IN | UART_TX_IN;
    9fbe:	2303      	movs	r3, #3
	volatile struct uart_cmsdk_apb *uart = UART_STRUCT(dev);
    9fc0:	6842      	ldr	r2, [r0, #4]
    9fc2:	6811      	ldr	r1, [r2, #0]
	struct uart_cmsdk_apb_dev_data *data = DEV_DATA(dev);
    9fc4:	6902      	ldr	r2, [r0, #16]
	uart->intclear = UART_RX_IN | UART_TX_IN;
    9fc6:	60cb      	str	r3, [r1, #12]

	/* Verify if the callback has been registered */
	if (data->irq_cb) {
    9fc8:	6853      	ldr	r3, [r2, #4]
    9fca:	b10b      	cbz	r3, 9fd0 <uart_cmsdk_apb_isr+0x12>
		data->irq_cb(dev, data->irq_cb_data);
    9fcc:	6891      	ldr	r1, [r2, #8]
    9fce:	4718      	bx	r3
	}
}
    9fd0:	4770      	bx	lr

00009fd2 <uart_cmsdk_apb_irq_tx_enable>:
	UART_STRUCT(dev)->ctrl |= UART_TX_IN_EN;
    9fd2:	6843      	ldr	r3, [r0, #4]
{
    9fd4:	b510      	push	{r4, lr}
	UART_STRUCT(dev)->ctrl |= UART_TX_IN_EN;
    9fd6:	681a      	ldr	r2, [r3, #0]
    9fd8:	6893      	ldr	r3, [r2, #8]
    9fda:	f043 0304 	orr.w	r3, r3, #4
    9fde:	6093      	str	r3, [r2, #8]
	__asm__ volatile(
    9fe0:	f04f 0320 	mov.w	r3, #32
    9fe4:	f3ef 8411 	mrs	r4, BASEPRI
    9fe8:	f383 8811 	msr	BASEPRI, r3
    9fec:	f3bf 8f6f 	isb	sy
	uart_cmsdk_apb_isr(dev);
    9ff0:	f7ff ffe5 	bl	9fbe <uart_cmsdk_apb_isr>
	__asm__ volatile(
    9ff4:	f384 8811 	msr	BASEPRI, r4
    9ff8:	f3bf 8f6f 	isb	sy
}
    9ffc:	bd10      	pop	{r4, pc}

00009ffe <uart_cmsdk_apb_irq_config_func_0>:
		    0);
	irq_enable(DT_INST_IRQN(0));
}
#else
static void uart_cmsdk_apb_irq_config_func_0(const struct device *dev)
{
    9ffe:	b508      	push	{r3, lr}
	IRQ_CONNECT(DT_INST_IRQ_BY_NAME(0, tx, irq),
    a000:	2200      	movs	r2, #0
    a002:	2103      	movs	r1, #3
    a004:	2001      	movs	r0, #1
    a006:	f7f8 fa8d 	bl	2524 <z_arm_irq_priority_set>
		    DT_INST_IRQ_BY_NAME(0, tx, priority),
		    uart_cmsdk_apb_isr,
		    DEVICE_DT_INST_GET(0),
		    0);
	irq_enable(DT_INST_IRQ_BY_NAME(0, tx, irq));
    a00a:	2001      	movs	r0, #1
    a00c:	f7f8 fa7a 	bl	2504 <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQ_BY_NAME(0, rx, irq),
    a010:	2200      	movs	r2, #0
    a012:	2103      	movs	r1, #3
    a014:	4610      	mov	r0, r2
    a016:	f7f8 fa85 	bl	2524 <z_arm_irq_priority_set>
		    DT_INST_IRQ_BY_NAME(0, rx, priority),
		    uart_cmsdk_apb_isr,
		    DEVICE_DT_INST_GET(0),
		    0);
	irq_enable(DT_INST_IRQ_BY_NAME(0, rx, irq));
}
    a01a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(DT_INST_IRQ_BY_NAME(0, rx, irq));
    a01e:	2000      	movs	r0, #0
    a020:	f7f8 ba70 	b.w	2504 <arch_irq_enable>

0000a024 <uart_cmsdk_apb_irq_config_func_1>:
	irq_enable(DT_INST_IRQN(1));
}
#else
static void uart_cmsdk_apb_irq_config_func_1(const struct device *dev)
{
	IRQ_CONNECT(DT_INST_IRQ_BY_NAME(1, tx, irq),
    a024:	2103      	movs	r1, #3
{
    a026:	b508      	push	{r3, lr}
	IRQ_CONNECT(DT_INST_IRQ_BY_NAME(1, tx, irq),
    a028:	4608      	mov	r0, r1
    a02a:	2200      	movs	r2, #0
    a02c:	f7f8 fa7a 	bl	2524 <z_arm_irq_priority_set>
		    DT_INST_IRQ_BY_NAME(1, tx, priority),
		    uart_cmsdk_apb_isr,
		    DEVICE_DT_INST_GET(1),
		    0);
	irq_enable(DT_INST_IRQ_BY_NAME(1, tx, irq));
    a030:	2003      	movs	r0, #3
    a032:	f7f8 fa67 	bl	2504 <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQ_BY_NAME(1, rx, irq),
    a036:	2002      	movs	r0, #2
    a038:	2200      	movs	r2, #0
    a03a:	2103      	movs	r1, #3
    a03c:	f7f8 fa72 	bl	2524 <z_arm_irq_priority_set>
		    DT_INST_IRQ_BY_NAME(1, rx, priority),
		    uart_cmsdk_apb_isr,
		    DEVICE_DT_INST_GET(1),
		    0);
	irq_enable(DT_INST_IRQ_BY_NAME(1, rx, irq));
}
    a040:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(DT_INST_IRQ_BY_NAME(1, rx, irq));
    a044:	2002      	movs	r0, #2
    a046:	f7f8 ba5d 	b.w	2504 <arch_irq_enable>

0000a04a <uart_cmsdk_apb_irq_config_func_2>:
		    0);
	irq_enable(DT_INST_IRQN(2));
}
#else
static void uart_cmsdk_apb_irq_config_func_2(const struct device *dev)
{
    a04a:	b508      	push	{r3, lr}
	IRQ_CONNECT(DT_INST_IRQ_BY_NAME(2, tx, irq),
    a04c:	2200      	movs	r2, #0
    a04e:	2103      	movs	r1, #3
    a050:	2005      	movs	r0, #5
    a052:	f7f8 fa67 	bl	2524 <z_arm_irq_priority_set>
		    DT_INST_IRQ_BY_NAME(2, tx, priority),
		    uart_cmsdk_apb_isr,
		    DEVICE_DT_INST_GET(2),
		    0);
	irq_enable(DT_INST_IRQ_BY_NAME(2, tx, irq));
    a056:	2005      	movs	r0, #5
    a058:	f7f8 fa54 	bl	2504 <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQ_BY_NAME(2, rx, irq),
    a05c:	2004      	movs	r0, #4
    a05e:	2200      	movs	r2, #0
    a060:	2103      	movs	r1, #3
    a062:	f7f8 fa5f 	bl	2524 <z_arm_irq_priority_set>
		    DT_INST_IRQ_BY_NAME(2, rx, priority),
		    uart_cmsdk_apb_isr,
		    DEVICE_DT_INST_GET(2),
		    0);
	irq_enable(DT_INST_IRQ_BY_NAME(2, rx, irq));
}
    a066:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(DT_INST_IRQ_BY_NAME(2, rx, irq));
    a06a:	2004      	movs	r0, #4
    a06c:	f7f8 ba4a 	b.w	2504 <arch_irq_enable>

0000a070 <uart_cmsdk_apb_irq_config_func_3>:
		    0);
	irq_enable(DT_INST_IRQN(3));
}
#else
static void uart_cmsdk_apb_irq_config_func_3(const struct device *dev)
{
    a070:	b508      	push	{r3, lr}
	IRQ_CONNECT(DT_INST_IRQ_BY_NAME(3, tx, irq),
    a072:	2200      	movs	r2, #0
    a074:	2103      	movs	r1, #3
    a076:	2013      	movs	r0, #19
    a078:	f7f8 fa54 	bl	2524 <z_arm_irq_priority_set>
		    DT_INST_IRQ_BY_NAME(3, tx, priority),
		    uart_cmsdk_apb_isr,
		    DEVICE_DT_INST_GET(3),
		    0);
	irq_enable(DT_INST_IRQ_BY_NAME(3, tx, irq));
    a07c:	2013      	movs	r0, #19
    a07e:	f7f8 fa41 	bl	2504 <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQ_BY_NAME(3, rx, irq),
    a082:	2012      	movs	r0, #18
    a084:	2200      	movs	r2, #0
    a086:	2103      	movs	r1, #3
    a088:	f7f8 fa4c 	bl	2524 <z_arm_irq_priority_set>
		    DT_INST_IRQ_BY_NAME(3, rx, priority),
		    uart_cmsdk_apb_isr,
		    DEVICE_DT_INST_GET(3),
		    0);
	irq_enable(DT_INST_IRQ_BY_NAME(3, rx, irq));
}
    a08c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(DT_INST_IRQ_BY_NAME(3, rx, irq));
    a090:	2012      	movs	r0, #18
    a092:	f7f8 ba37 	b.w	2504 <arch_irq_enable>

0000a096 <uart_cmsdk_apb_irq_config_func_4>:
		    0);
	irq_enable(DT_INST_IRQN(4));
}
#else
static void uart_cmsdk_apb_irq_config_func_4(const struct device *dev)
{
    a096:	b508      	push	{r3, lr}
	IRQ_CONNECT(DT_INST_IRQ_BY_NAME(4, tx, irq),
    a098:	2200      	movs	r2, #0
    a09a:	2103      	movs	r1, #3
    a09c:	2015      	movs	r0, #21
    a09e:	f7f8 fa41 	bl	2524 <z_arm_irq_priority_set>
		    DT_INST_IRQ_BY_NAME(4, tx, priority),
		    uart_cmsdk_apb_isr,
		    DEVICE_DT_INST_GET(4),
		    0);
	irq_enable(DT_INST_IRQ_BY_NAME(4, tx, irq));
    a0a2:	2015      	movs	r0, #21
    a0a4:	f7f8 fa2e 	bl	2504 <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQ_BY_NAME(4, rx, irq),
    a0a8:	2014      	movs	r0, #20
    a0aa:	2200      	movs	r2, #0
    a0ac:	2103      	movs	r1, #3
    a0ae:	f7f8 fa39 	bl	2524 <z_arm_irq_priority_set>
		    DT_INST_IRQ_BY_NAME(4, rx, priority),
		    uart_cmsdk_apb_isr,
		    DEVICE_DT_INST_GET(4),
		    0);
	irq_enable(DT_INST_IRQ_BY_NAME(4, rx, irq));
}
    a0b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(DT_INST_IRQ_BY_NAME(4, rx, irq));
    a0b6:	2014      	movs	r0, #20
    a0b8:	f7f8 ba24 	b.w	2504 <arch_irq_enable>

0000a0bc <uart_cmsdk_apb_irq_err_disable>:
    a0bc:	4770      	bx	lr

0000a0be <z_device_state_init>:
}
    a0be:	4770      	bx	lr

0000a0c0 <z_device_ready>:
	return __device_end - __device_start;
}

bool z_device_ready(const struct device *dev)
{
	return dev->state->initialized && (dev->state->init_res == 0);
    a0c0:	68c3      	ldr	r3, [r0, #12]
    a0c2:	8818      	ldrh	r0, [r3, #0]
    a0c4:	f3c0 0008 	ubfx	r0, r0, #0, #9
}
    a0c8:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    a0cc:	4258      	negs	r0, r3
    a0ce:	4158      	adcs	r0, r3
    a0d0:	4770      	bx	lr

0000a0d2 <arch_system_halt>:
	__asm__ volatile(
    a0d2:	f04f 0220 	mov.w	r2, #32
    a0d6:	f3ef 8311 	mrs	r3, BASEPRI
    a0da:	f382 8811 	msr	BASEPRI, r2
    a0de:	f3bf 8f6f 	isb	sy
	for (;;) {
    a0e2:	e7fe      	b.n	a0e2 <arch_system_halt+0x10>

0000a0e4 <k_heap_init>:
{
    a0e4:	b410      	push	{r4}
    a0e6:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
    a0ea:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    a0ee:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
    a0f0:	f7f7 b830 	b.w	1154 <sys_heap_init>

0000a0f4 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    a0f4:	f990 300e 	ldrsb.w	r3, [r0, #14]
    a0f8:	428b      	cmp	r3, r1
    a0fa:	d001      	beq.n	a100 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    a0fc:	f7fc b8e2 	b.w	62c4 <z_set_prio>
}
    a100:	2000      	movs	r0, #0
    a102:	4770      	bx	lr

0000a104 <z_queue_node_peek>:
{
    a104:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
    a106:	4604      	mov	r4, r0
    a108:	b130      	cbz	r0, a118 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    a10a:	6802      	ldr	r2, [r0, #0]
    a10c:	0793      	lsls	r3, r2, #30
    a10e:	d003      	beq.n	a118 <z_queue_node_peek+0x14>
		ret = anode->data;
    a110:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
    a112:	b109      	cbz	r1, a118 <z_queue_node_peek+0x14>
			k_free(anode);
    a114:	f000 f91f 	bl	a356 <k_free>
}
    a118:	4620      	mov	r0, r4
    a11a:	bd10      	pop	{r4, pc}

0000a11c <z_impl_k_queue_init>:
	list->head = NULL;
    a11c:	2300      	movs	r3, #0
	list->tail = NULL;
    a11e:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
    a122:	6083      	str	r3, [r0, #8]
    a124:	f100 030c 	add.w	r3, r0, #12
    a128:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
    a12c:	f100 0314 	add.w	r3, r0, #20
    a130:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
    a134:	4770      	bx	lr

0000a136 <k_queue_append>:
	(void)queue_insert(queue, NULL, data, false, true);
    a136:	2301      	movs	r3, #1
{
    a138:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
    a13a:	9300      	str	r3, [sp, #0]
    a13c:	2300      	movs	r3, #0
{
    a13e:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
    a140:	4619      	mov	r1, r3
    a142:	f7fb fa41 	bl	55c8 <queue_insert>
}
    a146:	b003      	add	sp, #12
    a148:	f85d fb04 	ldr.w	pc, [sp], #4

0000a14c <k_queue_prepend>:
	(void)queue_insert(queue, NULL, data, false, false);
    a14c:	2300      	movs	r3, #0
{
    a14e:	b507      	push	{r0, r1, r2, lr}
    a150:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
    a152:	9300      	str	r3, [sp, #0]
    a154:	4619      	mov	r1, r3
    a156:	f7fb fa37 	bl	55c8 <queue_insert>
}
    a15a:	b003      	add	sp, #12
    a15c:	f85d fb04 	ldr.w	pc, [sp], #4

0000a160 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    a160:	4603      	mov	r3, r0
    a162:	b920      	cbnz	r0, a16e <z_reschedule_irqlock+0xe>
    a164:	f3ef 8205 	mrs	r2, IPSR
    a168:	b90a      	cbnz	r2, a16e <z_reschedule_irqlock+0xe>
    a16a:	f7f8 b973 	b.w	2454 <arch_swap>
	__asm__ volatile(
    a16e:	f383 8811 	msr	BASEPRI, r3
    a172:	f3bf 8f6f 	isb	sy
}
    a176:	4770      	bx	lr

0000a178 <z_reschedule_unlocked>:
	__asm__ volatile(
    a178:	f04f 0320 	mov.w	r3, #32
    a17c:	f3ef 8011 	mrs	r0, BASEPRI
    a180:	f383 8811 	msr	BASEPRI, r3
    a184:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    a188:	f7ff bfea 	b.w	a160 <z_reschedule_irqlock>

0000a18c <z_priq_dumb_best>:
{
    a18c:	4603      	mov	r3, r0
	return list->head == list;
    a18e:	6800      	ldr	r0, [r0, #0]
}
    a190:	4283      	cmp	r3, r0
    a192:	bf08      	it	eq
    a194:	2000      	moveq	r0, #0
    a196:	4770      	bx	lr

0000a198 <z_unpend_all>:
{
    a198:	b538      	push	{r3, r4, r5, lr}
    a19a:	4605      	mov	r5, r0
	int need_sched = 0;
    a19c:	2000      	movs	r0, #0
    a19e:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a1a0:	42a5      	cmp	r5, r4
    a1a2:	d000      	beq.n	a1a6 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    a1a4:	b904      	cbnz	r4, a1a8 <z_unpend_all+0x10>
}
    a1a6:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
    a1a8:	4620      	mov	r0, r4
    a1aa:	f7fb fc97 	bl	5adc <z_unpend_thread>
		z_ready_thread(thread);
    a1ae:	4620      	mov	r0, r4
    a1b0:	f7fb ff92 	bl	60d8 <z_ready_thread>
		need_sched = 1;
    a1b4:	2001      	movs	r0, #1
    a1b6:	e7f2      	b.n	a19e <z_unpend_all+0x6>

0000a1b8 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
    a1b8:	b15a      	cbz	r2, a1d2 <z_impl_k_sem_init+0x1a>
    a1ba:	428a      	cmp	r2, r1
    a1bc:	d309      	bcc.n	a1d2 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
    a1be:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
    a1c2:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
    a1c6:	e9c0 0000 	strd	r0, r0, [r0]
    a1ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
    a1ce:	2000      	movs	r0, #0
    a1d0:	4770      	bx	lr
		return -EINVAL;
    a1d2:	f06f 0015 	mvn.w	r0, #21
}
    a1d6:	4770      	bx	lr

0000a1d8 <k_is_in_isr>:
    a1d8:	f3ef 8005 	mrs	r0, IPSR
}
    a1dc:	3800      	subs	r0, #0
    a1de:	bf18      	it	ne
    a1e0:	2001      	movne	r0, #1
    a1e2:	4770      	bx	lr

0000a1e4 <k_thread_name_get>:
}
    a1e4:	3062      	adds	r0, #98	; 0x62
    a1e6:	4770      	bx	lr

0000a1e8 <k_work_submit_to_queue>:
{
    a1e8:	b500      	push	{lr}
    a1ea:	f3bf 8f5b 	dmb	ish
    a1ee:	f101 0308 	add.w	r3, r1, #8
    a1f2:	e853 2f00 	ldrex	r2, [r3]
    a1f6:	f042 0c01 	orr.w	ip, r2, #1
    a1fa:	e843 ce00 	strex	lr, ip, [r3]
    a1fe:	f1be 0f00 	cmp.w	lr, #0
    a202:	d1f6      	bne.n	a1f2 <k_work_submit_to_queue+0xa>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    a204:	07d3      	lsls	r3, r2, #31
    a206:	f3bf 8f5b 	dmb	ish
    a20a:	d403      	bmi.n	a214 <k_work_submit_to_queue+0x2c>
}
    a20c:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
    a210:	f7ff bf91 	b.w	a136 <k_queue_append>
}
    a214:	f85d fb04 	ldr.w	pc, [sp], #4

0000a218 <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
    a218:	f1a0 0110 	sub.w	r1, r0, #16
    a21c:	6980      	ldr	r0, [r0, #24]
    a21e:	f7ff bfe3 	b.w	a1e8 <k_work_submit_to_queue>

0000a222 <work_cancel>:
{
    a222:	b570      	push	{r4, r5, r6, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    a224:	f3bf 8f5b 	dmb	ish
    a228:	6883      	ldr	r3, [r0, #8]
    a22a:	4604      	mov	r4, r0
	if (k_work_pending(&work->work)) {
    a22c:	07db      	lsls	r3, r3, #31
    a22e:	f3bf 8f5b 	dmb	ish
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
    a232:	f100 0508 	add.w	r5, r0, #8
    a236:	d533      	bpl.n	a2a0 <work_cancel+0x7e>
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
    a238:	2100      	movs	r1, #0
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
    a23a:	6a82      	ldr	r2, [r0, #40]	; 0x28
	return list->head;
    a23c:	6813      	ldr	r3, [r2, #0]
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
    a23e:	b913      	cbnz	r3, a246 <work_cancel+0x24>
			return -EINVAL;
    a240:	f06f 0015 	mvn.w	r0, #21
}
    a244:	bd70      	pop	{r4, r5, r6, pc}
    a246:	429c      	cmp	r4, r3
    a248:	d125      	bne.n	a296 <work_cancel+0x74>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    a24a:	6823      	ldr	r3, [r4, #0]
	return list->tail;
    a24c:	6856      	ldr	r6, [r2, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    a24e:	f023 0003 	bic.w	r0, r3, #3
Z_GENLIST_REMOVE(sflist, sfnode)
    a252:	b9b1      	cbnz	r1, a282 <work_cancel+0x60>
    a254:	42b4      	cmp	r4, r6
	list->head = node;
    a256:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
    a258:	d100      	bne.n	a25c <work_cancel+0x3a>
	list->tail = node;
    a25a:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    a25c:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    a25e:	f003 0303 	and.w	r3, r3, #3
    a262:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
    a264:	2000      	movs	r0, #0
    a266:	62a0      	str	r0, [r4, #40]	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a268:	f3bf 8f5b 	dmb	ish
    a26c:	e855 3f00 	ldrex	r3, [r5]
    a270:	f023 0301 	bic.w	r3, r3, #1
    a274:	e845 3200 	strex	r2, r3, [r5]
    a278:	2a00      	cmp	r2, #0
    a27a:	d1f7      	bne.n	a26c <work_cancel+0x4a>
    a27c:	f3bf 8f5b 	dmb	ish
    a280:	e7e0      	b.n	a244 <work_cancel+0x22>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    a282:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
    a284:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
    a286:	f003 0303 	and.w	r3, r3, #3
    a28a:	ea43 0300 	orr.w	r3, r3, r0
    a28e:	600b      	str	r3, [r1, #0]
	list->tail = node;
    a290:	bf08      	it	eq
    a292:	6051      	streq	r1, [r2, #4]
}
    a294:	e7e2      	b.n	a25c <work_cancel+0x3a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    a296:	6818      	ldr	r0, [r3, #0]
    a298:	4619      	mov	r1, r3
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
    a29a:	f020 0303 	bic.w	r3, r0, #3
    a29e:	e7ce      	b.n	a23e <work_cancel+0x1c>
		int err = z_abort_timeout(&work->timeout);
    a2a0:	3010      	adds	r0, #16
    a2a2:	f7fc ffd5 	bl	7250 <z_abort_timeout>
		if (err) {
    a2a6:	2800      	cmp	r0, #0
    a2a8:	d0dc      	beq.n	a264 <work_cancel+0x42>
			return -EALREADY;
    a2aa:	f06f 0044 	mvn.w	r0, #68	; 0x44
    a2ae:	e7c9      	b.n	a244 <work_cancel+0x22>

0000a2b0 <z_impl_k_uptime_ticks>:
#endif
}

int64_t z_impl_k_uptime_ticks(void)
{
	return z_tick_get();
    a2b0:	f7fd b9ba 	b.w	7628 <z_tick_get>

0000a2b4 <z_timeout_end_calc>:
 */
uint64_t z_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    a2b4:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    a2b8:	bf08      	it	eq
    a2ba:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    a2be:	b538      	push	{r3, r4, r5, lr}
    a2c0:	4605      	mov	r5, r0
    a2c2:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    a2c4:	d01d      	beq.n	a302 <z_timeout_end_calc+0x4e>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    a2c6:	ea51 0300 	orrs.w	r3, r1, r0
    a2ca:	d103      	bne.n	a2d4 <z_timeout_end_calc+0x20>

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
		return Z_TICK_ABS(dt);
	}
	return z_tick_get() + MAX(1, dt);
}
    a2cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return z_tick_get();
    a2d0:	f7fd b9aa 	b.w	7628 <z_tick_get>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
    a2d4:	f06f 0301 	mvn.w	r3, #1
    a2d8:	1a18      	subs	r0, r3, r0
    a2da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a2de:	eb63 0101 	sbc.w	r1, r3, r1
    a2e2:	2900      	cmp	r1, #0
    a2e4:	da0c      	bge.n	a300 <z_timeout_end_calc+0x4c>
	return z_tick_get() + MAX(1, dt);
    a2e6:	f7fd f99f 	bl	7628 <z_tick_get>
    a2ea:	2d01      	cmp	r5, #1
    a2ec:	4622      	mov	r2, r4
    a2ee:	f174 0400 	sbcs.w	r4, r4, #0
    a2f2:	462b      	mov	r3, r5
    a2f4:	bfbc      	itt	lt
    a2f6:	2301      	movlt	r3, #1
    a2f8:	2200      	movlt	r2, #0
    a2fa:	1818      	adds	r0, r3, r0
    a2fc:	eb41 0102 	adc.w	r1, r1, r2
}
    a300:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
    a302:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    a306:	4601      	mov	r1, r0
    a308:	e7fa      	b.n	a300 <z_timeout_end_calc+0x4c>

0000a30a <k_work_submit_to_queue>:
{
    a30a:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a30c:	f3bf 8f5b 	dmb	ish
    a310:	f101 0308 	add.w	r3, r1, #8
    a314:	e853 2f00 	ldrex	r2, [r3]
    a318:	f042 0c01 	orr.w	ip, r2, #1
    a31c:	e843 ce00 	strex	lr, ip, [r3]
    a320:	f1be 0f00 	cmp.w	lr, #0
    a324:	d1f6      	bne.n	a314 <k_work_submit_to_queue+0xa>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    a326:	07d3      	lsls	r3, r2, #31
    a328:	f3bf 8f5b 	dmb	ish
    a32c:	d403      	bmi.n	a336 <k_work_submit_to_queue+0x2c>
}
    a32e:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
    a332:	f7ff bf00 	b.w	a136 <k_queue_append>
}
    a336:	f85d fb04 	ldr.w	pc, [sp], #4

0000a33a <z_handle_obj_poll_events>:
{
    a33a:	4603      	mov	r3, r0
	return list->head == list;
    a33c:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
    a33e:	4283      	cmp	r3, r0
    a340:	d008      	beq.n	a354 <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
    a342:	e9d0 3200 	ldrd	r3, r2, [r0]
    a346:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    a348:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    a34a:	2300      	movs	r3, #0
	node->prev = NULL;
    a34c:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
    a350:	f7fd b9ba 	b.w	76c8 <signal_poll_event>
}
    a354:	4770      	bx	lr

0000a356 <k_free>:
	if (ptr != NULL) {
    a356:	b120      	cbz	r0, a362 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
    a358:	1f01      	subs	r1, r0, #4
    a35a:	f850 0c04 	ldr.w	r0, [r0, #-4]
    a35e:	f7fa be1f 	b.w	4fa0 <k_heap_free>
}
    a362:	4770      	bx	lr

0000a364 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *p1, void *unused2, void *unused3)
{
    a364:	b508      	push	{r3, lr}
		k_busy_wait(100);
		k_yield();
#else

#ifdef CONFIG_SYS_CLOCK_EXISTS
		int32_t ticks = z_get_next_timeout_expiry();
    a366:	f7fd f80d 	bl	7384 <z_get_next_timeout_expiry>
		 * that the system should not enter a tickless idle for
		 * periods less than that.  This seems... silly, given that it
		 * saves no power and does not improve latency.  But it's an
		 * API we need to honor...
		 */
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    a36a:	2101      	movs	r1, #1
    a36c:	2802      	cmp	r0, #2
    a36e:	bfd8      	it	le
    a370:	4608      	movle	r0, r1
    a372:	f7fd f84f 	bl	7414 <z_set_timeout_expiry>
	arch_cpu_idle();
    a376:	f7f8 f95b 	bl	2630 <arch_cpu_idle>
}
    a37a:	e7f4      	b.n	a366 <idle+0x2>

0000a37c <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
    a37c:	4770      	bx	lr
