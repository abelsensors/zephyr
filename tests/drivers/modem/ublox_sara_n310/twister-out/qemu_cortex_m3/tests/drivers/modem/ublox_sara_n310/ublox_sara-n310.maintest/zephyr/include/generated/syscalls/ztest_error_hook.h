
/* auto-generated by gen_syscalls.py, don't edit */
#ifndef Z_INCLUDE_SYSCALLS_ZTEST_ERROR_HOOK_H
#define Z_INCLUDE_SYSCALLS_ZTEST_ERROR_HOOK_H


#ifndef _ASMLANGUAGE

#include <syscall_list.h>
#include <syscall.h>

#if __GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6)
#pragma GCC diagnostic push
#endif

#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

#ifdef __cplusplus
extern "C" {
#endif

extern void z_impl_ztest_set_fault_valid(bool valid);
static inline void ztest_set_fault_valid(bool valid)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		arch_syscall_invoke1(*(uintptr_t *)&valid, K_SYSCALL_ZTEST_SET_FAULT_VALID);
		return;
	}
#endif
	compiler_barrier();
	z_impl_ztest_set_fault_valid(valid);
}


extern void z_impl_ztest_set_assert_valid(bool valid);
static inline void ztest_set_assert_valid(bool valid)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		arch_syscall_invoke1(*(uintptr_t *)&valid, K_SYSCALL_ZTEST_SET_ASSERT_VALID);
		return;
	}
#endif
	compiler_barrier();
	z_impl_ztest_set_assert_valid(valid);
}


#ifdef __cplusplus
}
#endif

#if __GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6)
#pragma GCC diagnostic pop
#endif

#endif
#endif /* include guard */
